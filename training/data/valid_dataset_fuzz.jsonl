{"test_id": "tafia-calamine/tafia-calamine-5a5804d/tests-gen/fuzz_all.inputs.rs::test_79", "code": "fn count<R: Reader<BufReader<File>>>(path: &str) -> usize {\n    let path = format!(\"{}/{}\", env!(\"CARGO_MANIFEST_DIR\"), path);\n    let mut excel: R = open_workbook(&path).expect(\"cannot open excel file\");\n\n    let sheets = excel.sheet_names().to_owned();\n    let mut count = 0;\n    for s in sheets {\n        count += excel\n            .worksheet_range(&s)\n            .unwrap()\n            .unwrap()\n            .rows()\n            .flat_map(|r| r.iter())\n            .count();\n    }\n    count\n}", "test": "fn test_79() {\n    let data = [143, 10, 44];\n    let file_name = \"fuzz.xlsx\";\n    if let Ok(mut file) = File::create(file_name) {\n        if file.write_all(data).is_err() {\n            return;\n        }\n    }\n    let mut workbook: Xlsx<_> = match open_workbook(file_name) {\n        Ok(excel) => excel,\n        Err(_) => return,\n    };\n    for worksheet in workbook.worksheets() {\n        if let Some(Ok(range)) = workbook.worksheet_range(&worksheet.0) {\n            let _ = range.get_size().0 * range.get_size().1;\n            range.used_cells().count();\n        }\n    }\n    if let Some(Ok(mut vba)) = workbook.vba_project() {\n        let vba = vba.to_mut();\n        for module_name in vba.get_module_names() {\n            if vba.get_module(module_name).is_ok() {\n                for r in vba.get_references() {\n                    r.is_missing();\n                }\n            }\n        }\n    }\n    let sheets = workbook.sheet_names().to_owned();\n    for s in sheets {\n        if let Some(Ok(formula)) = workbook.worksheet_formula(&s) {\n            formula\n                .rows()\n                .flat_map(|r| r.iter().filter(|f| !f.is_empty()))\n                .count();\n        }\n    }\n}"}
{"test_id": "rustls-rustls/rustls-rustls-ae583bd/tests-gen/message.inputs.rs::test_73", "code": "pub fn used(&self) -> usize {\n        self.cursor\n    }", "test": "fn test_73() {\n    let data = [\n        22, 3, 3, 0, 16, 20, 0, 0, 12, 209, 177, 209, 222, 209, 88, 101, 88, 182, 76, 28, 44,\n    ];\n    let mut rdr = Reader::init(data);\n    if let Ok(m) = OpaqueMessage::read(&mut rdr) {\n        let msg = match Message::try_from(m.into_plain_message()) {\n            Ok(msg) => msg,\n            Err(_) => return,\n        };\n        let enc = PlainMessage::from(msg)\n            .into_unencrypted_opaque()\n            .encode();\n        assert_eq!(enc, data[..rdr.used()]);\n    }\n}"}
{"test_id": "rust-bio-rust-bio/rust-bio-rust-bio-319a0d8/tests-gen/banded_aligner.inputs.rs::test_50", "code": "fn validate_alignment_score(al: &Alignment, x: TextSlice, y: TextSlice, scoring: &Scoring<MatchParams>) -> bool {\n    use AlignmentOperation::*;\n    let path = al.path();\n    let mut score = 0;\n    if al.mode==AlignmentMode::Custom {\n        if al.xstart > 0 {\n            score += scoring.xclip_prefix;\n        }\n        if al.ystart > 0 {\n            score += scoring.yclip_prefix;\n        }\n        if al.xend < al.xlen {\n            score += scoring.xclip_suffix;\n        }\n        if al.yend < al.ylen {\n            score += scoring.yclip_suffix;\n        }\n    }\n    let mut last_op = None;\n    for (i, j, op) in path {\n        score += match op {\n            Match | Subst => scoring.match_fn.score(x[i-1], y[j-1]),\n            Del => if last_op==Some(Del) { scoring.gap_extend } else { scoring.gap_open + scoring.gap_extend },\n            Ins => if last_op==Some(Ins) { scoring.gap_extend } else { scoring.gap_open + scoring.gap_extend },\n            _ => 0,\n        };\n        last_op = Some(op);\n    }\n    al.score==score\n}", "test": "fn test_50() {\n    let data = [36, 38, 40];\n    if data.len() < 50 || data.len() > 300 {\n        return;\n    }\n    let (split_byte, data) = data.split_first().unwrap();\n    let (kmer_byte, data) = data.split_first().unwrap();\n    let (window_byte, data) = data.split_first().unwrap();\n    let (match_score_byte, data) = data.split_first().unwrap();\n    let (mismatch_score_byte, data) = data.split_first().unwrap();\n    let (gap_open_byte, data) = data.split_first().unwrap();\n    let (gap_extend_byte, data) = data.split_first().unwrap();\n    let (xclip_prefix_byte, data) = data.split_first().unwrap();\n    let (xclip_suffix_byte, data) = data.split_first().unwrap();\n    let (yclip_prefix_byte, data) = data.split_first().unwrap();\n    let (yclip_suffix_byte, data) = data.split_first().unwrap();\n    let alphabets = b\"ACGT\";\n    let v: Vec<_> = data\n        .iter()\n        .map(|i| alphabets[(*i as usize) % alphabets.len()])\n        .collect();\n    let kmer_len: usize = 5 + (*kmer_byte as usize) % 10;\n    let window_size: usize = 5 + (*window_byte as usize) % 10;\n    let split_pos: usize = min(data.len() - 1, max(*split_byte as usize, 1));\n    let match_score = 1 + (*match_score_byte as i32) % 5;\n    let mismatch_score = -((*mismatch_score_byte as i32) % 10);\n    let gap_open = -((*gap_open_byte as i32) % 20);\n    let gap_extend = -((*gap_extend_byte as i32) % 10);\n    let (x, y) = v.split_at(split_pos);\n    println!(\n        \"x: {}, y: {}, k: {}, w: {}, scoring ({}, {}, {}, {})\",\n        String::from_utf8(x.to_vec()).unwrap(),\n        String::from_utf8(y.to_vec()).unwrap(),\n        kmer_len,\n        window_size,\n        gap_open,\n        gap_extend,\n        match_score,\n        mismatch_score\n    );\n    let base_score = Scoring::from_scores(gap_open, gap_extend, match_score, mismatch_score);\n    {\n        println!(\n            \"Clip scores ({}, {}, {}, {})\",\n            xclip_prefix_byte, xclip_suffix_byte, yclip_prefix_byte, yclip_suffix_byte\n        );\n        let scoring = Scoring {\n            xclip_prefix: -(*xclip_prefix_byte as i32),\n            xclip_suffix: -(*xclip_suffix_byte as i32),\n            yclip_prefix: -(*yclip_prefix_byte as i32),\n            yclip_suffix: -(*yclip_suffix_byte as i32),\n            ..base_score.clone()\n        };\n        let mut b_aligner = banded::Aligner::with_scoring(scoring.clone(), kmer_len, window_size);\n        let b_alignment = b_aligner.custom(x, y);\n        assert!(validate_alignment_score(&b_alignment, x, y, &scoring));\n        let mut f_aligner = pairwise::Aligner::with_scoring(scoring.clone());\n        let f_alignment = f_aligner.custom(x, y);\n        assert!(validate_alignment_score(&f_alignment, x, y, &scoring));\n        let band_all_alignment = b_aligner.custom_with_matches(x, y, &Vec::new());\n        assert_eq!(band_all_alignment.score, f_alignment.score);\n    }\n    {\n        let scoring = Scoring {\n            xclip_prefix: 0,\n            xclip_suffix: 0,\n            yclip_suffix: 0,\n            ..base_score.clone()\n        };\n        let mut b_aligner = banded::Aligner::with_scoring(scoring.clone(), kmer_len, window_size);\n        let b_alignment = b_aligner.custom(x, y);\n        assert_eq!(b_alignment.ystart, 0);\n        assert!(validate_alignment_score(&b_alignment, x, y, &scoring));\n        let mut f_aligner = pairwise::Aligner::with_scoring(scoring.clone());\n        let f_alignment = f_aligner.custom(x, y);\n        assert_eq!(f_alignment.ystart, 0);\n        assert!(validate_alignment_score(&f_alignment, x, y, &scoring));\n        let band_all_alignment = b_aligner.custom_with_matches(x, y, &Vec::new());\n        assert_eq!(band_all_alignment.score, f_alignment.score);\n    }\n    {\n        let scoring = Scoring {\n            xclip_prefix: 0,\n            xclip_suffix: 0,\n            yclip_prefix: 0,\n            ..base_score.clone()\n        };\n        let mut b_aligner = banded::Aligner::with_scoring(scoring.clone(), kmer_len, window_size);\n        let b_alignment = b_aligner.custom(x, y);\n        assert_eq!(b_alignment.yend, b_alignment.ylen);\n        assert!(validate_alignment_score(&b_alignment, x, y, &scoring));\n        let mut f_aligner = pairwise::Aligner::with_scoring(scoring.clone());\n        let f_alignment = f_aligner.custom(x, y);\n        assert_eq!(f_alignment.yend, f_alignment.ylen);\n        assert!(validate_alignment_score(&f_alignment, x, y, &scoring));\n        let band_all_alignment = b_aligner.custom_with_matches(x, y, &Vec::new());\n        assert_eq!(band_all_alignment.score, f_alignment.score);\n    }\n    {\n        let scoring = Scoring {\n            xclip_suffix: 0,\n            yclip_prefix: 0,\n            yclip_suffix: 0,\n            ..base_score.clone()\n        };\n        let mut b_aligner = banded::Aligner::with_scoring(scoring.clone(), kmer_len, window_size);\n        let b_alignment = b_aligner.custom(x, y);\n        assert_eq!(b_alignment.xstart, 0);\n        assert!(validate_alignment_score(&b_alignment, x, y, &scoring));\n        let mut f_aligner = pairwise::Aligner::with_scoring(scoring.clone());\n        let f_alignment = f_aligner.custom(x, y);\n        assert_eq!(f_alignment.xstart, 0);\n        assert!(validate_alignment_score(&f_alignment, x, y, &scoring));\n        let band_all_alignment = b_aligner.custom_with_matches(x, y, &Vec::new());\n        assert_eq!(band_all_alignment.score, f_alignment.score);\n    }\n    {\n        let scoring = Scoring {\n            xclip_prefix: 0,\n            yclip_prefix: 0,\n            yclip_suffix: 0,\n            ..base_score.clone()\n        };\n        let mut b_aligner = banded::Aligner::with_scoring(scoring.clone(), kmer_len, window_size);\n        let b_alignment = b_aligner.custom(x, y);\n        assert_eq!(b_alignment.xend, b_alignment.xlen);\n        assert!(validate_alignment_score(&b_alignment, x, y, &scoring));\n        let mut f_aligner = pairwise::Aligner::with_scoring(scoring.clone());\n        let f_alignment = f_aligner.custom(x, y);\n        assert_eq!(f_alignment.xend, f_alignment.xlen);\n        assert!(validate_alignment_score(&f_alignment, x, y, &scoring));\n        let band_all_alignment = b_aligner.custom_with_matches(x, y, &Vec::new());\n        assert_eq!(band_all_alignment.score, f_alignment.score);\n    }\n    {\n        let mut aligner = banded::Aligner::with_scoring(base_score.clone(), kmer_len, window_size);\n        let alignment = aligner.local(x, y);\n        assert!(alignment.score >= 0);\n        assert!(validate_alignment_score(&alignment, x, y, &base_score));\n        let alignment = aligner.semiglobal(x, y);\n        assert_eq!(alignment.xstart, 0);\n        assert_eq!(alignment.xend, alignment.xlen);\n        assert!(validate_alignment_score(&alignment, x, y, &base_score));\n        let alignment = aligner.global(x, y);\n        assert_eq!(alignment.xstart, 0);\n        assert_eq!(alignment.xend, alignment.xlen);\n        assert_eq!(alignment.ystart, 0);\n        assert_eq!(alignment.yend, alignment.ylen);\n        assert!(validate_alignment_score(&alignment, x, y, &base_score));\n    }\n    {\n        let mut aligner = pairwise::Aligner::with_scoring(base_score.clone());\n        let alignment = aligner.local(x, y);\n        assert!(alignment.score >= 0);\n        assert!(validate_alignment_score(&alignment, x, y, &base_score));\n        let alignment = aligner.semiglobal(x, y);\n        assert_eq!(alignment.xstart, 0);\n        assert_eq!(alignment.xend, alignment.xlen);\n        assert!(validate_alignment_score(&alignment, x, y, &base_score));\n        let alignment = aligner.global(x, y);\n        assert_eq!(alignment.xstart, 0);\n        assert_eq!(alignment.xend, alignment.xlen);\n        assert_eq!(alignment.ystart, 0);\n        assert_eq!(alignment.yend, alignment.ylen);\n        assert!(validate_alignment_score(&alignment, x, y, &base_score));\n    }\n}"}
{"test_id": "gimli-rs-gimli/gimli-rs-gimli-3947879/tests-gen/debug_line.inputs.rs::test_5", "code": "pub fn next_row(&mut self) -> Result<Option<(&LineProgramHeader<R, Offset>, &LineRow)>> {\n        // Perform any reset that was required after copying the previous row.\n        self.row.reset(self.program.header());\n\n        loop {\n            // Split the borrow here, rather than calling `self.header()`.\n            match self.instructions.next_instruction(self.program.header()) {\n                Err(err) => return Err(err),\n                Ok(None) => return Ok(None),\n                Ok(Some(instruction)) => {\n                    if self.row.execute(instruction, &mut self.program) {\n                        if self.row.tombstone {\n                            // Perform any reset that was required for the tombstone row.\n                            // Normally this is done when `next_row` is called again, but for\n                            // tombstones we loop immediately.\n                            self.row.reset(self.program.header());\n                        } else {\n                            return Ok(Some((self.header(), &self.row)));\n                        }\n                    }\n                    // Fall through, parse the next instruction, and see if that\n                    // yields a row.\n                }\n            }\n        }\n    }", "test": "fn test_5() {\n    let debug_line = [10];\n    let debug_line = DebugLine::new(&debug_line, LittleEndian);\n    let offset = DebugLineOffset(0);\n    let address_size = 8;\n    if let Ok(program) = debug_line.program(offset, address_size, None, None) {\n        let mut rows = program.rows();\n        while let Ok(Some(row)) = rows.next_row() {\n            let _ = row;\n        }\n    }\n}"}
{"test_id": "BurntSushi-memchr/BurntSushi-memchr-f3fde7a/tests-gen/memchr2.inputs.rs::test_21", "code": "fn count(self) -> usize {\n        self.it.count(|s, e| {\n            // SAFETY: We rely on our generic iterator to return valid start\n            // and end pointers.\n            unsafe { count_raw(self.needle1, s, e) }\n        })\n    }", "test": "fn test_21() {\n    let data = [148, 146, 10];\n    if data.len() < 2 {\n        return;\n    }\n    memchr2_iter(data[0], data[1], &data[2..]).count();\n}"}
{"test_id": "gimli-rs-gimli/gimli-rs-gimli-3947879/tests-gen/debug_info.inputs.rs::test_91", "code": "pub fn next(&mut self) -> Result<Option<RawLocListEntry<R>>> {\n        if self.input.is_empty() {\n            return Ok(None);\n        }\n\n        match RawLocListEntry::parse(&mut self.input, self.encoding, self.format) {\n            Ok(entry) => {\n                if entry.is_none() {\n                    self.input.empty();\n                }\n                Ok(entry)\n            }\n            Err(e) => {\n                self.input.empty();\n                Err(e)\n            }\n        }\n    }", "test": "fn test_91() {\n    let sections = (\n        [],\n        [\n            5, 0, 255, 255, 255, 255, 255, 255, 255, 255, 255, 39, 255, 255, 255, 255,\n        ],\n    );\n    let (debug_abbrev, debug_info) = sections;\n    let debug_abbrev = DebugAbbrev::new(&debug_abbrev, LittleEndian);\n    let debug_info = DebugInfo::new(&debug_info, LittleEndian);\n    let mut units = debug_info.units();\n    while let Ok(Some(unit)) = units.next() {\n        if let Ok(abbrevs) = unit.abbreviations(&debug_abbrev) {\n            let mut cursor = unit.entries(&abbrevs);\n            while let Ok(Some((_delta, entry))) = cursor.next_dfs() {\n                let mut attrs = entry.attrs();\n                while let Ok(Some(_attr)) = attrs.next() {\n                    continue;\n                }\n            }\n        }\n    }\n}"}
{"test_id": "cloud-hypervisor-cloud-hypervisor/cloud-hypervisor-cloud-hypervisor-db3a5f3/tests-gen/block.inputs.rs::test_85", "code": "pub fn wait_for_epoll_threads(&mut self) {\n        self.common.wait_for_epoll_threads();\n    }", "test": "fn test_85() {\n    let bytes = [138, 3, 17, 58];\n    if bytes.len() < QUEUE_DATA_SIZE || bytes.len() > (QUEUE_DATA_SIZE + MEM_SIZE) {\n        return;\n    }\n    let queue_data = &bytes[..QUEUE_DATA_SIZE];\n    let mem_bytes = &bytes[QUEUE_DATA_SIZE..];\n    let shm = memfd_create(&ffi::CString::new(\"fuzz\").unwrap(), 0).unwrap();\n    let disk_file: File = unsafe { File::from_raw_fd(shm) };\n    let qcow_disk = Box::new(RawFileDiskSync::new(disk_file)) as Box<dyn DiskFile>;\n    let mut block = Block::new(\n        \"tmp\".to_owned(),\n        qcow_disk,\n        PathBuf::from(\"\"),\n        false,\n        false,\n        2,\n        256,\n        None,\n        SeccompAction::Allow,\n        None,\n        EventFd::new(EFD_NONBLOCK).unwrap(),\n        None,\n    )\n    .unwrap();\n    let q = setup_virt_queue(queue_data.try_into().unwrap());\n    let mem = GuestMemoryMmap::from_ranges(&[(GuestAddress(0), MEM_SIZE)]).unwrap();\n    if mem.write_slice(mem_bytes, GuestAddress(0 as u64)).is_err() {\n        return;\n    }\n    let guest_memory = GuestMemoryAtomic::new(mem);\n    let evt = EventFd::new(0).unwrap();\n    let queue_evt = unsafe { EventFd::from_raw_fd(libc::dup(evt.as_raw_fd())) };\n    queue_evt.write(1).unwrap();\n    block\n        .activate(\n            guest_memory,\n            Arc::new(NoopVirtioInterrupt {}),\n            vec![(0, q, evt)],\n        )\n        .ok();\n    block.wait_for_epoll_threads();\n}"}
{"test_id": "gimli-rs-gimli/gimli-rs-gimli-3947879/tests-gen/eh_frame_hdr.inputs.rs::test_44", "code": "fn parse<R: Reader>(input: &mut R) -> Result<Abbreviations> {\n        let mut abbrevs = Abbreviations::empty();\n\n        while let Some(abbrev) = Abbreviation::parse(input)? {\n            if abbrevs.insert(abbrev).is_err() {\n                return Err(Error::DuplicateAbbreviationCode);\n            }\n        }\n\n        Ok(abbrevs)\n    }", "test": "fn test_44() {\n    let eh_frame_hdr = [42, 10];\n    let eh_frame_hdr = EhFrameHdr::new(eh_frame_hdr, LittleEndian);\n    let bases = BaseAddresses::default()\n        .set_eh_frame(0)\n        .set_eh_frame_hdr(0)\n        .set_text(0)\n        .set_got(0);\n    let address_size = 8;\n    let _ = eh_frame_hdr.parse(&bases, address_size);\n}"}
{"test_id": "dtolnay-syn/dtolnay-syn-b1a038c/tests-gen/create_token_buffer.inputs.rs::test_1", "code": "fn parse_str(self, s: &str) -> Result<Self::Output> {\n        self.parse2(proc_macro2::TokenStream::from_str(s)?)\n    }", "test": "fn test_1() {\n    let data = [1];\n    if data.len() < 300 {\n        if let Ok(string) = str::from_utf8(data) {\n            let _ = immediate_fail.parse_str(string);\n        }\n    }\n}"}
{"test_id": "rustls-rustls/rustls-rustls-ae583bd/tests-gen/message.inputs.rs::test_10", "code": "pub fn used(&self) -> usize {\n        self.cursor\n    }", "test": "fn test_10() {\n    let data = [22, 3, 3, 0, 4, 14, 0, 0, 0];\n    let mut rdr = Reader::init(data);\n    if let Ok(m) = OpaqueMessage::read(&mut rdr) {\n        let msg = match Message::try_from(m.into_plain_message()) {\n            Ok(msg) => msg,\n            Err(_) => return,\n        };\n        let enc = PlainMessage::from(msg)\n            .into_unencrypted_opaque()\n            .encode();\n        assert_eq!(enc, data[..rdr.used()]);\n    }\n}"}
{"test_id": "cloud-hypervisor-cloud-hypervisor/cloud-hypervisor-cloud-hypervisor-db3a5f3/tests-gen/cmos.inputs.rs::test_5", "code": "fn write(&mut self, _base: u64, offset: u64, data: &[u8]) -> Option<Arc<Barrier>> {\n        if data.len() != 1 {\n            warn!(\"Invalid write size on CMOS device: {}\", data.len());\n            return None;\n        }\n\n        match offset {\n            INDEX_OFFSET => self.index = data[0],\n            DATA_OFFSET => {\n                if self.index == 0x8f && data[0] == 0 {\n                    info!(\"CMOS reset\");\n                    self.reset_evt.write(1).unwrap();\n                    if let Some(vcpus_kill_signalled) = self.vcpus_kill_signalled.take() {\n                        // Spin until we are sure the reset_evt has been handled and that when\n                        // we return from the KVM_RUN we will exit rather than re-enter the guest.\n                        while !vcpus_kill_signalled.load(Ordering::SeqCst) {\n                            // This is more effective than thread::yield_now() at\n                            // avoiding a priority inversion with the VMM thread\n                            thread::sleep(std::time::Duration::from_millis(1));\n                        }\n                    }\n                } else {\n                    self.data[(self.index & INDEX_MASK) as usize] = data[0]\n                }\n            }\n            o => warn!(\"bad write offset on CMOS device: {}\", o),\n        };\n        None\n    }", "test": "fn test_5() {\n    let bytes = [10, 2];\n    if bytes.len() < 16 {\n        return;\n    }\n    let mut below_4g = [0u8; 8];\n    let mut above_4g = [0u8; 8];\n    below_4g.copy_from_slice(&bytes[0..8]);\n    above_4g.copy_from_slice(&bytes[8..16]);\n    let mut cmos = Cmos::new(\n        u64::from_le_bytes(below_4g),\n        u64::from_le_bytes(above_4g),\n        EventFd::new(EFD_NONBLOCK).unwrap(),\n        None,\n    );\n    let mut i = 16;\n    while i < bytes.len() {\n        let read = bytes.get(i).unwrap_or(&0) % 2 == 0;\n        i += 1;\n        if read {\n            let offset = (bytes.get(i).unwrap_or(&0) % 2) as u64;\n            i += 1;\n            let mut out_bytes = vec![0];\n            cmos.read(0, offset, &mut out_bytes);\n        } else {\n            let offset = (bytes.get(i).unwrap_or(&0) % 2) as u64;\n            i += 1;\n            let data = vec![*bytes.get(i).unwrap_or(&0)];\n            i += 1;\n            cmos.write(0, offset, &data);\n        }\n    }\n}"}
{"test_id": "zip-rs-zip/zip-rs-zip-ed187d6/tests-gen/fuzz_read.inputs.rs::test_30", "code": "fn decompress_all (data : & [u8]) -> Result < () , Box < dyn std :: error :: Error > > { let reader = std :: io :: Cursor :: new (data) ; let mut zip = zip :: ZipArchive :: new (reader) ? ; for i in 0 .. zip . len () { let mut file = zip . by_index (i) ? ; if file . size () < 1 << 20 { let _ = std :: io :: copy (& mut file , & mut std :: io :: sink ()) ; } } Ok (()) }", "test": "fn test_30() {\n    let data = [10, 10];\n    let _ = decompress_all(data);\n}"}
{"test_id": "BurntSushi-memchr/BurntSushi-memchr-f3fde7a/tests-gen/memrchr.inputs.rs::test_20", "code": "fn count(self) -> usize {\n        self.it.count(|s, e| {\n            // SAFETY: We rely on our generic iterator to return valid start\n            // and end pointers.\n            unsafe { count_raw(self.needle1, s, e) }\n        })\n    }", "test": "fn test_20() {\n    let data = [39, 39];\n    if data.is_empty() {\n        return;\n    }\n    memchr_iter(data[0], &data[1..]).rev().count();\n}"}
{"test_id": "marshallpierce-rust-base64/marshallpierce-rust-base64-4ef33cc/tests-gen/roundtrip_no_pad.inputs.rs::test_61", "code": "fn decode<T: AsRef<[u8]>>(&self, input: T) -> Result<Vec<u8>, DecodeError> {\n        fn inner<E>(engine: &E, input_bytes: &[u8]) -> Result<Vec<u8>, DecodeError>\n        where\n            E: Engine + ?Sized,\n        {\n            let estimate = engine.internal_decoded_len_estimate(input_bytes.len());\n            let mut buffer = vec![0; estimate.decoded_len_estimate()];\n\n            let bytes_written = engine\n                .internal_decode(input_bytes, &mut buffer, estimate)?\n                .decoded_len;\n\n            buffer.truncate(bytes_written);\n\n            Ok(buffer)\n        }\n\n        inner(self, input.as_ref())\n    }", "test": "fn test_61() {\n    let data = [45, 10, 35, 10];\n    let config = general_purpose::GeneralPurposeConfig::new()\n        .with_encode_padding(false)\n        .with_decode_padding_mode(engine::DecodePaddingMode::RequireNone);\n    let engine = general_purpose::GeneralPurpose::new(&base64::alphabet::STANDARD, config);\n    let encoded = engine.encode(data);\n    let decoded = engine.decode(&encoded).unwrap();\n    assert_eq!(data, decoded.as_slice());\n}"}
{"test_id": "cloud-hypervisor-cloud-hypervisor/cloud-hypervisor-cloud-hypervisor-db3a5f3/tests-gen/mem.inputs.rs::test_26", "code": "pub fn wait_for_epoll_threads(&mut self) {\n        self.common.wait_for_epoll_threads();\n    }", "test": "fn test_26() {\n    let bytes = [138, 10];\n    if bytes.len() < VIRTIO_MEM_DATA_SIZE + QUEUE_DATA_SIZE + QUEUE_BYTES_SIZE\n        || bytes.len() > (VIRTIO_MEM_DATA_SIZE + QUEUE_DATA_SIZE + QUEUE_BYTES_SIZE + MEM_SIZE)\n    {\n        return;\n    }\n    let virtio_mem_data = &bytes[..VIRTIO_MEM_DATA_SIZE];\n    let queue_data = &bytes[VIRTIO_MEM_DATA_SIZE..VIRTIO_MEM_DATA_SIZE + QUEUE_DATA_SIZE];\n    let queue_bytes = &bytes[VIRTIO_MEM_DATA_SIZE + QUEUE_DATA_SIZE\n        ..VIRTIO_MEM_DATA_SIZE + QUEUE_DATA_SIZE + QUEUE_BYTES_SIZE];\n    let mem_bytes = &bytes[VIRTIO_MEM_DATA_SIZE + QUEUE_DATA_SIZE + QUEUE_BYTES_SIZE..];\n    let (mut virtio_mem, virtio_mem_region) =\n        create_dummy_virtio_mem(virtio_mem_data.try_into().unwrap());\n    let q = setup_virt_queue(queue_data.try_into().unwrap());\n    let mem =\n        GuestMemoryMmap::from_ranges(&[(GuestAddress(DESC_TABLE_ADDR), QUEUE_BYTES_SIZE)]).unwrap();\n    if mem\n        .write_slice(queue_bytes, GuestAddress(DESC_TABLE_ADDR))\n        .is_err()\n    {\n        return;\n    }\n    let mem = mem.insert_region(virtio_mem_region).unwrap();\n    if mem\n        .write_slice(mem_bytes, GuestAddress(VIRTIO_MEM_REGION_ADDRESS))\n        .is_err()\n    {\n        return;\n    }\n    let guest_memory = GuestMemoryAtomic::new(mem);\n    let evt = EventFd::new(0).unwrap();\n    let queue_evt = unsafe { EventFd::from_raw_fd(libc::dup(evt.as_raw_fd())) };\n    queue_evt.write(1).unwrap();\n    virtio_mem\n        .activate(\n            guest_memory,\n            Arc::new(NoopVirtioInterrupt {}),\n            vec![(0, q, evt)],\n        )\n        .ok();\n    virtio_mem.wait_for_epoll_threads();\n}"}
{"test_id": "rustls-rustls/rustls-rustls-ae583bd/tests-gen/server.inputs.rs::test_24", "code": "pub fn process_new_packets(&mut self) -> Result<IoState, Error> {\n        match self {\n            Self::Client(conn) => conn.process_new_packets(),\n            Self::Server(conn) => conn.process_new_packets(),\n        }\n    }", "test": "fn test_24() {\n    let data = [\n        22, 3, 1, 0, 196, 1, 0, 0, 183, 3, 3, 220, 22, 51, 168, 177, 163, 9, 68, 53, 77, 77, 35,\n        28, 3, 125, 157, 176, 186, 53, 22, 211, 5, 127, 250, 92, 65, 31, 143, 93, 97, 146, 138, 0,\n        0, 20, 19, 3, 19, 2, 19, 1, 204, 169, 204, 168, 192, 44, 192, 43, 3, 1, 0, 53, 219, 184,\n        117, 77, 19, 58, 216, 56, 206, 189, 136, 130, 200, 75, 0, 154, 207, 11, 90, 130, 199, 181,\n        127, 192, 247, 83, 193, 104, 19, 154, 127, 6, 156, 172, 21, 121, 252, 87, 250, 196, 88, 45,\n        208, 213, 175, 154, 154, 143, 29, 49, 69, 68, 88,\n    ];\n    let config = Arc::new(\n        ServerConfig::builder()\n            .with_safe_defaults()\n            .with_no_client_auth()\n            .with_cert_resolver(Arc::new(Fail)),\n    );\n    let mut server = ServerConnection::new(config).unwrap();\n    let _ = server.read_tls(&mut io::Cursor::new(data));\n    let _ = server.process_new_packets();\n}"}
{"test_id": "cloud-hypervisor-cloud-hypervisor/cloud-hypervisor-cloud-hypervisor-db3a5f3/tests-gen/iommu.inputs.rs::test_93", "code": "pub fn wait_for_epoll_threads(&mut self) {\n        self.common.wait_for_epoll_threads();\n    }", "test": "fn test_93() {\n    let bytes = [10];\n    if bytes.len() < (QUEUE_DATA_SIZE + QUEUE_BYTES_SIZE)\n        || bytes.len() > (QUEUE_DATA_SIZE + QUEUE_BYTES_SIZE + MEM_SIZE)\n    {\n        return;\n    }\n    let (mut iommu, _) = virtio_devices::Iommu::new(\n        \"fuzzer_iommu\".to_owned(),\n        SeccompAction::Allow,\n        EventFd::new(EFD_NONBLOCK).unwrap(),\n        ((MEM_SIZE - IOVA_SPACE_SIZE) as u64, (MEM_SIZE - 1) as u64),\n        None,\n    )\n    .unwrap();\n    let queue_data = &bytes[..QUEUE_DATA_SIZE];\n    let queue_bytes = &bytes[QUEUE_DATA_SIZE..QUEUE_DATA_SIZE + QUEUE_BYTES_SIZE];\n    let mem_bytes = &bytes[QUEUE_DATA_SIZE + QUEUE_BYTES_SIZE..];\n    let request_queue = setup_virt_queue(queue_data.try_into().unwrap());\n    let _event_queue = setup_virt_queue(queue_data.try_into().unwrap());\n    let mem = GuestMemoryMmap::from_ranges(&[\n        (GuestAddress(0), MEM_SIZE),\n        (GuestAddress(DESC_TABLE_ADDR), QUEUE_BYTES_SIZE),\n    ])\n    .unwrap();\n    if mem\n        .write_slice(queue_bytes, GuestAddress(DESC_TABLE_ADDR))\n        .is_err()\n    {\n        return;\n    }\n    if mem.write_slice(mem_bytes, GuestAddress(0 as u64)).is_err() {\n        return;\n    }\n    let guest_memory = GuestMemoryAtomic::new(mem);\n    let request_evt = EventFd::new(0).unwrap();\n    let request_queue_evt = unsafe { EventFd::from_raw_fd(libc::dup(request_evt.as_raw_fd())) };\n    let _event_evt = EventFd::new(0).unwrap();\n    request_queue_evt.write(1).unwrap();\n    iommu\n        .activate(\n            guest_memory,\n            Arc::new(NoopVirtioInterrupt {}),\n            vec![\n                (0, request_queue, request_evt),\n                (0, _event_queue, _event_evt),\n            ],\n        )\n        .ok();\n    iommu.wait_for_epoll_threads();\n}"}
{"test_id": "gfx-rs-naga/gfx-rs-naga-92e41b4/tests-gen/wgsl_parser.inputs.rs::test_9", "code": "pub fn parse(mut self) -> Result<crate::Module, Error> {\n        let mut module = {\n            if self.next()? != spirv::MAGIC_NUMBER {\n                return Err(Error::InvalidHeader);\n            }\n            let version_raw = self.next()?;\n            let generator = self.next()?;\n            let _bound = self.next()?;\n            let _schema = self.next()?;\n            log::info!(\"Generated by {} version {:x}\", generator, version_raw);\n            crate::Module::default()\n        };\n\n        self.layouter.clear();\n        self.dummy_functions = Arena::new();\n        self.lookup_function.clear();\n        self.function_call_graph.clear();\n\n        loop {\n            use spirv::Op;\n\n            let inst = match self.next_inst() {\n                Ok(inst) => inst,\n                Err(Error::IncompleteData) => break,\n                Err(other) => return Err(other),\n            };\n            log::debug!(\"\\t{:?} [{}]\", inst.op, inst.wc);\n\n            match inst.op {\n                Op::Capability => self.parse_capability(inst),\n                Op::Extension => self.parse_extension(inst),\n                Op::ExtInstImport => self.parse_ext_inst_import(inst),\n                Op::MemoryModel => self.parse_memory_model(inst),\n                Op::EntryPoint => self.parse_entry_point(inst),\n                Op::ExecutionMode => self.parse_execution_mode(inst),\n                Op::String => self.parse_string(inst),\n                Op::Source => self.parse_source(inst),\n                Op::SourceExtension => self.parse_source_extension(inst),\n                Op::Name => self.parse_name(inst),\n                Op::MemberName => self.parse_member_name(inst),\n                Op::ModuleProcessed => self.parse_module_processed(inst),\n                Op::Decorate => self.parse_decorate(inst),\n                Op::MemberDecorate => self.parse_member_decorate(inst),\n                Op::TypeVoid => self.parse_type_void(inst),\n                Op::TypeBool => self.parse_type_bool(inst, &mut module),\n                Op::TypeInt => self.parse_type_int(inst, &mut module),\n                Op::TypeFloat => self.parse_type_float(inst, &mut module),\n                Op::TypeVector => self.parse_type_vector(inst, &mut module),\n                Op::TypeMatrix => self.parse_type_matrix(inst, &mut module),\n                Op::TypeFunction => self.parse_type_function(inst),\n                Op::TypePointer => self.parse_type_pointer(inst, &mut module),\n                Op::TypeArray => self.parse_type_array(inst, &mut module),\n                Op::TypeRuntimeArray => self.parse_type_runtime_array(inst, &mut module),\n                Op::TypeStruct => self.parse_type_struct(inst, &mut module),\n                Op::TypeImage => self.parse_type_image(inst, &mut module),\n                Op::TypeSampledImage => self.parse_type_sampled_image(inst),\n                Op::TypeSampler => self.parse_type_sampler(inst, &mut module),\n                Op::Constant | Op::SpecConstant => self.parse_constant(inst, &mut module),\n                Op::ConstantComposite => self.parse_composite_constant(inst, &mut module),\n                Op::ConstantNull | Op::Undef => self.parse_null_constant(inst, &mut module),\n                Op::ConstantTrue => self.parse_bool_constant(inst, true, &mut module),\n                Op::ConstantFalse => self.parse_bool_constant(inst, false, &mut module),\n                Op::Variable => self.parse_global_variable(inst, &mut module),\n                Op::Function => {\n                    self.switch(ModuleState::Function, inst.op)?;\n                    inst.expect(5)?;\n                    self.parse_function(&mut module)\n                }\n                _ => Err(Error::UnsupportedInstruction(self.state, inst.op)), //TODO\n            }?;\n        }\n\n        log::info!(\"Patching...\");\n        {\n            let mut nodes = petgraph::algo::toposort(&self.function_call_graph, None)\n                .map_err(|cycle| Error::FunctionCallCycle(cycle.node_id()))?;\n            nodes.reverse(); // we need dominated first\n            let mut functions = mem::take(&mut module.functions);\n            for fun_id in nodes {\n                if fun_id > !(functions.len() as u32) {\n                    // skip all the fake IDs registered for the entry points\n                    continue;\n                }\n                let lookup = self.lookup_function.get_mut(&fun_id).unwrap();\n                // take out the function from the old array\n                let fun = mem::take(&mut functions[lookup.handle]);\n                // add it to the newly formed arena, and adjust the lookup\n                lookup.handle = module\n                    .functions\n                    .append(fun, functions.get_span(lookup.handle));\n            }\n        }\n        // patch all the functions\n        for (handle, fun) in module.functions.iter_mut() {\n            self.patch_function(Some(handle), fun)?;\n        }\n        for ep in module.entry_points.iter_mut() {\n            self.patch_function(None, &mut ep.function)?;\n        }\n\n        // Check all the images and samplers to have consistent comparison property.\n        for (handle, flags) in self.handle_sampling.drain() {\n            if !image::patch_comparison_type(\n                flags,\n                module.global_variables.get_mut(handle),\n                &mut module.types,\n            ) {\n                return Err(Error::InconsistentComparisonSampling(handle));\n            }\n        }\n\n        if !self.future_decor.is_empty() {\n            log::warn!(\"Unused item decorations: {:?}\", self.future_decor);\n            self.future_decor.clear();\n        }\n        if !self.future_member_decor.is_empty() {\n            log::warn!(\"Unused member decorations: {:?}\", self.future_member_decor);\n            self.future_member_decor.clear();\n        }\n\n        Ok(module)\n    }", "test": "fn test_9() {\n    let data = \"\\u{1}p\";\n    let _result = Frontend::new().parse(&data);\n}"}
{"test_id": "image-rs-image-png/image-rs-image-png-e113d76/tests-gen/buf_independent.inputs.rs::test_62", "code": "fn new (inner : R , cap : usize) -> Self { SmalBuf { inner , cap } }", "test": "fn test_62() {\n    let data = [0, 0, 16, 10];\n    let limits = png::Limits { bytes: 1 << 16 };\n    let reference = png::Decoder::new_with_limits(data, limits);\n    let smal = png::Decoder::new_with_limits(SmalBuf::new(data, 1), limits);\n    let _ = png_compare(reference, smal);\n}"}
{"test_id": "cloud-hypervisor-cloud-hypervisor/cloud-hypervisor-cloud-hypervisor-db3a5f3/tests-gen/rng.inputs.rs::test_5", "code": "pub fn wait_for_epoll_threads(&mut self) {\n        self.common.wait_for_epoll_threads();\n    }", "test": "fn test_5() {\n    let bytes = [10];\n    if bytes.len() < (QUEUE_DATA_SIZE + QUEUE_BYTES_SIZE)\n        || bytes.len() > (QUEUE_DATA_SIZE + QUEUE_BYTES_SIZE + MEM_SIZE)\n    {\n        return;\n    }\n    let mut rng = virtio_devices::Rng::new(\n        \"fuzzer_rng\".to_owned(),\n        \"/dev/urandom\",\n        false,\n        SeccompAction::Allow,\n        EventFd::new(EFD_NONBLOCK).unwrap(),\n        None,\n    )\n    .unwrap();\n    let queue_data = &bytes[..QUEUE_DATA_SIZE];\n    let queue_bytes = &bytes[QUEUE_DATA_SIZE..QUEUE_DATA_SIZE + QUEUE_BYTES_SIZE];\n    let mem_bytes = &bytes[QUEUE_DATA_SIZE + QUEUE_BYTES_SIZE..];\n    let q = setup_virt_queue(queue_data.try_into().unwrap());\n    let mem = GuestMemoryMmap::from_ranges(&[\n        (GuestAddress(0), MEM_SIZE),\n        (GuestAddress(DESC_TABLE_ADDR), QUEUE_BYTES_SIZE),\n    ])\n    .unwrap();\n    if mem\n        .write_slice(queue_bytes, GuestAddress(DESC_TABLE_ADDR))\n        .is_err()\n    {\n        return;\n    }\n    if mem.write_slice(mem_bytes, GuestAddress(0 as u64)).is_err() {\n        return;\n    }\n    let guest_memory = GuestMemoryAtomic::new(mem);\n    let evt = EventFd::new(0).unwrap();\n    let queue_evt = unsafe { EventFd::from_raw_fd(libc::dup(evt.as_raw_fd())) };\n    queue_evt.write(1).unwrap();\n    rng.activate(\n        guest_memory,\n        Arc::new(NoopVirtioInterrupt {}),\n        vec![(0, q, evt)],\n    )\n    .ok();\n    rng.wait_for_epoll_threads();\n}"}
{"test_id": "rustls-rustls/rustls-rustls-ae583bd/tests-gen/server.inputs.rs::test_84", "code": "pub fn process_new_packets(&mut self) -> Result<IoState, Error> {\n        match self {\n            Self::Client(conn) => conn.process_new_packets(),\n            Self::Server(conn) => conn.process_new_packets(),\n        }\n    }", "test": "fn test_84() {\n    let data = [\n        22, 3, 1, 0, 196, 1, 0, 0, 183, 3, 3, 220, 22, 52, 168, 177, 163, 9, 68, 53, 77, 77, 35,\n        28, 3, 125, 157, 176, 186, 53, 22, 211, 5, 127, 250, 92, 65, 31, 143, 93, 97, 146, 138, 0,\n        0, 20, 19, 3, 19, 2, 19, 1, 204, 169, 204, 168, 192, 44, 192, 43, 3, 1, 0, 53, 219, 184,\n        117, 77, 19, 58, 216, 56, 206, 189, 136, 130, 200, 75, 0, 154, 207, 11, 90, 130, 199, 181,\n        127, 192, 247, 83, 193, 104, 19, 154, 127, 6, 156, 172, 21, 121, 252, 87, 250, 196, 88, 45,\n        208, 213, 175, 154, 154, 143, 29, 49, 69, 68, 88,\n    ];\n    let config = Arc::new(\n        ServerConfig::builder()\n            .with_safe_defaults()\n            .with_no_client_auth()\n            .with_cert_resolver(Arc::new(Fail)),\n    );\n    let mut server = ServerConnection::new(config).unwrap();\n    let _ = server.read_tls(&mut io::Cursor::new(data));\n    let _ = server.process_new_packets();\n}"}
{"test_id": "gimli-rs-gimli/gimli-rs-gimli-3947879/tests-gen/eh_frame.inputs.rs::test_57", "code": "pub fn next_row(&mut self) -> Result<Option<(&LineProgramHeader<R, Offset>, &LineRow)>> {\n        // Perform any reset that was required after copying the previous row.\n        self.row.reset(self.program.header());\n\n        loop {\n            // Split the borrow here, rather than calling `self.header()`.\n            match self.instructions.next_instruction(self.program.header()) {\n                Err(err) => return Err(err),\n                Ok(None) => return Ok(None),\n                Ok(Some(instruction)) => {\n                    if self.row.execute(instruction, &mut self.program) {\n                        if self.row.tombstone {\n                            // Perform any reset that was required for the tombstone row.\n                            // Normally this is done when `next_row` is called again, but for\n                            // tombstones we loop immediately.\n                            self.row.reset(self.program.header());\n                        } else {\n                            return Ok(Some((self.header(), &self.row)));\n                        }\n                    }\n                    // Fall through, parse the next instruction, and see if that\n                    // yields a row.\n                }\n            }\n        }\n    }", "test": "fn test_57() {\n    let eh_frame = [43, 41, 206, 206];\n    let eh_frame = EhFrame::new(&eh_frame, LittleEndian);\n    let mut ctx = Box::new(UnwindContext::new());\n    let bases = BaseAddresses::default()\n        .set_eh_frame(0)\n        .set_eh_frame_hdr(0)\n        .set_text(0)\n        .set_got(0);\n    let mut entries = eh_frame.entries(&bases);\n    while let Ok(Some(entry)) = entries.next() {\n        match entry {\n            CieOrFde::Cie(_) => continue,\n            CieOrFde::Fde(partial) => {\n                if let Ok(fde) = partial.parse(EhFrame::cie_from_offset) {\n                    if let Ok(mut table) = fde.rows(&eh_frame, &bases, &mut ctx) {\n                        while let Ok(Some(_row)) = table.next_row() {\n                            continue;\n                        }\n                    }\n                }\n            }\n        };\n    }\n}"}
{"test_id": "BurntSushi-memchr/BurntSushi-memchr-f3fde7a/tests-gen/memchr.inputs.rs::test_59", "code": "fn count(self) -> usize {\n        self.it.count(|s, e| {\n            // SAFETY: We rely on our generic iterator to return valid start\n            // and end pointers.\n            unsafe { count_raw(self.needle1, s, e) }\n        })\n    }", "test": "fn test_59() {\n    let data = [48, 235, 220, 246];\n    if data.is_empty() {\n        return;\n    }\n    memchr_iter(data[0], &data[1..]).count();\n}"}
{"test_id": "zip-rs-zip/zip-rs-zip-ed187d6/tests-gen/fuzz_read.inputs.rs::test_54", "code": "fn decompress_all (data : & [u8]) -> Result < () , Box < dyn std :: error :: Error > > { let reader = std :: io :: Cursor :: new (data) ; let mut zip = zip :: ZipArchive :: new (reader) ? ; for i in 0 .. zip . len () { let mut file = zip . by_index (i) ? ; if file . size () < 1 << 20 { let _ = std :: io :: copy (& mut file , & mut std :: io :: sink ()) ; } } Ok (()) }", "test": "fn test_54() {\n    let data = [136, 50];\n    let _ = decompress_all(data);\n}"}
{"test_id": "gimli-rs-gimli/gimli-rs-gimli-3947879/tests-gen/eh_frame.inputs.rs::test_93", "code": "pub fn next_row(&mut self) -> Result<Option<(&LineProgramHeader<R, Offset>, &LineRow)>> {\n        // Perform any reset that was required after copying the previous row.\n        self.row.reset(self.program.header());\n\n        loop {\n            // Split the borrow here, rather than calling `self.header()`.\n            match self.instructions.next_instruction(self.program.header()) {\n                Err(err) => return Err(err),\n                Ok(None) => return Ok(None),\n                Ok(Some(instruction)) => {\n                    if self.row.execute(instruction, &mut self.program) {\n                        if self.row.tombstone {\n                            // Perform any reset that was required for the tombstone row.\n                            // Normally this is done when `next_row` is called again, but for\n                            // tombstones we loop immediately.\n                            self.row.reset(self.program.header());\n                        } else {\n                            return Ok(Some((self.header(), &self.row)));\n                        }\n                    }\n                    // Fall through, parse the next instruction, and see if that\n                    // yields a row.\n                }\n            }\n        }\n    }", "test": "fn test_93() {\n    let eh_frame = [206, 57, 96, 206];\n    let eh_frame = EhFrame::new(&eh_frame, LittleEndian);\n    let mut ctx = Box::new(UnwindContext::new());\n    let bases = BaseAddresses::default()\n        .set_eh_frame(0)\n        .set_eh_frame_hdr(0)\n        .set_text(0)\n        .set_got(0);\n    let mut entries = eh_frame.entries(&bases);\n    while let Ok(Some(entry)) = entries.next() {\n        match entry {\n            CieOrFde::Cie(_) => continue,\n            CieOrFde::Fde(partial) => {\n                if let Ok(fde) = partial.parse(EhFrame::cie_from_offset) {\n                    if let Ok(mut table) = fde.rows(&eh_frame, &bases, &mut ctx) {\n                        while let Ok(Some(_row)) = table.next_row() {\n                            continue;\n                        }\n                    }\n                }\n            }\n        };\n    }\n}"}
{"test_id": "image-rs-image-png/image-rs-image-png-e113d76/tests-gen/decode.inputs.rs::test_87", "code": "fn png_decode (data : & [u8]) -> Result < (Option < png :: OutputInfo > , Vec < u8 >) , () > { let limits = png :: Limits { bytes : 1 << 16 } ; let decoder = png :: Decoder :: new_with_limits (data , limits) ; let mut reader = decoder . read_info () . map_err (| _ | ()) ? ; if reader . info () . raw_bytes () > 5_000_000 { return Err (()) ; } let mut img_data = vec ! [0u8 ; reader . info () . raw_bytes ()] ; let mut last_info = None ; while let Ok (info) = reader . next_frame (& mut img_data) { last_info = Some (info) ; } Ok ((last_info , img_data)) }", "test": "fn test_87() {\n    let data = [\n        137, 80, 78, 71, 13, 10, 26, 10, 0, 0, 0, 13, 73, 72, 68, 82, 0, 0, 0, 32, 0, 0, 64, 0, 16,\n        0, 0, 0, 0, 11, 185, 39, 95, 0, 0, 0, 9, 73, 68, 65, 84, 120, 94, 98, 100, 0, 8, 80, 6,\n        130, 9,\n    ];\n    let _ = png_decode(&data);\n}"}
{"test_id": "gimli-rs-gimli/gimli-rs-gimli-3947879/tests-gen/debug_line.inputs.rs::test_36", "code": "pub fn next_row(&mut self) -> Result<Option<(&LineProgramHeader<R, Offset>, &LineRow)>> {\n        // Perform any reset that was required after copying the previous row.\n        self.row.reset(self.program.header());\n\n        loop {\n            // Split the borrow here, rather than calling `self.header()`.\n            match self.instructions.next_instruction(self.program.header()) {\n                Err(err) => return Err(err),\n                Ok(None) => return Ok(None),\n                Ok(Some(instruction)) => {\n                    if self.row.execute(instruction, &mut self.program) {\n                        if self.row.tombstone {\n                            // Perform any reset that was required for the tombstone row.\n                            // Normally this is done when `next_row` is called again, but for\n                            // tombstones we loop immediately.\n                            self.row.reset(self.program.header());\n                        } else {\n                            return Ok(Some((self.header(), &self.row)));\n                        }\n                    }\n                    // Fall through, parse the next instruction, and see if that\n                    // yields a row.\n                }\n            }\n        }\n    }", "test": "fn test_36() {\n    let debug_line = [91, 10];\n    let debug_line = DebugLine::new(&debug_line, LittleEndian);\n    let offset = DebugLineOffset(0);\n    let address_size = 8;\n    if let Ok(program) = debug_line.program(offset, address_size, None, None) {\n        let mut rows = program.rows();\n        while let Ok(Some(row)) = rows.next_row() {\n            let _ = row;\n        }\n    }\n}"}
{"test_id": "BurntSushi-memchr/BurntSushi-memchr-f3fde7a/tests-gen/memrchr3.inputs.rs::test_23", "code": "fn count(self) -> usize {\n        self.it.count(|s, e| {\n            // SAFETY: We rely on our generic iterator to return valid start\n            // and end pointers.\n            unsafe { count_raw(self.needle1, s, e) }\n        })\n    }", "test": "fn test_23() {\n    let data = [95, 45];\n    if data.len() < 3 {\n        return;\n    }\n    memchr3_iter(data[0], data[1], data[2], &data[3..]).rev().count();\n}"}
{"test_id": "cloud-hypervisor-cloud-hypervisor/cloud-hypervisor-cloud-hypervisor-db3a5f3/tests-gen/rng.inputs.rs::test_22", "code": "pub fn wait_for_epoll_threads(&mut self) {\n        self.common.wait_for_epoll_threads();\n    }", "test": "fn test_22() {\n    let bytes = [14, 39];\n    if bytes.len() < (QUEUE_DATA_SIZE + QUEUE_BYTES_SIZE)\n        || bytes.len() > (QUEUE_DATA_SIZE + QUEUE_BYTES_SIZE + MEM_SIZE)\n    {\n        return;\n    }\n    let mut rng = virtio_devices::Rng::new(\n        \"fuzzer_rng\".to_owned(),\n        \"/dev/urandom\",\n        false,\n        SeccompAction::Allow,\n        EventFd::new(EFD_NONBLOCK).unwrap(),\n        None,\n    )\n    .unwrap();\n    let queue_data = &bytes[..QUEUE_DATA_SIZE];\n    let queue_bytes = &bytes[QUEUE_DATA_SIZE..QUEUE_DATA_SIZE + QUEUE_BYTES_SIZE];\n    let mem_bytes = &bytes[QUEUE_DATA_SIZE + QUEUE_BYTES_SIZE..];\n    let q = setup_virt_queue(queue_data.try_into().unwrap());\n    let mem = GuestMemoryMmap::from_ranges(&[\n        (GuestAddress(0), MEM_SIZE),\n        (GuestAddress(DESC_TABLE_ADDR), QUEUE_BYTES_SIZE),\n    ])\n    .unwrap();\n    if mem\n        .write_slice(queue_bytes, GuestAddress(DESC_TABLE_ADDR))\n        .is_err()\n    {\n        return;\n    }\n    if mem.write_slice(mem_bytes, GuestAddress(0 as u64)).is_err() {\n        return;\n    }\n    let guest_memory = GuestMemoryAtomic::new(mem);\n    let evt = EventFd::new(0).unwrap();\n    let queue_evt = unsafe { EventFd::from_raw_fd(libc::dup(evt.as_raw_fd())) };\n    queue_evt.write(1).unwrap();\n    rng.activate(\n        guest_memory,\n        Arc::new(NoopVirtioInterrupt {}),\n        vec![(0, q, evt)],\n    )\n    .ok();\n    rng.wait_for_epoll_threads();\n}"}
{"test_id": "BurntSushi-memchr/BurntSushi-memchr-f3fde7a/tests-gen/memrchr2.inputs.rs::test_91", "code": "fn count(self) -> usize {\n        self.it.count(|s, e| {\n            // SAFETY: We rely on our generic iterator to return valid start\n            // and end pointers.\n            unsafe { count_raw(self.needle1, s, e) }\n        })\n    }", "test": "fn test_91() {\n    let data = [2, 36, 177];\n    if data.len() < 2 {\n        return;\n    }\n    memchr2_iter(data[0], data[1], &data[2..]).rev().count();\n}"}
{"test_id": "BurntSushi-memchr/BurntSushi-memchr-f3fde7a/tests-gen/memrchr2.inputs.rs::test_70", "code": "fn count(self) -> usize {\n        self.it.count(|s, e| {\n            // SAFETY: We rely on our generic iterator to return valid start\n            // and end pointers.\n            unsafe { count_raw(self.needle1, s, e) }\n        })\n    }", "test": "fn test_70() {\n    let data = [10, 10, 10, 2];\n    if data.len() < 2 {\n        return;\n    }\n    memchr2_iter(data[0], data[1], &data[2..]).rev().count();\n}"}
{"test_id": "gimli-rs-gimli/gimli-rs-gimli-3947879/tests-gen/debug_abbrev.inputs.rs::test_30", "code": "pub fn get<R: Reader>(\n        &self,\n        debug_abbrev: &DebugAbbrev<R>,\n        offset: DebugAbbrevOffset<R::Offset>,\n    ) -> Result<Arc<Abbreviations>> {\n        if offset.0 != R::Offset::from_u8(0) {\n            return debug_abbrev.abbreviations(offset).map(Arc::new);\n        }\n        self.abbreviations\n            .get(|| debug_abbrev.abbreviations(offset))\n    }", "test": "fn test_30() {\n    let debug_abbrev = [10];\n    let len = debug_abbrev.len();\n    let debug_abbrev = DebugAbbrev::new(&debug_abbrev, LittleEndian);\n    let offset = DebugAbbrevOffset(0);\n    if let Ok(abbreviations) = debug_abbrev.abbreviations(offset) {\n        for i in 1..len {\n            let _ = abbreviations.get(i as u64);\n        }\n    }\n}"}
{"test_id": "BurntSushi-memchr/BurntSushi-memchr-f3fde7a/tests-gen/memchr2.inputs.rs::test_15", "code": "fn count(self) -> usize {\n        self.it.count(|s, e| {\n            // SAFETY: We rely on our generic iterator to return valid start\n            // and end pointers.\n            unsafe { count_raw(self.needle1, s, e) }\n        })\n    }", "test": "fn test_15() {\n    let data = [254, 250, 11];\n    if data.len() < 2 {\n        return;\n    }\n    memchr2_iter(data[0], data[1], &data[2..]).count();\n}"}
{"test_id": "XAMPPRocky-tokei/XAMPPRocky-tokei-92ddc2e/tests-gen/parse_from_slice_total.inputs.rs::test_91", "code": "pub fn parse_from_slice (input : FuzzInput , check_total : bool) { let config = & Config { treat_doc_strings_as_comments : Some (input . treat_doc_strings_as_comments) , columns : None , hidden : None , no_ignore : None , no_ignore_parent : None , no_ignore_dot : None , no_ignore_vcs : None , sort : None , types : None , for_each_fn : None , } ; let stats = input . lang . parse_from_slice (input . data , config) ; if check_total { if let Ok (s) = str :: from_utf8 (input . data) { assert ! (stats . lines () <= s . lines () . count () , \"{} got more total lines ({}) than str::lines ({}). Code: {}, Comments: {}, Blanks: {}. treat_doc_strings_as_comments: {}. File contents (as UTF-8):\\n{}\" , input . lang . name () , stats . lines () , s . lines () . count () , stats . code , stats . comments , input . treat_doc_strings_as_comments , stats . blanks , s) } ; } }", "test": "fn test_91() {\n    let data = FuzzInput {\n        lang: AssemblyGAS,\n        treat_doc_strings_as_comments: false,\n        data: [64, 80, 10, 37, 255, 255, 255, 255, 255],\n    };\n    parse_from_slice(data, true);\n}"}
{"test_id": "marshallpierce-rust-base64/marshallpierce-rust-base64-4ef33cc/tests-gen/roundtrip_random_config.inputs.rs::test_40", "code": "fn decode<T: AsRef<[u8]>>(&self, input: T) -> Result<Vec<u8>, DecodeError> {\n        fn inner<E>(engine: &E, input_bytes: &[u8]) -> Result<Vec<u8>, DecodeError>\n        where\n            E: Engine + ?Sized,\n        {\n            let estimate = engine.internal_decoded_len_estimate(input_bytes.len());\n            let mut buffer = vec![0; estimate.decoded_len_estimate()];\n\n            let bytes_written = engine\n                .internal_decode(input_bytes, &mut buffer, estimate)?\n                .decoded_len;\n\n            buffer.truncate(bytes_written);\n\n            Ok(buffer)\n        }\n\n        inner(self, input.as_ref())\n    }", "test": "fn test_40() {\n    let data = [42];\n    let engine = utils::random_engine(data);\n    let encoded = engine.encode(data);\n    let decoded = engine.decode(&encoded).unwrap();\n    assert_eq!(data, decoded.as_slice());\n}"}
{"test_id": "cloud-hypervisor-cloud-hypervisor/cloud-hypervisor-cloud-hypervisor-db3a5f3/tests-gen/console.inputs.rs::test_82", "code": "pub fn wait_for_epoll_threads(&mut self) {\n        self.common.wait_for_epoll_threads();\n    }", "test": "fn test_82() {\n    let bytes = [10, 40, 242, 52];\n    if bytes.len() < (QUEUE_DATA_SIZE + QUEUE_BYTES_SIZE) * QUEUE_NUM + CONSOLE_INPUT_SIZE\n        || bytes.len()\n            > (QUEUE_DATA_SIZE + QUEUE_BYTES_SIZE) * QUEUE_NUM + CONSOLE_INPUT_SIZE + MEM_SIZE\n    {\n        return;\n    }\n    let (pipe_rx, mut pipe_tx) = create_pipe().unwrap();\n    let output = unsafe {\n        File::from_raw_fd(\n            memfd_create(&std::ffi::CString::new(\"fuzz_console_output\").unwrap()).unwrap(),\n        )\n    };\n    let endpoint = virtio_devices::Endpoint::FilePair(output, pipe_rx);\n    let (mut console, _) = virtio_devices::Console::new(\n        \"fuzzer_console\".to_owned(),\n        endpoint,\n        None,\n        false,\n        SeccompAction::Allow,\n        EventFd::new(EFD_NONBLOCK).unwrap(),\n        None,\n    )\n    .unwrap();\n    let console_input_bytes = &bytes[..CONSOLE_INPUT_SIZE];\n    let queue_data = &bytes[CONSOLE_INPUT_SIZE..CONSOLE_INPUT_SIZE + QUEUE_DATA_SIZE * QUEUE_NUM];\n    let queue_bytes = &bytes[CONSOLE_INPUT_SIZE + QUEUE_DATA_SIZE * QUEUE_NUM\n        ..CONSOLE_INPUT_SIZE + (QUEUE_DATA_SIZE + QUEUE_BYTES_SIZE) * QUEUE_NUM];\n    let mem_bytes = &bytes[CONSOLE_INPUT_SIZE + (QUEUE_DATA_SIZE + QUEUE_BYTES_SIZE) * QUEUE_NUM..];\n    let mut queues = setup_virt_queues(\n        &[\n            &queue_data[..QUEUE_DATA_SIZE].try_into().unwrap(),\n            &queue_data[QUEUE_DATA_SIZE..QUEUE_DATA_SIZE * 2]\n                .try_into()\n                .unwrap(),\n        ],\n        BASE_VIRT_QUEUE_ADDR,\n    );\n    let mem = GuestMemoryMmap::from_ranges(&[\n        (GuestAddress(0), MEM_SIZE),\n        (GuestAddress(BASE_VIRT_QUEUE_ADDR), queue_bytes.len()),\n    ])\n    .unwrap();\n    if mem\n        .write_slice(queue_bytes, GuestAddress(BASE_VIRT_QUEUE_ADDR))\n        .is_err()\n    {\n        return;\n    }\n    if mem.write_slice(mem_bytes, GuestAddress(0 as u64)).is_err() {\n        return;\n    }\n    let guest_memory = GuestMemoryAtomic::new(mem);\n    let input_queue = queues.remove(0);\n    let input_evt = EventFd::new(0).unwrap();\n    let input_queue_evt = unsafe { EventFd::from_raw_fd(libc::dup(input_evt.as_raw_fd())) };\n    let output_queue = queues.remove(0);\n    let output_evt = EventFd::new(0).unwrap();\n    let output_queue_evt = unsafe { EventFd::from_raw_fd(libc::dup(output_evt.as_raw_fd())) };\n    input_queue_evt.write(1).unwrap();\n    output_queue_evt.write(1).unwrap();\n    pipe_tx.write_all(console_input_bytes).unwrap();\n    console\n        .activate(\n            guest_memory,\n            Arc::new(NoopVirtioInterrupt {}),\n            vec![(0, input_queue, input_evt), (1, output_queue, output_evt)],\n        )\n        .unwrap();\n    console.wait_for_epoll_threads();\n}"}
{"test_id": "winnow-rs-winnow/winnow-rs-winnow-9e88734/tests-gen/fuzz_arithmetic.inputs.rs::test_97", "code": "fn factor(i: &mut &str) -> PResult<Expr> {\n    delimited(\n        multispaces,\n        alt((digits.try_map(FromStr::from_str).map(Expr::Value), parens)),\n        multispaces,\n    )\n    .parse_next(i)\n}", "test": "fn test_97() {\n    let data = [10, 197, 229, 229];\n    reset();\n    let _ = match str::from_utf8(data) {\n        Ok(mut v) => factor(&mut v),\n        Err(_) => factor(&mut \"2\"),\n    };\n}"}
{"test_id": "cloud-hypervisor-cloud-hypervisor/cloud-hypervisor-cloud-hypervisor-db3a5f3/tests-gen/iommu.inputs.rs::test_32", "code": "pub fn wait_for_epoll_threads(&mut self) {\n        self.common.wait_for_epoll_threads();\n    }", "test": "fn test_32() {\n    let bytes = [56, 58];\n    if bytes.len() < (QUEUE_DATA_SIZE + QUEUE_BYTES_SIZE)\n        || bytes.len() > (QUEUE_DATA_SIZE + QUEUE_BYTES_SIZE + MEM_SIZE)\n    {\n        return;\n    }\n    let (mut iommu, _) = virtio_devices::Iommu::new(\n        \"fuzzer_iommu\".to_owned(),\n        SeccompAction::Allow,\n        EventFd::new(EFD_NONBLOCK).unwrap(),\n        ((MEM_SIZE - IOVA_SPACE_SIZE) as u64, (MEM_SIZE - 1) as u64),\n        None,\n    )\n    .unwrap();\n    let queue_data = &bytes[..QUEUE_DATA_SIZE];\n    let queue_bytes = &bytes[QUEUE_DATA_SIZE..QUEUE_DATA_SIZE + QUEUE_BYTES_SIZE];\n    let mem_bytes = &bytes[QUEUE_DATA_SIZE + QUEUE_BYTES_SIZE..];\n    let request_queue = setup_virt_queue(queue_data.try_into().unwrap());\n    let _event_queue = setup_virt_queue(queue_data.try_into().unwrap());\n    let mem = GuestMemoryMmap::from_ranges(&[\n        (GuestAddress(0), MEM_SIZE),\n        (GuestAddress(DESC_TABLE_ADDR), QUEUE_BYTES_SIZE),\n    ])\n    .unwrap();\n    if mem\n        .write_slice(queue_bytes, GuestAddress(DESC_TABLE_ADDR))\n        .is_err()\n    {\n        return;\n    }\n    if mem.write_slice(mem_bytes, GuestAddress(0 as u64)).is_err() {\n        return;\n    }\n    let guest_memory = GuestMemoryAtomic::new(mem);\n    let request_evt = EventFd::new(0).unwrap();\n    let request_queue_evt = unsafe { EventFd::from_raw_fd(libc::dup(request_evt.as_raw_fd())) };\n    let _event_evt = EventFd::new(0).unwrap();\n    request_queue_evt.write(1).unwrap();\n    iommu\n        .activate(\n            guest_memory,\n            Arc::new(NoopVirtioInterrupt {}),\n            vec![\n                (0, request_queue, request_evt),\n                (0, _event_queue, _event_evt),\n            ],\n        )\n        .ok();\n    iommu.wait_for_epoll_threads();\n}"}
{"test_id": "BurntSushi-memchr/BurntSushi-memchr-f3fde7a/tests-gen/memrchr.inputs.rs::test_58", "code": "fn count(self) -> usize {\n        self.it.count(|s, e| {\n            // SAFETY: We rely on our generic iterator to return valid start\n            // and end pointers.\n            unsafe { count_raw(self.needle1, s, e) }\n        })\n    }", "test": "fn test_58() {\n    let data = [255, 255, 0, 0];\n    if data.is_empty() {\n        return;\n    }\n    memchr_iter(data[0], &data[1..]).rev().count();\n}"}
{"test_id": "rust-bakery-nom/rust-bakery-nom-869f897/tests-gen/fuzz_arithmetic.inputs.rs::test_66", "code": "fn factor(i: &str) -> IResult<&str, Expr> {\n  alt((\n    map(\n      map_res(delimited(multispace, digit, multispace), FromStr::from_str),\n      Expr::Value,\n    ),\n    parens,\n  ))(i)\n}", "test": "fn test_66() {\n  let data = [10, 143];\n  reset();\n  let temp = match str::from_utf8(data) {\n    Ok(v) => factor(v),\n    Err(e) => factor(\"2\"),\n  };\n}"}
{"test_id": "rust-bio-rust-bio/rust-bio-rust-bio-319a0d8/tests-gen/myers_matching.inputs.rs::test_98", "code": "fn validate_alignment (aln : & Alignment , x : & [u8] , y : & [u8]) { let y = & y [aln . ystart .. aln . yend] ; let mut ix = 0 ; let mut iy = 0 ; let mut calc_dist = 0 ; for op in & aln . operations { match * op { Match => { assert ! (x [ix] == y [iy] , \"Match operation, but characters are not equal\") ; ix += 1 ; iy += 1 ; } Subst => { assert ! (x [ix] != y [iy] , \"Subst operation, but characters are equal\") ; calc_dist += 1 ; ix += 1 ; iy += 1 ; } Del => { calc_dist += 1 ; iy += 1 ; } Ins => { calc_dist += 1 ; ix += 1 ; } _ => unreachable ! () } } assert_eq ! (calc_dist , aln . score as usize) ; }", "test": "fn test_98() {\n    let data = [64, 61, 246];\n    if data.len() < 3 {\n        return;\n    }\n    let (max_dist, data) = data.split_first().unwrap();\n    let (pattern_len, data) = data.split_first().unwrap();\n    let max_dist = min(64, *max_dist);\n    let pattern_len = max(1, min(64, min(data.len(), *pattern_len as usize)));\n    if data.iter().any(|&b| b < 65 || b > 122 || b > 90 && b < 97) {\n        return;\n    }\n    let (pattern, text) = data.split_at(pattern_len);\n    let max_dist = max_dist as u8;\n    let _ = MyersBuilder::new().build_64(pattern);\n    let _ = MyersBuilder::new().build_long_64(pattern);\n    let mut myers = Myers::<u64>::new(pattern);\n    let mut myers_long = long::Myers::<u8>::new(pattern);\n    let end_dist: Vec<_> = myers.find_all_end(text, max_dist).collect();\n    let end_dist_long: Vec<_> = myers_long\n        .find_all_end(text, max_dist as usize)\n        .map(|(end, dist)| (end, dist as u8))\n        .collect();\n    assert_eq!(end_dist, end_dist_long);\n    let mut aln = Alignment::default();\n    let mut aln_long = Alignment::default();\n    {\n        let mut matches = myers.find_all(text, max_dist);\n        let mut matches_long = myers_long.find_all(text, max_dist as usize);\n        matches.alignment(&mut aln);\n        matches_long.alignment(&mut aln_long);\n        let mut end_dist_iter = end_dist.iter();\n        while matches.next_alignment(&mut aln) {\n            assert!(matches_long.next_alignment(&mut aln_long));\n            assert_eq!(aln, aln_long);\n            validate_alignment(&aln, pattern, text);\n            assert!(aln.score as u8 <= max_dist);\n            let (end, dist) = end_dist_iter.next().unwrap();\n            assert_eq!(*end + 1, aln.yend);\n            assert_eq!(*dist, aln.score as u8);\n        }\n        assert!(end_dist_iter.next().is_none());\n        assert!(!matches_long.next_alignment(&mut aln_long));\n    }\n    {\n        let mut matches = myers.find_all_lazy(text, max_dist);\n        let mut matches_long = myers_long.find_all_lazy(text, max_dist as usize);\n        let mut end_dist_iter = end_dist.iter();\n        while let Some((end, dist)) = matches.next() {\n            let (end_long, dist_long) = matches_long.next().unwrap();\n            assert_eq!((end, dist), (end_long, dist_long as u8));\n            assert!(matches.alignment_at(end, &mut aln));\n            assert!(matches_long.alignment_at(end, &mut aln_long));\n            assert_eq!(aln, aln_long);\n            validate_alignment(&aln, pattern, text);\n            assert_eq!(dist, aln.score as u8);\n            assert!(aln.score as u8 <= max_dist);\n            let (end, dist) = end_dist_iter.next().unwrap();\n            assert_eq!(*end + 1, aln.yend);\n            assert_eq!(*dist, aln.score as u8);\n            assert!(!matches.alignment_at(end + 1, &mut aln));\n        }\n        assert!(end_dist_iter.next().is_none());\n    }\n    let mut matches = myers.find_all_lazy(text, u8::max_value());\n    let mut matches_long = myers_long.find_all_lazy(text, u8::max_value() as usize);\n    let mut i = 0;\n    while let Some((end, dist)) = matches.next() {\n        assert_eq!(end, i);\n        let (end_long, dist_long) = matches_long.next().unwrap();\n        assert_eq!((end, dist), (end_long, dist_long as u8));\n        assert!(matches.alignment_at(end, &mut aln));\n        assert!(matches_long.alignment_at(end, &mut aln_long));\n        assert_eq!(aln, aln_long);\n        validate_alignment(&aln, pattern, text);\n        assert_eq!(dist, aln.score as u8);\n        assert!(aln.score as u8 <= u8::max_value());\n        assert!(!matches.alignment_at(end + 1, &mut aln));\n        assert!(!matches_long.alignment_at(end + 1, &mut aln_long));\n        i += 1;\n    }\n}"}
{"test_id": "cloud-hypervisor-cloud-hypervisor/cloud-hypervisor-cloud-hypervisor-db3a5f3/tests-gen/watchdog.inputs.rs::test_35", "code": "pub fn wait_for_epoll_threads(&mut self) {\n        self.common.wait_for_epoll_threads();\n    }", "test": "fn test_35() {\n    let bytes = [10];\n    if bytes.len() < QUEUE_DATA_SIZE || bytes.len() > (QUEUE_DATA_SIZE + MEM_SIZE) {\n        return;\n    }\n    let mut watchdog = virtio_devices::Watchdog::new(\n        \"fuzzer_watchdog\".to_owned(),\n        EventFd::new(EFD_NONBLOCK).unwrap(),\n        SeccompAction::Allow,\n        EventFd::new(EFD_NONBLOCK).unwrap(),\n        None,\n    )\n    .unwrap();\n    let queue_data = &bytes[..QUEUE_DATA_SIZE];\n    let mem_bytes = &bytes[QUEUE_DATA_SIZE..];\n    let q = setup_virt_queue(queue_data.try_into().unwrap());\n    let mem = GuestMemoryMmap::from_ranges(&[(GuestAddress(0), MEM_SIZE)]).unwrap();\n    if mem.write_slice(mem_bytes, GuestAddress(0 as u64)).is_err() {\n        return;\n    }\n    let guest_memory = GuestMemoryAtomic::new(mem);\n    let evt = EventFd::new(0).unwrap();\n    let queue_evt = unsafe { EventFd::from_raw_fd(libc::dup(evt.as_raw_fd())) };\n    queue_evt.write(1).unwrap();\n    watchdog\n        .activate(\n            guest_memory,\n            Arc::new(NoopVirtioInterrupt {}),\n            vec![(0, q, evt)],\n        )\n        .ok();\n    watchdog.wait_for_epoll_threads();\n}"}
{"test_id": "gfx-rs-naga/gfx-rs-naga-92e41b4/tests-gen/wgsl_parser.inputs.rs::test_79", "code": "pub fn parse(mut self) -> Result<crate::Module, Error> {\n        let mut module = {\n            if self.next()? != spirv::MAGIC_NUMBER {\n                return Err(Error::InvalidHeader);\n            }\n            let version_raw = self.next()?;\n            let generator = self.next()?;\n            let _bound = self.next()?;\n            let _schema = self.next()?;\n            log::info!(\"Generated by {} version {:x}\", generator, version_raw);\n            crate::Module::default()\n        };\n\n        self.layouter.clear();\n        self.dummy_functions = Arena::new();\n        self.lookup_function.clear();\n        self.function_call_graph.clear();\n\n        loop {\n            use spirv::Op;\n\n            let inst = match self.next_inst() {\n                Ok(inst) => inst,\n                Err(Error::IncompleteData) => break,\n                Err(other) => return Err(other),\n            };\n            log::debug!(\"\\t{:?} [{}]\", inst.op, inst.wc);\n\n            match inst.op {\n                Op::Capability => self.parse_capability(inst),\n                Op::Extension => self.parse_extension(inst),\n                Op::ExtInstImport => self.parse_ext_inst_import(inst),\n                Op::MemoryModel => self.parse_memory_model(inst),\n                Op::EntryPoint => self.parse_entry_point(inst),\n                Op::ExecutionMode => self.parse_execution_mode(inst),\n                Op::String => self.parse_string(inst),\n                Op::Source => self.parse_source(inst),\n                Op::SourceExtension => self.parse_source_extension(inst),\n                Op::Name => self.parse_name(inst),\n                Op::MemberName => self.parse_member_name(inst),\n                Op::ModuleProcessed => self.parse_module_processed(inst),\n                Op::Decorate => self.parse_decorate(inst),\n                Op::MemberDecorate => self.parse_member_decorate(inst),\n                Op::TypeVoid => self.parse_type_void(inst),\n                Op::TypeBool => self.parse_type_bool(inst, &mut module),\n                Op::TypeInt => self.parse_type_int(inst, &mut module),\n                Op::TypeFloat => self.parse_type_float(inst, &mut module),\n                Op::TypeVector => self.parse_type_vector(inst, &mut module),\n                Op::TypeMatrix => self.parse_type_matrix(inst, &mut module),\n                Op::TypeFunction => self.parse_type_function(inst),\n                Op::TypePointer => self.parse_type_pointer(inst, &mut module),\n                Op::TypeArray => self.parse_type_array(inst, &mut module),\n                Op::TypeRuntimeArray => self.parse_type_runtime_array(inst, &mut module),\n                Op::TypeStruct => self.parse_type_struct(inst, &mut module),\n                Op::TypeImage => self.parse_type_image(inst, &mut module),\n                Op::TypeSampledImage => self.parse_type_sampled_image(inst),\n                Op::TypeSampler => self.parse_type_sampler(inst, &mut module),\n                Op::Constant | Op::SpecConstant => self.parse_constant(inst, &mut module),\n                Op::ConstantComposite => self.parse_composite_constant(inst, &mut module),\n                Op::ConstantNull | Op::Undef => self.parse_null_constant(inst, &mut module),\n                Op::ConstantTrue => self.parse_bool_constant(inst, true, &mut module),\n                Op::ConstantFalse => self.parse_bool_constant(inst, false, &mut module),\n                Op::Variable => self.parse_global_variable(inst, &mut module),\n                Op::Function => {\n                    self.switch(ModuleState::Function, inst.op)?;\n                    inst.expect(5)?;\n                    self.parse_function(&mut module)\n                }\n                _ => Err(Error::UnsupportedInstruction(self.state, inst.op)), //TODO\n            }?;\n        }\n\n        log::info!(\"Patching...\");\n        {\n            let mut nodes = petgraph::algo::toposort(&self.function_call_graph, None)\n                .map_err(|cycle| Error::FunctionCallCycle(cycle.node_id()))?;\n            nodes.reverse(); // we need dominated first\n            let mut functions = mem::take(&mut module.functions);\n            for fun_id in nodes {\n                if fun_id > !(functions.len() as u32) {\n                    // skip all the fake IDs registered for the entry points\n                    continue;\n                }\n                let lookup = self.lookup_function.get_mut(&fun_id).unwrap();\n                // take out the function from the old array\n                let fun = mem::take(&mut functions[lookup.handle]);\n                // add it to the newly formed arena, and adjust the lookup\n                lookup.handle = module\n                    .functions\n                    .append(fun, functions.get_span(lookup.handle));\n            }\n        }\n        // patch all the functions\n        for (handle, fun) in module.functions.iter_mut() {\n            self.patch_function(Some(handle), fun)?;\n        }\n        for ep in module.entry_points.iter_mut() {\n            self.patch_function(None, &mut ep.function)?;\n        }\n\n        // Check all the images and samplers to have consistent comparison property.\n        for (handle, flags) in self.handle_sampling.drain() {\n            if !image::patch_comparison_type(\n                flags,\n                module.global_variables.get_mut(handle),\n                &mut module.types,\n            ) {\n                return Err(Error::InconsistentComparisonSampling(handle));\n            }\n        }\n\n        if !self.future_decor.is_empty() {\n            log::warn!(\"Unused item decorations: {:?}\", self.future_decor);\n            self.future_decor.clear();\n        }\n        if !self.future_member_decor.is_empty() {\n            log::warn!(\"Unused member decorations: {:?}\", self.future_member_decor);\n            self.future_member_decor.clear();\n        }\n\n        Ok(module)\n    }", "test": "fn test_79() {\n    let data = \",\";\n    let _result = Frontend::new().parse(&data);\n}"}
{"test_id": "uutils-coreutils/uutils-coreutils-73b7c46/tests-gen/fuzz_parse_size.inputs.rs::test_20", "code": "pub fn parse_size(size: &str) -> Result<u64, ParseSizeError> {\n    Parser::default().parse(size)\n}", "test": "fn test_20() {\n    let data = [219, 252];\n    if let Ok(s) = std::str::from_utf8(data) {\n        _ = parse_size(s);\n    }\n}"}
{"test_id": "marshallpierce-rust-base64/marshallpierce-rust-base64-4ef33cc/tests-gen/roundtrip_random_config.inputs.rs::test_79", "code": "fn decode<T: AsRef<[u8]>>(&self, input: T) -> Result<Vec<u8>, DecodeError> {\n        fn inner<E>(engine: &E, input_bytes: &[u8]) -> Result<Vec<u8>, DecodeError>\n        where\n            E: Engine + ?Sized,\n        {\n            let estimate = engine.internal_decoded_len_estimate(input_bytes.len());\n            let mut buffer = vec![0; estimate.decoded_len_estimate()];\n\n            let bytes_written = engine\n                .internal_decode(input_bytes, &mut buffer, estimate)?\n                .decoded_len;\n\n            buffer.truncate(bytes_written);\n\n            Ok(buffer)\n        }\n\n        inner(self, input.as_ref())\n    }", "test": "fn test_79() {\n    let data = [137, 128, 240, 164];\n    let engine = utils::random_engine(data);\n    let encoded = engine.encode(data);\n    let decoded = engine.decode(&encoded).unwrap();\n    assert_eq!(data, decoded.as_slice());\n}"}
{"test_id": "cloud-hypervisor-cloud-hypervisor/cloud-hypervisor-cloud-hypervisor-db3a5f3/tests-gen/pmem.inputs.rs::test_95", "code": "pub fn wait_for_epoll_threads(&mut self) {\n        self.common.wait_for_epoll_threads();\n    }", "test": "fn test_95() {\n    let bytes = [0, 0, 0, 0];\n    if bytes.len() < QUEUE_DATA_SIZE || bytes.len() > (QUEUE_DATA_SIZE + MEM_SIZE) {\n        return;\n    }\n    let mut pmem = create_dummy_pmem();\n    let queue_data = &bytes[..QUEUE_DATA_SIZE];\n    let mem_bytes = &bytes[QUEUE_DATA_SIZE..];\n    let q = setup_virt_queue(queue_data.try_into().unwrap());\n    let mem = GuestMemoryMmap::from_ranges(&[(GuestAddress(0), MEM_SIZE)]).unwrap();\n    if mem.write_slice(mem_bytes, GuestAddress(0 as u64)).is_err() {\n        return;\n    }\n    let guest_memory = GuestMemoryAtomic::new(mem);\n    let evt = EventFd::new(0).unwrap();\n    let queue_evt = unsafe { EventFd::from_raw_fd(libc::dup(evt.as_raw_fd())) };\n    queue_evt.write(1).unwrap();\n    pmem.activate(\n        guest_memory,\n        Arc::new(NoopVirtioInterrupt {}),\n        vec![(0, q, evt)],\n    )\n    .ok();\n    pmem.wait_for_epoll_threads();\n}"}
{"test_id": "gimli-rs-gimli/gimli-rs-gimli-3947879/tests-gen/debug_abbrev.inputs.rs::test_38", "code": "pub fn get<R: Reader>(\n        &self,\n        debug_abbrev: &DebugAbbrev<R>,\n        offset: DebugAbbrevOffset<R::Offset>,\n    ) -> Result<Arc<Abbreviations>> {\n        if offset.0 != R::Offset::from_u8(0) {\n            return debug_abbrev.abbreviations(offset).map(Arc::new);\n        }\n        self.abbreviations\n            .get(|| debug_abbrev.abbreviations(offset))\n    }", "test": "fn test_38() {\n    let debug_abbrev = [44, 44];\n    let len = debug_abbrev.len();\n    let debug_abbrev = DebugAbbrev::new(&debug_abbrev, LittleEndian);\n    let offset = DebugAbbrevOffset(0);\n    if let Ok(abbreviations) = debug_abbrev.abbreviations(offset) {\n        for i in 1..len {\n            let _ = abbreviations.get(i as u64);\n        }\n    }\n}"}
{"test_id": "XAMPPRocky-tokei/XAMPPRocky-tokei-92ddc2e/tests-gen/parse_from_slice_total.inputs.rs::test_22", "code": "pub fn parse_from_slice (input : FuzzInput , check_total : bool) { let config = & Config { treat_doc_strings_as_comments : Some (input . treat_doc_strings_as_comments) , columns : None , hidden : None , no_ignore : None , no_ignore_parent : None , no_ignore_dot : None , no_ignore_vcs : None , sort : None , types : None , for_each_fn : None , } ; let stats = input . lang . parse_from_slice (input . data , config) ; if check_total { if let Ok (s) = str :: from_utf8 (input . data) { assert ! (stats . lines () <= s . lines () . count () , \"{} got more total lines ({}) than str::lines ({}). Code: {}, Comments: {}, Blanks: {}. treat_doc_strings_as_comments: {}. File contents (as UTF-8):\\n{}\" , input . lang . name () , stats . lines () , s . lines () . count () , stats . code , stats . comments , input . treat_doc_strings_as_comments , stats . blanks , s) } ; } }", "test": "fn test_22() {\n    let data = FuzzInput {\n        lang: Zsh,\n        treat_doc_strings_as_comments: true,\n        data: [255, 255, 10, 255, 255, 255, 255, 10, 255],\n    };\n    parse_from_slice(data, true);\n}"}
{"test_id": "BurntSushi-memchr/BurntSushi-memchr-f3fde7a/tests-gen/memrchr3.inputs.rs::test_45", "code": "fn count(self) -> usize {\n        self.it.count(|s, e| {\n            // SAFETY: We rely on our generic iterator to return valid start\n            // and end pointers.\n            unsafe { count_raw(self.needle1, s, e) }\n        })\n    }", "test": "fn test_45() {\n    let data = [74, 18];\n    if data.len() < 3 {\n        return;\n    }\n    memchr3_iter(data[0], data[1], data[2], &data[3..]).rev().count();\n}"}
{"test_id": "image-rs-image-png/image-rs-image-png-e113d76/tests-gen/roundtrip.inputs.rs::test_82", "code": "fn encode_png < 'a > (width : u8 , filter : u8 , compression : u8 , color_type : u8 , raw_bit_depth : u8 , raw_palette : & 'a [u8] , data : & 'a [u8]) -> Option < (& 'a [u8] , Vec < u8 >) > { let width = width as u32 ; if width == 0 { return None } ; let filter = FilterType :: from_u8 (filter) ? ; let bit_depth = BitDepth :: from_u8 (raw_bit_depth) ? ; let max_palette_length = 3 * u32 :: pow (2 , raw_bit_depth as u32) as usize ; let mut palette = raw_palette ; let color_type = ColorType :: from_u8 (color_type) ? ; if let ColorType :: Indexed = color_type { if raw_palette . len () > max_palette_length { palette = & raw_palette [.. max_palette_length] ; } } let compression = match compression { 0 => png :: Compression :: Default , 1 => png :: Compression :: Fast , 2 => png :: Compression :: Best , 3 => png :: Compression :: Huffman , 4 => png :: Compression :: Rle , _ => return None , } ; let bytes_per_row = raw_row_length_from_width (bit_depth , color_type , width) - 1 ; let height = data . len () / bytes_per_row ; let total_bytes = bytes_per_row * height ; let data_to_encode = & data [.. total_bytes] ; let mut output : Vec < u8 > = Vec :: new () ; { let mut encoder = png :: Encoder :: new (& mut output , width , height as u32) ; encoder . set_depth (bit_depth) ; encoder . set_color (color_type) ; encoder . set_filter (filter) ; encoder . set_compression (compression) ; if let ColorType :: Indexed = color_type { encoder . set_palette (palette) } let mut writer = encoder . write_header () . ok () ? ; writer . write_image_data (data_to_encode) . expect (\"Encoding failed\") ; } Some ((data_to_encode , output)) }", "test": "fn test_82() {\n    let data = (241, 17, 231, 0, 241, [17], [231, 0, 241]);\n    if let Some((raw, encoded)) =\n        encode_png(data.0, data.1, data.2, data.3, data.4, &data.5, &data.6)\n    {\n        let (_info, raw_decoded) = decode_png(&encoded);\n        let raw_decoded = &raw_decoded[..raw.len()];\n        assert_eq!(raw, raw_decoded);\n    }\n}"}
{"test_id": "BurntSushi-memchr/BurntSushi-memchr-f3fde7a/tests-gen/memrmem.inputs.rs::test_34", "code": "pub fn count(&self, haystack: &[u8]) -> usize {\n        // SAFETY: All of our pointers are derived directly from a borrowed\n        // slice, which is guaranteed to be valid.\n        unsafe {\n            let start = haystack.as_ptr();\n            let end = start.add(haystack.len());\n            self.count_raw(start, end)\n        }\n    }", "test": "fn test_34() {\n    let data = [144, 23];\n    if data.len() < 2 {\n        return;\n    }\n    let split = std::cmp::max(data[0] as usize, 1) % data.len() as usize;\n    let (needle, haystack) = (&data[..split], &data[split..]);\n    memmem::rfind_iter(haystack, needle).count();\n}"}
{"test_id": "rust-bio-rust-bio/rust-bio-rust-bio-319a0d8/tests-gen/banded_aligner.inputs.rs::test_40", "code": "fn validate_alignment_score(al: &Alignment, x: TextSlice, y: TextSlice, scoring: &Scoring<MatchParams>) -> bool {\n    use AlignmentOperation::*;\n    let path = al.path();\n    let mut score = 0;\n    if al.mode==AlignmentMode::Custom {\n        if al.xstart > 0 {\n            score += scoring.xclip_prefix;\n        }\n        if al.ystart > 0 {\n            score += scoring.yclip_prefix;\n        }\n        if al.xend < al.xlen {\n            score += scoring.xclip_suffix;\n        }\n        if al.yend < al.ylen {\n            score += scoring.yclip_suffix;\n        }\n    }\n    let mut last_op = None;\n    for (i, j, op) in path {\n        score += match op {\n            Match | Subst => scoring.match_fn.score(x[i-1], y[j-1]),\n            Del => if last_op==Some(Del) { scoring.gap_extend } else { scoring.gap_open + scoring.gap_extend },\n            Ins => if last_op==Some(Ins) { scoring.gap_extend } else { scoring.gap_open + scoring.gap_extend },\n            _ => 0,\n        };\n        last_op = Some(op);\n    }\n    al.score==score\n}", "test": "fn test_40() {\n    let data = [10];\n    if data.len() < 50 || data.len() > 300 {\n        return;\n    }\n    let (split_byte, data) = data.split_first().unwrap();\n    let (kmer_byte, data) = data.split_first().unwrap();\n    let (window_byte, data) = data.split_first().unwrap();\n    let (match_score_byte, data) = data.split_first().unwrap();\n    let (mismatch_score_byte, data) = data.split_first().unwrap();\n    let (gap_open_byte, data) = data.split_first().unwrap();\n    let (gap_extend_byte, data) = data.split_first().unwrap();\n    let (xclip_prefix_byte, data) = data.split_first().unwrap();\n    let (xclip_suffix_byte, data) = data.split_first().unwrap();\n    let (yclip_prefix_byte, data) = data.split_first().unwrap();\n    let (yclip_suffix_byte, data) = data.split_first().unwrap();\n    let alphabets = b\"ACGT\";\n    let v: Vec<_> = data\n        .iter()\n        .map(|i| alphabets[(*i as usize) % alphabets.len()])\n        .collect();\n    let kmer_len: usize = 5 + (*kmer_byte as usize) % 10;\n    let window_size: usize = 5 + (*window_byte as usize) % 10;\n    let split_pos: usize = min(data.len() - 1, max(*split_byte as usize, 1));\n    let match_score = 1 + (*match_score_byte as i32) % 5;\n    let mismatch_score = -((*mismatch_score_byte as i32) % 10);\n    let gap_open = -((*gap_open_byte as i32) % 20);\n    let gap_extend = -((*gap_extend_byte as i32) % 10);\n    let (x, y) = v.split_at(split_pos);\n    println!(\n        \"x: {}, y: {}, k: {}, w: {}, scoring ({}, {}, {}, {})\",\n        String::from_utf8(x.to_vec()).unwrap(),\n        String::from_utf8(y.to_vec()).unwrap(),\n        kmer_len,\n        window_size,\n        gap_open,\n        gap_extend,\n        match_score,\n        mismatch_score\n    );\n    let base_score = Scoring::from_scores(gap_open, gap_extend, match_score, mismatch_score);\n    {\n        println!(\n            \"Clip scores ({}, {}, {}, {})\",\n            xclip_prefix_byte, xclip_suffix_byte, yclip_prefix_byte, yclip_suffix_byte\n        );\n        let scoring = Scoring {\n            xclip_prefix: -(*xclip_prefix_byte as i32),\n            xclip_suffix: -(*xclip_suffix_byte as i32),\n            yclip_prefix: -(*yclip_prefix_byte as i32),\n            yclip_suffix: -(*yclip_suffix_byte as i32),\n            ..base_score.clone()\n        };\n        let mut b_aligner = banded::Aligner::with_scoring(scoring.clone(), kmer_len, window_size);\n        let b_alignment = b_aligner.custom(x, y);\n        assert!(validate_alignment_score(&b_alignment, x, y, &scoring));\n        let mut f_aligner = pairwise::Aligner::with_scoring(scoring.clone());\n        let f_alignment = f_aligner.custom(x, y);\n        assert!(validate_alignment_score(&f_alignment, x, y, &scoring));\n        let band_all_alignment = b_aligner.custom_with_matches(x, y, &Vec::new());\n        assert_eq!(band_all_alignment.score, f_alignment.score);\n    }\n    {\n        let scoring = Scoring {\n            xclip_prefix: 0,\n            xclip_suffix: 0,\n            yclip_suffix: 0,\n            ..base_score.clone()\n        };\n        let mut b_aligner = banded::Aligner::with_scoring(scoring.clone(), kmer_len, window_size);\n        let b_alignment = b_aligner.custom(x, y);\n        assert_eq!(b_alignment.ystart, 0);\n        assert!(validate_alignment_score(&b_alignment, x, y, &scoring));\n        let mut f_aligner = pairwise::Aligner::with_scoring(scoring.clone());\n        let f_alignment = f_aligner.custom(x, y);\n        assert_eq!(f_alignment.ystart, 0);\n        assert!(validate_alignment_score(&f_alignment, x, y, &scoring));\n        let band_all_alignment = b_aligner.custom_with_matches(x, y, &Vec::new());\n        assert_eq!(band_all_alignment.score, f_alignment.score);\n    }\n    {\n        let scoring = Scoring {\n            xclip_prefix: 0,\n            xclip_suffix: 0,\n            yclip_prefix: 0,\n            ..base_score.clone()\n        };\n        let mut b_aligner = banded::Aligner::with_scoring(scoring.clone(), kmer_len, window_size);\n        let b_alignment = b_aligner.custom(x, y);\n        assert_eq!(b_alignment.yend, b_alignment.ylen);\n        assert!(validate_alignment_score(&b_alignment, x, y, &scoring));\n        let mut f_aligner = pairwise::Aligner::with_scoring(scoring.clone());\n        let f_alignment = f_aligner.custom(x, y);\n        assert_eq!(f_alignment.yend, f_alignment.ylen);\n        assert!(validate_alignment_score(&f_alignment, x, y, &scoring));\n        let band_all_alignment = b_aligner.custom_with_matches(x, y, &Vec::new());\n        assert_eq!(band_all_alignment.score, f_alignment.score);\n    }\n    {\n        let scoring = Scoring {\n            xclip_suffix: 0,\n            yclip_prefix: 0,\n            yclip_suffix: 0,\n            ..base_score.clone()\n        };\n        let mut b_aligner = banded::Aligner::with_scoring(scoring.clone(), kmer_len, window_size);\n        let b_alignment = b_aligner.custom(x, y);\n        assert_eq!(b_alignment.xstart, 0);\n        assert!(validate_alignment_score(&b_alignment, x, y, &scoring));\n        let mut f_aligner = pairwise::Aligner::with_scoring(scoring.clone());\n        let f_alignment = f_aligner.custom(x, y);\n        assert_eq!(f_alignment.xstart, 0);\n        assert!(validate_alignment_score(&f_alignment, x, y, &scoring));\n        let band_all_alignment = b_aligner.custom_with_matches(x, y, &Vec::new());\n        assert_eq!(band_all_alignment.score, f_alignment.score);\n    }\n    {\n        let scoring = Scoring {\n            xclip_prefix: 0,\n            yclip_prefix: 0,\n            yclip_suffix: 0,\n            ..base_score.clone()\n        };\n        let mut b_aligner = banded::Aligner::with_scoring(scoring.clone(), kmer_len, window_size);\n        let b_alignment = b_aligner.custom(x, y);\n        assert_eq!(b_alignment.xend, b_alignment.xlen);\n        assert!(validate_alignment_score(&b_alignment, x, y, &scoring));\n        let mut f_aligner = pairwise::Aligner::with_scoring(scoring.clone());\n        let f_alignment = f_aligner.custom(x, y);\n        assert_eq!(f_alignment.xend, f_alignment.xlen);\n        assert!(validate_alignment_score(&f_alignment, x, y, &scoring));\n        let band_all_alignment = b_aligner.custom_with_matches(x, y, &Vec::new());\n        assert_eq!(band_all_alignment.score, f_alignment.score);\n    }\n    {\n        let mut aligner = banded::Aligner::with_scoring(base_score.clone(), kmer_len, window_size);\n        let alignment = aligner.local(x, y);\n        assert!(alignment.score >= 0);\n        assert!(validate_alignment_score(&alignment, x, y, &base_score));\n        let alignment = aligner.semiglobal(x, y);\n        assert_eq!(alignment.xstart, 0);\n        assert_eq!(alignment.xend, alignment.xlen);\n        assert!(validate_alignment_score(&alignment, x, y, &base_score));\n        let alignment = aligner.global(x, y);\n        assert_eq!(alignment.xstart, 0);\n        assert_eq!(alignment.xend, alignment.xlen);\n        assert_eq!(alignment.ystart, 0);\n        assert_eq!(alignment.yend, alignment.ylen);\n        assert!(validate_alignment_score(&alignment, x, y, &base_score));\n    }\n    {\n        let mut aligner = pairwise::Aligner::with_scoring(base_score.clone());\n        let alignment = aligner.local(x, y);\n        assert!(alignment.score >= 0);\n        assert!(validate_alignment_score(&alignment, x, y, &base_score));\n        let alignment = aligner.semiglobal(x, y);\n        assert_eq!(alignment.xstart, 0);\n        assert_eq!(alignment.xend, alignment.xlen);\n        assert!(validate_alignment_score(&alignment, x, y, &base_score));\n        let alignment = aligner.global(x, y);\n        assert_eq!(alignment.xstart, 0);\n        assert_eq!(alignment.xend, alignment.xlen);\n        assert_eq!(alignment.ystart, 0);\n        assert_eq!(alignment.yend, alignment.ylen);\n        assert!(validate_alignment_score(&alignment, x, y, &base_score));\n    }\n}"}
{"test_id": "marshallpierce-rust-base64/marshallpierce-rust-base64-4ef33cc/tests-gen/decode_random.inputs.rs::test_88", "code": "fn decode<T: AsRef<[u8]>>(&self, input: T) -> Result<Vec<u8>, DecodeError> {\n        fn inner<E>(engine: &E, input_bytes: &[u8]) -> Result<Vec<u8>, DecodeError>\n        where\n            E: Engine + ?Sized,\n        {\n            let estimate = engine.internal_decoded_len_estimate(input_bytes.len());\n            let mut buffer = vec![0; estimate.decoded_len_estimate()];\n\n            let bytes_written = engine\n                .internal_decode(input_bytes, &mut buffer, estimate)?\n                .decoded_len;\n\n            buffer.truncate(bytes_written);\n\n            Ok(buffer)\n        }\n\n        inner(self, input.as_ref())\n    }", "test": "fn test_88() {\n    let data = [205, 194];\n    let engine = utils::random_engine(data);\n    let _ = engine.decode(data);\n}"}
{"test_id": "gimli-rs-gimli/gimli-rs-gimli-3947879/tests-gen/eh_frame.inputs.rs::test_0", "code": "pub fn next_row(&mut self) -> Result<Option<(&LineProgramHeader<R, Offset>, &LineRow)>> {\n        // Perform any reset that was required after copying the previous row.\n        self.row.reset(self.program.header());\n\n        loop {\n            // Split the borrow here, rather than calling `self.header()`.\n            match self.instructions.next_instruction(self.program.header()) {\n                Err(err) => return Err(err),\n                Ok(None) => return Ok(None),\n                Ok(Some(instruction)) => {\n                    if self.row.execute(instruction, &mut self.program) {\n                        if self.row.tombstone {\n                            // Perform any reset that was required for the tombstone row.\n                            // Normally this is done when `next_row` is called again, but for\n                            // tombstones we loop immediately.\n                            self.row.reset(self.program.header());\n                        } else {\n                            return Ok(Some((self.header(), &self.row)));\n                        }\n                    }\n                    // Fall through, parse the next instruction, and see if that\n                    // yields a row.\n                }\n            }\n        }\n    }", "test": "fn test_0() {\n    let eh_frame = [10];\n    let eh_frame = EhFrame::new(&eh_frame, LittleEndian);\n    let mut ctx = Box::new(UnwindContext::new());\n    let bases = BaseAddresses::default()\n        .set_eh_frame(0)\n        .set_eh_frame_hdr(0)\n        .set_text(0)\n        .set_got(0);\n    let mut entries = eh_frame.entries(&bases);\n    while let Ok(Some(entry)) = entries.next() {\n        match entry {\n            CieOrFde::Cie(_) => continue,\n            CieOrFde::Fde(partial) => {\n                if let Ok(fde) = partial.parse(EhFrame::cie_from_offset) {\n                    if let Ok(mut table) = fde.rows(&eh_frame, &bases, &mut ctx) {\n                        while let Ok(Some(_row)) = table.next_row() {\n                            continue;\n                        }\n                    }\n                }\n            }\n        };\n    }\n}"}
{"test_id": "marshallpierce-rust-base64/marshallpierce-rust-base64-4ef33cc/tests-gen/roundtrip_no_pad.inputs.rs::test_16", "code": "fn decode<T: AsRef<[u8]>>(&self, input: T) -> Result<Vec<u8>, DecodeError> {\n        fn inner<E>(engine: &E, input_bytes: &[u8]) -> Result<Vec<u8>, DecodeError>\n        where\n            E: Engine + ?Sized,\n        {\n            let estimate = engine.internal_decoded_len_estimate(input_bytes.len());\n            let mut buffer = vec![0; estimate.decoded_len_estimate()];\n\n            let bytes_written = engine\n                .internal_decode(input_bytes, &mut buffer, estimate)?\n                .decoded_len;\n\n            buffer.truncate(bytes_written);\n\n            Ok(buffer)\n        }\n\n        inner(self, input.as_ref())\n    }", "test": "fn test_16() {\n    let data = [128, 10, 16, 0];\n    let config = general_purpose::GeneralPurposeConfig::new()\n        .with_encode_padding(false)\n        .with_decode_padding_mode(engine::DecodePaddingMode::RequireNone);\n    let engine = general_purpose::GeneralPurpose::new(&base64::alphabet::STANDARD, config);\n    let encoded = engine.encode(data);\n    let decoded = engine.decode(&encoded).unwrap();\n    assert_eq!(data, decoded.as_slice());\n}"}
{"test_id": "dtolnay-semver/dtolnay-semver-750f0ac/tests-gen/sort_version.inputs.rs::test_47", "code": "fn three_versions(bytes: &[u8]) -> Option<[Version; 3]> {\n    let mut inputs = str::from_utf8(bytes).ok()?.split(' ');\n    Some([\n        Version {\n            major: 0,\n            minor: 0,\n            patch: 0,\n            pre: inputs.next().map(Prerelease::new)?.ok()?,\n            build: inputs.next().map(BuildMetadata::new)?.ok()?,\n        },\n        Version {\n            major: 0,\n            minor: 0,\n            patch: 0,\n            pre: inputs.next().map(Prerelease::new)?.ok()?,\n            build: inputs.next().map(BuildMetadata::new)?.ok()?,\n        },\n        Version {\n            major: 0,\n            minor: 0,\n            patch: 0,\n            pre: inputs.next().map(Prerelease::new)?.ok()?,\n            build: inputs.next().map(BuildMetadata::new)?.ok()?,\n        },\n    ])\n}", "test": "fn test_47() {\n    let bytes = [255, 47, 10];\n    if let Some([a, b, c]) = three_versions(bytes) {\n        if a < b && b < c && c < a {\n            panic!(\"{0} < {1} < {2} < {0}\", a, b, c);\n        }\n    }\n}"}
{"test_id": "cloud-hypervisor-cloud-hypervisor/cloud-hypervisor-cloud-hypervisor-db3a5f3/tests-gen/console.inputs.rs::test_98", "code": "pub fn wait_for_epoll_threads(&mut self) {\n        self.common.wait_for_epoll_threads();\n    }", "test": "fn test_98() {\n    let bytes = [35];\n    if bytes.len() < (QUEUE_DATA_SIZE + QUEUE_BYTES_SIZE) * QUEUE_NUM + CONSOLE_INPUT_SIZE\n        || bytes.len()\n            > (QUEUE_DATA_SIZE + QUEUE_BYTES_SIZE) * QUEUE_NUM + CONSOLE_INPUT_SIZE + MEM_SIZE\n    {\n        return;\n    }\n    let (pipe_rx, mut pipe_tx) = create_pipe().unwrap();\n    let output = unsafe {\n        File::from_raw_fd(\n            memfd_create(&std::ffi::CString::new(\"fuzz_console_output\").unwrap()).unwrap(),\n        )\n    };\n    let endpoint = virtio_devices::Endpoint::FilePair(output, pipe_rx);\n    let (mut console, _) = virtio_devices::Console::new(\n        \"fuzzer_console\".to_owned(),\n        endpoint,\n        None,\n        false,\n        SeccompAction::Allow,\n        EventFd::new(EFD_NONBLOCK).unwrap(),\n        None,\n    )\n    .unwrap();\n    let console_input_bytes = &bytes[..CONSOLE_INPUT_SIZE];\n    let queue_data = &bytes[CONSOLE_INPUT_SIZE..CONSOLE_INPUT_SIZE + QUEUE_DATA_SIZE * QUEUE_NUM];\n    let queue_bytes = &bytes[CONSOLE_INPUT_SIZE + QUEUE_DATA_SIZE * QUEUE_NUM\n        ..CONSOLE_INPUT_SIZE + (QUEUE_DATA_SIZE + QUEUE_BYTES_SIZE) * QUEUE_NUM];\n    let mem_bytes = &bytes[CONSOLE_INPUT_SIZE + (QUEUE_DATA_SIZE + QUEUE_BYTES_SIZE) * QUEUE_NUM..];\n    let mut queues = setup_virt_queues(\n        &[\n            &queue_data[..QUEUE_DATA_SIZE].try_into().unwrap(),\n            &queue_data[QUEUE_DATA_SIZE..QUEUE_DATA_SIZE * 2]\n                .try_into()\n                .unwrap(),\n        ],\n        BASE_VIRT_QUEUE_ADDR,\n    );\n    let mem = GuestMemoryMmap::from_ranges(&[\n        (GuestAddress(0), MEM_SIZE),\n        (GuestAddress(BASE_VIRT_QUEUE_ADDR), queue_bytes.len()),\n    ])\n    .unwrap();\n    if mem\n        .write_slice(queue_bytes, GuestAddress(BASE_VIRT_QUEUE_ADDR))\n        .is_err()\n    {\n        return;\n    }\n    if mem.write_slice(mem_bytes, GuestAddress(0 as u64)).is_err() {\n        return;\n    }\n    let guest_memory = GuestMemoryAtomic::new(mem);\n    let input_queue = queues.remove(0);\n    let input_evt = EventFd::new(0).unwrap();\n    let input_queue_evt = unsafe { EventFd::from_raw_fd(libc::dup(input_evt.as_raw_fd())) };\n    let output_queue = queues.remove(0);\n    let output_evt = EventFd::new(0).unwrap();\n    let output_queue_evt = unsafe { EventFd::from_raw_fd(libc::dup(output_evt.as_raw_fd())) };\n    input_queue_evt.write(1).unwrap();\n    output_queue_evt.write(1).unwrap();\n    pipe_tx.write_all(console_input_bytes).unwrap();\n    console\n        .activate(\n            guest_memory,\n            Arc::new(NoopVirtioInterrupt {}),\n            vec![(0, input_queue, input_evt), (1, output_queue, output_evt)],\n        )\n        .unwrap();\n    console.wait_for_epoll_threads();\n}"}
{"test_id": "cloud-hypervisor-cloud-hypervisor/cloud-hypervisor-cloud-hypervisor-db3a5f3/tests-gen/cmos.inputs.rs::test_58", "code": "fn write(&mut self, _base: u64, offset: u64, data: &[u8]) -> Option<Arc<Barrier>> {\n        if data.len() != 1 {\n            warn!(\"Invalid write size on CMOS device: {}\", data.len());\n            return None;\n        }\n\n        match offset {\n            INDEX_OFFSET => self.index = data[0],\n            DATA_OFFSET => {\n                if self.index == 0x8f && data[0] == 0 {\n                    info!(\"CMOS reset\");\n                    self.reset_evt.write(1).unwrap();\n                    if let Some(vcpus_kill_signalled) = self.vcpus_kill_signalled.take() {\n                        // Spin until we are sure the reset_evt has been handled and that when\n                        // we return from the KVM_RUN we will exit rather than re-enter the guest.\n                        while !vcpus_kill_signalled.load(Ordering::SeqCst) {\n                            // This is more effective than thread::yield_now() at\n                            // avoiding a priority inversion with the VMM thread\n                            thread::sleep(std::time::Duration::from_millis(1));\n                        }\n                    }\n                } else {\n                    self.data[(self.index & INDEX_MASK) as usize] = data[0]\n                }\n            }\n            o => warn!(\"bad write offset on CMOS device: {}\", o),\n        };\n        None\n    }", "test": "fn test_58() {\n    let bytes = [48, 24];\n    if bytes.len() < 16 {\n        return;\n    }\n    let mut below_4g = [0u8; 8];\n    let mut above_4g = [0u8; 8];\n    below_4g.copy_from_slice(&bytes[0..8]);\n    above_4g.copy_from_slice(&bytes[8..16]);\n    let mut cmos = Cmos::new(\n        u64::from_le_bytes(below_4g),\n        u64::from_le_bytes(above_4g),\n        EventFd::new(EFD_NONBLOCK).unwrap(),\n        None,\n    );\n    let mut i = 16;\n    while i < bytes.len() {\n        let read = bytes.get(i).unwrap_or(&0) % 2 == 0;\n        i += 1;\n        if read {\n            let offset = (bytes.get(i).unwrap_or(&0) % 2) as u64;\n            i += 1;\n            let mut out_bytes = vec![0];\n            cmos.read(0, offset, &mut out_bytes);\n        } else {\n            let offset = (bytes.get(i).unwrap_or(&0) % 2) as u64;\n            i += 1;\n            let data = vec![*bytes.get(i).unwrap_or(&0)];\n            i += 1;\n            cmos.write(0, offset, &data);\n        }\n    }\n}"}
{"test_id": "zip-rs-zip/zip-rs-zip-ed187d6/tests-gen/fuzz_read.inputs.rs::test_39", "code": "fn decompress_all (data : & [u8]) -> Result < () , Box < dyn std :: error :: Error > > { let reader = std :: io :: Cursor :: new (data) ; let mut zip = zip :: ZipArchive :: new (reader) ? ; for i in 0 .. zip . len () { let mut file = zip . by_index (i) ? ; if file . size () < 1 << 20 { let _ = std :: io :: copy (& mut file , & mut std :: io :: sink ()) ; } } Ok (()) }", "test": "fn test_39() {\n    let data = [26, 136, 10];\n    let _ = decompress_all(data);\n}"}
{"test_id": "bodil-im-rs/bodil-im-rs-2afaf54/tests-gen/ordset.inputs.rs::test_86", "code": "pub fn remove<BA>(&mut self, a: &BA) -> Option<A>\n    where\n        BA: Hash + Eq + ?Sized,\n        A: Borrow<BA>,\n    {\n        let root = PoolRef::make_mut(&self.pool.0, &mut self.root);\n        let result = root.remove(&self.pool.0, hash_key(&*self.hasher, a), 0, a);\n        if result.is_some() {\n            self.size -= 1;\n        }\n        result.map(|v| v.0)\n    }", "test": "fn test_86() {\n    let actions = [Insert(4991471628406095871)];\n    let mut set = OrdSet::new();\n    let mut nat = NatSet::new();\n    for action in actions {\n        match action {\n            Action::Insert(value) => {\n                let len = nat.len() + if nat.contains(&value) { 0 } else { 1 };\n                nat.insert(value);\n                set.insert(value);\n                assert_eq!(len, set.len());\n            }\n            Action::Remove(value) => {\n                let len = nat.len() - if nat.contains(&value) { 1 } else { 0 };\n                nat.remove(&value);\n                set.remove(&value);\n                assert_eq!(len, set.len());\n            }\n        }\n        assert_eq!(nat.len(), set.len());\n        assert_eq!(OrdSet::from(nat.clone()), set);\n    }\n}"}
{"test_id": "gimli-rs-gimli/gimli-rs-gimli-3947879/tests-gen/debug_aranges.inputs.rs::test_98", "code": "pub fn next(&mut self) -> Result<Option<UnitHeader<R>>> {\n        if self.input.is_empty() {\n            Ok(None)\n        } else {\n            let len = self.input.len();\n            match parse_unit_header(&mut self.input, self.offset.into()) {\n                Ok(header) => {\n                    self.offset.0 += len - self.input.len();\n                    Ok(Some(header))\n                }\n                Err(e) => {\n                    self.input.empty();\n                    Err(e)\n                }\n            }\n        }\n    }", "test": "fn test_98() {\n    let debug_aranges = [15, 36, 10];\n    let debug_aranges = DebugAranges::new(&debug_aranges, LittleEndian);\n    let mut headers = debug_aranges.headers();\n    while let Ok(Some(header)) = headers.next() {\n        let mut entries = header.entries();\n        while let Ok(Some(_entry)) = entries.next() {\n            continue;\n        }\n    }\n}"}
{"test_id": "rustls-rustls/rustls-rustls-ae583bd/tests-gen/message.inputs.rs::test_28", "code": "pub fn used(&self) -> usize {\n        self.cursor\n    }", "test": "fn test_28() {\n    let data = [\n        22, 3, 3, 0, 16, 20, 0, 0, 12, 38, 60, 64, 230, 177, 195, 200, 169, 76, 241, 166, 88,\n    ];\n    let mut rdr = Reader::init(data);\n    if let Ok(m) = OpaqueMessage::read(&mut rdr) {\n        let msg = match Message::try_from(m.into_plain_message()) {\n            Ok(msg) => msg,\n            Err(_) => return,\n        };\n        let enc = PlainMessage::from(msg)\n            .into_unencrypted_opaque()\n            .encode();\n        assert_eq!(enc, data[..rdr.used()]);\n    }\n}"}
{"test_id": "XAMPPRocky-tokei/XAMPPRocky-tokei-92ddc2e/tests-gen/parse_from_slice_panic.inputs.rs::test_95", "code": "pub fn parse_from_slice (input : FuzzInput , check_total : bool) { let config = & Config { treat_doc_strings_as_comments : Some (input . treat_doc_strings_as_comments) , columns : None , hidden : None , no_ignore : None , no_ignore_parent : None , no_ignore_dot : None , no_ignore_vcs : None , sort : None , types : None , for_each_fn : None , } ; let stats = input . lang . parse_from_slice (input . data , config) ; if check_total { if let Ok (s) = str :: from_utf8 (input . data) { assert ! (stats . lines () <= s . lines () . count () , \"{} got more total lines ({}) than str::lines ({}). Code: {}, Comments: {}, Blanks: {}. treat_doc_strings_as_comments: {}. File contents (as UTF-8):\\n{}\" , input . lang . name () , stats . lines () , s . lines () . count () , stats . code , stats . comments , input . treat_doc_strings_as_comments , stats . blanks , s) } ; } }", "test": "fn test_95() {\n    let data = FuzzInput {\n        lang: Zsh,\n        treat_doc_strings_as_comments: false,\n        data: [30, 154, 30, 30, 30, 0, 0, 255, 88],\n    };\n    parse_from_slice(data, false);\n}"}
{"test_id": "seanmonstar-httparse/seanmonstar-httparse-638848e/tests-gen/parse_request.inputs.rs::test_90", "code": "pub fn parse(&mut self, buf: &'b [u8]) -> Result<usize> {\n        self.parse_with_config(buf, &Default::default())\n    }", "test": "fn test_90() {\n    let data = [130, 64, 10];\n    let mut headers = [httparse::EMPTY_HEADER; 16];\n    let mut req = httparse::Request::new(&mut headers);\n    req.parse(data);\n}"}
{"test_id": "image-rs-image-png/image-rs-image-png-e113d76/tests-gen/buf_independent.inputs.rs::test_45", "code": "fn new (inner : R , cap : usize) -> Self { SmalBuf { inner , cap } }", "test": "fn test_45() {\n    let data = [1, 0, 46];\n    let limits = png::Limits { bytes: 1 << 16 };\n    let reference = png::Decoder::new_with_limits(data, limits);\n    let smal = png::Decoder::new_with_limits(SmalBuf::new(data, 1), limits);\n    let _ = png_compare(reference, smal);\n}"}
{"test_id": "cloud-hypervisor-cloud-hypervisor/cloud-hypervisor-cloud-hypervisor-db3a5f3/tests-gen/rng.inputs.rs::test_26", "code": "pub fn wait_for_epoll_threads(&mut self) {\n        self.common.wait_for_epoll_threads();\n    }", "test": "fn test_26() {\n    let bytes = [12, 5, 10];\n    if bytes.len() < (QUEUE_DATA_SIZE + QUEUE_BYTES_SIZE)\n        || bytes.len() > (QUEUE_DATA_SIZE + QUEUE_BYTES_SIZE + MEM_SIZE)\n    {\n        return;\n    }\n    let mut rng = virtio_devices::Rng::new(\n        \"fuzzer_rng\".to_owned(),\n        \"/dev/urandom\",\n        false,\n        SeccompAction::Allow,\n        EventFd::new(EFD_NONBLOCK).unwrap(),\n        None,\n    )\n    .unwrap();\n    let queue_data = &bytes[..QUEUE_DATA_SIZE];\n    let queue_bytes = &bytes[QUEUE_DATA_SIZE..QUEUE_DATA_SIZE + QUEUE_BYTES_SIZE];\n    let mem_bytes = &bytes[QUEUE_DATA_SIZE + QUEUE_BYTES_SIZE..];\n    let q = setup_virt_queue(queue_data.try_into().unwrap());\n    let mem = GuestMemoryMmap::from_ranges(&[\n        (GuestAddress(0), MEM_SIZE),\n        (GuestAddress(DESC_TABLE_ADDR), QUEUE_BYTES_SIZE),\n    ])\n    .unwrap();\n    if mem\n        .write_slice(queue_bytes, GuestAddress(DESC_TABLE_ADDR))\n        .is_err()\n    {\n        return;\n    }\n    if mem.write_slice(mem_bytes, GuestAddress(0 as u64)).is_err() {\n        return;\n    }\n    let guest_memory = GuestMemoryAtomic::new(mem);\n    let evt = EventFd::new(0).unwrap();\n    let queue_evt = unsafe { EventFd::from_raw_fd(libc::dup(evt.as_raw_fd())) };\n    queue_evt.write(1).unwrap();\n    rng.activate(\n        guest_memory,\n        Arc::new(NoopVirtioInterrupt {}),\n        vec![(0, q, evt)],\n    )\n    .ok();\n    rng.wait_for_epoll_threads();\n}"}
{"test_id": "image-rs-image/image-rs-image-e5580ec/tests-gen/fuzzer_script_tga.inputs.rs::test_66", "code": "fn decode(encoded: &[u8]) -> Vec<u8> {\n        let decoder = JpegDecoder::new(Cursor::new(encoded)).expect(\"Could not decode image\");\n\n        let mut decoded = vec![0; decoder.total_bytes() as usize];\n        decoder\n            .read_image(&mut decoded)\n            .expect(\"Could not decode image\");\n        decoded\n    }", "test": "fn test_66() {\n    let data = [10, 26, 10];\n    let _ = decode(data);\n}"}
{"test_id": "gimli-rs-gimli/gimli-rs-gimli-3947879/tests-gen/eh_frame_hdr.inputs.rs::test_7", "code": "fn parse<R: Reader>(input: &mut R) -> Result<Abbreviations> {\n        let mut abbrevs = Abbreviations::empty();\n\n        while let Some(abbrev) = Abbreviation::parse(input)? {\n            if abbrevs.insert(abbrev).is_err() {\n                return Err(Error::DuplicateAbbreviationCode);\n            }\n        }\n\n        Ok(abbrevs)\n    }", "test": "fn test_7() {\n    let eh_frame_hdr = [198, 10];\n    let eh_frame_hdr = EhFrameHdr::new(eh_frame_hdr, LittleEndian);\n    let bases = BaseAddresses::default()\n        .set_eh_frame(0)\n        .set_eh_frame_hdr(0)\n        .set_text(0)\n        .set_got(0);\n    let address_size = 8;\n    let _ = eh_frame_hdr.parse(&bases, address_size);\n}"}
{"test_id": "cloud-hypervisor-cloud-hypervisor/cloud-hypervisor-cloud-hypervisor-db3a5f3/tests-gen/console.inputs.rs::test_38", "code": "pub fn wait_for_epoll_threads(&mut self) {\n        self.common.wait_for_epoll_threads();\n    }", "test": "fn test_38() {\n    let bytes = [169, 10, 10];\n    if bytes.len() < (QUEUE_DATA_SIZE + QUEUE_BYTES_SIZE) * QUEUE_NUM + CONSOLE_INPUT_SIZE\n        || bytes.len()\n            > (QUEUE_DATA_SIZE + QUEUE_BYTES_SIZE) * QUEUE_NUM + CONSOLE_INPUT_SIZE + MEM_SIZE\n    {\n        return;\n    }\n    let (pipe_rx, mut pipe_tx) = create_pipe().unwrap();\n    let output = unsafe {\n        File::from_raw_fd(\n            memfd_create(&std::ffi::CString::new(\"fuzz_console_output\").unwrap()).unwrap(),\n        )\n    };\n    let endpoint = virtio_devices::Endpoint::FilePair(output, pipe_rx);\n    let (mut console, _) = virtio_devices::Console::new(\n        \"fuzzer_console\".to_owned(),\n        endpoint,\n        None,\n        false,\n        SeccompAction::Allow,\n        EventFd::new(EFD_NONBLOCK).unwrap(),\n        None,\n    )\n    .unwrap();\n    let console_input_bytes = &bytes[..CONSOLE_INPUT_SIZE];\n    let queue_data = &bytes[CONSOLE_INPUT_SIZE..CONSOLE_INPUT_SIZE + QUEUE_DATA_SIZE * QUEUE_NUM];\n    let queue_bytes = &bytes[CONSOLE_INPUT_SIZE + QUEUE_DATA_SIZE * QUEUE_NUM\n        ..CONSOLE_INPUT_SIZE + (QUEUE_DATA_SIZE + QUEUE_BYTES_SIZE) * QUEUE_NUM];\n    let mem_bytes = &bytes[CONSOLE_INPUT_SIZE + (QUEUE_DATA_SIZE + QUEUE_BYTES_SIZE) * QUEUE_NUM..];\n    let mut queues = setup_virt_queues(\n        &[\n            &queue_data[..QUEUE_DATA_SIZE].try_into().unwrap(),\n            &queue_data[QUEUE_DATA_SIZE..QUEUE_DATA_SIZE * 2]\n                .try_into()\n                .unwrap(),\n        ],\n        BASE_VIRT_QUEUE_ADDR,\n    );\n    let mem = GuestMemoryMmap::from_ranges(&[\n        (GuestAddress(0), MEM_SIZE),\n        (GuestAddress(BASE_VIRT_QUEUE_ADDR), queue_bytes.len()),\n    ])\n    .unwrap();\n    if mem\n        .write_slice(queue_bytes, GuestAddress(BASE_VIRT_QUEUE_ADDR))\n        .is_err()\n    {\n        return;\n    }\n    if mem.write_slice(mem_bytes, GuestAddress(0 as u64)).is_err() {\n        return;\n    }\n    let guest_memory = GuestMemoryAtomic::new(mem);\n    let input_queue = queues.remove(0);\n    let input_evt = EventFd::new(0).unwrap();\n    let input_queue_evt = unsafe { EventFd::from_raw_fd(libc::dup(input_evt.as_raw_fd())) };\n    let output_queue = queues.remove(0);\n    let output_evt = EventFd::new(0).unwrap();\n    let output_queue_evt = unsafe { EventFd::from_raw_fd(libc::dup(output_evt.as_raw_fd())) };\n    input_queue_evt.write(1).unwrap();\n    output_queue_evt.write(1).unwrap();\n    pipe_tx.write_all(console_input_bytes).unwrap();\n    console\n        .activate(\n            guest_memory,\n            Arc::new(NoopVirtioInterrupt {}),\n            vec![(0, input_queue, input_evt), (1, output_queue, output_evt)],\n        )\n        .unwrap();\n    console.wait_for_epoll_threads();\n}"}
{"test_id": "uutils-coreutils/uutils-coreutils-73b7c46/tests-gen/fuzz_parse_size.inputs.rs::test_63", "code": "pub fn parse_size(size: &str) -> Result<u64, ParseSizeError> {\n    Parser::default().parse(size)\n}", "test": "fn test_63() {\n    let data = [10, 10, 74, 44];\n    if let Ok(s) = std::str::from_utf8(data) {\n        _ = parse_size(s);\n    }\n}"}
{"test_id": "rustls-rustls/rustls-rustls-ae583bd/tests-gen/server.inputs.rs::test_11", "code": "pub fn process_new_packets(&mut self) -> Result<IoState, Error> {\n        match self {\n            Self::Client(conn) => conn.process_new_packets(),\n            Self::Server(conn) => conn.process_new_packets(),\n        }\n    }", "test": "fn test_11() {\n    let data = [\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 50, 15, 199, 10,\n        239, 16, 176, 28, 0, 45, 0, 2, 1, 1, 0, 35, 0, 0, 22, 3, 3, 0, 37, 16, 0, 0, 33, 32, 174,\n        238, 64, 160, 89, 49, 176, 161, 116, 71, 184, 117, 131, 29, 119, 30, 254, 193, 66, 215, 34,\n        226, 85, 150, 137, 157, 149, 108, 207, 252, 23, 86, 20, 3, 3, 0, 1, 1, 22, 3, 3, 0, 32, 95,\n        94, 179, 244, 73, 139, 102, 175, 65, 93, 186, 57, 105, 115, 213, 72, 207, 171, 68, 112,\n        247, 61, 197, 101, 209, 80, 21, 197, 16, 192, 38, 207, 23, 3, 3, 0, 97, 120, 117, 231, 50,\n        21, 63, 29, 51, 245, 52, 162, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    ];\n    let config = Arc::new(\n        ServerConfig::builder()\n            .with_safe_defaults()\n            .with_no_client_auth()\n            .with_cert_resolver(Arc::new(Fail)),\n    );\n    let mut server = ServerConnection::new(config).unwrap();\n    let _ = server.read_tls(&mut io::Cursor::new(data));\n    let _ = server.process_new_packets();\n}"}
{"test_id": "cloud-hypervisor-cloud-hypervisor/cloud-hypervisor-cloud-hypervisor-db3a5f3/tests-gen/cmos.inputs.rs::test_13", "code": "fn write(&mut self, _base: u64, offset: u64, data: &[u8]) -> Option<Arc<Barrier>> {\n        if data.len() != 1 {\n            warn!(\"Invalid write size on CMOS device: {}\", data.len());\n            return None;\n        }\n\n        match offset {\n            INDEX_OFFSET => self.index = data[0],\n            DATA_OFFSET => {\n                if self.index == 0x8f && data[0] == 0 {\n                    info!(\"CMOS reset\");\n                    self.reset_evt.write(1).unwrap();\n                    if let Some(vcpus_kill_signalled) = self.vcpus_kill_signalled.take() {\n                        // Spin until we are sure the reset_evt has been handled and that when\n                        // we return from the KVM_RUN we will exit rather than re-enter the guest.\n                        while !vcpus_kill_signalled.load(Ordering::SeqCst) {\n                            // This is more effective than thread::yield_now() at\n                            // avoiding a priority inversion with the VMM thread\n                            thread::sleep(std::time::Duration::from_millis(1));\n                        }\n                    }\n                } else {\n                    self.data[(self.index & INDEX_MASK) as usize] = data[0]\n                }\n            }\n            o => warn!(\"bad write offset on CMOS device: {}\", o),\n        };\n        None\n    }", "test": "fn test_13() {\n    let bytes = [3];\n    if bytes.len() < 16 {\n        return;\n    }\n    let mut below_4g = [0u8; 8];\n    let mut above_4g = [0u8; 8];\n    below_4g.copy_from_slice(&bytes[0..8]);\n    above_4g.copy_from_slice(&bytes[8..16]);\n    let mut cmos = Cmos::new(\n        u64::from_le_bytes(below_4g),\n        u64::from_le_bytes(above_4g),\n        EventFd::new(EFD_NONBLOCK).unwrap(),\n        None,\n    );\n    let mut i = 16;\n    while i < bytes.len() {\n        let read = bytes.get(i).unwrap_or(&0) % 2 == 0;\n        i += 1;\n        if read {\n            let offset = (bytes.get(i).unwrap_or(&0) % 2) as u64;\n            i += 1;\n            let mut out_bytes = vec![0];\n            cmos.read(0, offset, &mut out_bytes);\n        } else {\n            let offset = (bytes.get(i).unwrap_or(&0) % 2) as u64;\n            i += 1;\n            let data = vec![*bytes.get(i).unwrap_or(&0)];\n            i += 1;\n            cmos.write(0, offset, &data);\n        }\n    }\n}"}
{"test_id": "cloud-hypervisor-cloud-hypervisor/cloud-hypervisor-cloud-hypervisor-db3a5f3/tests-gen/pmem.inputs.rs::test_6", "code": "pub fn wait_for_epoll_threads(&mut self) {\n        self.common.wait_for_epoll_threads();\n    }", "test": "fn test_6() {\n    let bytes = [10, 255];\n    if bytes.len() < QUEUE_DATA_SIZE || bytes.len() > (QUEUE_DATA_SIZE + MEM_SIZE) {\n        return;\n    }\n    let mut pmem = create_dummy_pmem();\n    let queue_data = &bytes[..QUEUE_DATA_SIZE];\n    let mem_bytes = &bytes[QUEUE_DATA_SIZE..];\n    let q = setup_virt_queue(queue_data.try_into().unwrap());\n    let mem = GuestMemoryMmap::from_ranges(&[(GuestAddress(0), MEM_SIZE)]).unwrap();\n    if mem.write_slice(mem_bytes, GuestAddress(0 as u64)).is_err() {\n        return;\n    }\n    let guest_memory = GuestMemoryAtomic::new(mem);\n    let evt = EventFd::new(0).unwrap();\n    let queue_evt = unsafe { EventFd::from_raw_fd(libc::dup(evt.as_raw_fd())) };\n    queue_evt.write(1).unwrap();\n    pmem.activate(\n        guest_memory,\n        Arc::new(NoopVirtioInterrupt {}),\n        vec![(0, q, evt)],\n    )\n    .ok();\n    pmem.wait_for_epoll_threads();\n}"}
{"test_id": "cloud-hypervisor-cloud-hypervisor/cloud-hypervisor-cloud-hypervisor-db3a5f3/tests-gen/balloon.inputs.rs::test_16", "code": "pub fn wait_for_epoll_threads(&mut self) {\n        self.common.wait_for_epoll_threads();\n    }", "test": "fn test_16() {\n    let bytes = [8];\n    if bytes.len() < QUEUE_DATA_SIZE * QUEUE_NUM\n        || bytes.len() > (QUEUE_DATA_SIZE * QUEUE_NUM + MEM_SIZE)\n    {\n        return;\n    }\n    let mut balloon = virtio_devices::Balloon::new(\n        \"fuzzer_balloon\".to_owned(),\n        BALLOON_SIZE,\n        true,\n        true,\n        SeccompAction::Allow,\n        EventFd::new(EFD_NONBLOCK).unwrap(),\n        None,\n    )\n    .unwrap();\n    let queue_data = &bytes[..QUEUE_DATA_SIZE * QUEUE_NUM];\n    let mem_bytes = &bytes[QUEUE_DATA_SIZE * QUEUE_NUM..];\n    let mem = GuestMemoryMmap::from_ranges(&[(GuestAddress(0), MEM_SIZE)]).unwrap();\n    if mem.write_slice(mem_bytes, GuestAddress(0 as u64)).is_err() {\n        return;\n    }\n    let guest_memory = GuestMemoryAtomic::new(mem);\n    let mut queues = setup_virt_queues(\n        &[\n            &queue_data[..QUEUE_DATA_SIZE].try_into().unwrap(),\n            &queue_data[QUEUE_DATA_SIZE..QUEUE_DATA_SIZE * 2]\n                .try_into()\n                .unwrap(),\n            &queue_data[QUEUE_DATA_SIZE * 2..QUEUE_DATA_SIZE * 3]\n                .try_into()\n                .unwrap(),\n        ],\n        0,\n    );\n    let inflate_q = queues.remove(0);\n    let inflate_evt = EventFd::new(0).unwrap();\n    let inflate_queue_evt = unsafe { EventFd::from_raw_fd(libc::dup(inflate_evt.as_raw_fd())) };\n    let deflate_q = queues.remove(0);\n    let deflate_evt = EventFd::new(0).unwrap();\n    let deflate_queue_evt = unsafe { EventFd::from_raw_fd(libc::dup(deflate_evt.as_raw_fd())) };\n    let reporting_q = queues.remove(0);\n    let reporting_evt = EventFd::new(0).unwrap();\n    let reporting_queue_evt = unsafe { EventFd::from_raw_fd(libc::dup(reporting_evt.as_raw_fd())) };\n    inflate_queue_evt.write(1).unwrap();\n    deflate_queue_evt.write(1).unwrap();\n    reporting_queue_evt.write(1).unwrap();\n    balloon\n        .activate(\n            guest_memory,\n            Arc::new(NoopVirtioInterrupt {}),\n            vec![\n                (0, inflate_q, inflate_evt),\n                (1, deflate_q, deflate_evt),\n                (2, reporting_q, reporting_evt),\n            ],\n        )\n        .ok();\n    balloon.wait_for_epoll_threads();\n}"}
{"test_id": "dtolnay-semver/dtolnay-semver-750f0ac/tests-gen/sort_version.inputs.rs::test_78", "code": "fn three_versions(bytes: &[u8]) -> Option<[Version; 3]> {\n    let mut inputs = str::from_utf8(bytes).ok()?.split(' ');\n    Some([\n        Version {\n            major: 0,\n            minor: 0,\n            patch: 0,\n            pre: inputs.next().map(Prerelease::new)?.ok()?,\n            build: inputs.next().map(BuildMetadata::new)?.ok()?,\n        },\n        Version {\n            major: 0,\n            minor: 0,\n            patch: 0,\n            pre: inputs.next().map(Prerelease::new)?.ok()?,\n            build: inputs.next().map(BuildMetadata::new)?.ok()?,\n        },\n        Version {\n            major: 0,\n            minor: 0,\n            patch: 0,\n            pre: inputs.next().map(Prerelease::new)?.ok()?,\n            build: inputs.next().map(BuildMetadata::new)?.ok()?,\n        },\n    ])\n}", "test": "fn test_78() {\n    let bytes = [122];\n    if let Some([a, b, c]) = three_versions(bytes) {\n        if a < b && b < c && c < a {\n            panic!(\"{0} < {1} < {2} < {0}\", a, b, c);\n        }\n    }\n}"}
{"test_id": "rust-bio-rust-bio/rust-bio-rust-bio-319a0d8/tests-gen/myers_matching.inputs.rs::test_16", "code": "fn validate_alignment (aln : & Alignment , x : & [u8] , y : & [u8]) { let y = & y [aln . ystart .. aln . yend] ; let mut ix = 0 ; let mut iy = 0 ; let mut calc_dist = 0 ; for op in & aln . operations { match * op { Match => { assert ! (x [ix] == y [iy] , \"Match operation, but characters are not equal\") ; ix += 1 ; iy += 1 ; } Subst => { assert ! (x [ix] != y [iy] , \"Subst operation, but characters are equal\") ; calc_dist += 1 ; ix += 1 ; iy += 1 ; } Del => { calc_dist += 1 ; iy += 1 ; } Ins => { calc_dist += 1 ; ix += 1 ; } _ => unreachable ! () } } assert_eq ! (calc_dist , aln . score as usize) ; }", "test": "fn test_16() {\n    let data = [10, 149];\n    if data.len() < 3 {\n        return;\n    }\n    let (max_dist, data) = data.split_first().unwrap();\n    let (pattern_len, data) = data.split_first().unwrap();\n    let max_dist = min(64, *max_dist);\n    let pattern_len = max(1, min(64, min(data.len(), *pattern_len as usize)));\n    if data.iter().any(|&b| b < 65 || b > 122 || b > 90 && b < 97) {\n        return;\n    }\n    let (pattern, text) = data.split_at(pattern_len);\n    let max_dist = max_dist as u8;\n    let _ = MyersBuilder::new().build_64(pattern);\n    let _ = MyersBuilder::new().build_long_64(pattern);\n    let mut myers = Myers::<u64>::new(pattern);\n    let mut myers_long = long::Myers::<u8>::new(pattern);\n    let end_dist: Vec<_> = myers.find_all_end(text, max_dist).collect();\n    let end_dist_long: Vec<_> = myers_long\n        .find_all_end(text, max_dist as usize)\n        .map(|(end, dist)| (end, dist as u8))\n        .collect();\n    assert_eq!(end_dist, end_dist_long);\n    let mut aln = Alignment::default();\n    let mut aln_long = Alignment::default();\n    {\n        let mut matches = myers.find_all(text, max_dist);\n        let mut matches_long = myers_long.find_all(text, max_dist as usize);\n        matches.alignment(&mut aln);\n        matches_long.alignment(&mut aln_long);\n        let mut end_dist_iter = end_dist.iter();\n        while matches.next_alignment(&mut aln) {\n            assert!(matches_long.next_alignment(&mut aln_long));\n            assert_eq!(aln, aln_long);\n            validate_alignment(&aln, pattern, text);\n            assert!(aln.score as u8 <= max_dist);\n            let (end, dist) = end_dist_iter.next().unwrap();\n            assert_eq!(*end + 1, aln.yend);\n            assert_eq!(*dist, aln.score as u8);\n        }\n        assert!(end_dist_iter.next().is_none());\n        assert!(!matches_long.next_alignment(&mut aln_long));\n    }\n    {\n        let mut matches = myers.find_all_lazy(text, max_dist);\n        let mut matches_long = myers_long.find_all_lazy(text, max_dist as usize);\n        let mut end_dist_iter = end_dist.iter();\n        while let Some((end, dist)) = matches.next() {\n            let (end_long, dist_long) = matches_long.next().unwrap();\n            assert_eq!((end, dist), (end_long, dist_long as u8));\n            assert!(matches.alignment_at(end, &mut aln));\n            assert!(matches_long.alignment_at(end, &mut aln_long));\n            assert_eq!(aln, aln_long);\n            validate_alignment(&aln, pattern, text);\n            assert_eq!(dist, aln.score as u8);\n            assert!(aln.score as u8 <= max_dist);\n            let (end, dist) = end_dist_iter.next().unwrap();\n            assert_eq!(*end + 1, aln.yend);\n            assert_eq!(*dist, aln.score as u8);\n            assert!(!matches.alignment_at(end + 1, &mut aln));\n        }\n        assert!(end_dist_iter.next().is_none());\n    }\n    let mut matches = myers.find_all_lazy(text, u8::max_value());\n    let mut matches_long = myers_long.find_all_lazy(text, u8::max_value() as usize);\n    let mut i = 0;\n    while let Some((end, dist)) = matches.next() {\n        assert_eq!(end, i);\n        let (end_long, dist_long) = matches_long.next().unwrap();\n        assert_eq!((end, dist), (end_long, dist_long as u8));\n        assert!(matches.alignment_at(end, &mut aln));\n        assert!(matches_long.alignment_at(end, &mut aln_long));\n        assert_eq!(aln, aln_long);\n        validate_alignment(&aln, pattern, text);\n        assert_eq!(dist, aln.score as u8);\n        assert!(aln.score as u8 <= u8::max_value());\n        assert!(!matches.alignment_at(end + 1, &mut aln));\n        assert!(!matches_long.alignment_at(end + 1, &mut aln_long));\n        i += 1;\n    }\n}"}
{"test_id": "marshallpierce-rust-base64/marshallpierce-rust-base64-4ef33cc/tests-gen/decode_random.inputs.rs::test_24", "code": "fn decode<T: AsRef<[u8]>>(&self, input: T) -> Result<Vec<u8>, DecodeError> {\n        fn inner<E>(engine: &E, input_bytes: &[u8]) -> Result<Vec<u8>, DecodeError>\n        where\n            E: Engine + ?Sized,\n        {\n            let estimate = engine.internal_decoded_len_estimate(input_bytes.len());\n            let mut buffer = vec![0; estimate.decoded_len_estimate()];\n\n            let bytes_written = engine\n                .internal_decode(input_bytes, &mut buffer, estimate)?\n                .decoded_len;\n\n            buffer.truncate(bytes_written);\n\n            Ok(buffer)\n        }\n\n        inner(self, input.as_ref())\n    }", "test": "fn test_24() {\n    let data = [1];\n    let engine = utils::random_engine(data);\n    let _ = engine.decode(data);\n}"}
{"test_id": "cloud-hypervisor-cloud-hypervisor/cloud-hypervisor-cloud-hypervisor-db3a5f3/tests-gen/cmos.inputs.rs::test_50", "code": "fn write(&mut self, _base: u64, offset: u64, data: &[u8]) -> Option<Arc<Barrier>> {\n        if data.len() != 1 {\n            warn!(\"Invalid write size on CMOS device: {}\", data.len());\n            return None;\n        }\n\n        match offset {\n            INDEX_OFFSET => self.index = data[0],\n            DATA_OFFSET => {\n                if self.index == 0x8f && data[0] == 0 {\n                    info!(\"CMOS reset\");\n                    self.reset_evt.write(1).unwrap();\n                    if let Some(vcpus_kill_signalled) = self.vcpus_kill_signalled.take() {\n                        // Spin until we are sure the reset_evt has been handled and that when\n                        // we return from the KVM_RUN we will exit rather than re-enter the guest.\n                        while !vcpus_kill_signalled.load(Ordering::SeqCst) {\n                            // This is more effective than thread::yield_now() at\n                            // avoiding a priority inversion with the VMM thread\n                            thread::sleep(std::time::Duration::from_millis(1));\n                        }\n                    }\n                } else {\n                    self.data[(self.index & INDEX_MASK) as usize] = data[0]\n                }\n            }\n            o => warn!(\"bad write offset on CMOS device: {}\", o),\n        };\n        None\n    }", "test": "fn test_50() {\n    let bytes = [10];\n    if bytes.len() < 16 {\n        return;\n    }\n    let mut below_4g = [0u8; 8];\n    let mut above_4g = [0u8; 8];\n    below_4g.copy_from_slice(&bytes[0..8]);\n    above_4g.copy_from_slice(&bytes[8..16]);\n    let mut cmos = Cmos::new(\n        u64::from_le_bytes(below_4g),\n        u64::from_le_bytes(above_4g),\n        EventFd::new(EFD_NONBLOCK).unwrap(),\n        None,\n    );\n    let mut i = 16;\n    while i < bytes.len() {\n        let read = bytes.get(i).unwrap_or(&0) % 2 == 0;\n        i += 1;\n        if read {\n            let offset = (bytes.get(i).unwrap_or(&0) % 2) as u64;\n            i += 1;\n            let mut out_bytes = vec![0];\n            cmos.read(0, offset, &mut out_bytes);\n        } else {\n            let offset = (bytes.get(i).unwrap_or(&0) % 2) as u64;\n            i += 1;\n            let data = vec![*bytes.get(i).unwrap_or(&0)];\n            i += 1;\n            cmos.write(0, offset, &data);\n        }\n    }\n}"}
{"test_id": "cloud-hypervisor-cloud-hypervisor/cloud-hypervisor-cloud-hypervisor-db3a5f3/tests-gen/mem.inputs.rs::test_58", "code": "pub fn wait_for_epoll_threads(&mut self) {\n        self.common.wait_for_epoll_threads();\n    }", "test": "fn test_58() {\n    let bytes = [2, 2];\n    if bytes.len() < VIRTIO_MEM_DATA_SIZE + QUEUE_DATA_SIZE + QUEUE_BYTES_SIZE\n        || bytes.len() > (VIRTIO_MEM_DATA_SIZE + QUEUE_DATA_SIZE + QUEUE_BYTES_SIZE + MEM_SIZE)\n    {\n        return;\n    }\n    let virtio_mem_data = &bytes[..VIRTIO_MEM_DATA_SIZE];\n    let queue_data = &bytes[VIRTIO_MEM_DATA_SIZE..VIRTIO_MEM_DATA_SIZE + QUEUE_DATA_SIZE];\n    let queue_bytes = &bytes[VIRTIO_MEM_DATA_SIZE + QUEUE_DATA_SIZE\n        ..VIRTIO_MEM_DATA_SIZE + QUEUE_DATA_SIZE + QUEUE_BYTES_SIZE];\n    let mem_bytes = &bytes[VIRTIO_MEM_DATA_SIZE + QUEUE_DATA_SIZE + QUEUE_BYTES_SIZE..];\n    let (mut virtio_mem, virtio_mem_region) =\n        create_dummy_virtio_mem(virtio_mem_data.try_into().unwrap());\n    let q = setup_virt_queue(queue_data.try_into().unwrap());\n    let mem =\n        GuestMemoryMmap::from_ranges(&[(GuestAddress(DESC_TABLE_ADDR), QUEUE_BYTES_SIZE)]).unwrap();\n    if mem\n        .write_slice(queue_bytes, GuestAddress(DESC_TABLE_ADDR))\n        .is_err()\n    {\n        return;\n    }\n    let mem = mem.insert_region(virtio_mem_region).unwrap();\n    if mem\n        .write_slice(mem_bytes, GuestAddress(VIRTIO_MEM_REGION_ADDRESS))\n        .is_err()\n    {\n        return;\n    }\n    let guest_memory = GuestMemoryAtomic::new(mem);\n    let evt = EventFd::new(0).unwrap();\n    let queue_evt = unsafe { EventFd::from_raw_fd(libc::dup(evt.as_raw_fd())) };\n    queue_evt.write(1).unwrap();\n    virtio_mem\n        .activate(\n            guest_memory,\n            Arc::new(NoopVirtioInterrupt {}),\n            vec![(0, q, evt)],\n        )\n        .ok();\n    virtio_mem.wait_for_epoll_threads();\n}"}
{"test_id": "dtolnay-syn/dtolnay-syn-b1a038c/tests-gen/create_token_buffer.inputs.rs::test_64", "code": "fn parse_str(self, s: &str) -> Result<Self::Output> {\n        self.parse2(proc_macro2::TokenStream::from_str(s)?)\n    }", "test": "fn test_64() {\n    let data = [74, 0, 1];\n    if data.len() < 300 {\n        if let Ok(string) = str::from_utf8(data) {\n            let _ = immediate_fail.parse_str(string);\n        }\n    }\n}"}
{"test_id": "rust-bio-rust-bio/rust-bio-rust-bio-319a0d8/tests-gen/myers_matching.inputs.rs::test_26", "code": "fn validate_alignment (aln : & Alignment , x : & [u8] , y : & [u8]) { let y = & y [aln . ystart .. aln . yend] ; let mut ix = 0 ; let mut iy = 0 ; let mut calc_dist = 0 ; for op in & aln . operations { match * op { Match => { assert ! (x [ix] == y [iy] , \"Match operation, but characters are not equal\") ; ix += 1 ; iy += 1 ; } Subst => { assert ! (x [ix] != y [iy] , \"Subst operation, but characters are equal\") ; calc_dist += 1 ; ix += 1 ; iy += 1 ; } Del => { calc_dist += 1 ; iy += 1 ; } Ins => { calc_dist += 1 ; ix += 1 ; } _ => unreachable ! () } } assert_eq ! (calc_dist , aln . score as usize) ; }", "test": "fn test_26() {\n    let data = [47, 10];\n    if data.len() < 3 {\n        return;\n    }\n    let (max_dist, data) = data.split_first().unwrap();\n    let (pattern_len, data) = data.split_first().unwrap();\n    let max_dist = min(64, *max_dist);\n    let pattern_len = max(1, min(64, min(data.len(), *pattern_len as usize)));\n    if data.iter().any(|&b| b < 65 || b > 122 || b > 90 && b < 97) {\n        return;\n    }\n    let (pattern, text) = data.split_at(pattern_len);\n    let max_dist = max_dist as u8;\n    let _ = MyersBuilder::new().build_64(pattern);\n    let _ = MyersBuilder::new().build_long_64(pattern);\n    let mut myers = Myers::<u64>::new(pattern);\n    let mut myers_long = long::Myers::<u8>::new(pattern);\n    let end_dist: Vec<_> = myers.find_all_end(text, max_dist).collect();\n    let end_dist_long: Vec<_> = myers_long\n        .find_all_end(text, max_dist as usize)\n        .map(|(end, dist)| (end, dist as u8))\n        .collect();\n    assert_eq!(end_dist, end_dist_long);\n    let mut aln = Alignment::default();\n    let mut aln_long = Alignment::default();\n    {\n        let mut matches = myers.find_all(text, max_dist);\n        let mut matches_long = myers_long.find_all(text, max_dist as usize);\n        matches.alignment(&mut aln);\n        matches_long.alignment(&mut aln_long);\n        let mut end_dist_iter = end_dist.iter();\n        while matches.next_alignment(&mut aln) {\n            assert!(matches_long.next_alignment(&mut aln_long));\n            assert_eq!(aln, aln_long);\n            validate_alignment(&aln, pattern, text);\n            assert!(aln.score as u8 <= max_dist);\n            let (end, dist) = end_dist_iter.next().unwrap();\n            assert_eq!(*end + 1, aln.yend);\n            assert_eq!(*dist, aln.score as u8);\n        }\n        assert!(end_dist_iter.next().is_none());\n        assert!(!matches_long.next_alignment(&mut aln_long));\n    }\n    {\n        let mut matches = myers.find_all_lazy(text, max_dist);\n        let mut matches_long = myers_long.find_all_lazy(text, max_dist as usize);\n        let mut end_dist_iter = end_dist.iter();\n        while let Some((end, dist)) = matches.next() {\n            let (end_long, dist_long) = matches_long.next().unwrap();\n            assert_eq!((end, dist), (end_long, dist_long as u8));\n            assert!(matches.alignment_at(end, &mut aln));\n            assert!(matches_long.alignment_at(end, &mut aln_long));\n            assert_eq!(aln, aln_long);\n            validate_alignment(&aln, pattern, text);\n            assert_eq!(dist, aln.score as u8);\n            assert!(aln.score as u8 <= max_dist);\n            let (end, dist) = end_dist_iter.next().unwrap();\n            assert_eq!(*end + 1, aln.yend);\n            assert_eq!(*dist, aln.score as u8);\n            assert!(!matches.alignment_at(end + 1, &mut aln));\n        }\n        assert!(end_dist_iter.next().is_none());\n    }\n    let mut matches = myers.find_all_lazy(text, u8::max_value());\n    let mut matches_long = myers_long.find_all_lazy(text, u8::max_value() as usize);\n    let mut i = 0;\n    while let Some((end, dist)) = matches.next() {\n        assert_eq!(end, i);\n        let (end_long, dist_long) = matches_long.next().unwrap();\n        assert_eq!((end, dist), (end_long, dist_long as u8));\n        assert!(matches.alignment_at(end, &mut aln));\n        assert!(matches_long.alignment_at(end, &mut aln_long));\n        assert_eq!(aln, aln_long);\n        validate_alignment(&aln, pattern, text);\n        assert_eq!(dist, aln.score as u8);\n        assert!(aln.score as u8 <= u8::max_value());\n        assert!(!matches.alignment_at(end + 1, &mut aln));\n        assert!(!matches_long.alignment_at(end + 1, &mut aln_long));\n        i += 1;\n    }\n}"}
{"test_id": "rust-bakery-nom/rust-bakery-nom-869f897/tests-gen/fuzz_arithmetic.inputs.rs::test_62", "code": "fn factor(i: &str) -> IResult<&str, Expr> {\n  alt((\n    map(\n      map_res(delimited(multispace, digit, multispace), FromStr::from_str),\n      Expr::Value,\n    ),\n    parens,\n  ))(i)\n}", "test": "fn test_62() {\n  let data = [10, 10, 178, 178];\n  reset();\n  let temp = match str::from_utf8(data) {\n    Ok(v) => factor(v),\n    Err(e) => factor(\"2\"),\n  };\n}"}
{"test_id": "rustls-rustls/rustls-rustls-ae583bd/tests-gen/message.inputs.rs::test_97", "code": "pub fn used(&self) -> usize {\n        self.cursor\n    }", "test": "fn test_97() {\n    let data = [\n        21, 3, 3, 0, 26, 78, 234, 68, 29, 17, 156, 135, 220, 113, 75, 223, 203, 151, 243, 255, 167,\n        127, 4, 101, 100, 240, 80, 47, 86, 162, 250,\n    ];\n    let mut rdr = Reader::init(data);\n    if let Ok(m) = OpaqueMessage::read(&mut rdr) {\n        let msg = match Message::try_from(m.into_plain_message()) {\n            Ok(msg) => msg,\n            Err(_) => return,\n        };\n        let enc = PlainMessage::from(msg)\n            .into_unencrypted_opaque()\n            .encode();\n        assert_eq!(enc, data[..rdr.used()]);\n    }\n}"}
{"test_id": "dtolnay-semver/dtolnay-semver-750f0ac/tests-gen/sort_version.inputs.rs::test_99", "code": "fn three_versions(bytes: &[u8]) -> Option<[Version; 3]> {\n    let mut inputs = str::from_utf8(bytes).ok()?.split(' ');\n    Some([\n        Version {\n            major: 0,\n            minor: 0,\n            patch: 0,\n            pre: inputs.next().map(Prerelease::new)?.ok()?,\n            build: inputs.next().map(BuildMetadata::new)?.ok()?,\n        },\n        Version {\n            major: 0,\n            minor: 0,\n            patch: 0,\n            pre: inputs.next().map(Prerelease::new)?.ok()?,\n            build: inputs.next().map(BuildMetadata::new)?.ok()?,\n        },\n        Version {\n            major: 0,\n            minor: 0,\n            patch: 0,\n            pre: inputs.next().map(Prerelease::new)?.ok()?,\n            build: inputs.next().map(BuildMetadata::new)?.ok()?,\n        },\n    ])\n}", "test": "fn test_99() {\n    let bytes = [96, 16];\n    if let Some([a, b, c]) = three_versions(bytes) {\n        if a < b && b < c && c < a {\n            panic!(\"{0} < {1} < {2} < {0}\", a, b, c);\n        }\n    }\n}"}
{"test_id": "BurntSushi-memchr/BurntSushi-memchr-f3fde7a/tests-gen/memrchr2.inputs.rs::test_90", "code": "fn count(self) -> usize {\n        self.it.count(|s, e| {\n            // SAFETY: We rely on our generic iterator to return valid start\n            // and end pointers.\n            unsafe { count_raw(self.needle1, s, e) }\n        })\n    }", "test": "fn test_90() {\n    let data = [2, 38, 177];\n    if data.len() < 2 {\n        return;\n    }\n    memchr2_iter(data[0], data[1], &data[2..]).rev().count();\n}"}
{"test_id": "cloud-hypervisor-cloud-hypervisor/cloud-hypervisor-cloud-hypervisor-db3a5f3/tests-gen/pmem.inputs.rs::test_4", "code": "pub fn wait_for_epoll_threads(&mut self) {\n        self.common.wait_for_epoll_threads();\n    }", "test": "fn test_4() {\n    let bytes = [8, 8];\n    if bytes.len() < QUEUE_DATA_SIZE || bytes.len() > (QUEUE_DATA_SIZE + MEM_SIZE) {\n        return;\n    }\n    let mut pmem = create_dummy_pmem();\n    let queue_data = &bytes[..QUEUE_DATA_SIZE];\n    let mem_bytes = &bytes[QUEUE_DATA_SIZE..];\n    let q = setup_virt_queue(queue_data.try_into().unwrap());\n    let mem = GuestMemoryMmap::from_ranges(&[(GuestAddress(0), MEM_SIZE)]).unwrap();\n    if mem.write_slice(mem_bytes, GuestAddress(0 as u64)).is_err() {\n        return;\n    }\n    let guest_memory = GuestMemoryAtomic::new(mem);\n    let evt = EventFd::new(0).unwrap();\n    let queue_evt = unsafe { EventFd::from_raw_fd(libc::dup(evt.as_raw_fd())) };\n    queue_evt.write(1).unwrap();\n    pmem.activate(\n        guest_memory,\n        Arc::new(NoopVirtioInterrupt {}),\n        vec![(0, q, evt)],\n    )\n    .ok();\n    pmem.wait_for_epoll_threads();\n}"}
{"test_id": "cloud-hypervisor-cloud-hypervisor/cloud-hypervisor-cloud-hypervisor-db3a5f3/tests-gen/block.inputs.rs::test_79", "code": "pub fn wait_for_epoll_threads(&mut self) {\n        self.common.wait_for_epoll_threads();\n    }", "test": "fn test_79() {\n    let bytes = [10];\n    if bytes.len() < QUEUE_DATA_SIZE || bytes.len() > (QUEUE_DATA_SIZE + MEM_SIZE) {\n        return;\n    }\n    let queue_data = &bytes[..QUEUE_DATA_SIZE];\n    let mem_bytes = &bytes[QUEUE_DATA_SIZE..];\n    let shm = memfd_create(&ffi::CString::new(\"fuzz\").unwrap(), 0).unwrap();\n    let disk_file: File = unsafe { File::from_raw_fd(shm) };\n    let qcow_disk = Box::new(RawFileDiskSync::new(disk_file)) as Box<dyn DiskFile>;\n    let mut block = Block::new(\n        \"tmp\".to_owned(),\n        qcow_disk,\n        PathBuf::from(\"\"),\n        false,\n        false,\n        2,\n        256,\n        None,\n        SeccompAction::Allow,\n        None,\n        EventFd::new(EFD_NONBLOCK).unwrap(),\n        None,\n    )\n    .unwrap();\n    let q = setup_virt_queue(queue_data.try_into().unwrap());\n    let mem = GuestMemoryMmap::from_ranges(&[(GuestAddress(0), MEM_SIZE)]).unwrap();\n    if mem.write_slice(mem_bytes, GuestAddress(0 as u64)).is_err() {\n        return;\n    }\n    let guest_memory = GuestMemoryAtomic::new(mem);\n    let evt = EventFd::new(0).unwrap();\n    let queue_evt = unsafe { EventFd::from_raw_fd(libc::dup(evt.as_raw_fd())) };\n    queue_evt.write(1).unwrap();\n    block\n        .activate(\n            guest_memory,\n            Arc::new(NoopVirtioInterrupt {}),\n            vec![(0, q, evt)],\n        )\n        .ok();\n    block.wait_for_epoll_threads();\n}"}
{"test_id": "bodil-im-rs/bodil-im-rs-2afaf54/tests-gen/ordset.inputs.rs::test_41", "code": "pub fn remove<BA>(&mut self, a: &BA) -> Option<A>\n    where\n        BA: Hash + Eq + ?Sized,\n        A: Borrow<BA>,\n    {\n        let root = PoolRef::make_mut(&self.pool.0, &mut self.root);\n        let result = root.remove(&self.pool.0, hash_key(&*self.hasher, a), 0, a);\n        if result.is_some() {\n            self.size -= 1;\n        }\n        result.map(|v| v.0)\n    }", "test": "fn test_41() {\n    let actions = [Remove(72056538415497215)];\n    let mut set = OrdSet::new();\n    let mut nat = NatSet::new();\n    for action in actions {\n        match action {\n            Action::Insert(value) => {\n                let len = nat.len() + if nat.contains(&value) { 0 } else { 1 };\n                nat.insert(value);\n                set.insert(value);\n                assert_eq!(len, set.len());\n            }\n            Action::Remove(value) => {\n                let len = nat.len() - if nat.contains(&value) { 1 } else { 0 };\n                nat.remove(&value);\n                set.remove(&value);\n                assert_eq!(len, set.len());\n            }\n        }\n        assert_eq!(nat.len(), set.len());\n        assert_eq!(OrdSet::from(nat.clone()), set);\n    }\n}"}
{"test_id": "quinn-rs-quinn/quinn-rs-quinn-83e4f46/tests-gen/packet.inputs.rs::test_48", "code": "fn to_vec(params: &TransportParameters) -> Vec<u8> {\n    let mut bytes = Vec::new();\n    params.write(&mut bytes);\n    bytes\n}", "test": "fn test_48() {\n    let data = PacketParams {\n        local_cid_len: 2,\n        buf: b\"\",\n        grease_quic_bit: false,\n    };\n    let len = data.buf.len();\n    let supported_versions = DEFAULT_SUPPORTED_VERSIONS.to_vec();\n    if let Ok(decoded) = PartialDecode::new(\n        data.buf,\n        data.local_cid_len,\n        &supported_versions,\n        data.grease_quic_bit,\n    ) {\n        match decoded.1 {\n            Some(x) => assert_eq!(len, decoded.0.len() + x.len()),\n            None => assert_eq!(len, decoded.0.len()),\n        }\n    }\n}"}
{"test_id": "cloud-hypervisor-cloud-hypervisor/cloud-hypervisor-cloud-hypervisor-db3a5f3/tests-gen/iommu.inputs.rs::test_90", "code": "pub fn wait_for_epoll_threads(&mut self) {\n        self.common.wait_for_epoll_threads();\n    }", "test": "fn test_90() {\n    let bytes = [20];\n    if bytes.len() < (QUEUE_DATA_SIZE + QUEUE_BYTES_SIZE)\n        || bytes.len() > (QUEUE_DATA_SIZE + QUEUE_BYTES_SIZE + MEM_SIZE)\n    {\n        return;\n    }\n    let (mut iommu, _) = virtio_devices::Iommu::new(\n        \"fuzzer_iommu\".to_owned(),\n        SeccompAction::Allow,\n        EventFd::new(EFD_NONBLOCK).unwrap(),\n        ((MEM_SIZE - IOVA_SPACE_SIZE) as u64, (MEM_SIZE - 1) as u64),\n        None,\n    )\n    .unwrap();\n    let queue_data = &bytes[..QUEUE_DATA_SIZE];\n    let queue_bytes = &bytes[QUEUE_DATA_SIZE..QUEUE_DATA_SIZE + QUEUE_BYTES_SIZE];\n    let mem_bytes = &bytes[QUEUE_DATA_SIZE + QUEUE_BYTES_SIZE..];\n    let request_queue = setup_virt_queue(queue_data.try_into().unwrap());\n    let _event_queue = setup_virt_queue(queue_data.try_into().unwrap());\n    let mem = GuestMemoryMmap::from_ranges(&[\n        (GuestAddress(0), MEM_SIZE),\n        (GuestAddress(DESC_TABLE_ADDR), QUEUE_BYTES_SIZE),\n    ])\n    .unwrap();\n    if mem\n        .write_slice(queue_bytes, GuestAddress(DESC_TABLE_ADDR))\n        .is_err()\n    {\n        return;\n    }\n    if mem.write_slice(mem_bytes, GuestAddress(0 as u64)).is_err() {\n        return;\n    }\n    let guest_memory = GuestMemoryAtomic::new(mem);\n    let request_evt = EventFd::new(0).unwrap();\n    let request_queue_evt = unsafe { EventFd::from_raw_fd(libc::dup(request_evt.as_raw_fd())) };\n    let _event_evt = EventFd::new(0).unwrap();\n    request_queue_evt.write(1).unwrap();\n    iommu\n        .activate(\n            guest_memory,\n            Arc::new(NoopVirtioInterrupt {}),\n            vec![\n                (0, request_queue, request_evt),\n                (0, _event_queue, _event_evt),\n            ],\n        )\n        .ok();\n    iommu.wait_for_epoll_threads();\n}"}
{"test_id": "BurntSushi-memchr/BurntSushi-memchr-f3fde7a/tests-gen/memchr.inputs.rs::test_63", "code": "fn count(self) -> usize {\n        self.it.count(|s, e| {\n            // SAFETY: We rely on our generic iterator to return valid start\n            // and end pointers.\n            unsafe { count_raw(self.needle1, s, e) }\n        })\n    }", "test": "fn test_63() {\n    let data = [48, 0, 16, 220];\n    if data.is_empty() {\n        return;\n    }\n    memchr_iter(data[0], &data[1..]).count();\n}"}
{"test_id": "cloud-hypervisor-cloud-hypervisor/cloud-hypervisor-cloud-hypervisor-db3a5f3/tests-gen/mem.inputs.rs::test_85", "code": "pub fn wait_for_epoll_threads(&mut self) {\n        self.common.wait_for_epoll_threads();\n    }", "test": "fn test_85() {\n    let bytes = [49, 10, 54, 10];\n    if bytes.len() < VIRTIO_MEM_DATA_SIZE + QUEUE_DATA_SIZE + QUEUE_BYTES_SIZE\n        || bytes.len() > (VIRTIO_MEM_DATA_SIZE + QUEUE_DATA_SIZE + QUEUE_BYTES_SIZE + MEM_SIZE)\n    {\n        return;\n    }\n    let virtio_mem_data = &bytes[..VIRTIO_MEM_DATA_SIZE];\n    let queue_data = &bytes[VIRTIO_MEM_DATA_SIZE..VIRTIO_MEM_DATA_SIZE + QUEUE_DATA_SIZE];\n    let queue_bytes = &bytes[VIRTIO_MEM_DATA_SIZE + QUEUE_DATA_SIZE\n        ..VIRTIO_MEM_DATA_SIZE + QUEUE_DATA_SIZE + QUEUE_BYTES_SIZE];\n    let mem_bytes = &bytes[VIRTIO_MEM_DATA_SIZE + QUEUE_DATA_SIZE + QUEUE_BYTES_SIZE..];\n    let (mut virtio_mem, virtio_mem_region) =\n        create_dummy_virtio_mem(virtio_mem_data.try_into().unwrap());\n    let q = setup_virt_queue(queue_data.try_into().unwrap());\n    let mem =\n        GuestMemoryMmap::from_ranges(&[(GuestAddress(DESC_TABLE_ADDR), QUEUE_BYTES_SIZE)]).unwrap();\n    if mem\n        .write_slice(queue_bytes, GuestAddress(DESC_TABLE_ADDR))\n        .is_err()\n    {\n        return;\n    }\n    let mem = mem.insert_region(virtio_mem_region).unwrap();\n    if mem\n        .write_slice(mem_bytes, GuestAddress(VIRTIO_MEM_REGION_ADDRESS))\n        .is_err()\n    {\n        return;\n    }\n    let guest_memory = GuestMemoryAtomic::new(mem);\n    let evt = EventFd::new(0).unwrap();\n    let queue_evt = unsafe { EventFd::from_raw_fd(libc::dup(evt.as_raw_fd())) };\n    queue_evt.write(1).unwrap();\n    virtio_mem\n        .activate(\n            guest_memory,\n            Arc::new(NoopVirtioInterrupt {}),\n            vec![(0, q, evt)],\n        )\n        .ok();\n    virtio_mem.wait_for_epoll_threads();\n}"}
{"test_id": "cloud-hypervisor-cloud-hypervisor/cloud-hypervisor-cloud-hypervisor-db3a5f3/tests-gen/balloon.inputs.rs::test_79", "code": "pub fn wait_for_epoll_threads(&mut self) {\n        self.common.wait_for_epoll_threads();\n    }", "test": "fn test_79() {\n    let bytes = [11, 72, 11, 240];\n    if bytes.len() < QUEUE_DATA_SIZE * QUEUE_NUM\n        || bytes.len() > (QUEUE_DATA_SIZE * QUEUE_NUM + MEM_SIZE)\n    {\n        return;\n    }\n    let mut balloon = virtio_devices::Balloon::new(\n        \"fuzzer_balloon\".to_owned(),\n        BALLOON_SIZE,\n        true,\n        true,\n        SeccompAction::Allow,\n        EventFd::new(EFD_NONBLOCK).unwrap(),\n        None,\n    )\n    .unwrap();\n    let queue_data = &bytes[..QUEUE_DATA_SIZE * QUEUE_NUM];\n    let mem_bytes = &bytes[QUEUE_DATA_SIZE * QUEUE_NUM..];\n    let mem = GuestMemoryMmap::from_ranges(&[(GuestAddress(0), MEM_SIZE)]).unwrap();\n    if mem.write_slice(mem_bytes, GuestAddress(0 as u64)).is_err() {\n        return;\n    }\n    let guest_memory = GuestMemoryAtomic::new(mem);\n    let mut queues = setup_virt_queues(\n        &[\n            &queue_data[..QUEUE_DATA_SIZE].try_into().unwrap(),\n            &queue_data[QUEUE_DATA_SIZE..QUEUE_DATA_SIZE * 2]\n                .try_into()\n                .unwrap(),\n            &queue_data[QUEUE_DATA_SIZE * 2..QUEUE_DATA_SIZE * 3]\n                .try_into()\n                .unwrap(),\n        ],\n        0,\n    );\n    let inflate_q = queues.remove(0);\n    let inflate_evt = EventFd::new(0).unwrap();\n    let inflate_queue_evt = unsafe { EventFd::from_raw_fd(libc::dup(inflate_evt.as_raw_fd())) };\n    let deflate_q = queues.remove(0);\n    let deflate_evt = EventFd::new(0).unwrap();\n    let deflate_queue_evt = unsafe { EventFd::from_raw_fd(libc::dup(deflate_evt.as_raw_fd())) };\n    let reporting_q = queues.remove(0);\n    let reporting_evt = EventFd::new(0).unwrap();\n    let reporting_queue_evt = unsafe { EventFd::from_raw_fd(libc::dup(reporting_evt.as_raw_fd())) };\n    inflate_queue_evt.write(1).unwrap();\n    deflate_queue_evt.write(1).unwrap();\n    reporting_queue_evt.write(1).unwrap();\n    balloon\n        .activate(\n            guest_memory,\n            Arc::new(NoopVirtioInterrupt {}),\n            vec![\n                (0, inflate_q, inflate_evt),\n                (1, deflate_q, deflate_evt),\n                (2, reporting_q, reporting_evt),\n            ],\n        )\n        .ok();\n    balloon.wait_for_epoll_threads();\n}"}
{"test_id": "quinn-rs-quinn/quinn-rs-quinn-83e4f46/tests-gen/streamid.inputs.rs::test_52", "code": "pub fn initiator(self) -> Side {\n        if self.0 & 0x1 == 0 {\n            Side::Client\n        } else {\n            Side::Server\n        }\n    }", "test": "fn test_52() {\n    let data = StreamIdParams {\n        side: Server,\n        dir: Uni,\n        index: 12514850012656414125,\n    };\n    let s = StreamId::new(data.side, data.dir, data.index);\n    assert_eq!(s.initiator(), data.side);\n    assert_eq!(s.dir(), data.dir);\n}"}
{"test_id": "dtolnay-syn/dtolnay-syn-b1a038c/tests-gen/create_token_buffer.inputs.rs::test_24", "code": "fn parse_str(self, s: &str) -> Result<Self::Output> {\n        self.parse2(proc_macro2::TokenStream::from_str(s)?)\n    }", "test": "fn test_24() {\n    let data = [129];\n    if data.len() < 300 {\n        if let Ok(string) = str::from_utf8(data) {\n            let _ = immediate_fail.parse_str(string);\n        }\n    }\n}"}
{"test_id": "gimli-rs-gimli/gimli-rs-gimli-3947879/tests-gen/debug_line.inputs.rs::test_8", "code": "pub fn next_row(&mut self) -> Result<Option<(&LineProgramHeader<R, Offset>, &LineRow)>> {\n        // Perform any reset that was required after copying the previous row.\n        self.row.reset(self.program.header());\n\n        loop {\n            // Split the borrow here, rather than calling `self.header()`.\n            match self.instructions.next_instruction(self.program.header()) {\n                Err(err) => return Err(err),\n                Ok(None) => return Ok(None),\n                Ok(Some(instruction)) => {\n                    if self.row.execute(instruction, &mut self.program) {\n                        if self.row.tombstone {\n                            // Perform any reset that was required for the tombstone row.\n                            // Normally this is done when `next_row` is called again, but for\n                            // tombstones we loop immediately.\n                            self.row.reset(self.program.header());\n                        } else {\n                            return Ok(Some((self.header(), &self.row)));\n                        }\n                    }\n                    // Fall through, parse the next instruction, and see if that\n                    // yields a row.\n                }\n            }\n        }\n    }", "test": "fn test_8() {\n    let debug_line = [91, 26];\n    let debug_line = DebugLine::new(&debug_line, LittleEndian);\n    let offset = DebugLineOffset(0);\n    let address_size = 8;\n    if let Ok(program) = debug_line.program(offset, address_size, None, None) {\n        let mut rows = program.rows();\n        while let Ok(Some(row)) = rows.next_row() {\n            let _ = row;\n        }\n    }\n}"}
{"test_id": "bodil-im-rs/bodil-im-rs-2afaf54/tests-gen/ordset.inputs.rs::test_28", "code": "pub fn remove<BA>(&mut self, a: &BA) -> Option<A>\n    where\n        BA: Hash + Eq + ?Sized,\n        A: Borrow<BA>,\n    {\n        let root = PoolRef::make_mut(&self.pool.0, &mut self.root);\n        let result = root.remove(&self.pool.0, hash_key(&*self.hasher, a), 0, a);\n        if result.is_some() {\n            self.size -= 1;\n        }\n        result.map(|v| v.0)\n    }", "test": "fn test_28() {\n    let actions = [Insert(720575940379279360)];\n    let mut set = OrdSet::new();\n    let mut nat = NatSet::new();\n    for action in actions {\n        match action {\n            Action::Insert(value) => {\n                let len = nat.len() + if nat.contains(&value) { 0 } else { 1 };\n                nat.insert(value);\n                set.insert(value);\n                assert_eq!(len, set.len());\n            }\n            Action::Remove(value) => {\n                let len = nat.len() - if nat.contains(&value) { 1 } else { 0 };\n                nat.remove(&value);\n                set.remove(&value);\n                assert_eq!(len, set.len());\n            }\n        }\n        assert_eq!(nat.len(), set.len());\n        assert_eq!(OrdSet::from(nat.clone()), set);\n    }\n}"}
{"test_id": "BurntSushi-memchr/BurntSushi-memchr-f3fde7a/tests-gen/memchr2.inputs.rs::test_27", "code": "fn count(self) -> usize {\n        self.it.count(|s, e| {\n            // SAFETY: We rely on our generic iterator to return valid start\n            // and end pointers.\n            unsafe { count_raw(self.needle1, s, e) }\n        })\n    }", "test": "fn test_27() {\n    let data = [90, 62, 90, 130];\n    if data.len() < 2 {\n        return;\n    }\n    memchr2_iter(data[0], data[1], &data[2..]).count();\n}"}
{"test_id": "tafia-calamine/tafia-calamine-5a5804d/tests-gen/fuzz_all.inputs.rs::test_0", "code": "fn count<R: Reader<BufReader<File>>>(path: &str) -> usize {\n    let path = format!(\"{}/{}\", env!(\"CARGO_MANIFEST_DIR\"), path);\n    let mut excel: R = open_workbook(&path).expect(\"cannot open excel file\");\n\n    let sheets = excel.sheet_names().to_owned();\n    let mut count = 0;\n    for s in sheets {\n        count += excel\n            .worksheet_range(&s)\n            .unwrap()\n            .unwrap()\n            .rows()\n            .flat_map(|r| r.iter())\n            .count();\n    }\n    count\n}", "test": "fn test_0() {\n    let data = [10];\n    let file_name = \"fuzz.xlsx\";\n    if let Ok(mut file) = File::create(file_name) {\n        if file.write_all(data).is_err() {\n            return;\n        }\n    }\n    let mut workbook: Xlsx<_> = match open_workbook(file_name) {\n        Ok(excel) => excel,\n        Err(_) => return,\n    };\n    for worksheet in workbook.worksheets() {\n        if let Some(Ok(range)) = workbook.worksheet_range(&worksheet.0) {\n            let _ = range.get_size().0 * range.get_size().1;\n            range.used_cells().count();\n        }\n    }\n    if let Some(Ok(mut vba)) = workbook.vba_project() {\n        let vba = vba.to_mut();\n        for module_name in vba.get_module_names() {\n            if vba.get_module(module_name).is_ok() {\n                for r in vba.get_references() {\n                    r.is_missing();\n                }\n            }\n        }\n    }\n    let sheets = workbook.sheet_names().to_owned();\n    for s in sheets {\n        if let Some(Ok(formula)) = workbook.worksheet_formula(&s) {\n            formula\n                .rows()\n                .flat_map(|r| r.iter().filter(|f| !f.is_empty()))\n                .count();\n        }\n    }\n}"}
{"test_id": "gimli-rs-gimli/gimli-rs-gimli-3947879/tests-gen/debug_abbrev.inputs.rs::test_72", "code": "pub fn get<R: Reader>(\n        &self,\n        debug_abbrev: &DebugAbbrev<R>,\n        offset: DebugAbbrevOffset<R::Offset>,\n    ) -> Result<Arc<Abbreviations>> {\n        if offset.0 != R::Offset::from_u8(0) {\n            return debug_abbrev.abbreviations(offset).map(Arc::new);\n        }\n        self.abbreviations\n            .get(|| debug_abbrev.abbreviations(offset))\n    }", "test": "fn test_72() {\n    let debug_abbrev = [58, 231, 10];\n    let len = debug_abbrev.len();\n    let debug_abbrev = DebugAbbrev::new(&debug_abbrev, LittleEndian);\n    let offset = DebugAbbrevOffset(0);\n    if let Ok(abbreviations) = debug_abbrev.abbreviations(offset) {\n        for i in 1..len {\n            let _ = abbreviations.get(i as u64);\n        }\n    }\n}"}
{"test_id": "marshallpierce-rust-base64/marshallpierce-rust-base64-4ef33cc/tests-gen/decode_random.inputs.rs::test_20", "code": "fn decode<T: AsRef<[u8]>>(&self, input: T) -> Result<Vec<u8>, DecodeError> {\n        fn inner<E>(engine: &E, input_bytes: &[u8]) -> Result<Vec<u8>, DecodeError>\n        where\n            E: Engine + ?Sized,\n        {\n            let estimate = engine.internal_decoded_len_estimate(input_bytes.len());\n            let mut buffer = vec![0; estimate.decoded_len_estimate()];\n\n            let bytes_written = engine\n                .internal_decode(input_bytes, &mut buffer, estimate)?\n                .decoded_len;\n\n            buffer.truncate(bytes_written);\n\n            Ok(buffer)\n        }\n\n        inner(self, input.as_ref())\n    }", "test": "fn test_20() {\n    let data = [0, 0, 48, 251];\n    let engine = utils::random_engine(data);\n    let _ = engine.decode(data);\n}"}
{"test_id": "image-rs-image-gif/image-rs-image-gif-80fd8c0/tests-gen/decode.inputs.rs::test_8", "code": "fn try_decode (data : & [u8]) -> Result < () , gif :: DecodingError > { let mut reader = gif :: Decoder :: new (data) ? ; while let Some (_) = reader . read_next_frame () ? { } Ok (()) }", "test": "fn test_8() {\n    let data = [15, 10, 10, 38];\n    let _ = try_decode(data);\n}"}
{"test_id": "seanmonstar-httparse/seanmonstar-httparse-638848e/tests-gen/parse_request.inputs.rs::test_74", "code": "pub fn parse(&mut self, buf: &'b [u8]) -> Result<usize> {\n        self.parse_with_config(buf, &Default::default())\n    }", "test": "fn test_74() {\n    let data = [2, 33, 10];\n    let mut headers = [httparse::EMPTY_HEADER; 16];\n    let mut req = httparse::Request::new(&mut headers);\n    req.parse(data);\n}"}
{"test_id": "XAMPPRocky-tokei/XAMPPRocky-tokei-92ddc2e/tests-gen/parse_from_slice_total.inputs.rs::test_94", "code": "pub fn parse_from_slice (input : FuzzInput , check_total : bool) { let config = & Config { treat_doc_strings_as_comments : Some (input . treat_doc_strings_as_comments) , columns : None , hidden : None , no_ignore : None , no_ignore_parent : None , no_ignore_dot : None , no_ignore_vcs : None , sort : None , types : None , for_each_fn : None , } ; let stats = input . lang . parse_from_slice (input . data , config) ; if check_total { if let Ok (s) = str :: from_utf8 (input . data) { assert ! (stats . lines () <= s . lines () . count () , \"{} got more total lines ({}) than str::lines ({}). Code: {}, Comments: {}, Blanks: {}. treat_doc_strings_as_comments: {}. File contents (as UTF-8):\\n{}\" , input . lang . name () , stats . lines () , s . lines () . count () , stats . code , stats . comments , input . treat_doc_strings_as_comments , stats . blanks , s) } ; } }", "test": "fn test_94() {\n    let data = FuzzInput {\n        lang: Zsh,\n        treat_doc_strings_as_comments: true,\n        data: [255, 255, 255, 255, 255, 255, 255, 255, 255],\n    };\n    parse_from_slice(data, true);\n}"}
{"test_id": "bodil-im-rs/bodil-im-rs-2afaf54/tests-gen/ordset.inputs.rs::test_32", "code": "pub fn remove<BA>(&mut self, a: &BA) -> Option<A>\n    where\n        BA: Hash + Eq + ?Sized,\n        A: Borrow<BA>,\n    {\n        let root = PoolRef::make_mut(&self.pool.0, &mut self.root);\n        let result = root.remove(&self.pool.0, hash_key(&*self.hasher, a), 0, a);\n        if result.is_some() {\n            self.size -= 1;\n        }\n        result.map(|v| v.0)\n    }", "test": "fn test_32() {\n    let actions = [Insert(71787161406015744)];\n    let mut set = OrdSet::new();\n    let mut nat = NatSet::new();\n    for action in actions {\n        match action {\n            Action::Insert(value) => {\n                let len = nat.len() + if nat.contains(&value) { 0 } else { 1 };\n                nat.insert(value);\n                set.insert(value);\n                assert_eq!(len, set.len());\n            }\n            Action::Remove(value) => {\n                let len = nat.len() - if nat.contains(&value) { 1 } else { 0 };\n                nat.remove(&value);\n                set.remove(&value);\n                assert_eq!(len, set.len());\n            }\n        }\n        assert_eq!(nat.len(), set.len());\n        assert_eq!(OrdSet::from(nat.clone()), set);\n    }\n}"}
{"test_id": "cloud-hypervisor-cloud-hypervisor/cloud-hypervisor-cloud-hypervisor-db3a5f3/tests-gen/balloon.inputs.rs::test_31", "code": "pub fn wait_for_epoll_threads(&mut self) {\n        self.common.wait_for_epoll_threads();\n    }", "test": "fn test_31() {\n    let bytes = [39, 8];\n    if bytes.len() < QUEUE_DATA_SIZE * QUEUE_NUM\n        || bytes.len() > (QUEUE_DATA_SIZE * QUEUE_NUM + MEM_SIZE)\n    {\n        return;\n    }\n    let mut balloon = virtio_devices::Balloon::new(\n        \"fuzzer_balloon\".to_owned(),\n        BALLOON_SIZE,\n        true,\n        true,\n        SeccompAction::Allow,\n        EventFd::new(EFD_NONBLOCK).unwrap(),\n        None,\n    )\n    .unwrap();\n    let queue_data = &bytes[..QUEUE_DATA_SIZE * QUEUE_NUM];\n    let mem_bytes = &bytes[QUEUE_DATA_SIZE * QUEUE_NUM..];\n    let mem = GuestMemoryMmap::from_ranges(&[(GuestAddress(0), MEM_SIZE)]).unwrap();\n    if mem.write_slice(mem_bytes, GuestAddress(0 as u64)).is_err() {\n        return;\n    }\n    let guest_memory = GuestMemoryAtomic::new(mem);\n    let mut queues = setup_virt_queues(\n        &[\n            &queue_data[..QUEUE_DATA_SIZE].try_into().unwrap(),\n            &queue_data[QUEUE_DATA_SIZE..QUEUE_DATA_SIZE * 2]\n                .try_into()\n                .unwrap(),\n            &queue_data[QUEUE_DATA_SIZE * 2..QUEUE_DATA_SIZE * 3]\n                .try_into()\n                .unwrap(),\n        ],\n        0,\n    );\n    let inflate_q = queues.remove(0);\n    let inflate_evt = EventFd::new(0).unwrap();\n    let inflate_queue_evt = unsafe { EventFd::from_raw_fd(libc::dup(inflate_evt.as_raw_fd())) };\n    let deflate_q = queues.remove(0);\n    let deflate_evt = EventFd::new(0).unwrap();\n    let deflate_queue_evt = unsafe { EventFd::from_raw_fd(libc::dup(deflate_evt.as_raw_fd())) };\n    let reporting_q = queues.remove(0);\n    let reporting_evt = EventFd::new(0).unwrap();\n    let reporting_queue_evt = unsafe { EventFd::from_raw_fd(libc::dup(reporting_evt.as_raw_fd())) };\n    inflate_queue_evt.write(1).unwrap();\n    deflate_queue_evt.write(1).unwrap();\n    reporting_queue_evt.write(1).unwrap();\n    balloon\n        .activate(\n            guest_memory,\n            Arc::new(NoopVirtioInterrupt {}),\n            vec![\n                (0, inflate_q, inflate_evt),\n                (1, deflate_q, deflate_evt),\n                (2, reporting_q, reporting_evt),\n            ],\n        )\n        .ok();\n    balloon.wait_for_epoll_threads();\n}"}
{"test_id": "rustls-rustls/rustls-rustls-ae583bd/tests-gen/server.inputs.rs::test_59", "code": "pub fn process_new_packets(&mut self) -> Result<IoState, Error> {\n        match self {\n            Self::Client(conn) => conn.process_new_packets(),\n            Self::Server(conn) => conn.process_new_packets(),\n        }\n    }", "test": "fn test_59() {\n    let data = [\n        22, 3, 1, 0, 196, 1, 0, 0, 183, 3, 3, 220, 22, 51, 160, 177, 163, 9, 68, 53, 77, 77, 35,\n        28, 3, 125, 157, 176, 186, 53, 22, 211, 5, 127, 250, 92, 65, 31, 143, 93, 97, 146, 138, 0,\n        0, 20, 19, 3, 19, 2, 19, 1, 204, 169, 204, 168, 192, 44, 192, 43, 3, 1, 0, 53, 32, 219,\n        184, 117, 77, 19, 58, 216, 56, 206, 189, 136, 130, 1, 0, 196, 1, 0, 0, 183, 3, 3, 220, 22,\n        51, 160, 177, 163, 9, 68, 53, 77, 77, 35, 28, 3, 125, 157, 176, 186, 53, 22, 211, 5, 127,\n        250, 92, 65, 31, 143, 93, 97, 200, 75, 0, 154, 207, 11, 90, 130, 199, 181, 127, 192, 247,\n        83, 193, 104, 19, 154, 127, 6, 156, 172, 21, 121, 252, 87, 250, 196, 88, 45, 208, 213, 175,\n        154, 154, 143, 29, 49, 69, 68, 37, 88,\n    ];\n    let config = Arc::new(\n        ServerConfig::builder()\n            .with_safe_defaults()\n            .with_no_client_auth()\n            .with_cert_resolver(Arc::new(Fail)),\n    );\n    let mut server = ServerConnection::new(config).unwrap();\n    let _ = server.read_tls(&mut io::Cursor::new(data));\n    let _ = server.process_new_packets();\n}"}
{"test_id": "rustls-rustls/rustls-rustls-ae583bd/tests-gen/client.inputs.rs::test_86", "code": "pub fn process_new_packets(&mut self) -> Result<IoState, Error> {\n        match self {\n            Self::Client(conn) => conn.process_new_packets(),\n            Self::Server(conn) => conn.process_new_packets(),\n        }\n    }", "test": "fn test_86() {\n    let data = [\n        22, 3, 3, 0, 63, 2, 0, 0, 59, 3, 3, 89, 16, 236, 200, 17, 90, 14, 121, 52, 150, 218, 66,\n        28, 227, 55, 237, 109, 95, 209, 111, 252, 56, 238, 6, 251, 154, 147, 123, 211, 206, 186,\n        114, 0, 204, 169, 0, 0, 19, 255, 1, 0, 1, 0, 0, 23, 0, 0, 0, 35, 0, 0, 0, 11, 0, 2, 1, 0,\n        22, 3, 3, 14, 229, 11, 0, 14, 225, 0, 14, 222, 0, 7, 96, 48, 130, 7, 92, 48, 130, 6, 68,\n        160, 3, 2, 1, 2, 2, 8, 83, 65, 61, 145, 120, 210, 140, 39, 48, 13, 6, 9, 42, 134, 72, 134,\n        247, 13, 1, 1, 11, 5, 0, 48, 73, 49, 11, 48, 9, 6, 3, 85, 4, 6, 19, 2, 85, 83, 49, 19, 48,\n        17, 6, 3, 85, 4, 10, 19, 10, 71, 111, 111, 103, 108, 101, 32, 73, 110, 99, 49, 37, 48, 35,\n        6, 3, 85, 4, 3, 19, 28, 71, 111, 111, 103, 108, 101, 32, 73, 110, 116, 101, 114, 110, 101,\n        116, 32, 65, 117, 116, 104, 111, 114, 105, 116, 121, 32, 71, 50, 48, 30, 23, 13, 49, 55,\n        48, 52, 50, 55, 48, 56, 51, 48, 48, 48, 90, 23, 13, 49, 55, 48, 55, 50, 48, 48, 56, 51, 48,\n        48, 48, 90, 48, 102, 49, 11, 48, 9, 6, 3, 85, 4, 6, 19, 2, 85, 83, 49, 19, 48, 17, 6, 3,\n        85, 4, 8, 12, 10, 67, 97, 108, 105, 102, 111, 114, 110, 105, 97, 49, 22, 48, 20, 6, 3, 85,\n        4, 7, 12, 13, 77, 111, 117, 110, 116, 97, 105, 110, 32, 86, 105, 101, 119, 49, 19, 48, 17,\n        6, 3, 85, 4, 10, 12, 10, 71, 111, 111, 103, 108, 101, 32, 73, 110, 99, 49, 21, 48, 19, 6,\n        3, 85, 4, 3, 12, 12, 42, 46, 103, 111, 111, 103, 108, 101, 46, 99, 111, 109, 48, 89, 48,\n        19, 6, 7, 42, 134, 72, 206, 61, 2, 1, 6, 8, 42, 134, 72, 206, 61, 3, 1, 7, 3, 66, 0, 4,\n        189, 77, 48, 133, 70, 173, 158, 211, 104, 157, 203, 90, 81, 210, 82, 202, 205, 147, 209,\n        252, 62, 33, 220, 191, 25, 45, 49, 119, 71, 86, 34, 248, 128, 116, 164, 199, 172, 91, 179,\n        223, 239, 76, 76, 63, 25, 69, 53, 53, 110, 197, 165, 220, 25, 210, 237, 147, 30, 18, 131,\n        158, 196, 86, 94, 111, 163, 130, 4, 244, 48, 130, 4, 240, 48, 29, 6, 3, 85, 29, 37, 4, 22,\n        48, 20, 6, 8, 43, 6, 1, 5, 5, 7, 3, 1, 6, 8, 43, 6, 1, 5, 5, 7, 3, 2, 48, 11, 6, 3, 85, 29,\n        15, 4, 4, 3, 2, 7, 128, 48, 130, 3, 179, 6, 3, 85, 29, 17, 4, 130, 3, 170, 48, 130, 3, 166,\n        130, 12, 42, 46, 103, 111, 111, 103, 108, 101, 46, 99, 111, 109, 130, 13, 42, 46, 97, 110,\n        100, 114, 111, 105, 100, 46, 99, 111, 109, 130, 22, 42, 46, 97, 112, 112, 101, 110, 103,\n        105, 110, 101, 46, 103, 111, 111, 103, 108, 101, 46, 99, 111, 109, 130, 18, 42, 46, 99,\n        108, 111, 117, 100, 46, 103, 111, 111, 103, 108, 101, 46, 99, 111, 109, 130, 14, 42, 46,\n        103, 99, 112, 46, 103, 118, 116, 50, 46, 99, 111, 109, 130, 22, 42, 46, 103, 111, 111, 103,\n        108, 101, 45, 97, 110, 97, 108, 121, 116, 105, 99, 115, 46, 99, 111, 109, 130, 11, 42, 46,\n        103, 111, 111, 103, 108, 101, 46, 99, 97, 130, 11, 42, 46, 103, 111, 111, 103, 108, 101,\n        46, 99, 108, 130, 14, 42, 46, 103, 111, 111, 103, 108, 101, 46, 99, 111, 46, 105, 110, 130,\n        14, 42, 46, 103, 111, 111, 103, 108, 101, 46, 99, 111, 46, 106, 112, 130, 14, 42, 46, 103,\n        111, 111, 103, 108, 101, 46, 99, 111, 46, 117, 107, 130, 15, 42, 46, 103, 111, 111, 103,\n        108, 101, 46, 99, 111, 109, 46, 97, 114, 130, 15, 42, 46, 103, 111, 111, 103, 108, 101, 46,\n        99, 111, 109, 46, 97, 117, 130, 15, 42, 46, 103, 111, 111, 103, 108, 101, 46, 99, 111, 109,\n        46, 98, 114, 130, 15, 42, 46, 103, 111, 111, 103, 108, 101, 46, 99, 111, 109, 46, 99, 19,\n        26, 27, 50, 165, 190, 234, 17, 149, 76, 72, 99, 73, 233, 153, 93, 32, 55, 204, 254, 42,\n        105, 81, 22, 149, 75, 169, 222, 73, 130, 192, 16, 112, 244, 44, 243, 236, 188, 36, 36, 208,\n        78, 172, 165, 217, 94, 30, 109, 146, 193, 167, 172, 72, 53, 129, 249, 229, 228, 156, 101,\n        105, 205, 135, 164, 65, 80, 63, 46, 87, 165, 145, 81, 18, 88, 14, 140, 9, 161, 172, 122,\n        164, 18, 165, 39, 243, 154, 16, 151, 125, 85, 3, 6, 247, 102, 88, 95, 95, 100, 225, 171,\n        93, 109, 165, 57, 72, 117, 152, 76, 41, 90, 58, 141, 211, 43, 202, 156, 85, 4, 191, 244,\n        230, 20, 213, 128, 172, 38, 237, 23, 137, 166, 147, 108, 92, 164, 204, 184, 240, 102, 142,\n        100, 227, 125, 154, 226, 0, 179, 73, 199, 228, 10, 170, 221, 91, 131, 199, 112, 144, 70,\n        78, 190, 208, 219, 89, 150, 108, 46, 245, 22, 54, 222, 113, 204, 1, 194, 18, 193, 33, 198,\n        22, 0, 3, 129, 48, 130, 3, 125, 48, 130, 2, 230, 160, 3, 2, 1, 2, 2, 3, 18, 187, 230, 48,\n        13, 6, 9, 42, 134, 72, 134, 247, 13, 1, 1, 5, 5, 0, 48, 78, 49, 11, 48, 9, 6, 3, 85, 4, 6,\n        19, 2, 85, 83, 49, 16, 48, 14, 6, 3, 85, 4, 10, 19, 7, 69, 113, 117, 105, 102, 97, 120, 49,\n        45, 48, 43, 6, 3, 85, 4, 11, 19, 36, 69, 113, 117, 105, 102, 97, 120, 32, 83, 101, 99, 117,\n        114, 101, 32, 67, 101, 114, 116, 105, 102, 105, 99, 97, 116, 101, 32, 65, 117, 116, 104,\n        111, 114, 105, 116, 121, 48, 30, 23, 13, 48, 50, 48, 53, 50, 49, 48, 52, 48, 48, 48, 48,\n        90, 23, 13, 49, 56, 48, 56, 50, 49, 48, 52, 48, 48, 48, 48, 90, 48, 66, 49, 11, 48, 9, 6,\n        3, 85, 4, 6, 19, 2, 85, 83, 48, 22, 48, 20, 6, 3, 85, 4, 10, 19, 13, 71, 101, 111, 84, 114,\n        117, 115, 116, 32, 73, 110, 99, 46, 49, 27, 48, 25, 6, 3, 85, 4, 3, 19, 18, 71, 101, 111,\n        84, 114, 117, 115, 116, 32, 71, 108, 111, 98, 97, 108, 32, 67, 65, 48, 130, 1, 34, 48, 13,\n        6, 9, 42, 134, 72, 134, 247, 13, 1, 1, 1, 5, 0, 3, 130, 1, 15, 0, 48, 130, 1, 10, 2, 130,\n        1, 1, 0, 218, 204, 24, 99, 48, 253, 244, 23, 35, 26, 86, 126, 91, 223, 60, 108, 56, 228,\n        113, 183, 120, 145, 212, 188, 161, 216, 76, 248, 168, 67, 182, 3, 233, 77, 33, 7, 8, 136,\n        218, 88, 47, 102, 57, 41, 189, 5, 120, 139, 157, 56, 232, 5, 183, 106, 126, 113, 164, 230,\n        196, 96, 166, 176, 239, 128, 228, 137, 40, 15, 158, 37, 214, 237, 131, 243, 173, 166, 145,\n        199, 152, 201, 66, 24, 53, 20, 157, 173, 152, 70, 146, 46, 79, 202, 241, 135, 67, 193, 22,\n        149, 87, 45, 80, 239, 137, 45, 128, 122, 87, 173, 242, 238, 95, 107, 210, 0, 141, 185, 20,\n        248, 20, 21, 53, 217, 192, 70, 163, 123, 114, 200, 145, 191, 201, 85, 43, 205, 208, 151,\n        62, 156, 38, 100, 204, 223, 206, 131, 25, 113, 202, 78, 230, 212, 213, 123, 169, 25, 205,\n        85, 222, 200, 236, 210, 94, 56, 83, 229, 92, 79, 140, 45, 254, 80, 35, 54, 252, 102, 230,\n        203, 142, 164, 57, 25, 0, 183, 149, 2, 57, 145, 11, 14, 254, 56, 46, 209, 29, 5, 154, 246,\n        77, 62, 111, 15, 7, 29, 175, 44, 30, 143, 96, 57, 226, 250, 54, 83, 19, 57, 212, 94, 38,\n        43, 219, 61, 168, 20, 189, 50, 235, 24, 3, 40, 82, 4, 113, 229, 171, 51, 61, 225, 56, 187,\n        7, 54, 132, 98, 156, 121, 234, 22, 48, 244, 95, 192, 43, 232, 113, 107, 228, 249, 2, 3, 1,\n        0, 1, 163, 129, 240, 48, 129, 237, 48, 31, 6, 3, 85, 29, 35, 4, 24, 48, 22, 128, 20, 72,\n        230, 104, 249, 43, 210, 178, 149, 215, 71, 216, 35, 32, 16, 79, 51, 152, 144, 159, 212, 48,\n        29, 6, 3, 85, 29, 14, 4, 22, 4, 20, 192, 122, 152, 104, 141, 137, 251, 171, 5, 100, 12, 17,\n        125, 170, 125, 101, 184, 202, 204, 78, 48, 15, 6, 3, 85, 29, 19, 1, 1, 255, 4, 5, 48, 3, 1,\n        1, 255, 48, 14, 6, 3, 85, 29, 15, 1, 1, 255, 4, 4, 3, 2, 1, 6, 48, 58, 6, 3, 85, 29, 31, 4,\n        51, 48, 49, 48, 47, 160, 45, 160, 43, 134, 41, 104, 116, 116, 112, 58, 47, 47, 99, 114,\n        108, 46, 103, 101, 111, 116, 114, 117, 115, 116, 46, 99, 111, 109, 47, 99, 114, 108, 115,\n        47, 115, 101, 99, 117, 114, 101, 99, 97, 46, 99, 114, 108, 48, 78, 6, 3, 85, 29, 32, 4, 71,\n        48, 69, 48, 67, 6, 4, 85, 29, 32, 0, 48, 59, 48, 57, 6, 8, 43, 6, 1, 5, 5, 7, 2, 1, 22, 45,\n        104, 116, 116, 112, 115, 58, 47, 47, 119, 119, 119, 46, 103, 101, 111, 116, 114, 117, 115,\n        116, 46, 99, 111, 109, 47, 114, 101, 115, 111, 117, 114, 99, 101, 115, 47, 114, 101, 112,\n        111, 115, 105, 116, 111, 114, 121, 48, 13, 6, 9, 42, 134, 72, 134, 247, 13, 1, 1, 5, 5, 0,\n        3, 129, 129, 0, 118, 225, 18, 110, 78, 75, 22, 18, 134, 48, 6, 178, 129, 8, 207, 240, 8,\n        199, 199, 113, 126, 102, 238, 194, 237, 212, 59, 31, 255, 240, 240, 200, 78, 214, 67, 56,\n        176, 185, 48, 125, 24, 208, 85, 131, 162, 106, 203, 54, 17, 156, 232, 72, 102, 163, 109,\n        127, 184, 19, 212, 71, 254, 139, 90, 92, 115, 252, 174, 217, 27, 50, 25, 56, 171, 151, 52,\n        20, 170, 150, 210, 235, 163, 28, 20, 8, 73, 182, 187, 229, 145, 239, 131, 54, 235, 29, 86,\n        111, 202, 218, 188, 115, 99, 144, 228, 127, 123, 62, 34, 203, 61, 7, 237, 95, 56, 116, 156,\n        227, 3, 80, 78, 161, 175, 152, 238, 97, 242, 132, 63, 18, 22, 3, 3, 0, 114, 12, 0, 0, 110,\n        3, 0, 29, 32, 75, 217, 44, 1, 117, 219, 122, 48, 71, 161, 89, 28, 185, 211, 203, 104, 197,\n        72, 172, 58, 227, 76, 100, 140, 23, 97, 211, 83, 70, 10, 176, 5, 4, 3, 0, 70, 48, 68, 2,\n        32, 118, 77, 25, 193, 184, 245, 209, 235, 233, 73, 206, 164, 213, 214, 217, 58, 189, 77,\n        153, 98, 68, 51, 73, 61, 86, 46, 224, 166, 129, 107, 233, 99, 2, 32, 124, 140, 108, 231,\n        222, 178, 70, 254, 130, 96, 249, 202, 22, 73, 30, 105, 180, 48, 177, 254, 92, 206, 16, 218,\n        0, 232, 189, 151, 157, 245, 39, 28, 22, 3, 3, 0, 4, 14, 0, 0, 0, 22, 3, 3, 0, 190, 4, 0, 0,\n        186, 0, 1, 137, 192, 0, 180, 20, 223, 122, 124, 254, 176, 24, 87, 129, 188, 25, 248, 233,\n        202, 114, 232, 117, 171, 162, 35, 223, 70, 217, 201, 60, 235, 114, 254, 181, 102, 199, 213,\n        157, 219, 90, 42, 235, 135, 84, 255, 194, 219, 249, 247, 214, 54, 54, 229, 79, 220, 3, 190,\n        161, 210, 47, 16, 37, 64, 211, 213, 90, 152, 193, 224, 185, 50, 214, 247, 202, 43, 114,\n        244, 225, 125, 149, 103, 150, 160, 133, 107, 60, 123, 80, 172, 188, 210, 189, 252, 195, 26,\n        25, 7, 251, 196, 130, 237, 57, 195, 62, 96, 219, 233, 108, 223, 21, 183, 44, 247, 233, 117,\n        14, 205, 189, 245, 126, 108, 249, 188, 52, 226, 115, 236, 151, 168, 171, 226, 99, 204, 123,\n        77, 237, 165, 38, 196, 158, 196, 163, 39, 31, 219, 195, 16, 152, 4, 135, 131, 197, 26, 192,\n        175, 73, 208, 102, 224, 50, 80, 230, 29, 5, 207, 178, 98, 39, 107, 230, 1, 197, 170, 5, 64,\n        181, 56, 55, 178, 122, 4, 178, 114, 110, 79, 20, 3, 3, 0, 1, 1, 22, 3, 3, 0, 32, 183, 30,\n        234, 49, 21, 153, 244, 50, 141, 222, 123, 52, 1, 109, 64, 238, 29, 191, 187, 51, 222, 29,\n        236, 211, 51, 142, 115, 248, 228, 41, 223, 232, 23, 3, 3, 5, 145, 183, 198, 127, 233, 133,\n        132, 204, 255, 193, 240, 165, 168, 179, 134, 137, 28, 111, 57, 20, 103, 109, 40, 93, 116,\n        27, 183, 6, 173, 163, 53, 13, 72, 122, 43, 63, 229, 34, 239, 206, 238, 224, 219, 154, 89,\n        232, 199, 231, 76, 220, 48, 166, 150, 198, 187, 179, 212, 170, 99, 14, 86, 71, 119, 180,\n        116, 170, 223, 163, 40, 114, 100, 115, 113, 43, 44, 114, 235, 76, 52, 47, 163, 154, 106,\n        75, 206, 13, 169, 35, 146, 186, 235, 26, 215, 226, 25, 96, 82, 134, 106, 165, 127, 165,\n        151, 155, 237, 16, 83, 188, 25, 119, 139, 21, 127, 119, 176, 100, 73, 39, 111, 86, 232, 52,\n        9, 66, 93, 115, 223, 106, 228, 206, 238, 160, 132, 136, 64, 102, 43, 74, 71, 121, 174, 29,\n        24, 97, 80, 95, 52, 218, 59, 92, 197, 127, 255, 57, 181, 131, 22, 44, 103, 181, 255, 147,\n        102, 90, 15, 183, 116, 87, 9, 234, 149, 220, 97, 185, 51, 15, 48, 192, 77, 192, 92, 6, 25,\n        231, 98, 183, 247, 191, 91, 35, 232, 21, 25, 172, 40, 237, 60, 161, 137, 231, 74, 255, 83,\n        254, 183, 142, 212, 17, 244, 228, 22, 175, 11, 18, 28, 10, 13, 59, 153, 59, 167, 135, 132,\n        139, 137, 113, 140, 127, 144, 118, 200, 162, 233, 78, 190, 163, 76, 226, 254, 141, 23, 103,\n        104, 130, 9, 249, 38, 224, 186, 81, 202, 138, 93, 91, 204, 157, 215, 80, 29, 100, 172, 90,\n        238, 198, 240, 210, 187, 19, 62, 115, 118, 162, 168, 216, 71, 112, 46, 23, 133, 22, 189,\n        210, 149, 133, 48, 200, 136, 154, 38, 232, 39, 155, 118, 193, 34, 213, 153, 254, 27, 118,\n        184, 252, 128, 4, 175, 4, 84, 119, 78, 252, 154, 99, 252, 142, 108, 170, 171, 108, 4, 181,\n        42, 121, 214, 195, 219, 86, 242, 192, 126, 196, 223, 239, 42, 199, 225, 212, 234, 10, 122,\n        3, 193, 28, 84, 12, 112, 161, 253, 10, 169, 105, 164, 63, 97, 189, 164, 233, 134, 45, 115,\n        68, 28, 24, 245, 177, 156, 59, 119, 158, 169, 190, 92, 55, 25, 81, 131, 16, 97, 164, 233,\n        188, 6, 13, 197, 35, 180, 215, 5, 222, 218, 153, 211, 204, 140, 43, 16, 66, 70, 37, 188,\n        245, 142, 91, 181, 176, 50, 210, 247, 126, 210, 254, 254, 56, 58, 202, 187, 189, 198, 247,\n        74, 189, 80, 143, 231, 208, 22, 188, 255, 184, 79, 239, 101, 153, 38, 185, 223, 119, 141,\n        143, 254, 183, 142, 212, 17, 244, 228, 22, 175, 11, 18, 28, 10, 13, 59, 153, 59, 167, 135,\n        132, 139, 137, 113, 140, 127, 144, 118, 200, 162, 233, 78, 190, 163, 76, 226, 254, 141, 23,\n        103, 104, 130, 9, 249, 38, 224, 186, 81, 202, 138, 93, 91, 204, 157, 215, 80, 29, 100, 172,\n        90, 238, 198, 240, 210, 187, 19, 62, 115, 118, 162, 168, 216, 71, 112, 46, 23, 133, 22,\n        189, 210, 149, 133, 48, 200, 136, 154, 38, 232, 39, 155, 118, 193, 34, 213, 153, 254, 27,\n        118, 184, 252, 128, 4, 175, 4, 84, 119, 78, 252, 154, 99, 252, 142, 108, 170, 171, 108, 4,\n        181, 42, 121, 214, 195, 219, 86, 242, 192, 126, 196, 223, 239, 42, 199, 225, 212, 234, 10,\n        122, 3, 193, 28, 84, 12, 112, 161, 253, 10, 169, 105, 164, 63, 97, 189, 164, 233, 134, 45,\n        115, 68, 28, 24, 245, 177, 156, 59, 119, 158, 169, 190, 92, 55, 25, 81, 131, 16, 97, 164,\n        233, 188, 6, 13, 197, 35, 180, 215, 5, 222, 218, 153, 211, 204, 140, 43, 16, 66, 70, 37,\n        188, 245, 142, 91, 181, 176, 50, 210, 247, 126, 210, 254, 254, 56, 58, 202, 187, 189, 198,\n        247, 74, 189, 80, 143, 231, 208, 22, 188, 255, 184, 79, 239, 101, 153, 38, 185, 223, 119,\n        141, 143, 241, 93, 236, 72, 153, 185, 119, 215, 135, 123, 202, 66, 204, 12, 243, 246, 48,\n        43, 154, 83, 22, 3, 3, 0, 63, 2, 0, 0, 59, 3, 3, 89, 16, 236, 200, 17, 90, 14, 121, 52,\n        150, 218, 66, 28, 227, 55, 237, 109, 95, 209, 111, 252, 56, 238, 6, 251, 154, 147, 123,\n        211, 206, 186, 114, 0, 204, 169, 0, 0, 19, 255, 1, 0, 1, 0, 0, 23, 0, 0, 0, 35, 0, 0, 0,\n        11, 0, 2, 1, 0, 22, 3, 3, 14, 229, 11, 0, 14, 225, 0, 14, 222, 0, 7, 96, 48, 130, 7, 92,\n        48, 130, 6, 49, 37, 48, 35, 6, 3, 85, 4, 3, 19, 28, 71, 111, 111, 103, 108, 101, 32, 73,\n        110, 116, 101, 114, 110, 101, 116, 32, 65, 117, 116, 104, 111, 114, 105, 116, 121, 32, 71,\n        50, 48, 30, 23, 13, 49, 55, 48, 52, 50, 55, 48, 56, 51, 48, 48, 48, 90, 23, 13, 49, 55, 48,\n        55, 50, 48, 48, 56, 51, 48, 48, 48, 90, 48, 102, 49, 11, 48, 9, 6, 3, 85, 4, 6, 19, 2, 85,\n        83, 49, 19, 48, 17, 6, 3, 85, 4, 8, 12, 10, 67, 0, 100, 146, 157, 230, 233, 147, 209, 45,\n        106, 170, 231, 113, 162, 217, 136, 142, 254, 179, 55, 216, 202, 171, 112, 33, 169, 211, 27,\n        69, 131, 131, 186, 210, 79, 186, 244, 223, 25, 153, 0, 204, 17, 150, 183, 82, 33, 40, 165,\n        178, 214, 212, 185, 215, 118, 116, 192, 121, 23, 111, 14, 148, 118, 17, 195, 123, 98, 96,\n        227, 160, 203, 98, 44, 10, 17, 73, 153, 8, 104, 225, 126, 28, 62, 50, 167, 146, 93, 246,\n        148, 222, 56, 235, 205, 189, 222, 186, 74, 242, 195, 91, 54, 135, 245, 245, 139, 235, 233,\n        43, 125, 89, 87, 250, 179, 228, 228, 166, 141, 238, 53, 245, 80, 235, 32, 142, 81, 180, 51,\n        107, 117, 28, 197, 62, 15, 107, 40, 167, 63, 119, 215, 239, 4, 53, 26, 254, 55, 153, 8, 89,\n        253, 156, 98, 25, 51, 54, 205, 255, 183, 37, 76, 39, 153, 92, 240, 79, 178, 157, 153, 205,\n        242, 91, 133, 204, 26, 107, 7, 105, 59, 186, 37, 217, 61, 171, 159, 165, 68, 171, 10, 91,\n        29, 236, 136, 188, 153, 202, 63, 99, 47, 38, 246, 92, 156, 111, 100, 241, 142, 19, 98, 204,\n        171, 188, 6, 5, 117, 91, 47, 16, 227, 100, 43, 77, 56, 70, 231, 10, 161, 170, 195, 142, 34,\n        154, 173, 32, 78, 93, 39, 56, 185, 38, 249, 59, 219, 48, 15, 106, 245, 187, 64, 82, 47,\n        144, 134, 130, 154, 54, 87, 70, 166, 72, 234, 147, 121, 227, 24, 77, 204, 246, 109, 49, 57,\n        104, 114, 128, 35, 40, 34, 113, 75, 116, 91, 6, 43, 28, 123, 123, 43, 180, 82, 237, 1, 250,\n        108, 126, 244, 40, 186, 108, 59, 59, 1, 232, 50, 14, 248, 26, 158, 112, 110, 245, 133, 40,\n        44, 38, 130, 187, 34, 190, 179, 134, 98, 54, 71, 52, 151, 64, 70, 253, 247, 48, 201, 189,\n        117, 28, 18, 6, 111, 239, 64, 248, 250, 231, 85, 20, 133, 210, 238, 207, 121, 136, 37, 127,\n        16, 135, 191, 150, 42, 174, 107, 239, 142, 40, 108, 34, 66, 36, 233, 104, 52, 137, 12, 49,\n        17, 219, 213, 165, 132, 160, 153, 6, 175, 133, 172, 78, 183, 236, 228, 81, 164, 11, 152,\n        93, 194, 97, 108, 105, 102, 111, 114, 110, 105, 97, 49, 22, 48, 20, 6, 3, 85, 4, 7, 12, 13,\n        77, 111, 117, 110, 116, 97, 105, 110, 32, 86, 105, 101, 119, 49, 19, 48, 17, 6, 3, 85, 4,\n        10, 12, 212, 117, 179, 84, 175, 251, 73, 172, 10, 71, 111, 111, 103, 108, 101, 32, 73, 110,\n        99, 77, 49, 252,\n    ];\n    let root_store = RootCertStore::empty();\n    let config = Arc::new(\n        ClientConfig::builder()\n            .with_safe_defaults()\n            .with_root_certificates(root_store)\n            .with_no_client_auth(),\n    );\n    let example_com = \"example.com\".try_into().unwrap();\n    let mut client = ClientConnection::new(config, example_com).unwrap();\n    let _ = client.read_tls(&mut io::Cursor::new(data));\n    let _ = client.process_new_packets();\n}"}
{"test_id": "gfx-rs-naga/gfx-rs-naga-92e41b4/tests-gen/wgsl_parser.inputs.rs::test_25", "code": "pub fn parse(mut self) -> Result<crate::Module, Error> {\n        let mut module = {\n            if self.next()? != spirv::MAGIC_NUMBER {\n                return Err(Error::InvalidHeader);\n            }\n            let version_raw = self.next()?;\n            let generator = self.next()?;\n            let _bound = self.next()?;\n            let _schema = self.next()?;\n            log::info!(\"Generated by {} version {:x}\", generator, version_raw);\n            crate::Module::default()\n        };\n\n        self.layouter.clear();\n        self.dummy_functions = Arena::new();\n        self.lookup_function.clear();\n        self.function_call_graph.clear();\n\n        loop {\n            use spirv::Op;\n\n            let inst = match self.next_inst() {\n                Ok(inst) => inst,\n                Err(Error::IncompleteData) => break,\n                Err(other) => return Err(other),\n            };\n            log::debug!(\"\\t{:?} [{}]\", inst.op, inst.wc);\n\n            match inst.op {\n                Op::Capability => self.parse_capability(inst),\n                Op::Extension => self.parse_extension(inst),\n                Op::ExtInstImport => self.parse_ext_inst_import(inst),\n                Op::MemoryModel => self.parse_memory_model(inst),\n                Op::EntryPoint => self.parse_entry_point(inst),\n                Op::ExecutionMode => self.parse_execution_mode(inst),\n                Op::String => self.parse_string(inst),\n                Op::Source => self.parse_source(inst),\n                Op::SourceExtension => self.parse_source_extension(inst),\n                Op::Name => self.parse_name(inst),\n                Op::MemberName => self.parse_member_name(inst),\n                Op::ModuleProcessed => self.parse_module_processed(inst),\n                Op::Decorate => self.parse_decorate(inst),\n                Op::MemberDecorate => self.parse_member_decorate(inst),\n                Op::TypeVoid => self.parse_type_void(inst),\n                Op::TypeBool => self.parse_type_bool(inst, &mut module),\n                Op::TypeInt => self.parse_type_int(inst, &mut module),\n                Op::TypeFloat => self.parse_type_float(inst, &mut module),\n                Op::TypeVector => self.parse_type_vector(inst, &mut module),\n                Op::TypeMatrix => self.parse_type_matrix(inst, &mut module),\n                Op::TypeFunction => self.parse_type_function(inst),\n                Op::TypePointer => self.parse_type_pointer(inst, &mut module),\n                Op::TypeArray => self.parse_type_array(inst, &mut module),\n                Op::TypeRuntimeArray => self.parse_type_runtime_array(inst, &mut module),\n                Op::TypeStruct => self.parse_type_struct(inst, &mut module),\n                Op::TypeImage => self.parse_type_image(inst, &mut module),\n                Op::TypeSampledImage => self.parse_type_sampled_image(inst),\n                Op::TypeSampler => self.parse_type_sampler(inst, &mut module),\n                Op::Constant | Op::SpecConstant => self.parse_constant(inst, &mut module),\n                Op::ConstantComposite => self.parse_composite_constant(inst, &mut module),\n                Op::ConstantNull | Op::Undef => self.parse_null_constant(inst, &mut module),\n                Op::ConstantTrue => self.parse_bool_constant(inst, true, &mut module),\n                Op::ConstantFalse => self.parse_bool_constant(inst, false, &mut module),\n                Op::Variable => self.parse_global_variable(inst, &mut module),\n                Op::Function => {\n                    self.switch(ModuleState::Function, inst.op)?;\n                    inst.expect(5)?;\n                    self.parse_function(&mut module)\n                }\n                _ => Err(Error::UnsupportedInstruction(self.state, inst.op)), //TODO\n            }?;\n        }\n\n        log::info!(\"Patching...\");\n        {\n            let mut nodes = petgraph::algo::toposort(&self.function_call_graph, None)\n                .map_err(|cycle| Error::FunctionCallCycle(cycle.node_id()))?;\n            nodes.reverse(); // we need dominated first\n            let mut functions = mem::take(&mut module.functions);\n            for fun_id in nodes {\n                if fun_id > !(functions.len() as u32) {\n                    // skip all the fake IDs registered for the entry points\n                    continue;\n                }\n                let lookup = self.lookup_function.get_mut(&fun_id).unwrap();\n                // take out the function from the old array\n                let fun = mem::take(&mut functions[lookup.handle]);\n                // add it to the newly formed arena, and adjust the lookup\n                lookup.handle = module\n                    .functions\n                    .append(fun, functions.get_span(lookup.handle));\n            }\n        }\n        // patch all the functions\n        for (handle, fun) in module.functions.iter_mut() {\n            self.patch_function(Some(handle), fun)?;\n        }\n        for ep in module.entry_points.iter_mut() {\n            self.patch_function(None, &mut ep.function)?;\n        }\n\n        // Check all the images and samplers to have consistent comparison property.\n        for (handle, flags) in self.handle_sampling.drain() {\n            if !image::patch_comparison_type(\n                flags,\n                module.global_variables.get_mut(handle),\n                &mut module.types,\n            ) {\n                return Err(Error::InconsistentComparisonSampling(handle));\n            }\n        }\n\n        if !self.future_decor.is_empty() {\n            log::warn!(\"Unused item decorations: {:?}\", self.future_decor);\n            self.future_decor.clear();\n        }\n        if !self.future_member_decor.is_empty() {\n            log::warn!(\"Unused member decorations: {:?}\", self.future_member_decor);\n            self.future_member_decor.clear();\n        }\n\n        Ok(module)\n    }", "test": "fn test_25() {\n    let data = \"!G:\";\n    let _result = Frontend::new().parse(&data);\n}"}
{"test_id": "marshallpierce-rust-base64/marshallpierce-rust-base64-4ef33cc/tests-gen/roundtrip.inputs.rs::test_63", "code": "pub fn decode<T: AsRef<[u8]>>(input: T) -> Result<Vec<u8>, DecodeError> {\n    STANDARD.decode(input)\n}", "test": "fn test_63() {\n    let data = [72];\n    let encoded = STANDARD.encode(data);\n    let decoded = STANDARD.decode(&encoded).unwrap();\n    assert_eq!(data, decoded.as_slice());\n}"}
{"test_id": "cloud-hypervisor-cloud-hypervisor/cloud-hypervisor-cloud-hypervisor-db3a5f3/tests-gen/pmem.inputs.rs::test_45", "code": "pub fn wait_for_epoll_threads(&mut self) {\n        self.common.wait_for_epoll_threads();\n    }", "test": "fn test_45() {\n    let bytes = [16, 198, 245, 246];\n    if bytes.len() < QUEUE_DATA_SIZE || bytes.len() > (QUEUE_DATA_SIZE + MEM_SIZE) {\n        return;\n    }\n    let mut pmem = create_dummy_pmem();\n    let queue_data = &bytes[..QUEUE_DATA_SIZE];\n    let mem_bytes = &bytes[QUEUE_DATA_SIZE..];\n    let q = setup_virt_queue(queue_data.try_into().unwrap());\n    let mem = GuestMemoryMmap::from_ranges(&[(GuestAddress(0), MEM_SIZE)]).unwrap();\n    if mem.write_slice(mem_bytes, GuestAddress(0 as u64)).is_err() {\n        return;\n    }\n    let guest_memory = GuestMemoryAtomic::new(mem);\n    let evt = EventFd::new(0).unwrap();\n    let queue_evt = unsafe { EventFd::from_raw_fd(libc::dup(evt.as_raw_fd())) };\n    queue_evt.write(1).unwrap();\n    pmem.activate(\n        guest_memory,\n        Arc::new(NoopVirtioInterrupt {}),\n        vec![(0, q, evt)],\n    )\n    .ok();\n    pmem.wait_for_epoll_threads();\n}"}
{"test_id": "gimli-rs-gimli/gimli-rs-gimli-3947879/tests-gen/debug_abbrev.inputs.rs::test_76", "code": "pub fn get<R: Reader>(\n        &self,\n        debug_abbrev: &DebugAbbrev<R>,\n        offset: DebugAbbrevOffset<R::Offset>,\n    ) -> Result<Arc<Abbreviations>> {\n        if offset.0 != R::Offset::from_u8(0) {\n            return debug_abbrev.abbreviations(offset).map(Arc::new);\n        }\n        self.abbreviations\n            .get(|| debug_abbrev.abbreviations(offset))\n    }", "test": "fn test_76() {\n    let debug_abbrev = [91, 0, 2, 10];\n    let len = debug_abbrev.len();\n    let debug_abbrev = DebugAbbrev::new(&debug_abbrev, LittleEndian);\n    let offset = DebugAbbrevOffset(0);\n    if let Ok(abbreviations) = debug_abbrev.abbreviations(offset) {\n        for i in 1..len {\n            let _ = abbreviations.get(i as u64);\n        }\n    }\n}"}
{"test_id": "bodil-im-rs/bodil-im-rs-2afaf54/tests-gen/ordset.inputs.rs::test_26", "code": "pub fn remove<BA>(&mut self, a: &BA) -> Option<A>\n    where\n        BA: Hash + Eq + ?Sized,\n        A: Borrow<BA>,\n    {\n        let root = PoolRef::make_mut(&self.pool.0, &mut self.root);\n        let result = root.remove(&self.pool.0, hash_key(&*self.hasher, a), 0, a);\n        if result.is_some() {\n            self.size -= 1;\n        }\n        result.map(|v| v.0)\n    }", "test": "fn test_26() {\n    let actions = [Insert(184549375)];\n    let mut set = OrdSet::new();\n    let mut nat = NatSet::new();\n    for action in actions {\n        match action {\n            Action::Insert(value) => {\n                let len = nat.len() + if nat.contains(&value) { 0 } else { 1 };\n                nat.insert(value);\n                set.insert(value);\n                assert_eq!(len, set.len());\n            }\n            Action::Remove(value) => {\n                let len = nat.len() - if nat.contains(&value) { 1 } else { 0 };\n                nat.remove(&value);\n                set.remove(&value);\n                assert_eq!(len, set.len());\n            }\n        }\n        assert_eq!(nat.len(), set.len());\n        assert_eq!(OrdSet::from(nat.clone()), set);\n    }\n}"}
{"test_id": "image-rs-image-gif/image-rs-image-gif-80fd8c0/tests-gen/decode.inputs.rs::test_53", "code": "fn try_decode (data : & [u8]) -> Result < () , gif :: DecodingError > { let mut reader = gif :: Decoder :: new (data) ? ; while let Some (_) = reader . read_next_frame () ? { } Ok (()) }", "test": "fn test_53() {\n    let data = [38, 2, 96];\n    let _ = try_decode(data);\n}"}
{"test_id": "bodil-im-rs/bodil-im-rs-2afaf54/tests-gen/ordset.inputs.rs::test_60", "code": "pub fn remove<BA>(&mut self, a: &BA) -> Option<A>\n    where\n        BA: Hash + Eq + ?Sized,\n        A: Borrow<BA>,\n    {\n        let root = PoolRef::make_mut(&self.pool.0, &mut self.root);\n        let result = root.remove(&self.pool.0, hash_key(&*self.hasher, a), 0, a);\n        if result.is_some() {\n            self.size -= 1;\n        }\n        result.map(|v| v.0)\n    }", "test": "fn test_60() {\n    let actions = [Remove(4991471628993298431)];\n    let mut set = OrdSet::new();\n    let mut nat = NatSet::new();\n    for action in actions {\n        match action {\n            Action::Insert(value) => {\n                let len = nat.len() + if nat.contains(&value) { 0 } else { 1 };\n                nat.insert(value);\n                set.insert(value);\n                assert_eq!(len, set.len());\n            }\n            Action::Remove(value) => {\n                let len = nat.len() - if nat.contains(&value) { 1 } else { 0 };\n                nat.remove(&value);\n                set.remove(&value);\n                assert_eq!(len, set.len());\n            }\n        }\n        assert_eq!(nat.len(), set.len());\n        assert_eq!(OrdSet::from(nat.clone()), set);\n    }\n}"}
{"test_id": "BurntSushi-memchr/BurntSushi-memchr-f3fde7a/tests-gen/memrchr.inputs.rs::test_26", "code": "fn count(self) -> usize {\n        self.it.count(|s, e| {\n            // SAFETY: We rely on our generic iterator to return valid start\n            // and end pointers.\n            unsafe { count_raw(self.needle1, s, e) }\n        })\n    }", "test": "fn test_26() {\n    let data = [10, 241, 254];\n    if data.is_empty() {\n        return;\n    }\n    memchr_iter(data[0], &data[1..]).rev().count();\n}"}
{"test_id": "rust-bio-rust-bio/rust-bio-rust-bio-319a0d8/tests-gen/banded_aligner.inputs.rs::test_67", "code": "fn validate_alignment_score(al: &Alignment, x: TextSlice, y: TextSlice, scoring: &Scoring<MatchParams>) -> bool {\n    use AlignmentOperation::*;\n    let path = al.path();\n    let mut score = 0;\n    if al.mode==AlignmentMode::Custom {\n        if al.xstart > 0 {\n            score += scoring.xclip_prefix;\n        }\n        if al.ystart > 0 {\n            score += scoring.yclip_prefix;\n        }\n        if al.xend < al.xlen {\n            score += scoring.xclip_suffix;\n        }\n        if al.yend < al.ylen {\n            score += scoring.yclip_suffix;\n        }\n    }\n    let mut last_op = None;\n    for (i, j, op) in path {\n        score += match op {\n            Match | Subst => scoring.match_fn.score(x[i-1], y[j-1]),\n            Del => if last_op==Some(Del) { scoring.gap_extend } else { scoring.gap_open + scoring.gap_extend },\n            Ins => if last_op==Some(Ins) { scoring.gap_extend } else { scoring.gap_open + scoring.gap_extend },\n            _ => 0,\n        };\n        last_op = Some(op);\n    }\n    al.score==score\n}", "test": "fn test_67() {\n    let data = [1, 0, 1, 0];\n    if data.len() < 50 || data.len() > 300 {\n        return;\n    }\n    let (split_byte, data) = data.split_first().unwrap();\n    let (kmer_byte, data) = data.split_first().unwrap();\n    let (window_byte, data) = data.split_first().unwrap();\n    let (match_score_byte, data) = data.split_first().unwrap();\n    let (mismatch_score_byte, data) = data.split_first().unwrap();\n    let (gap_open_byte, data) = data.split_first().unwrap();\n    let (gap_extend_byte, data) = data.split_first().unwrap();\n    let (xclip_prefix_byte, data) = data.split_first().unwrap();\n    let (xclip_suffix_byte, data) = data.split_first().unwrap();\n    let (yclip_prefix_byte, data) = data.split_first().unwrap();\n    let (yclip_suffix_byte, data) = data.split_first().unwrap();\n    let alphabets = b\"ACGT\";\n    let v: Vec<_> = data\n        .iter()\n        .map(|i| alphabets[(*i as usize) % alphabets.len()])\n        .collect();\n    let kmer_len: usize = 5 + (*kmer_byte as usize) % 10;\n    let window_size: usize = 5 + (*window_byte as usize) % 10;\n    let split_pos: usize = min(data.len() - 1, max(*split_byte as usize, 1));\n    let match_score = 1 + (*match_score_byte as i32) % 5;\n    let mismatch_score = -((*mismatch_score_byte as i32) % 10);\n    let gap_open = -((*gap_open_byte as i32) % 20);\n    let gap_extend = -((*gap_extend_byte as i32) % 10);\n    let (x, y) = v.split_at(split_pos);\n    println!(\n        \"x: {}, y: {}, k: {}, w: {}, scoring ({}, {}, {}, {})\",\n        String::from_utf8(x.to_vec()).unwrap(),\n        String::from_utf8(y.to_vec()).unwrap(),\n        kmer_len,\n        window_size,\n        gap_open,\n        gap_extend,\n        match_score,\n        mismatch_score\n    );\n    let base_score = Scoring::from_scores(gap_open, gap_extend, match_score, mismatch_score);\n    {\n        println!(\n            \"Clip scores ({}, {}, {}, {})\",\n            xclip_prefix_byte, xclip_suffix_byte, yclip_prefix_byte, yclip_suffix_byte\n        );\n        let scoring = Scoring {\n            xclip_prefix: -(*xclip_prefix_byte as i32),\n            xclip_suffix: -(*xclip_suffix_byte as i32),\n            yclip_prefix: -(*yclip_prefix_byte as i32),\n            yclip_suffix: -(*yclip_suffix_byte as i32),\n            ..base_score.clone()\n        };\n        let mut b_aligner = banded::Aligner::with_scoring(scoring.clone(), kmer_len, window_size);\n        let b_alignment = b_aligner.custom(x, y);\n        assert!(validate_alignment_score(&b_alignment, x, y, &scoring));\n        let mut f_aligner = pairwise::Aligner::with_scoring(scoring.clone());\n        let f_alignment = f_aligner.custom(x, y);\n        assert!(validate_alignment_score(&f_alignment, x, y, &scoring));\n        let band_all_alignment = b_aligner.custom_with_matches(x, y, &Vec::new());\n        assert_eq!(band_all_alignment.score, f_alignment.score);\n    }\n    {\n        let scoring = Scoring {\n            xclip_prefix: 0,\n            xclip_suffix: 0,\n            yclip_suffix: 0,\n            ..base_score.clone()\n        };\n        let mut b_aligner = banded::Aligner::with_scoring(scoring.clone(), kmer_len, window_size);\n        let b_alignment = b_aligner.custom(x, y);\n        assert_eq!(b_alignment.ystart, 0);\n        assert!(validate_alignment_score(&b_alignment, x, y, &scoring));\n        let mut f_aligner = pairwise::Aligner::with_scoring(scoring.clone());\n        let f_alignment = f_aligner.custom(x, y);\n        assert_eq!(f_alignment.ystart, 0);\n        assert!(validate_alignment_score(&f_alignment, x, y, &scoring));\n        let band_all_alignment = b_aligner.custom_with_matches(x, y, &Vec::new());\n        assert_eq!(band_all_alignment.score, f_alignment.score);\n    }\n    {\n        let scoring = Scoring {\n            xclip_prefix: 0,\n            xclip_suffix: 0,\n            yclip_prefix: 0,\n            ..base_score.clone()\n        };\n        let mut b_aligner = banded::Aligner::with_scoring(scoring.clone(), kmer_len, window_size);\n        let b_alignment = b_aligner.custom(x, y);\n        assert_eq!(b_alignment.yend, b_alignment.ylen);\n        assert!(validate_alignment_score(&b_alignment, x, y, &scoring));\n        let mut f_aligner = pairwise::Aligner::with_scoring(scoring.clone());\n        let f_alignment = f_aligner.custom(x, y);\n        assert_eq!(f_alignment.yend, f_alignment.ylen);\n        assert!(validate_alignment_score(&f_alignment, x, y, &scoring));\n        let band_all_alignment = b_aligner.custom_with_matches(x, y, &Vec::new());\n        assert_eq!(band_all_alignment.score, f_alignment.score);\n    }\n    {\n        let scoring = Scoring {\n            xclip_suffix: 0,\n            yclip_prefix: 0,\n            yclip_suffix: 0,\n            ..base_score.clone()\n        };\n        let mut b_aligner = banded::Aligner::with_scoring(scoring.clone(), kmer_len, window_size);\n        let b_alignment = b_aligner.custom(x, y);\n        assert_eq!(b_alignment.xstart, 0);\n        assert!(validate_alignment_score(&b_alignment, x, y, &scoring));\n        let mut f_aligner = pairwise::Aligner::with_scoring(scoring.clone());\n        let f_alignment = f_aligner.custom(x, y);\n        assert_eq!(f_alignment.xstart, 0);\n        assert!(validate_alignment_score(&f_alignment, x, y, &scoring));\n        let band_all_alignment = b_aligner.custom_with_matches(x, y, &Vec::new());\n        assert_eq!(band_all_alignment.score, f_alignment.score);\n    }\n    {\n        let scoring = Scoring {\n            xclip_prefix: 0,\n            yclip_prefix: 0,\n            yclip_suffix: 0,\n            ..base_score.clone()\n        };\n        let mut b_aligner = banded::Aligner::with_scoring(scoring.clone(), kmer_len, window_size);\n        let b_alignment = b_aligner.custom(x, y);\n        assert_eq!(b_alignment.xend, b_alignment.xlen);\n        assert!(validate_alignment_score(&b_alignment, x, y, &scoring));\n        let mut f_aligner = pairwise::Aligner::with_scoring(scoring.clone());\n        let f_alignment = f_aligner.custom(x, y);\n        assert_eq!(f_alignment.xend, f_alignment.xlen);\n        assert!(validate_alignment_score(&f_alignment, x, y, &scoring));\n        let band_all_alignment = b_aligner.custom_with_matches(x, y, &Vec::new());\n        assert_eq!(band_all_alignment.score, f_alignment.score);\n    }\n    {\n        let mut aligner = banded::Aligner::with_scoring(base_score.clone(), kmer_len, window_size);\n        let alignment = aligner.local(x, y);\n        assert!(alignment.score >= 0);\n        assert!(validate_alignment_score(&alignment, x, y, &base_score));\n        let alignment = aligner.semiglobal(x, y);\n        assert_eq!(alignment.xstart, 0);\n        assert_eq!(alignment.xend, alignment.xlen);\n        assert!(validate_alignment_score(&alignment, x, y, &base_score));\n        let alignment = aligner.global(x, y);\n        assert_eq!(alignment.xstart, 0);\n        assert_eq!(alignment.xend, alignment.xlen);\n        assert_eq!(alignment.ystart, 0);\n        assert_eq!(alignment.yend, alignment.ylen);\n        assert!(validate_alignment_score(&alignment, x, y, &base_score));\n    }\n    {\n        let mut aligner = pairwise::Aligner::with_scoring(base_score.clone());\n        let alignment = aligner.local(x, y);\n        assert!(alignment.score >= 0);\n        assert!(validate_alignment_score(&alignment, x, y, &base_score));\n        let alignment = aligner.semiglobal(x, y);\n        assert_eq!(alignment.xstart, 0);\n        assert_eq!(alignment.xend, alignment.xlen);\n        assert!(validate_alignment_score(&alignment, x, y, &base_score));\n        let alignment = aligner.global(x, y);\n        assert_eq!(alignment.xstart, 0);\n        assert_eq!(alignment.xend, alignment.xlen);\n        assert_eq!(alignment.ystart, 0);\n        assert_eq!(alignment.yend, alignment.ylen);\n        assert!(validate_alignment_score(&alignment, x, y, &base_score));\n    }\n}"}
{"test_id": "gimli-rs-gimli/gimli-rs-gimli-3947879/tests-gen/debug_abbrev.inputs.rs::test_32", "code": "pub fn get<R: Reader>(\n        &self,\n        debug_abbrev: &DebugAbbrev<R>,\n        offset: DebugAbbrevOffset<R::Offset>,\n    ) -> Result<Arc<Abbreviations>> {\n        if offset.0 != R::Offset::from_u8(0) {\n            return debug_abbrev.abbreviations(offset).map(Arc::new);\n        }\n        self.abbreviations\n            .get(|| debug_abbrev.abbreviations(offset))\n    }", "test": "fn test_32() {\n    let debug_abbrev = [39, 8, 169];\n    let len = debug_abbrev.len();\n    let debug_abbrev = DebugAbbrev::new(&debug_abbrev, LittleEndian);\n    let offset = DebugAbbrevOffset(0);\n    if let Ok(abbreviations) = debug_abbrev.abbreviations(offset) {\n        for i in 1..len {\n            let _ = abbreviations.get(i as u64);\n        }\n    }\n}"}
{"test_id": "marshallpierce-rust-base64/marshallpierce-rust-base64-4ef33cc/tests-gen/decode_random.inputs.rs::test_46", "code": "fn decode<T: AsRef<[u8]>>(&self, input: T) -> Result<Vec<u8>, DecodeError> {\n        fn inner<E>(engine: &E, input_bytes: &[u8]) -> Result<Vec<u8>, DecodeError>\n        where\n            E: Engine + ?Sized,\n        {\n            let estimate = engine.internal_decoded_len_estimate(input_bytes.len());\n            let mut buffer = vec![0; estimate.decoded_len_estimate()];\n\n            let bytes_written = engine\n                .internal_decode(input_bytes, &mut buffer, estimate)?\n                .decoded_len;\n\n            buffer.truncate(bytes_written);\n\n            Ok(buffer)\n        }\n\n        inner(self, input.as_ref())\n    }", "test": "fn test_46() {\n    let data = [126, 139, 36];\n    let engine = utils::random_engine(data);\n    let _ = engine.decode(data);\n}"}
{"test_id": "BurntSushi-memchr/BurntSushi-memchr-f3fde7a/tests-gen/memrchr2.inputs.rs::test_72", "code": "fn count(self) -> usize {\n        self.it.count(|s, e| {\n            // SAFETY: We rely on our generic iterator to return valid start\n            // and end pointers.\n            unsafe { count_raw(self.needle1, s, e) }\n        })\n    }", "test": "fn test_72() {\n    let data = [61, 10, 10, 2];\n    if data.len() < 2 {\n        return;\n    }\n    memchr2_iter(data[0], data[1], &data[2..]).rev().count();\n}"}
{"test_id": "cloud-hypervisor-cloud-hypervisor/cloud-hypervisor-cloud-hypervisor-db3a5f3/tests-gen/block.inputs.rs::test_28", "code": "pub fn wait_for_epoll_threads(&mut self) {\n        self.common.wait_for_epoll_threads();\n    }", "test": "fn test_28() {\n    let bytes = [3, 1];\n    if bytes.len() < QUEUE_DATA_SIZE || bytes.len() > (QUEUE_DATA_SIZE + MEM_SIZE) {\n        return;\n    }\n    let queue_data = &bytes[..QUEUE_DATA_SIZE];\n    let mem_bytes = &bytes[QUEUE_DATA_SIZE..];\n    let shm = memfd_create(&ffi::CString::new(\"fuzz\").unwrap(), 0).unwrap();\n    let disk_file: File = unsafe { File::from_raw_fd(shm) };\n    let qcow_disk = Box::new(RawFileDiskSync::new(disk_file)) as Box<dyn DiskFile>;\n    let mut block = Block::new(\n        \"tmp\".to_owned(),\n        qcow_disk,\n        PathBuf::from(\"\"),\n        false,\n        false,\n        2,\n        256,\n        None,\n        SeccompAction::Allow,\n        None,\n        EventFd::new(EFD_NONBLOCK).unwrap(),\n        None,\n    )\n    .unwrap();\n    let q = setup_virt_queue(queue_data.try_into().unwrap());\n    let mem = GuestMemoryMmap::from_ranges(&[(GuestAddress(0), MEM_SIZE)]).unwrap();\n    if mem.write_slice(mem_bytes, GuestAddress(0 as u64)).is_err() {\n        return;\n    }\n    let guest_memory = GuestMemoryAtomic::new(mem);\n    let evt = EventFd::new(0).unwrap();\n    let queue_evt = unsafe { EventFd::from_raw_fd(libc::dup(evt.as_raw_fd())) };\n    queue_evt.write(1).unwrap();\n    block\n        .activate(\n            guest_memory,\n            Arc::new(NoopVirtioInterrupt {}),\n            vec![(0, q, evt)],\n        )\n        .ok();\n    block.wait_for_epoll_threads();\n}"}
{"test_id": "cloud-hypervisor-cloud-hypervisor/cloud-hypervisor-cloud-hypervisor-db3a5f3/tests-gen/balloon.inputs.rs::test_78", "code": "pub fn wait_for_epoll_threads(&mut self) {\n        self.common.wait_for_epoll_threads();\n    }", "test": "fn test_78() {\n    let bytes = [11, 8, 11, 240];\n    if bytes.len() < QUEUE_DATA_SIZE * QUEUE_NUM\n        || bytes.len() > (QUEUE_DATA_SIZE * QUEUE_NUM + MEM_SIZE)\n    {\n        return;\n    }\n    let mut balloon = virtio_devices::Balloon::new(\n        \"fuzzer_balloon\".to_owned(),\n        BALLOON_SIZE,\n        true,\n        true,\n        SeccompAction::Allow,\n        EventFd::new(EFD_NONBLOCK).unwrap(),\n        None,\n    )\n    .unwrap();\n    let queue_data = &bytes[..QUEUE_DATA_SIZE * QUEUE_NUM];\n    let mem_bytes = &bytes[QUEUE_DATA_SIZE * QUEUE_NUM..];\n    let mem = GuestMemoryMmap::from_ranges(&[(GuestAddress(0), MEM_SIZE)]).unwrap();\n    if mem.write_slice(mem_bytes, GuestAddress(0 as u64)).is_err() {\n        return;\n    }\n    let guest_memory = GuestMemoryAtomic::new(mem);\n    let mut queues = setup_virt_queues(\n        &[\n            &queue_data[..QUEUE_DATA_SIZE].try_into().unwrap(),\n            &queue_data[QUEUE_DATA_SIZE..QUEUE_DATA_SIZE * 2]\n                .try_into()\n                .unwrap(),\n            &queue_data[QUEUE_DATA_SIZE * 2..QUEUE_DATA_SIZE * 3]\n                .try_into()\n                .unwrap(),\n        ],\n        0,\n    );\n    let inflate_q = queues.remove(0);\n    let inflate_evt = EventFd::new(0).unwrap();\n    let inflate_queue_evt = unsafe { EventFd::from_raw_fd(libc::dup(inflate_evt.as_raw_fd())) };\n    let deflate_q = queues.remove(0);\n    let deflate_evt = EventFd::new(0).unwrap();\n    let deflate_queue_evt = unsafe { EventFd::from_raw_fd(libc::dup(deflate_evt.as_raw_fd())) };\n    let reporting_q = queues.remove(0);\n    let reporting_evt = EventFd::new(0).unwrap();\n    let reporting_queue_evt = unsafe { EventFd::from_raw_fd(libc::dup(reporting_evt.as_raw_fd())) };\n    inflate_queue_evt.write(1).unwrap();\n    deflate_queue_evt.write(1).unwrap();\n    reporting_queue_evt.write(1).unwrap();\n    balloon\n        .activate(\n            guest_memory,\n            Arc::new(NoopVirtioInterrupt {}),\n            vec![\n                (0, inflate_q, inflate_evt),\n                (1, deflate_q, deflate_evt),\n                (2, reporting_q, reporting_evt),\n            ],\n        )\n        .ok();\n    balloon.wait_for_epoll_threads();\n}"}
{"test_id": "rustls-rustls/rustls-rustls-ae583bd/tests-gen/client.inputs.rs::test_89", "code": "pub fn process_new_packets(&mut self) -> Result<IoState, Error> {\n        match self {\n            Self::Client(conn) => conn.process_new_packets(),\n            Self::Server(conn) => conn.process_new_packets(),\n        }\n    }", "test": "fn test_89() {\n    let data = [\n        22, 3, 3, 0, 63, 2, 0, 0, 59, 3, 3, 89, 16, 236, 200, 17, 90, 14, 121, 52, 150, 218, 66,\n        28, 227, 55, 237, 109, 95, 209, 111, 252, 56, 238, 6, 251, 154, 147, 123, 211, 206, 186,\n        114, 0, 204, 169, 0, 0, 19, 255, 1, 0, 1, 0, 0, 23, 0, 0, 0, 35, 0, 0, 0, 11, 0, 2, 1, 0,\n        22, 3, 3, 14, 229, 11, 0, 14, 225, 0, 14, 222, 0, 7, 96, 48, 130, 7, 92, 48, 130, 6, 68,\n        160, 3, 2, 1, 2, 2, 8, 83, 65, 61, 145, 120, 210, 140, 39, 48, 13, 6, 9, 42, 134, 72, 134,\n        247, 13, 1, 1, 11, 5, 0, 48, 73, 49, 11, 48, 9, 6, 3, 85, 4, 6, 19, 2, 85, 83, 49, 19, 48,\n        17, 6, 3, 85, 4, 10, 19, 10, 71, 111, 111, 103, 108, 101, 32, 73, 110, 99, 49, 37, 48, 35,\n        6, 3, 85, 4, 3, 19, 28, 71, 111, 111, 103, 108, 101, 32, 73, 110, 116, 101, 114, 110, 101,\n        116, 32, 65, 117, 116, 104, 111, 114, 105, 116, 121, 32, 71, 50, 48, 30, 23, 13, 49, 55,\n        48, 52, 50, 55, 48, 56, 51, 48, 48, 48, 90, 23, 13, 49, 55, 48, 55, 50, 48, 48, 56, 51, 48,\n        48, 48, 90, 48, 102, 49, 11, 48, 9, 6, 3, 85, 4, 6, 19, 2, 85, 83, 49, 19, 48, 17, 6, 3,\n        85, 4, 8, 12, 10, 67, 97, 108, 105, 102, 111, 114, 110, 105, 97, 49, 22, 48, 20, 6, 3, 85,\n        4, 7, 12, 13, 77, 111, 117, 110, 116, 97, 105, 110, 32, 86, 105, 101, 119, 49, 19, 48, 17,\n        6, 3, 85, 4, 10, 12, 10, 71, 111, 111, 103, 108, 101, 32, 73, 110, 99, 49, 21, 48, 19, 6,\n        3, 85, 4, 3, 12, 12, 42, 46, 103, 111, 111, 103, 108, 101, 46, 99, 111, 109, 48, 89, 48,\n        19, 6, 7, 42, 134, 72, 206, 61, 2, 1, 6, 8, 42, 134, 72, 206, 61, 3, 1, 7, 3, 66, 0, 4,\n        189, 77, 48, 133, 70, 173, 158, 211, 104, 157, 203, 90, 81, 210, 82, 202, 205, 147, 209,\n        252, 62, 33, 220, 191, 25, 45, 49, 119, 71, 86, 34, 248, 128, 116, 164, 199, 172, 91, 179,\n        223, 239, 76, 76, 63, 25, 69, 53, 53, 110, 197, 165, 220, 25, 210, 237, 147, 30, 18, 131,\n        158, 196, 86, 94, 111, 163, 130, 4, 244, 48, 130, 4, 240, 48, 29, 6, 3, 85, 29, 37, 4, 22,\n        48, 20, 6, 8, 43, 6, 1, 5, 5, 7, 3, 1, 6, 8, 43, 6, 1, 5, 5, 7, 3, 2, 48, 11, 6, 3, 85, 29,\n        15, 4, 4, 3, 2, 7, 128, 48, 130, 3, 179, 6, 3, 85, 29, 17, 4, 130, 3, 170, 48, 130, 3, 166,\n        130, 12, 42, 46, 103, 111, 111, 103, 108, 101, 46, 99, 111, 109, 130, 13, 42, 46, 97, 110,\n        100, 114, 111, 105, 100, 46, 99, 111, 109, 130, 22, 42, 46, 97, 112, 112, 101, 110, 103,\n        105, 110, 101, 46, 103, 111, 111, 103, 108, 101, 46, 99, 111, 109, 130, 18, 42, 46, 99,\n        108, 111, 117, 100, 46, 103, 111, 111, 103, 108, 101, 46, 99, 111, 109, 130, 14, 42, 46,\n        103, 99, 112, 46, 103, 118, 116, 50, 46, 99, 111, 109, 130, 22, 42, 46, 103, 111, 111, 103,\n        108, 101, 45, 97, 110, 97, 108, 121, 116, 105, 99, 115, 46, 99, 111, 109, 130, 11, 42, 46,\n        103, 111, 111, 103, 108, 101, 46, 99, 97, 130, 11, 42, 46, 103, 111, 111, 103, 108, 101,\n        46, 99, 108, 130, 14, 42, 46, 103, 111, 111, 103, 108, 101, 46, 99, 111, 46, 105, 110, 130,\n        14, 42, 46, 103, 111, 111, 103, 108, 101, 46, 99, 111, 46, 106, 112, 130, 14, 42, 46, 103,\n        111, 111, 103, 108, 101, 46, 99, 111, 46, 117, 107, 130, 15, 42, 46, 103, 111, 111, 103,\n        108, 101, 46, 99, 111, 109, 46, 97, 114, 130, 15, 42, 46, 103, 111, 111, 103, 108, 101, 46,\n        99, 111, 109, 46, 97, 117, 130, 15, 42, 46, 103, 111, 111, 103, 108, 101, 46, 99, 111, 109,\n        46, 98, 114, 130, 15, 42, 46, 103, 111, 111, 103, 108, 101, 46, 99, 111, 109, 46, 99, 111,\n        130, 15, 42, 46, 103, 111, 111, 103, 108, 101, 46, 99, 111, 109, 46, 109, 120, 130, 15, 42,\n        46, 103, 111, 111, 103, 108, 101, 46, 99, 111, 109, 46, 116, 114, 130, 15, 42, 46, 103,\n        111, 111, 103, 108, 101, 46, 99, 111, 109, 46, 118, 110, 130, 11, 42, 46, 103, 111, 111,\n        103, 108, 101, 46, 100, 101, 130, 11, 42, 46, 103, 111, 111, 103, 108, 101, 46, 101, 115,\n        130, 11, 42, 46, 103, 111, 111, 103, 108, 101, 46, 102, 114, 130, 11, 42, 46, 103, 111,\n        111, 103, 108, 101, 46, 104, 117, 130, 11, 42, 46, 103, 111, 111, 103, 108, 101, 46, 105,\n        116, 130, 11, 42, 46, 103, 111, 111, 103, 108, 101, 46, 110, 108, 130, 11, 42, 46, 103,\n        111, 111, 103, 108, 101, 46, 112, 108, 130, 11, 42, 46, 103, 111, 111, 103, 108, 101, 46,\n        112, 116, 130, 18, 42, 46, 103, 111, 111, 103, 108, 101, 97, 100, 97, 112, 105, 115, 46,\n        99, 111, 109, 130, 15, 42, 46, 103, 111, 111, 103, 108, 101, 97, 112, 105, 115, 46, 99,\n        110, 130, 20, 42, 46, 103, 111, 111, 103, 108, 101, 99, 111, 109, 12, 6, 10, 43, 6, 1, 4,\n        1, 214, 121, 2, 5, 1, 48, 13, 6, 9, 42, 134, 72, 134, 247, 13, 1, 1, 11, 5, 0, 3, 130, 1,\n        1, 0, 8, 78, 4, 167, 128, 127, 16, 22, 67, 94, 2, 173, 215, 66, 128, 244, 176, 142, 210,\n        174, 179, 235, 17, 125, 144, 132, 24, 125, 231, 144, 21, 251, 73, 127, 168, 153, 5, 145,\n        187, 122, 201, 214, 60, 55, 24, 9, 154, 182, 199, 146, 32, 7, 53, 51, 9, 228, 40, 99, 114,\n        13, 180, 224, 50, 156, 135, 152, 196, 27, 118, 137, 103, 193, 80, 88, 176, 19, 170, 19, 26,\n        27, 48, 165, 190, 234, 17, 149, 76, 72, 99, 73, 233, 153, 93, 32, 55, 204, 254, 42, 105,\n        81, 22, 149, 75, 169, 222, 73, 130, 192, 16, 112, 244, 44, 243, 236, 188, 36, 36, 208, 78,\n        172, 165, 217, 94, 30, 109, 146, 193, 167, 172, 72, 53, 129, 249, 229, 228, 156, 101, 105,\n        205, 135, 164, 65, 80, 63, 46, 87, 165, 145, 81, 18, 88, 14, 140, 9, 161, 172, 122, 164,\n        18, 165, 39, 243, 154, 16, 151, 125, 85, 3, 6, 247, 102, 88, 95, 95, 100, 225, 171, 93,\n        109, 165, 57, 72, 117, 152, 76, 41, 90, 58, 141, 211, 43, 202, 156, 85, 4, 191, 244, 230,\n        20, 213, 128, 172, 38, 237, 23, 137, 166, 147, 108, 92, 164, 204, 184, 240, 102, 142, 100,\n        227, 125, 154, 226, 0, 179, 73, 199, 228, 10, 170, 221, 91, 131, 199, 112, 144, 70, 78,\n        190, 208, 219, 89, 150, 108, 46, 245, 22, 54, 222, 113, 204, 1, 194, 18, 193, 33, 198, 22,\n        0, 3, 129, 48, 130, 3, 125, 48, 130, 2, 230, 160, 3, 2, 1, 2, 2, 3, 18, 187, 230, 48, 13,\n        6, 9, 42, 134, 72, 134, 247, 13, 1, 1, 5, 5, 0, 48, 78, 49, 11, 48, 9, 6, 3, 85, 4, 6, 19,\n        2, 85, 83, 49, 16, 48, 14, 6, 3, 85, 4, 10, 19, 7, 69, 113, 117, 105, 102, 97, 120, 49, 45,\n        48, 43, 6, 3, 85, 4, 11, 19, 36, 69, 113, 117, 105, 102, 97, 120, 32, 83, 101, 99, 117,\n        114, 101, 32, 67, 101, 114, 116, 105, 102, 105, 99, 97, 116, 101, 32, 65, 117, 116, 104,\n        111, 114, 105, 116, 121, 48, 30, 23, 13, 48, 50, 48, 53, 50, 49, 48, 52, 48, 48, 48, 48,\n        90, 23, 13, 49, 56, 48, 56, 50, 49, 48, 52, 48, 48, 48, 48, 90, 48, 66, 49, 11, 48, 9, 6,\n        3, 85, 4, 6, 19, 2, 85, 83, 49, 22, 48, 20, 6, 3, 85, 4, 10, 19, 13, 71, 101, 111, 84, 114,\n        117, 115, 116, 32, 73, 110, 99, 46, 49, 27, 48, 25, 6, 3, 85, 4, 3, 19, 18, 71, 101, 111,\n        84, 114, 117, 115, 116, 32, 71, 108, 111, 98, 97, 108, 32, 67, 65, 48, 130, 1, 34, 48, 13,\n        6, 9, 42, 134, 72, 134, 247, 13, 1, 1, 1, 5, 0, 3, 130, 1, 15, 0, 48, 130, 1, 10, 2, 130,\n        1, 1, 0, 218, 204, 24, 99, 48, 253, 244, 23, 35, 26, 86, 126, 91, 223, 60, 108, 56, 228,\n        113, 183, 120, 145, 212, 188, 161, 216, 76, 248, 168, 67, 182, 3, 233, 77, 33, 7, 8, 136,\n        218, 88, 47, 102, 57, 41, 189, 5, 120, 139, 157, 56, 232, 5, 183, 106, 126, 113, 164, 230,\n        196, 96, 166, 176, 239, 128, 228, 137, 40, 15, 158, 37, 214, 237, 131, 243, 173, 166, 145,\n        199, 152, 201, 66, 24, 53, 20, 157, 173, 152, 70, 146, 46, 79, 202, 241, 135, 67, 193, 22,\n        149, 87, 45, 80, 239, 137, 45, 128, 122, 87, 173, 242, 238, 95, 107, 210, 0, 141, 185, 20,\n        248, 20, 21, 53, 217, 192, 70, 163, 123, 114, 200, 145, 191, 201, 85, 43, 205, 208, 151,\n        62, 156, 38, 100, 204, 223, 206, 131, 25, 113, 202, 78, 230, 212, 213, 123, 169, 25, 205,\n        85, 222, 200, 236, 210, 94, 56, 83, 229, 92, 79, 140, 45, 254, 80, 35, 54, 252, 102, 230,\n        203, 142, 164, 57, 25, 0, 183, 149, 2, 57, 145, 11, 14, 254, 56, 46, 209, 29, 5, 154, 246,\n        77, 62, 111, 15, 7, 29, 175, 44, 30, 143, 96, 57, 226, 250, 54, 83, 19, 57, 212, 94, 38,\n        43, 219, 61, 168, 20, 189, 50, 235, 24, 3, 40, 82, 4, 113, 229, 171, 51, 61, 225, 56, 187,\n        7, 54, 132, 98, 156, 121, 234, 22, 48, 244, 95, 192, 43, 232, 113, 107, 228, 249, 2, 3, 1,\n        0, 1, 163, 129, 240, 48, 129, 237, 48, 31, 6, 3, 85, 29, 35, 4, 24, 48, 22, 128, 20, 72,\n        230, 104, 249, 43, 210, 178, 149, 215, 71, 216, 35, 32, 16, 79, 51, 152, 144, 159, 212, 48,\n        29, 6, 3, 85, 29, 14, 4, 22, 4, 20, 192, 122, 152, 104, 141, 137, 251, 171, 5, 100, 12, 17,\n        125, 170, 125, 101, 184, 202, 204, 78, 48, 15, 6, 3, 85, 29, 19, 1, 1, 255, 4, 5, 48, 3, 1,\n        1, 255, 48, 14, 6, 3, 85, 29, 15, 1, 1, 255, 4, 4, 3, 2, 1, 6, 48, 58, 6, 3, 85, 29, 31, 4,\n        51, 48, 49, 48, 47, 160, 45, 160, 43, 134, 41, 104, 116, 116, 112, 58, 47, 47, 99, 114,\n        108, 46, 103, 101, 111, 116, 114, 117, 115, 116, 46, 99, 111, 109, 47, 99, 114, 108, 115,\n        47, 115, 101, 99, 117, 114, 101, 99, 97, 46, 99, 114, 108, 48, 78, 6, 3, 85, 29, 32, 4, 71,\n        48, 69, 48, 67, 6, 4, 85, 29, 32, 0, 48, 59, 48, 57, 6, 8, 43, 6, 1, 5, 5, 7, 2, 1, 22, 45,\n        104, 116, 116, 112, 115, 58, 47, 47, 119, 119, 119, 46, 103, 101, 111, 116, 114, 117, 115,\n        116, 46, 99, 111, 109, 47, 114, 101, 115, 111, 117, 114, 99, 101, 115, 47, 114, 101, 112,\n        111, 115, 105, 116, 111, 114, 121, 48, 13, 6, 9, 42, 134, 72, 134, 247, 13, 1, 1, 5, 5, 0,\n        3, 129, 129, 0, 118, 225, 18, 110, 78, 75, 22, 18, 134, 48, 6, 178, 129, 8, 207, 240, 8,\n        199, 199, 113, 126, 102, 238, 194, 237, 212, 59, 31, 255, 240, 240, 200, 78, 214, 67, 56,\n        176, 185, 48, 125, 24, 208, 85, 131, 162, 106, 203, 54, 17, 156, 232, 72, 102, 163, 109,\n        127, 184, 19, 212, 71, 254, 139, 90, 92, 115, 252, 174, 217, 27, 50, 25, 56, 171, 151, 52,\n        20, 170, 150, 210, 235, 163, 28, 20, 8, 73, 182, 187, 229, 145, 239, 131, 54, 235, 29, 86,\n        111, 202, 218, 188, 115, 99, 144, 228, 127, 123, 62, 34, 203, 61, 7, 237, 95, 56, 116, 156,\n        227, 3, 80, 78, 161, 175, 152, 238, 97, 242, 132, 63, 18, 22, 3, 3, 0, 114, 12, 0, 0, 110,\n        3, 0, 29, 32, 75, 217, 44, 1, 117, 219, 122, 48, 71, 161, 89, 28, 185, 211, 203, 104, 197,\n        72, 172, 58, 227, 76, 100, 140, 23, 97, 211, 83, 70, 10, 176, 5, 4, 3, 0, 70, 48, 68, 2,\n        32, 118, 77, 25, 193, 184, 245, 209, 235, 233, 73, 206, 164, 213, 214, 217, 58, 189, 77,\n        153, 98, 68, 51, 73, 61, 86, 46, 224, 166, 129, 143, 233, 99, 2, 32, 124, 140, 108, 231,\n        222, 178, 70, 254, 130, 96, 249, 202, 22, 73, 30, 105, 180, 48, 177, 254, 92, 206, 16, 218,\n        0, 232, 189, 151, 157, 245, 39, 28, 22, 3, 3, 0, 4, 14, 0, 0, 0, 22, 3, 3, 0, 190, 4, 0, 0,\n        186, 0, 1, 137, 192, 0, 180, 20, 223, 122, 124, 254, 176, 24, 87, 129, 188, 25, 248, 233,\n        202, 114, 232, 117, 171, 162, 35, 223, 70, 217, 201, 60, 235, 114, 254, 181, 102, 199, 213,\n        157, 219, 90, 42, 235, 135, 84, 255, 194, 219, 249, 247, 214, 54, 54, 229, 79, 220, 3, 190,\n        161, 210, 47, 16, 37, 64, 211, 213, 90, 152, 193, 224, 185, 50, 214, 247, 202, 43, 114,\n        244, 225, 125, 149, 103, 150, 160, 133, 107, 60, 123, 80, 172, 188, 210, 189, 252, 195, 26,\n        25, 7, 251, 196, 130, 237, 57, 195, 62, 96, 219, 233, 108, 223, 21, 183, 44, 247, 233, 117,\n        14, 205, 189, 245, 126, 108, 249, 188, 52, 226, 115, 236, 151, 168, 171, 226, 99, 204, 123,\n        77, 237, 165, 38, 196, 158, 196, 163, 39, 31, 219, 195, 16, 152, 4, 135, 131, 197, 26, 192,\n        175, 73, 208, 102, 224, 50, 80, 230, 29, 5, 207, 178, 98, 39, 107, 230, 1, 197, 170, 5, 64,\n        181, 56, 55, 178, 122, 4, 178, 114, 110, 79, 20, 3, 3, 0, 1, 1, 22, 3, 3, 0, 32, 183, 30,\n        234, 49, 21, 153, 244, 50, 141, 222, 123, 52, 1, 109, 64, 238, 29, 191, 187, 51, 222, 29,\n        236, 211, 51, 142, 115, 248, 228, 41, 223, 232, 23, 3, 3, 5, 145, 183, 198, 127, 233, 133,\n        132, 204, 255, 193, 240, 165, 168, 179, 134, 137, 28, 111, 57, 20, 103, 109, 40, 93, 116,\n        27, 183, 6, 173, 163, 53, 13, 72, 122, 43, 63, 229, 34, 239, 206, 238, 224, 219, 154, 89,\n        232, 199, 231, 76, 220, 48, 166, 150, 198, 187, 179, 212, 170, 99, 14, 86, 71, 119, 180,\n        116, 170, 223, 163, 40, 114, 100, 115, 113, 43, 44, 114, 235, 76, 52, 47, 163, 154, 106,\n        75, 206, 13, 169, 35, 146, 186, 235, 26, 215, 226, 25, 96, 82, 134, 106, 165, 127, 165,\n        151, 155, 237, 16, 83, 188, 25, 119, 139, 21, 127, 119, 176, 100, 73, 39, 111, 86, 232, 52,\n        9, 66, 93, 115, 223, 106, 49, 206, 238, 160, 132, 136, 64, 102, 43, 74, 71, 121, 174, 29,\n        24, 97, 80, 95, 52, 218, 59, 92, 197, 127, 255, 57, 181, 131, 22, 44, 103, 181, 255, 147,\n        102, 90, 15, 183, 116, 87, 9, 234, 149, 220, 97, 185, 51, 15, 48, 192, 77, 192, 92, 6, 25,\n        231, 98, 183, 247, 191, 91, 35, 232, 21, 25, 172, 40, 237, 60, 161, 137, 231, 74, 255, 83,\n        254, 36, 142, 212, 17, 244, 228, 22, 175, 11, 18, 28, 10, 13, 59, 153, 59, 167, 135, 132,\n        139, 137, 113, 140, 127, 144, 118, 200, 162, 233, 78, 190, 163, 76, 226, 254, 141, 23, 103,\n        104, 130, 9, 249, 38, 224, 186, 81, 202, 138, 93, 91, 204, 157, 215, 80, 29, 100, 172, 90,\n        238, 198, 240, 210, 187, 19, 62, 115, 118, 162, 168, 216, 71, 112, 46, 23, 133, 22, 189,\n        210, 149, 133, 48, 200, 136, 154, 38, 232, 39, 155, 118, 193, 34, 213, 153, 254, 27, 118,\n        184, 252, 128, 4, 175, 4, 84, 119, 78, 252, 154, 99, 252, 142, 108, 170, 171, 108, 4, 181,\n        42, 121, 214, 195, 219, 86, 242, 192, 126, 196, 223, 239, 42, 199, 225, 212, 234, 10, 122,\n        3, 193, 28, 84, 12, 112, 161, 253, 10, 169, 105, 164, 63, 97, 189, 164, 233, 134, 45, 115,\n        68, 28, 24, 245, 177, 156, 59, 119, 158, 169, 190, 92, 55, 25, 81, 131, 16, 97, 164, 233,\n        188, 6, 13, 197, 35, 180, 215, 5, 222, 218, 153, 211, 204, 140, 43, 16, 66, 70, 37, 188,\n        245, 142, 91, 181, 176, 50, 210, 247, 126, 210, 254, 254, 56, 58, 202, 187, 189, 198, 247,\n        74, 189, 80, 143, 231, 208, 22, 188, 255, 184, 79, 239, 101, 153, 38, 185, 223, 119, 141,\n        143, 241, 93, 236, 72, 153, 185, 119, 215, 135, 123, 202, 66, 204, 12, 243, 246, 48, 43,\n        154, 83, 0, 100, 146, 157, 230, 233, 147, 209, 45, 106, 170, 231, 113, 162, 217, 136, 142,\n        254, 179, 55, 216, 202, 171, 112, 33, 169, 211, 27, 69, 131, 131, 186, 210, 79, 186, 244,\n        223, 25, 153, 0, 204, 17, 150, 183, 82, 33, 40, 165, 178, 214, 212, 185, 215, 118, 116,\n        192, 121, 23, 111, 14, 148, 118, 17, 195, 123, 98, 96, 227, 160, 203, 98, 44, 10, 17, 73,\n        153, 8, 104, 225, 126, 28, 62, 50, 167, 146, 93, 246, 148, 222, 56, 235, 205, 189, 222,\n        186, 74, 242, 195, 91, 54, 135, 245, 245, 139, 235, 233, 43, 125, 89, 87, 250, 179, 228,\n        228, 166, 141, 238, 53, 245, 80, 235, 32, 142, 81, 180, 51, 107, 117, 28, 197, 62, 15, 107,\n        40, 167, 63, 119, 215, 239, 4, 53, 26, 254, 55, 153, 8, 89, 253, 156, 98, 25, 51, 54, 205,\n        255, 183, 37, 76, 39, 153, 92, 240, 79, 178, 157, 153, 205, 242, 91, 133, 204, 26, 107, 7,\n        105, 59, 186, 37, 217, 61, 171, 159, 165, 68, 171, 10, 91, 29, 236, 136, 188, 153, 202, 63,\n        99, 47, 38, 246, 92, 156, 111, 100, 241, 142, 19, 98, 204, 171, 188, 6, 5, 117, 91, 47, 16,\n        227, 100, 43, 77, 56, 70, 231, 10, 161, 170, 195, 142, 34, 154, 173, 32, 78, 93, 39, 56,\n        185, 38, 249, 59, 219, 48, 15, 106, 245, 187, 64, 82, 47, 144, 134, 130, 154, 54, 87, 70,\n        166, 72, 234, 147, 121, 227, 24, 77, 204, 246, 109, 49, 57, 104, 114, 128, 35, 40, 34, 113,\n        75, 116, 91, 6, 43, 28, 123, 123, 43, 180, 82, 237, 1, 250, 108, 126, 244, 40, 186, 108,\n        59, 59, 1, 232, 50, 14, 248, 26, 158, 112, 110, 245, 133, 40, 44, 38, 130, 187, 34, 190,\n        179, 134, 98, 54, 71, 52, 151, 64, 70, 253, 247, 48, 201, 189, 117, 28, 18, 6, 111, 239,\n        64, 248, 250, 231, 85, 20, 133, 210, 238, 207, 121, 136, 37, 127, 16, 135, 191, 150, 42,\n        174, 107, 239, 142, 40, 108, 34, 66, 36, 233, 104, 52, 137, 12, 49, 17, 219, 213, 165, 132,\n        160, 153, 6, 175, 133, 172, 78, 183, 236, 228, 81, 164, 11, 152, 93, 194, 212, 117, 179,\n        84, 175, 251, 73, 172, 77, 252, 207, 166, 218, 20, 168, 183, 0, 205, 40, 203, 120, 130, 87,\n        123, 61, 140, 237, 224, 132, 178, 103, 208, 78, 140, 40, 13, 123, 9, 47, 68, 171, 162, 116,\n        160, 87, 84, 2, 14, 84, 180, 242, 73, 38, 223, 191, 114, 45, 232, 208, 252, 180, 95, 17,\n        205, 199, 106, 169, 123, 181, 212, 6, 41, 91, 38, 81, 23, 176, 105, 40, 194, 246, 174, 78,\n        30, 205, 204, 147, 9, 172, 98, 65, 188, 225, 83, 245, 167, 203, 99, 201, 207, 126, 192,\n        173, 250, 25, 28, 101, 164, 88, 191, 186, 203, 199, 243, 35, 13, 187, 204, 61, 180, 2, 24,\n        198, 83, 6, 147, 212, 139, 186, 164, 180, 193, 193, 241, 96, 217, 160, 58, 117, 133, 132,\n        97, 135, 174, 24, 49, 123, 161, 202, 191, 10, 20, 238, 223, 213, 107, 139, 69, 58, 239, 56,\n        147, 15, 71, 130, 244, 112, 179, 219, 45, 136, 223, 145, 5, 100, 70, 194, 104, 130, 39, 47,\n        144, 40, 179, 162, 166, 177, 238, 10, 122, 181, 88, 128, 242, 228, 211, 145, 239, 231, 38,\n        58, 56, 75, 175, 203, 162, 198, 220, 58, 152, 213, 24, 223, 20, 41, 227, 102, 59, 122, 94,\n        95, 197, 33, 196, 28, 96, 184, 228, 76, 194, 197, 105, 5, 26, 90, 174, 79, 27, 218, 172,\n        92, 44, 155, 33, 236, 30, 190, 13, 110, 13, 60, 176, 93, 14, 91, 214, 255, 254, 88, 103,\n        178, 198, 121, 186, 64, 227, 162, 168, 215, 191, 237, 199, 111, 169, 20, 159, 6, 182, 229,\n        25, 157, 45, 54, 158, 121, 226, 199, 147, 48, 82, 174, 41, 55, 185, 164, 65, 101, 174, 22,\n        69, 163, 141, 174, 103, 99, 196, 91, 121, 197, 219, 197, 90, 242, 150, 42, 209, 60, 97, 55,\n        242, 58, 126, 231, 22, 127, 91, 166, 44, 228, 231, 29, 236, 61, 35, 12, 152, 48, 104, 183,\n        24, 213, 102, 189, 214, 101, 136, 11, 226, 31, 83, 243, 242, 206, 101, 180, 179, 14, 35,\n        13, 104, 249, 151, 118, 148, 180, 205, 245, 29, 35, 253, 113, 62, 102, 109, 228, 28, 120,\n        68, 76, 243, 62, 250, 159, 100, 137, 94, 216, 30, 90, 10, 230, 54, 242, 196, 232, 13, 12,\n        177, 50, 32, 91, 126, 103, 88, 54, 57, 13, 172, 80, 167, 15, 51, 109, 159, 237, 164, 251,\n        229, 16, 134, 132, 56, 93, 60, 51, 230, 25, 105, 230, 1, 54, 204, 248, 53, 80, 16, 54, 168,\n        4, 173, 246, 198, 106, 252, 153, 5, 227, 23, 169, 9, 2, 162, 237, 46, 114, 238, 203, 103,\n        62, 66, 43, 119, 56, 209, 97, 60, 189, 54, 25, 228, 137, 19, 198, 68, 137, 40, 197, 159,\n        152, 220, 149, 128, 201, 201, 138, 46, 70, 97, 140, 146, 244, 106, 103, 120, 211, 231, 150,\n        37, 41, 30, 87, 208, 191, 66, 142, 55, 222, 11, 102, 197, 30, 213, 6, 144, 18, 123, 235,\n        145, 73, 249, 60, 240, 251, 161, 240, 147, 201, 165, 206, 167, 115, 79, 225, 189, 27, 95,\n        168, 239, 189, 46, 13, 198, 47, 228, 179, 156, 53, 40, 209, 116, 191, 177, 143, 60, 157,\n        172, 193, 123, 252, 146, 28, 6, 20, 225, 237, 80, 166, 97, 59, 162, 189, 172, 91, 121, 248,\n        134, 72, 36, 23, 3, 3, 1, 134, 184, 233, 245, 63, 202, 189, 95, 218, 14, 44, 104, 150, 88,\n        57, 147, 139, 108, 12, 24, 244, 48, 244, 12, 105, 140, 216, 220, 203, 61, 245, 166, 98,\n        248, 29, 21, 205, 163, 217, 131, 222, 142, 243, 231, 56, 251, 8, 91, 104, 142, 192, 167,\n        237, 78, 125, 38, 215, 152, 134, 128, 126, 89, 102, 207, 188, 230, 246, 14, 24, 126, 138,\n        114, 180, 118, 107, 248, 123, 189, 108, 188, 51, 72, 43, 11, 120, 144, 125, 151, 128, 70,\n        175, 208, 157, 21, 23, 181, 116, 24, 151, 213, 169, 71, 137, 211, 133, 66, 217, 94, 57,\n        172, 53, 200, 76, 212, 201, 64, 165, 40, 211, 58, 41, 133, 5, 180, 151, 59, 17, 112, 75,\n        19, 186, 172, 50, 36, 184, 98, 225, 103, 3, 192, 196, 234, 34, 58, 122, 13, 145, 186, 175,\n        6, 194, 14, 113, 209, 83, 212, 155, 61, 162, 156, 108, 103, 139, 224, 128, 191, 58, 168,\n        228, 223, 63, 16, 216, 161, 129, 103, 100, 126, 196, 98, 10, 77, 40, 217, 195, 19, 205,\n        202, 220, 96, 17, 175, 95, 25, 22, 158, 125, 215, 107, 136, 1, 124, 91, 213, 38, 226, 229,\n        171, 102, 229, 43, 21, 96, 18, 64, 250, 121, 28, 196, 204, 232, 170, 196, 217, 241, 72, 52,\n        204, 213, 15, 38, 22, 211, 23, 30, 200, 130, 144, 162, 241, 75, 131, 109, 216, 53, 176,\n        129, 181, 234, 255, 221, 66, 0, 103, 20, 218, 25, 242, 178, 29, 66, 74, 132, 102, 65, 47,\n        113, 156, 220, 240, 218, 205, 242, 139, 64, 190, 177, 79, 163, 13, 245, 95, 144, 138, 214,\n        18, 105, 157, 143, 227, 178, 156, 38, 215, 106, 254, 245, 153, 14, 188, 52, 101, 188, 238,\n        86, 47, 120, 37, 100, 136, 93, 124, 217, 73, 77, 154, 46, 244, 106, 178, 10, 189, 146, 171,\n        135, 220, 144, 201, 229, 61, 61, 135, 192, 76, 64, 222, 138, 66, 197, 214, 166, 41, 39,\n        147, 245, 35, 15, 191, 134, 204, 64, 72, 168, 114, 232, 179, 225, 117, 94, 47, 184, 219,\n        143, 107, 210, 56, 223, 248, 86, 107, 154, 214, 43, 23, 71, 130, 241, 25, 50, 204, 144,\n        244, 19, 51, 33, 180, 0, 17, 184, 61, 147,\n    ];\n    let root_store = RootCertStore::empty();\n    let config = Arc::new(\n        ClientConfig::builder()\n            .with_safe_defaults()\n            .with_root_certificates(root_store)\n            .with_no_client_auth(),\n    );\n    let example_com = \"example.com\".try_into().unwrap();\n    let mut client = ClientConnection::new(config, example_com).unwrap();\n    let _ = client.read_tls(&mut io::Cursor::new(data));\n    let _ = client.process_new_packets();\n}"}
{"test_id": "cloud-hypervisor-cloud-hypervisor/cloud-hypervisor-cloud-hypervisor-db3a5f3/tests-gen/watchdog.inputs.rs::test_62", "code": "pub fn wait_for_epoll_threads(&mut self) {\n        self.common.wait_for_epoll_threads();\n    }", "test": "fn test_62() {\n    let bytes = [39, 0, 0, 0];\n    if bytes.len() < QUEUE_DATA_SIZE || bytes.len() > (QUEUE_DATA_SIZE + MEM_SIZE) {\n        return;\n    }\n    let mut watchdog = virtio_devices::Watchdog::new(\n        \"fuzzer_watchdog\".to_owned(),\n        EventFd::new(EFD_NONBLOCK).unwrap(),\n        SeccompAction::Allow,\n        EventFd::new(EFD_NONBLOCK).unwrap(),\n        None,\n    )\n    .unwrap();\n    let queue_data = &bytes[..QUEUE_DATA_SIZE];\n    let mem_bytes = &bytes[QUEUE_DATA_SIZE..];\n    let q = setup_virt_queue(queue_data.try_into().unwrap());\n    let mem = GuestMemoryMmap::from_ranges(&[(GuestAddress(0), MEM_SIZE)]).unwrap();\n    if mem.write_slice(mem_bytes, GuestAddress(0 as u64)).is_err() {\n        return;\n    }\n    let guest_memory = GuestMemoryAtomic::new(mem);\n    let evt = EventFd::new(0).unwrap();\n    let queue_evt = unsafe { EventFd::from_raw_fd(libc::dup(evt.as_raw_fd())) };\n    queue_evt.write(1).unwrap();\n    watchdog\n        .activate(\n            guest_memory,\n            Arc::new(NoopVirtioInterrupt {}),\n            vec![(0, q, evt)],\n        )\n        .ok();\n    watchdog.wait_for_epoll_threads();\n}"}
{"test_id": "uutils-coreutils/uutils-coreutils-73b7c46/tests-gen/fuzz_parse_size.inputs.rs::test_57", "code": "pub fn parse_size(size: &str) -> Result<u64, ParseSizeError> {\n    Parser::default().parse(size)\n}", "test": "fn test_57() {\n    let data = [138, 74, 10];\n    if let Ok(s) = std::str::from_utf8(data) {\n        _ = parse_size(s);\n    }\n}"}
{"test_id": "BurntSushi-memchr/BurntSushi-memchr-f3fde7a/tests-gen/memchr2.inputs.rs::test_91", "code": "fn count(self) -> usize {\n        self.it.count(|s, e| {\n            // SAFETY: We rely on our generic iterator to return valid start\n            // and end pointers.\n            unsafe { count_raw(self.needle1, s, e) }\n        })\n    }", "test": "fn test_91() {\n    let data = [90, 0, 48, 10];\n    if data.len() < 2 {\n        return;\n    }\n    memchr2_iter(data[0], data[1], &data[2..]).count();\n}"}
{"test_id": "tafia-calamine/tafia-calamine-5a5804d/tests-gen/fuzz_all.inputs.rs::test_96", "code": "fn count<R: Reader<BufReader<File>>>(path: &str) -> usize {\n    let path = format!(\"{}/{}\", env!(\"CARGO_MANIFEST_DIR\"), path);\n    let mut excel: R = open_workbook(&path).expect(\"cannot open excel file\");\n\n    let sheets = excel.sheet_names().to_owned();\n    let mut count = 0;\n    for s in sheets {\n        count += excel\n            .worksheet_range(&s)\n            .unwrap()\n            .unwrap()\n            .rows()\n            .flat_map(|r| r.iter())\n            .count();\n    }\n    count\n}", "test": "fn test_96() {\n    let data = [65, 93, 12];\n    let file_name = \"fuzz.xlsx\";\n    if let Ok(mut file) = File::create(file_name) {\n        if file.write_all(data).is_err() {\n            return;\n        }\n    }\n    let mut workbook: Xlsx<_> = match open_workbook(file_name) {\n        Ok(excel) => excel,\n        Err(_) => return,\n    };\n    for worksheet in workbook.worksheets() {\n        if let Some(Ok(range)) = workbook.worksheet_range(&worksheet.0) {\n            let _ = range.get_size().0 * range.get_size().1;\n            range.used_cells().count();\n        }\n    }\n    if let Some(Ok(mut vba)) = workbook.vba_project() {\n        let vba = vba.to_mut();\n        for module_name in vba.get_module_names() {\n            if vba.get_module(module_name).is_ok() {\n                for r in vba.get_references() {\n                    r.is_missing();\n                }\n            }\n        }\n    }\n    let sheets = workbook.sheet_names().to_owned();\n    for s in sheets {\n        if let Some(Ok(formula)) = workbook.worksheet_formula(&s) {\n            formula\n                .rows()\n                .flat_map(|r| r.iter().filter(|f| !f.is_empty()))\n                .count();\n        }\n    }\n}"}
{"test_id": "gimli-rs-gimli/gimli-rs-gimli-3947879/tests-gen/debug_aranges.inputs.rs::test_5", "code": "pub fn next(&mut self) -> Result<Option<UnitHeader<R>>> {\n        if self.input.is_empty() {\n            Ok(None)\n        } else {\n            let len = self.input.len();\n            match parse_unit_header(&mut self.input, self.offset.into()) {\n                Ok(header) => {\n                    self.offset.0 += len - self.input.len();\n                    Ok(Some(header))\n                }\n                Err(e) => {\n                    self.input.empty();\n                    Err(e)\n                }\n            }\n        }\n    }", "test": "fn test_5() {\n    let debug_aranges = [250];\n    let debug_aranges = DebugAranges::new(&debug_aranges, LittleEndian);\n    let mut headers = debug_aranges.headers();\n    while let Ok(Some(header)) = headers.next() {\n        let mut entries = header.entries();\n        while let Ok(Some(_entry)) = entries.next() {\n            continue;\n        }\n    }\n}"}
{"test_id": "cloud-hypervisor-cloud-hypervisor/cloud-hypervisor-cloud-hypervisor-db3a5f3/tests-gen/pmem.inputs.rs::test_49", "code": "pub fn wait_for_epoll_threads(&mut self) {\n        self.common.wait_for_epoll_threads();\n    }", "test": "fn test_49() {\n    let bytes = [10, 255, 10];\n    if bytes.len() < QUEUE_DATA_SIZE || bytes.len() > (QUEUE_DATA_SIZE + MEM_SIZE) {\n        return;\n    }\n    let mut pmem = create_dummy_pmem();\n    let queue_data = &bytes[..QUEUE_DATA_SIZE];\n    let mem_bytes = &bytes[QUEUE_DATA_SIZE..];\n    let q = setup_virt_queue(queue_data.try_into().unwrap());\n    let mem = GuestMemoryMmap::from_ranges(&[(GuestAddress(0), MEM_SIZE)]).unwrap();\n    if mem.write_slice(mem_bytes, GuestAddress(0 as u64)).is_err() {\n        return;\n    }\n    let guest_memory = GuestMemoryAtomic::new(mem);\n    let evt = EventFd::new(0).unwrap();\n    let queue_evt = unsafe { EventFd::from_raw_fd(libc::dup(evt.as_raw_fd())) };\n    queue_evt.write(1).unwrap();\n    pmem.activate(\n        guest_memory,\n        Arc::new(NoopVirtioInterrupt {}),\n        vec![(0, q, evt)],\n    )\n    .ok();\n    pmem.wait_for_epoll_threads();\n}"}
{"test_id": "image-rs-image-gif/image-rs-image-gif-80fd8c0/tests-gen/decode.inputs.rs::test_73", "code": "fn try_decode (data : & [u8]) -> Result < () , gif :: DecodingError > { let mut reader = gif :: Decoder :: new (data) ? ; while let Some (_) = reader . read_next_frame () ? { } Ok (()) }", "test": "fn test_73() {\n    let data = [10, 38];\n    let _ = try_decode(data);\n}"}
{"test_id": "XAMPPRocky-tokei/XAMPPRocky-tokei-92ddc2e/tests-gen/parse_from_slice_panic.inputs.rs::test_92", "code": "pub fn parse_from_slice (input : FuzzInput , check_total : bool) { let config = & Config { treat_doc_strings_as_comments : Some (input . treat_doc_strings_as_comments) , columns : None , hidden : None , no_ignore : None , no_ignore_parent : None , no_ignore_dot : None , no_ignore_vcs : None , sort : None , types : None , for_each_fn : None , } ; let stats = input . lang . parse_from_slice (input . data , config) ; if check_total { if let Ok (s) = str :: from_utf8 (input . data) { assert ! (stats . lines () <= s . lines () . count () , \"{} got more total lines ({}) than str::lines ({}). Code: {}, Comments: {}, Blanks: {}. treat_doc_strings_as_comments: {}. File contents (as UTF-8):\\n{}\" , input . lang . name () , stats . lines () , s . lines () . count () , stats . code , stats . comments , input . treat_doc_strings_as_comments , stats . blanks , s) } ; } }", "test": "fn test_92() {\n    let data = FuzzInput {\n        lang: ABNF,\n        treat_doc_strings_as_comments: false,\n        data: [255, 255, 255, 0, 0, 255, 255, 88],\n    };\n    parse_from_slice(data, false);\n}"}
{"test_id": "uutils-coreutils/uutils-coreutils-73b7c46/tests-gen/fuzz_parse_size.inputs.rs::test_61", "code": "pub fn parse_size(size: &str) -> Result<u64, ParseSizeError> {\n    Parser::default().parse(size)\n}", "test": "fn test_61() {\n    let data = [41, 10];\n    if let Ok(s) = std::str::from_utf8(data) {\n        _ = parse_size(s);\n    }\n}"}
{"test_id": "dtolnay-syn/dtolnay-syn-b1a038c/tests-gen/create_token_buffer.inputs.rs::test_29", "code": "fn parse_str(self, s: &str) -> Result<Self::Output> {\n        self.parse2(proc_macro2::TokenStream::from_str(s)?)\n    }", "test": "fn test_29() {\n    let data = [0, 76, 121];\n    if data.len() < 300 {\n        if let Ok(string) = str::from_utf8(data) {\n            let _ = immediate_fail.parse_str(string);\n        }\n    }\n}"}
{"test_id": "zip-rs-zip/zip-rs-zip-ed187d6/tests-gen/fuzz_read.inputs.rs::test_91", "code": "fn decompress_all (data : & [u8]) -> Result < () , Box < dyn std :: error :: Error > > { let reader = std :: io :: Cursor :: new (data) ; let mut zip = zip :: ZipArchive :: new (reader) ? ; for i in 0 .. zip . len () { let mut file = zip . by_index (i) ? ; if file . size () < 1 << 20 { let _ = std :: io :: copy (& mut file , & mut std :: io :: sink ()) ; } } Ok (()) }", "test": "fn test_91() {\n    let data = [152, 150, 10, 10];\n    let _ = decompress_all(data);\n}"}
{"test_id": "cloud-hypervisor-cloud-hypervisor/cloud-hypervisor-cloud-hypervisor-db3a5f3/tests-gen/cmos.inputs.rs::test_93", "code": "fn write(&mut self, _base: u64, offset: u64, data: &[u8]) -> Option<Arc<Barrier>> {\n        if data.len() != 1 {\n            warn!(\"Invalid write size on CMOS device: {}\", data.len());\n            return None;\n        }\n\n        match offset {\n            INDEX_OFFSET => self.index = data[0],\n            DATA_OFFSET => {\n                if self.index == 0x8f && data[0] == 0 {\n                    info!(\"CMOS reset\");\n                    self.reset_evt.write(1).unwrap();\n                    if let Some(vcpus_kill_signalled) = self.vcpus_kill_signalled.take() {\n                        // Spin until we are sure the reset_evt has been handled and that when\n                        // we return from the KVM_RUN we will exit rather than re-enter the guest.\n                        while !vcpus_kill_signalled.load(Ordering::SeqCst) {\n                            // This is more effective than thread::yield_now() at\n                            // avoiding a priority inversion with the VMM thread\n                            thread::sleep(std::time::Duration::from_millis(1));\n                        }\n                    }\n                } else {\n                    self.data[(self.index & INDEX_MASK) as usize] = data[0]\n                }\n            }\n            o => warn!(\"bad write offset on CMOS device: {}\", o),\n        };\n        None\n    }", "test": "fn test_93() {\n    let bytes = [39, 39, 3];\n    if bytes.len() < 16 {\n        return;\n    }\n    let mut below_4g = [0u8; 8];\n    let mut above_4g = [0u8; 8];\n    below_4g.copy_from_slice(&bytes[0..8]);\n    above_4g.copy_from_slice(&bytes[8..16]);\n    let mut cmos = Cmos::new(\n        u64::from_le_bytes(below_4g),\n        u64::from_le_bytes(above_4g),\n        EventFd::new(EFD_NONBLOCK).unwrap(),\n        None,\n    );\n    let mut i = 16;\n    while i < bytes.len() {\n        let read = bytes.get(i).unwrap_or(&0) % 2 == 0;\n        i += 1;\n        if read {\n            let offset = (bytes.get(i).unwrap_or(&0) % 2) as u64;\n            i += 1;\n            let mut out_bytes = vec![0];\n            cmos.read(0, offset, &mut out_bytes);\n        } else {\n            let offset = (bytes.get(i).unwrap_or(&0) % 2) as u64;\n            i += 1;\n            let data = vec![*bytes.get(i).unwrap_or(&0)];\n            i += 1;\n            cmos.write(0, offset, &data);\n        }\n    }\n}"}
{"test_id": "uutils-coreutils/uutils-coreutils-73b7c46/tests-gen/fuzz_parse_size.inputs.rs::test_11", "code": "pub fn parse_size(size: &str) -> Result<u64, ParseSizeError> {\n    Parser::default().parse(size)\n}", "test": "fn test_11() {\n    let data = [10, 10, 10, 10];\n    if let Ok(s) = std::str::from_utf8(data) {\n        _ = parse_size(s);\n    }\n}"}
{"test_id": "BurntSushi-memchr/BurntSushi-memchr-f3fde7a/tests-gen/memchr3.inputs.rs::test_55", "code": "fn count(self) -> usize {\n        self.it.count(|s, e| {\n            // SAFETY: We rely on our generic iterator to return valid start\n            // and end pointers.\n            unsafe { count_raw(self.needle1, s, e) }\n        })\n    }", "test": "fn test_55() {\n    let data = [22, 22];\n    if data.len() < 3 {\n        return;\n    }\n    memchr3_iter(data[0], data[1], data[2], &data[3..]).count();\n}"}
{"test_id": "marshallpierce-rust-base64/marshallpierce-rust-base64-4ef33cc/tests-gen/roundtrip_random_config.inputs.rs::test_13", "code": "fn decode<T: AsRef<[u8]>>(&self, input: T) -> Result<Vec<u8>, DecodeError> {\n        fn inner<E>(engine: &E, input_bytes: &[u8]) -> Result<Vec<u8>, DecodeError>\n        where\n            E: Engine + ?Sized,\n        {\n            let estimate = engine.internal_decoded_len_estimate(input_bytes.len());\n            let mut buffer = vec![0; estimate.decoded_len_estimate()];\n\n            let bytes_written = engine\n                .internal_decode(input_bytes, &mut buffer, estimate)?\n                .decoded_len;\n\n            buffer.truncate(bytes_written);\n\n            Ok(buffer)\n        }\n\n        inner(self, input.as_ref())\n    }", "test": "fn test_13() {\n    let data = [164, 118];\n    let engine = utils::random_engine(data);\n    let encoded = engine.encode(data);\n    let decoded = engine.decode(&encoded).unwrap();\n    assert_eq!(data, decoded.as_slice());\n}"}
{"test_id": "image-rs-image-png/image-rs-image-png-e113d76/tests-gen/buf_independent.inputs.rs::test_94", "code": "fn new (inner : R , cap : usize) -> Self { SmalBuf { inner , cap } }", "test": "fn test_94() {\n    let data = [41, 0, 0];\n    let limits = png::Limits { bytes: 1 << 16 };\n    let reference = png::Decoder::new_with_limits(data, limits);\n    let smal = png::Decoder::new_with_limits(SmalBuf::new(data, 1), limits);\n    let _ = png_compare(reference, smal);\n}"}
{"test_id": "bodil-im-rs/bodil-im-rs-2afaf54/tests-gen/ordset.inputs.rs::test_36", "code": "pub fn remove<BA>(&mut self, a: &BA) -> Option<A>\n    where\n        BA: Hash + Eq + ?Sized,\n        A: Borrow<BA>,\n    {\n        let root = PoolRef::make_mut(&self.pool.0, &mut self.root);\n        let result = root.remove(&self.pool.0, hash_key(&*self.hasher, a), 0, a);\n        if result.is_some() {\n            self.size -= 1;\n        }\n        result.map(|v| v.0)\n    }", "test": "fn test_36() {\n    let actions = [Remove(12094627905535)];\n    let mut set = OrdSet::new();\n    let mut nat = NatSet::new();\n    for action in actions {\n        match action {\n            Action::Insert(value) => {\n                let len = nat.len() + if nat.contains(&value) { 0 } else { 1 };\n                nat.insert(value);\n                set.insert(value);\n                assert_eq!(len, set.len());\n            }\n            Action::Remove(value) => {\n                let len = nat.len() - if nat.contains(&value) { 1 } else { 0 };\n                nat.remove(&value);\n                set.remove(&value);\n                assert_eq!(len, set.len());\n            }\n        }\n        assert_eq!(nat.len(), set.len());\n        assert_eq!(OrdSet::from(nat.clone()), set);\n    }\n}"}
{"test_id": "image-rs-image/image-rs-image-e5580ec/tests-gen/fuzzer_script_exr.inputs.rs::test_68", "code": "fn roundtrip (bytes : & [u8]) -> ImageResult < () > { # [doc = \" Read the file from the specified path into an `Rgba32FImage`.\"] fn read_as_rgba_byte_image (read : impl Read + Seek) -> ImageResult < (u32 , u32 , Vec < u8 >) > { let mut decoder = OpenExrDecoder :: with_alpha_preference (read , Some (true)) ? ; match usize :: try_from (decoder . total_bytes ()) { Ok (decoded_size) if decoded_size <= 256 * 1024 * 1024 => { decoder . set_limits (Limits :: default ()) ? ; let (width , height) = decoder . dimensions () ; let mut buffer = vec ! [0 ; decoded_size] ; decoder . read_image (buffer . as_mut_slice ()) ? ; Ok ((width , height , buffer)) } _ => Err (image :: ImageError :: Limits (image :: error :: LimitError :: from_kind (image :: error :: LimitErrorKind :: InsufficientMemory ,) ,)) , } } # [doc = \" Write an `Rgba32FImage`.\"] # [doc = \" Assumes the writer is buffered. In most cases,\"] # [doc = \" you should wrap your writer in a `BufWriter` for best performance.\"] fn write_rgba_image (write : impl Write + Seek , (width , height , data) : & (u32 , u32 , Vec < u8 >) ,) -> ImageResult < () > { OpenExrEncoder :: new (write) . write_image (data . as_slice () , * width , * height , ColorType :: Rgba32F) } let decoded_image = read_as_rgba_byte_image (Cursor :: new (bytes)) ? ; let mut bytes = Vec :: with_capacity (bytes . len () + 20) ; write_rgba_image (Cursor :: new (& mut bytes) , & decoded_image) ? ; let redecoded_image = read_as_rgba_byte_image (Cursor :: new (bytes)) ? ; assert_eq ! (decoded_image , redecoded_image , \"image was valid but was not reproducible\") ; Ok (()) }", "test": "fn test_68() {\n    let data = [11, 10, 2];\n    let _img = roundtrip(data);\n}"}
{"test_id": "gfx-rs-naga/gfx-rs-naga-92e41b4/tests-gen/wgsl_parser.inputs.rs::test_13", "code": "pub fn parse(mut self) -> Result<crate::Module, Error> {\n        let mut module = {\n            if self.next()? != spirv::MAGIC_NUMBER {\n                return Err(Error::InvalidHeader);\n            }\n            let version_raw = self.next()?;\n            let generator = self.next()?;\n            let _bound = self.next()?;\n            let _schema = self.next()?;\n            log::info!(\"Generated by {} version {:x}\", generator, version_raw);\n            crate::Module::default()\n        };\n\n        self.layouter.clear();\n        self.dummy_functions = Arena::new();\n        self.lookup_function.clear();\n        self.function_call_graph.clear();\n\n        loop {\n            use spirv::Op;\n\n            let inst = match self.next_inst() {\n                Ok(inst) => inst,\n                Err(Error::IncompleteData) => break,\n                Err(other) => return Err(other),\n            };\n            log::debug!(\"\\t{:?} [{}]\", inst.op, inst.wc);\n\n            match inst.op {\n                Op::Capability => self.parse_capability(inst),\n                Op::Extension => self.parse_extension(inst),\n                Op::ExtInstImport => self.parse_ext_inst_import(inst),\n                Op::MemoryModel => self.parse_memory_model(inst),\n                Op::EntryPoint => self.parse_entry_point(inst),\n                Op::ExecutionMode => self.parse_execution_mode(inst),\n                Op::String => self.parse_string(inst),\n                Op::Source => self.parse_source(inst),\n                Op::SourceExtension => self.parse_source_extension(inst),\n                Op::Name => self.parse_name(inst),\n                Op::MemberName => self.parse_member_name(inst),\n                Op::ModuleProcessed => self.parse_module_processed(inst),\n                Op::Decorate => self.parse_decorate(inst),\n                Op::MemberDecorate => self.parse_member_decorate(inst),\n                Op::TypeVoid => self.parse_type_void(inst),\n                Op::TypeBool => self.parse_type_bool(inst, &mut module),\n                Op::TypeInt => self.parse_type_int(inst, &mut module),\n                Op::TypeFloat => self.parse_type_float(inst, &mut module),\n                Op::TypeVector => self.parse_type_vector(inst, &mut module),\n                Op::TypeMatrix => self.parse_type_matrix(inst, &mut module),\n                Op::TypeFunction => self.parse_type_function(inst),\n                Op::TypePointer => self.parse_type_pointer(inst, &mut module),\n                Op::TypeArray => self.parse_type_array(inst, &mut module),\n                Op::TypeRuntimeArray => self.parse_type_runtime_array(inst, &mut module),\n                Op::TypeStruct => self.parse_type_struct(inst, &mut module),\n                Op::TypeImage => self.parse_type_image(inst, &mut module),\n                Op::TypeSampledImage => self.parse_type_sampled_image(inst),\n                Op::TypeSampler => self.parse_type_sampler(inst, &mut module),\n                Op::Constant | Op::SpecConstant => self.parse_constant(inst, &mut module),\n                Op::ConstantComposite => self.parse_composite_constant(inst, &mut module),\n                Op::ConstantNull | Op::Undef => self.parse_null_constant(inst, &mut module),\n                Op::ConstantTrue => self.parse_bool_constant(inst, true, &mut module),\n                Op::ConstantFalse => self.parse_bool_constant(inst, false, &mut module),\n                Op::Variable => self.parse_global_variable(inst, &mut module),\n                Op::Function => {\n                    self.switch(ModuleState::Function, inst.op)?;\n                    inst.expect(5)?;\n                    self.parse_function(&mut module)\n                }\n                _ => Err(Error::UnsupportedInstruction(self.state, inst.op)), //TODO\n            }?;\n        }\n\n        log::info!(\"Patching...\");\n        {\n            let mut nodes = petgraph::algo::toposort(&self.function_call_graph, None)\n                .map_err(|cycle| Error::FunctionCallCycle(cycle.node_id()))?;\n            nodes.reverse(); // we need dominated first\n            let mut functions = mem::take(&mut module.functions);\n            for fun_id in nodes {\n                if fun_id > !(functions.len() as u32) {\n                    // skip all the fake IDs registered for the entry points\n                    continue;\n                }\n                let lookup = self.lookup_function.get_mut(&fun_id).unwrap();\n                // take out the function from the old array\n                let fun = mem::take(&mut functions[lookup.handle]);\n                // add it to the newly formed arena, and adjust the lookup\n                lookup.handle = module\n                    .functions\n                    .append(fun, functions.get_span(lookup.handle));\n            }\n        }\n        // patch all the functions\n        for (handle, fun) in module.functions.iter_mut() {\n            self.patch_function(Some(handle), fun)?;\n        }\n        for ep in module.entry_points.iter_mut() {\n            self.patch_function(None, &mut ep.function)?;\n        }\n\n        // Check all the images and samplers to have consistent comparison property.\n        for (handle, flags) in self.handle_sampling.drain() {\n            if !image::patch_comparison_type(\n                flags,\n                module.global_variables.get_mut(handle),\n                &mut module.types,\n            ) {\n                return Err(Error::InconsistentComparisonSampling(handle));\n            }\n        }\n\n        if !self.future_decor.is_empty() {\n            log::warn!(\"Unused item decorations: {:?}\", self.future_decor);\n            self.future_decor.clear();\n        }\n        if !self.future_member_decor.is_empty() {\n            log::warn!(\"Unused member decorations: {:?}\", self.future_member_decor);\n            self.future_member_decor.clear();\n        }\n\n        Ok(module)\n    }", "test": "fn test_13() {\n    let data = \"\\r\\0\";\n    let _result = Frontend::new().parse(&data);\n}"}
{"test_id": "gimli-rs-gimli/gimli-rs-gimli-3947879/tests-gen/debug_abbrev.inputs.rs::test_22", "code": "pub fn get<R: Reader>(\n        &self,\n        debug_abbrev: &DebugAbbrev<R>,\n        offset: DebugAbbrevOffset<R::Offset>,\n    ) -> Result<Arc<Abbreviations>> {\n        if offset.0 != R::Offset::from_u8(0) {\n            return debug_abbrev.abbreviations(offset).map(Arc::new);\n        }\n        self.abbreviations\n            .get(|| debug_abbrev.abbreviations(offset))\n    }", "test": "fn test_22() {\n    let debug_abbrev = [8];\n    let len = debug_abbrev.len();\n    let debug_abbrev = DebugAbbrev::new(&debug_abbrev, LittleEndian);\n    let offset = DebugAbbrevOffset(0);\n    if let Ok(abbreviations) = debug_abbrev.abbreviations(offset) {\n        for i in 1..len {\n            let _ = abbreviations.get(i as u64);\n        }\n    }\n}"}
{"test_id": "cloud-hypervisor-cloud-hypervisor/cloud-hypervisor-cloud-hypervisor-db3a5f3/tests-gen/watchdog.inputs.rs::test_14", "code": "pub fn wait_for_epoll_threads(&mut self) {\n        self.common.wait_for_epoll_threads();\n    }", "test": "fn test_14() {\n    let bytes = [10, 35, 35];\n    if bytes.len() < QUEUE_DATA_SIZE || bytes.len() > (QUEUE_DATA_SIZE + MEM_SIZE) {\n        return;\n    }\n    let mut watchdog = virtio_devices::Watchdog::new(\n        \"fuzzer_watchdog\".to_owned(),\n        EventFd::new(EFD_NONBLOCK).unwrap(),\n        SeccompAction::Allow,\n        EventFd::new(EFD_NONBLOCK).unwrap(),\n        None,\n    )\n    .unwrap();\n    let queue_data = &bytes[..QUEUE_DATA_SIZE];\n    let mem_bytes = &bytes[QUEUE_DATA_SIZE..];\n    let q = setup_virt_queue(queue_data.try_into().unwrap());\n    let mem = GuestMemoryMmap::from_ranges(&[(GuestAddress(0), MEM_SIZE)]).unwrap();\n    if mem.write_slice(mem_bytes, GuestAddress(0 as u64)).is_err() {\n        return;\n    }\n    let guest_memory = GuestMemoryAtomic::new(mem);\n    let evt = EventFd::new(0).unwrap();\n    let queue_evt = unsafe { EventFd::from_raw_fd(libc::dup(evt.as_raw_fd())) };\n    queue_evt.write(1).unwrap();\n    watchdog\n        .activate(\n            guest_memory,\n            Arc::new(NoopVirtioInterrupt {}),\n            vec![(0, q, evt)],\n        )\n        .ok();\n    watchdog.wait_for_epoll_threads();\n}"}
{"test_id": "BurntSushi-memchr/BurntSushi-memchr-f3fde7a/tests-gen/memchr2.inputs.rs::test_74", "code": "fn count(self) -> usize {\n        self.it.count(|s, e| {\n            // SAFETY: We rely on our generic iterator to return valid start\n            // and end pointers.\n            unsafe { count_raw(self.needle1, s, e) }\n        })\n    }", "test": "fn test_74() {\n    let data = [44, 45];\n    if data.len() < 2 {\n        return;\n    }\n    memchr2_iter(data[0], data[1], &data[2..]).count();\n}"}
{"test_id": "quinn-rs-quinn/quinn-rs-quinn-83e4f46/tests-gen/streamid.inputs.rs::test_98", "code": "pub fn initiator(self) -> Side {\n        if self.0 & 0x1 == 0 {\n            Side::Client\n        } else {\n            Side::Server\n        }\n    }", "test": "fn test_98() {\n    let data = StreamIdParams {\n        side: Client,\n        dir: Uni,\n        index: 12514849900987266477,\n    };\n    let s = StreamId::new(data.side, data.dir, data.index);\n    assert_eq!(s.initiator(), data.side);\n    assert_eq!(s.dir(), data.dir);\n}"}
{"test_id": "uutils-coreutils/uutils-coreutils-73b7c46/tests-gen/fuzz_parse_size.inputs.rs::test_39", "code": "pub fn parse_size(size: &str) -> Result<u64, ParseSizeError> {\n    Parser::default().parse(size)\n}", "test": "fn test_39() {\n    let data = [10, 199, 81, 81];\n    if let Ok(s) = std::str::from_utf8(data) {\n        _ = parse_size(s);\n    }\n}"}
{"test_id": "BurntSushi-memchr/BurntSushi-memchr-f3fde7a/tests-gen/memchr2.inputs.rs::test_69", "code": "fn count(self) -> usize {\n        self.it.count(|s, e| {\n            // SAFETY: We rely on our generic iterator to return valid start\n            // and end pointers.\n            unsafe { count_raw(self.needle1, s, e) }\n        })\n    }", "test": "fn test_69() {\n    let data = [148, 10, 10, 175];\n    if data.len() < 2 {\n        return;\n    }\n    memchr2_iter(data[0], data[1], &data[2..]).count();\n}"}
{"test_id": "BurntSushi-memchr/BurntSushi-memchr-f3fde7a/tests-gen/memchr.inputs.rs::test_41", "code": "fn count(self) -> usize {\n        self.it.count(|s, e| {\n            // SAFETY: We rely on our generic iterator to return valid start\n            // and end pointers.\n            unsafe { count_raw(self.needle1, s, e) }\n        })\n    }", "test": "fn test_41() {\n    let data = [49, 47, 0, 220];\n    if data.is_empty() {\n        return;\n    }\n    memchr_iter(data[0], &data[1..]).count();\n}"}
{"test_id": "image-rs-image/image-rs-image-e5580ec/tests-gen/fuzzer_script_exr.inputs.rs::test_63", "code": "fn roundtrip (bytes : & [u8]) -> ImageResult < () > { # [doc = \" Read the file from the specified path into an `Rgba32FImage`.\"] fn read_as_rgba_byte_image (read : impl Read + Seek) -> ImageResult < (u32 , u32 , Vec < u8 >) > { let mut decoder = OpenExrDecoder :: with_alpha_preference (read , Some (true)) ? ; match usize :: try_from (decoder . total_bytes ()) { Ok (decoded_size) if decoded_size <= 256 * 1024 * 1024 => { decoder . set_limits (Limits :: default ()) ? ; let (width , height) = decoder . dimensions () ; let mut buffer = vec ! [0 ; decoded_size] ; decoder . read_image (buffer . as_mut_slice ()) ? ; Ok ((width , height , buffer)) } _ => Err (image :: ImageError :: Limits (image :: error :: LimitError :: from_kind (image :: error :: LimitErrorKind :: InsufficientMemory ,) ,)) , } } # [doc = \" Write an `Rgba32FImage`.\"] # [doc = \" Assumes the writer is buffered. In most cases,\"] # [doc = \" you should wrap your writer in a `BufWriter` for best performance.\"] fn write_rgba_image (write : impl Write + Seek , (width , height , data) : & (u32 , u32 , Vec < u8 >) ,) -> ImageResult < () > { OpenExrEncoder :: new (write) . write_image (data . as_slice () , * width , * height , ColorType :: Rgba32F) } let decoded_image = read_as_rgba_byte_image (Cursor :: new (bytes)) ? ; let mut bytes = Vec :: with_capacity (bytes . len () + 20) ; write_rgba_image (Cursor :: new (& mut bytes) , & decoded_image) ? ; let redecoded_image = read_as_rgba_byte_image (Cursor :: new (bytes)) ? ; assert_eq ! (decoded_image , redecoded_image , \"image was valid but was not reproducible\") ; Ok (()) }", "test": "fn test_63() {\n    let data = [61, 26, 59, 186];\n    let _img = roundtrip(data);\n}"}
{"test_id": "bodil-im-rs/bodil-im-rs-2afaf54/tests-gen/hashset.inputs.rs::test_97", "code": "pub fn remove<BA>(&mut self, a: &BA) -> Option<A>\n    where\n        BA: Hash + Eq + ?Sized,\n        A: Borrow<BA>,\n    {\n        let root = PoolRef::make_mut(&self.pool.0, &mut self.root);\n        let result = root.remove(&self.pool.0, hash_key(&*self.hasher, a), 0, a);\n        if result.is_some() {\n            self.size -= 1;\n        }\n        result.map(|v| v.0)\n    }", "test": "fn test_97() {\n    let actions = [Remove(723391742851347958)];\n    let mut set = HashSet::new();\n    let mut nat = NatSet::new();\n    for action in actions {\n        match action {\n            Action::Insert(value) => {\n                let len = nat.len() + if nat.contains(&value) { 0 } else { 1 };\n                nat.insert(value);\n                set.insert(value);\n                assert_eq!(len, set.len());\n            }\n            Action::Remove(value) => {\n                let len = nat.len() - if nat.contains(&value) { 1 } else { 0 };\n                nat.remove(&value);\n                set.remove(&value);\n                assert_eq!(len, set.len());\n            }\n        }\n        assert_eq!(nat.len(), set.len());\n        assert_eq!(HashSet::from(nat.clone()), set);\n    }\n}"}
{"test_id": "image-rs-image-gif/image-rs-image-gif-80fd8c0/tests-gen/decode.inputs.rs::test_21", "code": "fn try_decode (data : & [u8]) -> Result < () , gif :: DecodingError > { let mut reader = gif :: Decoder :: new (data) ? ; while let Some (_) = reader . read_next_frame () ? { } Ok (()) }", "test": "fn test_21() {\n    let data = [10, 10, 10, 38];\n    let _ = try_decode(data);\n}"}
{"test_id": "rustls-rustls/rustls-rustls-ae583bd/tests-gen/client.inputs.rs::test_50", "code": "pub fn process_new_packets(&mut self) -> Result<IoState, Error> {\n        match self {\n            Self::Client(conn) => conn.process_new_packets(),\n            Self::Server(conn) => conn.process_new_packets(),\n        }\n    }", "test": "fn test_50() {\n    let data = [\n        22, 3, 3, 0, 63, 2, 0, 0, 59, 3, 3, 89, 16, 236, 200, 17, 90, 14, 121, 52, 150, 218, 66,\n        28, 227, 55, 237, 109, 95, 209, 111, 252, 56, 238, 6, 251, 154, 147, 123, 211, 206, 186,\n        114, 0, 204, 169, 0, 0, 19, 255, 1, 0, 1, 0, 0, 23, 0, 0, 0, 35, 0, 0, 0, 11, 0, 2, 1, 0,\n        22, 3, 3, 14, 229, 11, 0, 14, 225, 0, 14, 222, 0, 7, 96, 48, 130, 7, 92, 48, 130, 6, 68,\n        160, 3, 2, 1, 2, 2, 8, 83, 65, 61, 145, 120, 210, 140, 39, 48, 13, 6, 9, 42, 134, 72, 134,\n        247, 13, 1, 1, 11, 5, 0, 48, 73, 49, 11, 48, 9, 6, 3, 85, 4, 6, 19, 2, 85, 83, 49, 19, 48,\n        17, 6, 3, 85, 4, 10, 19, 10, 71, 111, 111, 103, 108, 101, 32, 73, 110, 99, 49, 37, 48, 35,\n        6, 3, 85, 4, 3, 19, 28, 71, 111, 111, 103, 108, 101, 32, 73, 110, 116, 101, 114, 110, 101,\n        116, 32, 65, 117, 116, 104, 111, 114, 105, 116, 121, 32, 71, 50, 48, 30, 23, 13, 49, 55,\n        48, 52, 50, 55, 48, 56, 51, 48, 48, 48, 90, 23, 13, 49, 55, 48, 55, 50, 48, 48, 56, 51, 48,\n        48, 48, 90, 48, 102, 49, 11, 48, 9, 6, 3, 85, 4, 6, 19, 2, 85, 83, 49, 19, 48, 17, 6, 3,\n        85, 4, 8, 12, 10, 67, 97, 108, 105, 102, 111, 114, 110, 105, 97, 49, 22, 48, 20, 6, 3, 85,\n        4, 7, 12, 13, 77, 111, 117, 110, 116, 97, 105, 110, 32, 86, 105, 101, 119, 49, 19, 48, 17,\n        6, 3, 85, 4, 10, 12, 10, 71, 111, 111, 103, 108, 101, 32, 73, 110, 99, 49, 21, 48, 19, 6,\n        3, 85, 4, 3, 12, 12, 42, 46, 103, 111, 111, 103, 108, 101, 46, 99, 111, 109, 48, 89, 48,\n        19, 6, 7, 42, 134, 72, 206, 61, 2, 1, 6, 8, 42, 134, 72, 206, 61, 3, 1, 7, 3, 66, 0, 4,\n        189, 77, 48, 133, 70, 173, 158, 211, 104, 157, 203, 90, 81, 210, 82, 202, 205, 147, 209,\n        252, 62, 33, 220, 191, 25, 45, 49, 119, 71, 86, 34, 248, 128, 116, 164, 199, 172, 91, 179,\n        223, 239, 76, 76, 63, 25, 69, 53, 53, 110, 197, 165, 220, 25, 210, 237, 147, 30, 18, 131,\n        158, 196, 86, 94, 111, 163, 130, 4, 244, 48, 130, 4, 240, 48, 29, 6, 3, 85, 29, 37, 4, 22,\n        48, 20, 6, 8, 43, 6, 1, 5, 5, 7, 3, 1, 6, 8, 43, 6, 1, 5, 5, 7, 3, 2, 48, 11, 6, 3, 85, 29,\n        15, 4, 4, 3, 2, 7, 128, 48, 130, 3, 179, 6, 3, 85, 29, 17, 4, 130, 3, 170, 48, 130, 3, 166,\n        130, 12, 42, 46, 103, 111, 111, 103, 108, 101, 46, 99, 111, 109, 130, 13, 42, 46, 97, 110,\n        100, 114, 111, 105, 100, 46, 99, 111, 109, 130, 22, 42, 46, 97, 112, 112, 101, 110, 103,\n        105, 110, 101, 46, 103, 111, 111, 103, 108, 101, 46, 99, 111, 109, 130, 18, 42, 46, 99,\n        108, 111, 117, 100, 46, 103, 111, 111, 103, 108, 101, 46, 99, 111, 109, 130, 14, 42, 46,\n        103, 99, 112, 46, 103, 118, 116, 50, 46, 99, 111, 109, 130, 22, 42, 46, 103, 111, 111, 103,\n        108, 101, 45, 97, 110, 97, 108, 121, 116, 105, 99, 115, 46, 99, 111, 109, 130, 11, 42, 46,\n        103, 111, 111, 103, 108, 101, 46, 99, 97, 130, 11, 42, 46, 103, 111, 111, 103, 108, 101,\n        46, 99, 108, 130, 14, 42, 46, 103, 111, 111, 103, 108, 101, 46, 99, 111, 46, 105, 110, 130,\n        14, 42, 46, 103, 111, 111, 103, 108, 101, 46, 99, 111, 46, 106, 112, 130, 14, 42, 46, 103,\n        111, 111, 103, 108, 101, 46, 99, 111, 46, 117, 107, 130, 15, 42, 46, 103, 111, 111, 103,\n        108, 101, 46, 99, 111, 109, 46, 97, 114, 130, 15, 42, 46, 103, 111, 111, 103, 108, 101, 46,\n        99, 111, 109, 46, 97, 117, 130, 15, 42, 46, 103, 111, 111, 103, 108, 101, 46, 99, 111, 109,\n        46, 98, 114, 130, 15, 42, 46, 103, 111, 111, 103, 108, 101, 46, 99, 111, 109, 46, 99, 111,\n        130, 15, 42, 46, 103, 111, 111, 103, 108, 101, 46, 99, 111, 109, 46, 109, 120, 130, 15, 42,\n        46, 103, 111, 111, 103, 108, 101, 46, 99, 111, 109, 46, 116, 114, 130, 15, 42, 46, 103,\n        111, 111, 103, 108, 101, 46, 99, 111, 109, 46, 118, 110, 130, 11, 42, 46, 103, 111, 111,\n        103, 108, 101, 46, 100, 101, 130, 11, 42, 46, 103, 111, 111, 103, 108, 101, 46, 101, 115,\n        130, 11, 42, 46, 103, 111, 111, 103, 108, 101, 46, 102, 114, 130, 11, 42, 46, 103, 111,\n        111, 103, 108, 101, 46, 104, 117, 130, 11, 42, 46, 103, 111, 111, 103, 108, 101, 46, 105,\n        116, 130, 11, 42, 46, 103, 111, 111, 103, 108, 101, 46, 110, 108, 130, 11, 42, 46, 103,\n        111, 111, 103, 108, 101, 46, 112, 108, 130, 11, 42, 46, 103, 111, 111, 103, 108, 101, 46,\n        112, 116, 130, 18, 42, 46, 103, 111, 111, 103, 108, 101, 97, 100, 97, 112, 105, 115, 46,\n        99, 111, 109, 130, 15, 42, 46, 103, 111, 111, 103, 108, 101, 97, 112, 105, 115, 46, 99,\n        110, 130, 20, 42, 46, 103, 111, 111, 103, 108, 101, 99, 111, 109, 109, 101, 114, 99, 101,\n        46, 99, 111, 109, 130, 17, 42, 46, 103, 111, 111, 103, 108, 101, 118, 105, 100, 101, 111,\n        46, 99, 111, 109, 130, 12, 42, 46, 103, 115, 116, 97, 116, 105, 99, 46, 99, 110, 130, 13,\n        42, 46, 103, 115, 116, 97, 116, 105, 99, 46, 99, 111, 109, 130, 10, 42, 46, 103, 118, 116,\n        49, 46, 99, 111, 109, 130, 10, 42, 46, 103, 118, 116, 50, 46, 99, 111, 109, 130, 20, 42,\n        46, 109, 101, 116, 114, 105, 99, 46, 103, 115, 116, 97, 116, 105, 99, 46, 99, 111, 109,\n        130, 12, 42, 46, 117, 114, 99, 104, 105, 110, 46, 99, 111, 109, 130, 16, 42, 46, 117, 114,\n        108, 46, 103, 111, 111, 103, 108, 101, 46, 99, 111, 109, 130, 22, 42, 46, 121, 111, 117,\n        116, 117, 98, 101, 45, 110, 111, 99, 111, 111, 107, 105, 101, 46, 99, 111, 109, 130, 13,\n        42, 46, 121, 111, 117, 116, 117, 98, 101, 46, 99, 111, 109, 130, 22, 42, 46, 121, 111, 117,\n        116, 117, 98, 100, 101, 117, 101, 99, 97, 116, 105, 111, 110, 46, 99, 111, 109, 130, 11,\n        42, 46, 121, 116, 105, 109, 103, 46, 99, 111, 109, 130, 26, 97, 110, 100, 114, 111, 105,\n        100, 46, 99, 108, 105, 101, 110, 116, 115, 46, 103, 111, 111, 103, 108, 101, 46, 99, 111,\n        109, 130, 11, 97, 110, 100, 114, 111, 105, 100, 46, 99, 111, 109, 130, 27, 100, 101, 118,\n        101, 108, 111, 112, 101, 114, 46, 97, 110, 100, 114, 111, 105, 100, 46, 103, 111, 111, 103,\n        108, 101, 46, 99, 110, 130, 28, 100, 101, 118, 101, 108, 111, 112, 101, 114, 115, 46, 97,\n        110, 100, 114, 111, 105, 100, 46, 103, 111, 111, 103, 108, 101, 46, 99, 110, 130, 4, 103,\n        46, 99, 111, 130, 6, 103, 111, 111, 46, 103, 108, 130, 20, 103, 111, 111, 103, 108, 101,\n        45, 97, 110, 97, 108, 121, 116, 105, 99, 115, 46, 99, 111, 109, 130, 10, 103, 111, 111,\n        103, 108, 101, 46, 99, 111, 109, 130, 18, 103, 111, 111, 103, 108, 101, 99, 111, 109, 109,\n        101, 114, 99, 101, 46, 99, 111, 109, 130, 24, 115, 111, 117, 114, 99, 101, 46, 97, 110,\n        100, 114, 111, 105, 100, 46, 103, 111, 111, 103, 108, 101, 46, 99, 110, 130, 10, 117, 114,\n        99, 104, 105, 110, 46, 99, 111, 109, 130, 10, 119, 119, 119, 46, 103, 111, 111, 46, 103,\n        108, 130, 8, 121, 111, 117, 116, 117, 46, 98, 101, 130, 11, 121, 111, 117, 116, 117, 98,\n        101, 46, 99, 111, 109, 130, 20, 121, 111, 117, 116, 117, 98, 101, 101, 100, 117, 99, 97,\n        116, 105, 111, 110, 46, 99, 111, 109, 48, 104, 6, 8, 43, 6, 1, 5, 5, 7, 1, 1, 4, 92, 48,\n        90, 48, 43, 6, 8, 43, 6, 1, 5, 5, 7, 48, 2, 134, 31, 104, 116, 116, 112, 58, 47, 47, 112,\n        107, 105, 46, 103, 111, 111, 103, 108, 101, 46, 99, 111, 109, 47, 71, 73, 65, 71, 50, 46,\n        99, 114, 116, 48, 43, 6, 8, 43, 6, 1, 5, 5, 7, 48, 1, 134, 31, 104, 116, 116, 112, 58, 47,\n        47, 99, 108, 105, 101, 110, 116, 115, 49, 46, 103, 111, 111, 103, 108, 101, 46, 99, 111,\n        109, 47, 111, 99, 115, 112, 48, 29, 6, 3, 85, 29, 14, 4, 22, 4, 20, 253, 90, 18, 128, 11,\n        205, 4, 95, 242, 77, 89, 40, 3, 112, 35, 87, 25, 64, 248, 55, 48, 12, 6, 3, 85, 29, 19, 1,\n        1, 255, 4, 2, 48, 0, 48, 31, 6, 3, 85, 29, 35, 4, 24, 48, 22, 128, 20, 74, 221, 6, 22, 27,\n        188, 246, 104, 181, 118, 245, 129, 182, 187, 98, 26, 186, 90, 129, 47, 48, 33, 6, 3, 85,\n        29, 32, 4, 26, 48, 24, 48, 12, 6, 10, 43, 6, 1, 4, 1, 214, 121, 2, 5, 1, 48, 8, 6, 6, 103,\n        129, 12, 1, 2, 2, 48, 48, 6, 3, 85, 29, 31, 4, 41, 48, 39, 48, 37, 160, 35, 160, 33, 134,\n        31, 104, 116, 116, 112, 58, 47, 47, 112, 107, 105, 46, 103, 111, 111, 103, 108, 101, 46,\n        99, 111, 109, 47, 71, 73, 65, 71, 50, 46, 99, 114, 108, 48, 13, 6, 9, 42, 134, 72, 134,\n        247, 13, 1, 1, 11, 5, 0, 3, 130, 1, 1, 0, 33, 200, 169, 105, 206, 2, 155, 120, 189, 192,\n        51, 58, 117, 81, 58, 119, 84, 168, 232, 112, 67, 74, 178, 108, 140, 239, 140, 58, 241, 118,\n        5, 87, 151, 75, 62, 228, 100, 79, 253, 168, 208, 39, 111, 248, 15, 136, 208, 240, 106, 77,\n        117, 121, 178, 58, 88, 245, 179, 162, 251, 10, 71, 202, 197, 70, 144, 133, 162, 197, 128,\n        53, 111, 180, 163, 6, 63, 152, 48, 225, 133, 207, 156, 142, 147, 155, 164, 234, 150, 95,\n        194, 204, 36, 174, 11, 81, 8, 107, 127, 181, 132, 216, 230, 232, 29, 152, 1, 46, 152, 162,\n        185, 105, 229, 136, 245, 133, 63, 134, 92, 242, 217, 7, 26, 64, 132, 248, 126, 187, 114,\n        56, 192, 240, 70, 213, 140, 90, 19, 23, 33, 155, 220, 79, 93, 249, 252, 184, 190, 60, 45,\n        123, 246, 182, 204, 232, 45, 111, 214, 187, 247, 195, 215, 60, 88, 120, 12, 241, 0, 54,\n        189, 184, 200, 138, 56, 58, 15, 211, 62, 239, 220, 24, 224, 142, 159, 199, 102, 126, 9,\n        199, 212, 60, 163, 123, 195, 235, 239, 210, 8, 24, 172, 63, 119, 216, 233, 1, 8, 101, 21,\n        150, 10, 75, 36, 243, 45, 241, 243, 191, 254, 221, 133, 11, 136, 82, 64, 50, 222, 221, 48,\n        184, 48, 183, 155, 228, 204, 32, 177, 209, 139, 86, 15, 190, 118, 233, 91, 146, 124, 132,\n        218, 50, 73, 110, 152, 63, 196, 8, 66, 19, 171, 62, 0, 3, 244, 48, 130, 3, 240, 48, 130, 2,\n        216, 160, 3, 2, 1, 2, 2, 3, 2, 58, 146, 48, 13, 6, 9, 42, 134, 72, 134, 247, 13, 1, 1, 11,\n        5, 0, 48, 66, 49, 11, 48, 9, 6, 3, 85, 4, 6, 19, 2, 85, 83, 49, 22, 48, 20, 6, 3, 85, 4,\n        10, 19, 13, 71, 101, 111, 84, 114, 117, 115, 116, 32, 65, 110, 99, 46, 49, 27, 48, 25, 6,\n        3, 85, 4, 3, 19, 18, 71, 101, 111, 84, 114, 117, 115, 116, 32, 71, 108, 111, 98, 97, 108,\n        32, 67, 65, 48, 30, 23, 13, 49, 53, 48, 52, 48, 49, 48, 48, 48, 48, 48, 48, 90, 23, 13, 49,\n        55, 49, 50, 51, 49, 50, 51, 53, 57, 53, 57, 90, 48, 73, 49, 11, 48, 9, 6, 3, 85, 4, 6, 19,\n        2, 85, 83, 49, 19, 48, 17, 6, 3, 85, 4, 10, 19, 10, 71, 111, 111, 103, 108, 101, 32, 73,\n        110, 99, 49, 37, 48, 35, 6, 3, 85, 4, 3, 19, 28, 71, 111, 111, 103, 108, 101, 32, 73, 110,\n        116, 101, 114, 110, 101, 116, 32, 65, 117, 116, 104, 111, 114, 105, 116, 121, 32, 71, 50,\n        48, 130, 1, 34, 48, 13, 6, 9, 42, 134, 72, 134, 247, 13, 1, 1, 1, 5, 0, 3, 130, 1, 15, 0,\n        48, 130, 1, 10, 2, 130, 1, 1, 0, 156, 42, 4, 119, 92, 216, 80, 145, 58, 6, 163, 130, 224,\n        216, 80, 72, 188, 137, 63, 241, 25, 112, 26, 136, 70, 126, 224, 143, 197, 241, 137, 206,\n        33, 238, 90, 254, 97, 13, 183, 50, 68, 137, 160, 116, 11, 83, 79, 85, 164, 206, 130, 98,\n        149, 238, 235, 89, 95, 198, 225, 5, 128, 18, 196, 94, 148, 63, 188, 91, 72, 56, 244, 83,\n        247, 36, 230, 251, 145, 233, 21, 196, 207, 244, 83, 13, 244, 74, 252, 159, 84, 222, 125,\n        190, 160, 107, 111, 135, 192, 208, 80, 31, 40, 48, 3, 64, 218, 8, 115, 81, 108, 127, 255,\n        58, 60, 167, 55, 6, 142, 189, 75, 17, 4, 235, 125, 36, 222, 230, 249, 252, 49, 113, 251,\n        148, 213, 96, 243, 46, 74, 175, 66, 210, 203, 234, 196, 106, 26, 178, 204, 83, 221, 21, 75,\n        139, 31, 200, 25, 97, 31, 205, 157, 168, 62, 99, 43, 132, 53, 105, 101, 132, 200, 25, 197,\n        70, 34, 248, 83, 149, 190, 227, 128, 74, 16, 198, 42, 236, 186, 151, 32, 17, 199, 57, 153,\n        16, 4, 160, 240, 97, 122, 149, 37, 140, 78, 82, 117, 226, 182, 237, 8, 202, 20, 252, 206,\n        34, 106, 179, 78, 207, 70, 3, 151, 151, 3, 126, 192, 177, 222, 123, 175, 69, 51, 207, 186,\n        62, 113, 183, 222, 244, 37, 37, 194, 13, 53, 137, 157, 157, 251, 14, 17, 121, 137, 30, 55,\n        197, 175, 142, 114, 105, 2, 3, 1, 0, 1, 163, 129, 231, 48, 129, 228, 48, 31, 6, 3, 85, 29,\n        35, 4, 24, 48, 22, 128, 20, 192, 122, 152, 104, 141, 137, 251, 171, 5, 100, 12, 17, 125,\n        170, 125, 101, 184, 202, 204, 78, 48, 29, 6, 3, 85, 29, 14, 4, 22, 4, 20, 74, 221, 6, 22,\n        27, 188, 246, 104, 181, 118, 245, 129, 182, 187, 98, 26, 186, 90, 129, 47, 48, 14, 6, 3,\n        85, 29, 15, 1, 1, 255, 4, 4, 3, 2, 1, 6, 48, 46, 6, 8, 43, 6, 1, 5, 5, 7, 1, 1, 4, 34, 48,\n        32, 48, 30, 6, 8, 43, 6, 1, 5, 5, 7, 48, 1, 134, 18, 104, 116, 116, 112, 58, 47, 47, 103,\n        46, 115, 121, 109, 99, 100, 46, 99, 111, 109, 48, 18, 6, 3, 85, 29, 19, 1, 1, 255, 4, 8,\n        48, 6, 1, 1, 255, 2, 1, 0, 48, 53, 6, 3, 85, 29, 31, 4, 46, 48, 44, 48, 42, 160, 40, 160,\n        38, 134, 36, 104, 116, 116, 112, 58, 47, 47, 103, 46, 115, 121, 109, 99, 98, 46, 99, 111,\n        109, 47, 99, 114, 108, 115, 47, 103, 116, 103, 108, 111, 98, 97, 108, 46, 99, 114, 108, 48,\n        23, 6, 3, 85, 29, 32, 4, 16, 48, 14, 48, 12, 6, 10, 43, 6, 1, 4, 1, 214, 121, 2, 5, 1, 48,\n        13, 6, 9, 42, 134, 72, 134, 247, 13, 1, 1, 11, 5, 0, 3, 130, 1, 1, 0, 8, 78, 4, 167, 128,\n        127, 16, 22, 67, 94, 2, 173, 215, 66, 128, 244, 176, 142, 210, 174, 179, 235, 17, 125, 144,\n        132, 24, 125, 231, 144, 21, 251, 73, 127, 168, 153, 5, 145, 187, 122, 201, 214, 60, 55, 24,\n        9, 154, 182, 199, 146, 32, 7, 53, 51, 9, 228, 40, 99, 114, 13, 180, 224, 50, 156, 135, 152,\n        196, 27, 118, 137, 103, 193, 80, 88, 176, 19, 170, 19, 26, 27, 50, 165, 190, 234, 17, 149,\n        76, 72, 99, 73, 233, 153, 93, 32, 55, 204, 254, 42, 105, 81, 22, 149, 75, 169, 222, 73,\n        130, 192, 16, 112, 244, 44, 243, 236, 188, 36, 36, 208, 78, 172, 165, 217, 94, 30, 109,\n        146, 193, 167, 172, 72, 53, 129, 249, 229, 228, 156, 101, 105, 205, 135, 164, 65, 80, 63,\n        46, 87, 165, 145, 81, 18, 88, 14, 140, 9, 161, 172, 122, 164, 18, 165, 39, 243, 154, 16,\n        151, 125, 85, 3, 6, 247, 102, 88, 95, 95, 100, 225, 171, 93, 109, 165, 57, 72, 117, 152,\n        76, 41, 90, 58, 141, 211, 43, 202, 156, 85, 4, 191, 244, 230, 20, 213, 128, 172, 38, 237,\n        23, 137, 166, 147, 108, 92, 164, 204, 184, 240, 102, 142, 100, 227, 125, 154, 226, 0, 179,\n        73, 199, 228, 10, 170, 221, 91, 131, 199, 112, 144, 70, 78, 190, 208, 219, 89, 150, 108,\n        46, 245, 22, 54, 222, 113, 204, 1, 194, 18, 193, 33, 198, 22, 0, 3, 129, 48, 130, 3, 125,\n        48, 130, 2, 230, 160, 3, 2, 1, 2, 2, 3, 18, 187, 230, 48, 13, 6, 9, 42, 134, 72, 134, 247,\n        13, 1, 1, 5, 5, 0, 48, 78, 49, 11, 48, 9, 6, 3, 85, 4, 6, 19, 2, 85, 83, 49, 16, 48, 14, 6,\n        3, 85, 4, 10, 19, 7, 69, 113, 117, 105, 102, 97, 120, 49, 45, 48, 43, 6, 3, 85, 4, 11, 19,\n        36, 69, 113, 117, 105, 102, 97, 120, 32, 83, 101, 99, 117, 114, 101, 32, 67, 101, 114, 116,\n        105, 102, 105, 99, 97, 116, 101, 32, 65, 117, 116, 104, 111, 114, 105, 116, 121, 48, 30,\n        23, 13, 48, 50, 48, 53, 50, 49, 48, 52, 48, 48, 48, 48, 90, 23, 13, 49, 56, 48, 56, 50, 49,\n        48, 52, 48, 48, 48, 48, 90, 48, 66, 49, 11, 48, 9, 6, 3, 85, 4, 6, 19, 2, 85, 83, 49, 22,\n        48, 20, 6, 3, 85, 4, 10, 19, 13, 71, 101, 111, 84, 114, 117, 115, 116, 32, 73, 110, 99, 46,\n        49, 27, 48, 25, 6, 3, 85, 4, 3, 19, 18, 71, 101, 111, 84, 114, 117, 115, 116, 32, 71, 108,\n        111, 98, 97, 108, 32, 67, 65, 48, 130, 1, 34, 48, 13, 6, 9, 42, 134, 72, 134, 247, 13, 1,\n        1, 1, 5, 0, 3, 130, 1, 15, 0, 48, 130, 1, 10, 2, 130, 1, 1, 0, 218, 204, 24, 99, 48, 253,\n        244, 23, 35, 26, 86, 126, 91, 223, 60, 108, 56, 228, 113, 183, 120, 145, 212, 188, 161,\n        216, 76, 248, 168, 67, 182, 3, 233, 77, 33, 7, 8, 136, 218, 88, 47, 102, 57, 41, 189, 5,\n        120, 139, 157, 56, 232, 5, 183, 106, 126, 113, 164, 230, 196, 96, 166, 176, 239, 128, 228,\n        137, 40, 15, 158, 37, 214, 237, 131, 243, 173, 166, 145, 199, 152, 201, 66, 24, 53, 20,\n        157, 173, 152, 70, 146, 46, 79, 202, 241, 135, 67, 193, 22, 149, 87, 45, 80, 239, 137, 45,\n        128, 122, 87, 173, 242, 238, 95, 107, 210, 0, 141, 185, 20, 248, 20, 21, 53, 217, 192, 70,\n        163, 123, 114, 200, 145, 191, 201, 85, 43, 205, 208, 151, 62, 156, 38, 100, 204, 223, 206,\n        131, 25, 113, 202, 78, 230, 212, 213, 123, 169, 25, 205, 85, 222, 200, 236, 210, 94, 56,\n        83, 229, 92, 79, 140, 45, 254, 80, 35, 54, 252, 102, 230, 203, 142, 164, 57, 25, 0, 183,\n        149, 2, 57, 145, 11, 14, 254, 56, 46, 209, 29, 5, 154, 246, 77, 62, 111, 15, 7, 29, 175,\n        44, 30, 143, 96, 57, 226, 250, 54, 83, 19, 57, 212, 94, 38, 43, 219, 61, 168, 20, 189, 50,\n        235, 24, 3, 40, 82, 4, 113, 229, 171, 51, 61, 225, 56, 187, 7, 54, 132, 98, 156, 121, 234,\n        22, 48, 244, 95, 192, 43, 232, 113, 107, 228, 249, 2, 3, 1, 0, 1, 163, 129, 240, 48, 129,\n        237, 48, 31, 6, 3, 85, 29, 35, 4, 24, 48, 22, 128, 20, 72, 230, 104, 249, 43, 210, 178,\n        149, 215, 71, 216, 35, 32, 16, 79, 51, 152, 144, 159, 212, 48, 29, 6, 3, 85, 29, 14, 4, 22,\n        4, 20, 192, 122, 152, 104, 141, 137, 251, 171, 5, 100, 12, 17, 125, 170, 125, 101, 184,\n        202, 204, 78, 48, 15, 6, 3, 85, 29, 19, 1, 1, 255, 4, 5, 48, 3, 1, 1, 255, 48, 14, 6, 3,\n        85, 29, 15, 1, 1, 255, 4, 4, 3, 2, 1, 6, 48, 58, 6, 3, 85, 29, 31, 4, 51, 48, 49, 48, 47,\n        160, 45, 160, 43, 134, 41, 104, 116, 116, 112, 58, 47, 47, 99, 114, 108, 46, 103, 101, 111,\n        116, 114, 117, 115, 116, 46, 99, 111, 109, 47, 99, 114, 108, 115, 47, 115, 101, 99, 117,\n        114, 101, 99, 97, 46, 99, 114, 108, 48, 78, 6, 3, 85, 29, 32, 4, 71, 48, 69, 48, 67, 6, 4,\n        85, 29, 32, 0, 48, 59, 48, 57, 6, 8, 43, 6, 1, 5, 5, 7, 2, 1, 22, 45, 104, 116, 116, 112,\n        115, 58, 47, 47, 119, 119, 119, 46, 103, 101, 111, 116, 114, 117, 115, 116, 46, 99, 111,\n        109, 47, 114, 101, 115, 111, 117, 114, 99, 101, 115, 47, 114, 101, 112, 111, 115, 105, 116,\n        111, 114, 121, 48, 13, 6, 9, 42, 134, 72, 134, 247, 13, 1, 1, 5, 5, 0, 3, 129, 129, 0, 118,\n        225, 18, 110, 78, 75, 22, 18, 134, 48, 6, 178, 48, 1, 134, 18, 104, 116, 116, 112, 58, 47,\n        47, 103, 46, 115, 121, 109, 99, 100, 46, 99, 111, 109, 48, 18, 6, 3, 85, 29, 19, 1, 1, 255,\n        4, 8, 48, 6, 1, 1, 255, 2, 1, 0, 48, 53, 6, 3, 85, 29, 31, 4, 46, 48, 44, 48, 42, 160, 40,\n        160, 38, 134, 36, 104, 116, 116, 112, 58, 47, 47, 103, 46, 115, 121, 109, 99, 98, 46, 99,\n        111, 109, 47, 99, 114, 108, 115, 47, 103, 116, 103, 108, 111, 98, 97, 108, 46, 99, 114,\n        108, 48, 23, 6, 3, 85, 29, 32, 4, 16, 48, 14, 48, 12, 6, 10, 43, 6, 1, 4, 1, 214, 121, 2,\n        5, 1, 48, 13, 6, 9, 42, 134, 72, 134, 247, 13, 1, 1, 11, 5, 0, 3, 130, 1, 1, 0, 8, 78, 4,\n        167, 128, 127, 16, 22, 67, 94, 2, 173, 215, 66, 128, 244, 176, 142, 210, 174, 179, 235, 17,\n        125, 144, 132, 24, 125, 231, 144, 21, 251, 73, 127, 168, 153, 5, 145, 187, 122, 201, 214,\n        60, 55, 24, 9, 154, 182, 199, 146, 32, 7, 53, 51, 9, 228, 40, 99, 114, 13, 180, 224, 50,\n        156, 135, 152, 196, 27, 118, 137, 103, 193, 80, 88, 176, 19, 170, 19, 26, 27, 50, 165, 190,\n        234, 17, 149, 76, 72, 99, 73, 233, 153, 93, 32, 55, 204, 254, 42, 105, 81, 22, 149, 75,\n        169, 222, 73, 130, 192, 16, 112, 244, 44, 243, 236, 188, 36, 36, 208, 78, 172, 165, 217,\n        94, 30, 109, 146, 193, 167, 172, 72, 53, 129, 249, 229, 228, 156, 101, 105, 205, 135, 164,\n        65, 80, 63, 46, 87, 165, 145, 81, 18, 88, 14, 140, 9, 161, 172, 122, 164, 18, 165, 39, 243,\n        154, 16, 151, 125, 85, 3, 6, 247, 102, 88, 95, 95, 100, 225, 171, 93, 109, 165, 57, 72,\n        117, 152, 76, 41, 90, 58, 141, 211, 43, 202, 156, 85, 4, 191, 244, 230, 20, 213, 128, 172,\n        38, 237, 23, 137, 166, 147, 108, 92, 164, 204, 184, 240, 102, 142, 100, 227, 125, 154, 226,\n        0, 179, 73, 199, 228, 10, 170, 221, 91, 131, 199, 112, 144, 70, 78, 190, 208, 219, 89, 150,\n        108, 226, 99, 204, 123, 77, 237, 165, 38, 196, 158, 196, 163, 39, 31, 219, 195, 16, 152, 4,\n        135, 131, 197, 26, 192, 175, 73, 208, 102, 224, 50, 80, 230, 29, 5, 207, 178, 98, 39, 107,\n        230, 1, 197, 170, 5, 64, 181, 56, 55, 178, 122, 4, 178, 114, 110, 79, 20, 3, 3, 0, 1, 1,\n        22, 3, 3, 0, 32, 183, 30, 234, 49, 21, 153, 244, 50, 141, 222, 123, 52, 1, 109, 64, 238,\n        29, 191, 187, 51, 222, 29, 236, 211, 51, 142, 115, 248, 228, 41, 223, 232, 23, 3, 3, 5,\n        145, 183, 198, 127, 233, 133, 132, 204, 255, 193, 240, 165, 168, 179, 134, 137, 28, 111,\n        57, 20, 103, 109, 40, 93, 116, 27, 183, 6, 173, 163, 53, 13, 72, 122, 43, 63, 229, 34, 239,\n        206, 238, 224, 219, 154, 89, 232, 199, 231, 76, 220, 48, 166, 150, 198, 187, 179, 212, 170,\n        99, 14, 86, 71, 119, 180, 116, 170, 223, 163, 40, 114, 100, 115, 113, 43, 44, 114, 235, 76,\n        52, 47, 163, 154, 106, 75, 206, 13, 169, 35, 146, 186, 235, 26, 215, 226, 25, 96, 82, 134,\n        106, 165, 127, 165, 151, 155, 237, 16, 83, 188, 25, 119, 139, 21, 127, 119, 176, 100, 73,\n        39, 111, 86, 232, 52, 9, 66, 93, 115, 223, 106, 228, 206, 238, 160, 132, 136, 64, 102, 43,\n        74, 71, 121, 174, 29, 24, 97, 80, 95, 52, 218, 59, 92, 197, 127, 255, 57, 181, 131, 22, 44,\n        103, 181, 255, 147, 102, 90, 15, 183, 116, 87, 9, 234, 149, 220, 97, 185, 51, 15, 48, 192,\n        77, 192, 92, 6, 25, 231, 98, 183, 247, 191, 91, 35, 232, 21, 25, 172, 40, 237, 60, 161,\n        137, 231, 74, 255, 83, 254, 183, 142, 212, 17, 244, 228, 22, 175, 11, 18, 28, 10, 13, 59,\n        153, 59, 167, 135, 132, 139, 137, 113, 140, 127, 144, 118, 200, 162, 233, 78, 190, 163, 76,\n        226, 254, 141, 23, 103, 104, 130, 9, 249, 38, 224, 186, 81, 202, 138, 93, 91, 204, 157,\n        215, 80, 29, 100, 172, 90, 238, 198, 240, 210, 187, 19, 62, 115, 118, 162, 168, 216, 71,\n        112, 46, 23, 133, 22, 189, 210, 149, 133, 48, 200, 136, 154, 38, 232, 39, 155, 118, 193,\n        34, 213, 153, 254, 27, 118, 184, 252, 128, 4, 175, 4, 84, 119, 78, 252, 154, 99, 252, 142,\n        108, 170, 171, 108, 4, 181, 42, 121, 214, 195, 219, 86, 242, 192, 126, 196, 223, 239, 42,\n        199, 225, 212, 234, 10, 122, 3, 193, 28, 84, 12, 112, 161, 253, 10, 169, 105, 164, 63, 97,\n        189, 164, 233, 134, 45, 115, 68, 28, 24, 245, 177, 156, 59, 119, 158, 169, 190, 92, 55, 25,\n        81, 131, 16, 97, 164, 233, 188, 6, 13, 197, 35, 180, 215, 5, 222, 218, 153, 211, 204, 140,\n        43, 16, 66, 70, 37, 188, 245, 142, 91, 181, 176, 50, 210, 247, 126, 210, 254, 254, 56, 58,\n        202, 187, 189, 198, 247, 74, 189, 80, 143, 231, 208, 22, 188, 255, 184, 79, 239, 101, 153,\n        38, 185, 223, 119, 141, 143, 241, 93, 236, 72, 153, 185, 119, 215, 135, 123, 202, 66, 204,\n        12, 243, 246, 48, 43, 154, 83, 0, 100, 146, 157, 230, 233, 147, 209, 45, 106, 170, 231,\n        113, 162, 217, 136, 142, 254, 179, 55, 216, 202, 171, 112, 33, 169, 211, 27, 69, 131, 131,\n        186, 210, 79, 186, 244, 223, 25, 153, 0, 204, 17, 150, 183, 82, 33, 40, 165, 178, 214, 212,\n        185, 215, 118, 116, 192, 121, 23, 111, 14, 148, 118, 17, 195, 123, 98, 96, 227, 160, 203,\n        98, 44, 10, 17, 73, 153, 8, 104, 225, 126, 28, 62, 50, 167, 146, 93, 246, 148, 222, 56,\n        235, 205, 189, 222, 186, 74, 242, 195, 91, 54, 135, 245, 245, 139, 235, 233, 43, 125, 89,\n        87, 250, 179, 228, 228, 166, 141, 238, 53, 245, 80, 235, 32, 142, 81, 180, 51, 107, 117,\n        28, 197, 62, 15, 107, 40, 167, 63, 119, 215, 239, 4, 53, 26, 254, 55, 153, 8, 89, 253, 156,\n        98, 25, 51, 54, 205, 255, 183, 37, 76, 39, 153, 92, 240, 79, 178, 157, 153, 205, 242, 91,\n        133, 204, 26, 107, 7, 105, 59, 186, 37, 217, 61, 171, 159, 165, 68, 171, 10, 91, 29, 236,\n        136, 188, 153, 202, 63, 99, 47, 38, 246, 92, 156, 111, 100, 241, 142, 19, 98, 204, 165,\n        188, 6, 5, 117, 91, 47, 16, 227, 100, 43, 77, 56, 70, 231, 10, 161, 170, 195, 142, 34, 154,\n        173, 32, 78, 93, 39, 56, 185, 38, 249, 59, 219, 48, 15, 106, 245, 187, 64, 82, 47, 144,\n        134, 130, 154, 54, 87, 70, 166, 72, 234, 147, 121, 227, 24, 77, 204, 246, 109, 49, 57, 104,\n        114, 128, 35, 40, 34, 113, 75, 116, 91, 6, 43, 28, 123, 123, 43, 180, 82, 237, 1, 250, 108,\n        126, 244, 40, 186, 108, 59, 59, 1, 232, 50, 14, 248, 26, 158, 112, 110, 245, 133, 40, 44,\n        38, 130, 187, 34, 190, 179, 134, 98, 54, 71, 52, 151, 64, 70, 253, 247, 48, 201, 189, 117,\n        28, 18, 6, 111, 239, 64, 248, 250, 231, 85, 20, 133, 210, 238, 207, 121, 136, 37, 127, 16,\n        135, 191, 150, 42, 174, 107, 239, 142, 40, 108, 34, 66, 36, 233, 104, 52, 137, 12, 49, 17,\n        219, 213, 165, 132, 160, 153, 6, 175, 133, 172, 78, 183, 236, 228, 81, 164, 11, 152, 93,\n        194, 212, 117, 179, 84, 175, 251, 73, 172, 77, 252, 207, 166, 218, 20, 168, 183, 0, 205,\n        40, 203, 120, 130, 87, 123, 61, 140, 237, 224, 132, 178, 103, 208, 78, 140, 40, 13, 123, 9,\n        47, 68, 171, 162, 116, 160, 87, 84, 2, 14, 84, 180, 242, 73, 38, 223, 191, 114, 45, 232,\n        208, 252, 180, 95, 17, 205, 199, 106, 169, 123, 181, 212, 225, 99, 114, 116, 48, 43, 6, 8,\n        43, 6, 1, 5, 5, 7, 48, 1, 134, 31, 104, 116, 116, 112, 58, 47, 47, 99, 108, 105, 101, 110,\n        116, 115, 49, 46, 103, 111, 111, 103, 108, 101, 46, 99, 111, 109, 47, 111, 99, 115, 112,\n        48, 29, 6, 3, 85, 29, 14, 4, 22, 4, 20, 253, 90, 18, 128, 11, 205, 4, 95, 242, 77, 89, 40,\n        3, 112, 35, 87, 25, 64, 248, 55, 48, 12, 6, 3, 85, 29, 19, 1, 1, 255, 4, 2, 48, 0, 48, 31,\n        6, 3, 85, 29, 35, 4, 24, 48, 22, 128, 20, 74, 221, 6, 22, 27, 188, 246, 104, 181, 118, 245,\n        129, 182, 187, 98, 26, 186, 90, 129, 47, 48, 33, 6, 3, 85, 29, 32, 4, 26, 48, 24, 48, 12,\n        6, 10, 43, 6, 1, 4, 1, 214, 121, 2, 5, 1, 48, 8, 6, 6, 103, 129, 12, 1, 2, 2, 48, 48, 6, 3,\n        85, 29, 31, 4, 41, 48, 39, 48, 37, 160, 35, 160, 33, 134, 31, 104, 116, 116, 112, 58, 47,\n        47, 112, 107, 105, 46, 103, 111, 111, 103, 108, 101, 46, 99, 111, 109, 47, 71, 73, 65, 71,\n        50, 46, 99, 114, 108, 48, 13, 6, 9, 42, 134, 72, 134, 247, 13, 1, 1, 11, 5, 0, 3, 130, 1,\n        1, 0, 33, 200, 169, 105, 206, 2, 155, 120, 189, 192, 51, 58, 117, 81, 58, 119, 84, 168,\n        232, 112, 67, 74, 178, 108, 140, 239, 140, 58, 241, 118, 5, 87, 151, 75, 62, 228, 100, 79,\n        253, 168, 208, 39, 111, 248, 15, 136, 208, 240, 106, 77, 117, 121, 178, 58, 88, 245, 179,\n        162, 251, 10, 71, 202, 197, 70, 144, 133, 162, 197, 128, 53, 111, 180, 163, 6, 63, 152, 48,\n        225, 133, 207, 156, 142, 147, 155, 164, 234, 150, 95, 194, 204, 36, 174, 11, 81, 8, 107,\n        127, 181, 132, 216, 230, 232, 29, 152, 1, 46, 152, 162, 185, 105, 229, 136, 245, 133, 63,\n        134, 92, 242, 217, 7, 26, 64, 132, 248, 126, 187, 114, 56, 192, 240, 70, 213, 140, 90, 19,\n        23, 33, 155, 220, 79, 93, 249, 252, 184, 190, 60, 45, 123, 246, 182, 204, 232, 45, 111,\n        214, 187, 247, 195, 215, 60, 88, 120, 12, 241, 0, 54, 189, 184, 200, 138, 56, 58, 15, 211,\n        62, 239, 220, 24, 224, 142, 159, 199, 102, 126, 9, 199, 212, 60, 163, 123, 195, 235, 239,\n        210, 8, 24, 172, 63, 119, 216, 233, 1, 8, 101, 21, 150, 10, 75, 36, 243, 45, 241, 243, 191,\n        254, 221, 133, 11, 136, 82, 64, 50, 222, 221, 48, 184, 48, 183, 155, 228, 204, 32, 177,\n        209, 139, 86, 15, 190, 118, 233, 91, 146, 124, 132, 218, 50, 73, 110, 152, 63, 196, 8, 66,\n        19, 171, 62, 0, 3, 244, 48, 130, 3, 240, 48, 130, 2, 216, 160, 3, 2, 1, 2, 2, 3, 2, 58,\n        146, 48, 13, 6, 9, 42, 134, 72, 134, 247, 13, 1, 1, 11, 5, 0, 48, 66, 49, 11, 48, 9, 6, 3,\n        85, 4, 6, 19, 2, 85, 83, 49, 22, 48, 20, 6, 3, 85, 4, 10, 19, 13, 71, 101, 111, 84, 114,\n        117, 115, 116, 32, 65, 110, 99, 46, 49, 27, 48, 25, 6, 3, 85, 4, 3, 19, 18, 71, 101, 111,\n        84, 114, 117, 115, 116, 32, 71, 108, 111, 98, 97, 108, 32, 67, 65, 48, 30, 23, 13, 49, 53,\n        48, 52, 48, 49, 48, 48, 48, 48, 48, 48, 90, 23, 13, 49, 55, 49, 50, 51, 49, 50, 51, 53, 57,\n        53, 57, 90, 48, 73, 49, 11, 48, 9, 6, 3, 85, 4, 6, 19, 2, 85, 83, 49, 19, 48, 17, 6, 3, 85,\n        4, 10, 19, 10, 71, 111, 111, 103, 108, 101, 32, 73, 110, 99, 49, 37, 48, 35, 6, 3, 85, 4,\n        3, 19, 28, 71, 111, 111, 103, 108, 101, 32, 73, 110, 116, 101, 114, 110, 101, 116, 32, 65,\n        117, 116, 104, 111, 114, 105, 116, 121, 32, 71, 50, 48, 130, 1, 34, 48, 13, 6, 9, 42, 134,\n        72, 134, 247, 13, 1, 1, 1, 5, 0, 3, 130, 1, 15, 0, 48, 130, 1, 10, 2, 130, 1, 1, 0, 156,\n        42, 4, 119, 92, 216, 80, 145, 58, 6, 163, 130, 224, 216, 80, 72, 188, 137, 63, 241, 25,\n        112, 26, 136, 70, 126, 224, 143, 197, 241, 137, 206, 33, 238, 90, 254, 97, 13, 183, 50, 68,\n        137, 160, 116, 11, 83, 79, 85, 164, 206, 218, 205, 242, 139, 64, 190, 177, 79, 163, 13,\n        245, 95, 144, 138, 214, 18, 105, 157, 143, 227, 178, 156, 38, 215, 106, 254, 245, 153, 14,\n        188, 52, 101, 188, 238, 86, 47, 120, 37, 100, 136, 93, 124, 217, 73, 77, 154, 46, 244, 106,\n        178, 10, 189, 146, 171, 135, 220, 144, 201, 229, 61, 61, 135, 192, 76, 64, 222, 138, 66,\n        197, 214, 166, 41, 39, 147, 245, 35, 15, 191, 134, 204, 64, 72, 168, 114, 232, 179, 225,\n        117, 94, 47, 184, 219, 143, 107, 210, 56, 223, 248, 86, 107, 154, 214, 43, 23, 71, 130,\n        241, 25, 50, 204, 144, 244, 19, 51, 33, 180, 0, 17, 184, 61, 147,\n    ];\n    let root_store = RootCertStore::empty();\n    let config = Arc::new(\n        ClientConfig::builder()\n            .with_safe_defaults()\n            .with_root_certificates(root_store)\n            .with_no_client_auth(),\n    );\n    let example_com = \"example.com\".try_into().unwrap();\n    let mut client = ClientConnection::new(config, example_com).unwrap();\n    let _ = client.read_tls(&mut io::Cursor::new(data));\n    let _ = client.process_new_packets();\n}"}
{"test_id": "rustls-rustls/rustls-rustls-ae583bd/tests-gen/server.inputs.rs::test_62", "code": "pub fn process_new_packets(&mut self) -> Result<IoState, Error> {\n        match self {\n            Self::Client(conn) => conn.process_new_packets(),\n            Self::Server(conn) => conn.process_new_packets(),\n        }\n    }", "test": "fn test_62() {\n    let data = [\n        22, 3, 1, 0, 196, 1, 0, 0, 183, 3, 3, 220, 22, 51, 168, 177, 163, 9, 68, 53, 77, 77, 35,\n        28, 3, 125, 157, 176, 186, 53, 22, 211, 5, 127, 250, 92, 65, 31, 143, 93, 97, 146, 138, 0,\n        0, 20, 19, 3, 19, 2, 19, 1, 204, 169, 204, 168, 192, 44, 192, 43, 3, 1, 0, 53, 219, 184,\n        117, 77, 19, 58, 216, 56, 206, 189, 136, 130, 200, 75, 0, 154, 207, 11, 90, 130, 199, 181,\n        127, 202, 244, 83, 193, 104, 19, 154, 127, 6, 156, 172, 21, 121, 252, 87, 250, 196, 88, 45,\n        208, 213, 175, 154, 154, 143, 29, 49, 69, 68, 88,\n    ];\n    let config = Arc::new(\n        ServerConfig::builder()\n            .with_safe_defaults()\n            .with_no_client_auth()\n            .with_cert_resolver(Arc::new(Fail)),\n    );\n    let mut server = ServerConnection::new(config).unwrap();\n    let _ = server.read_tls(&mut io::Cursor::new(data));\n    let _ = server.process_new_packets();\n}"}
{"test_id": "quinn-rs-quinn/quinn-rs-quinn-83e4f46/tests-gen/streamid.inputs.rs::test_20", "code": "pub fn initiator(self) -> Side {\n        if self.0 & 0x1 == 0 {\n            Side::Client\n        } else {\n            Side::Server\n        }\n    }", "test": "fn test_20() {\n    let data = StreamIdParams {\n        side: Server,\n        dir: Uni,\n        index: 4300284180663479725,\n    };\n    let s = StreamId::new(data.side, data.dir, data.index);\n    assert_eq!(s.initiator(), data.side);\n    assert_eq!(s.dir(), data.dir);\n}"}
{"test_id": "marshallpierce-rust-base64/marshallpierce-rust-base64-4ef33cc/tests-gen/decode_random.inputs.rs::test_51", "code": "fn decode<T: AsRef<[u8]>>(&self, input: T) -> Result<Vec<u8>, DecodeError> {\n        fn inner<E>(engine: &E, input_bytes: &[u8]) -> Result<Vec<u8>, DecodeError>\n        where\n            E: Engine + ?Sized,\n        {\n            let estimate = engine.internal_decoded_len_estimate(input_bytes.len());\n            let mut buffer = vec![0; estimate.decoded_len_estimate()];\n\n            let bytes_written = engine\n                .internal_decode(input_bytes, &mut buffer, estimate)?\n                .decoded_len;\n\n            buffer.truncate(bytes_written);\n\n            Ok(buffer)\n        }\n\n        inner(self, input.as_ref())\n    }", "test": "fn test_51() {\n    let data = [208, 59, 223];\n    let engine = utils::random_engine(data);\n    let _ = engine.decode(data);\n}"}
{"test_id": "tafia-calamine/tafia-calamine-5a5804d/tests-gen/fuzz_all.inputs.rs::test_52", "code": "fn count<R: Reader<BufReader<File>>>(path: &str) -> usize {\n    let path = format!(\"{}/{}\", env!(\"CARGO_MANIFEST_DIR\"), path);\n    let mut excel: R = open_workbook(&path).expect(\"cannot open excel file\");\n\n    let sheets = excel.sheet_names().to_owned();\n    let mut count = 0;\n    for s in sheets {\n        count += excel\n            .worksheet_range(&s)\n            .unwrap()\n            .unwrap()\n            .rows()\n            .flat_map(|r| r.iter())\n            .count();\n    }\n    count\n}", "test": "fn test_52() {\n    let data = [91, 35];\n    let file_name = \"fuzz.xlsx\";\n    if let Ok(mut file) = File::create(file_name) {\n        if file.write_all(data).is_err() {\n            return;\n        }\n    }\n    let mut workbook: Xlsx<_> = match open_workbook(file_name) {\n        Ok(excel) => excel,\n        Err(_) => return,\n    };\n    for worksheet in workbook.worksheets() {\n        if let Some(Ok(range)) = workbook.worksheet_range(&worksheet.0) {\n            let _ = range.get_size().0 * range.get_size().1;\n            range.used_cells().count();\n        }\n    }\n    if let Some(Ok(mut vba)) = workbook.vba_project() {\n        let vba = vba.to_mut();\n        for module_name in vba.get_module_names() {\n            if vba.get_module(module_name).is_ok() {\n                for r in vba.get_references() {\n                    r.is_missing();\n                }\n            }\n        }\n    }\n    let sheets = workbook.sheet_names().to_owned();\n    for s in sheets {\n        if let Some(Ok(formula)) = workbook.worksheet_formula(&s) {\n            formula\n                .rows()\n                .flat_map(|r| r.iter().filter(|f| !f.is_empty()))\n                .count();\n        }\n    }\n}"}
{"test_id": "cloud-hypervisor-cloud-hypervisor/cloud-hypervisor-cloud-hypervisor-db3a5f3/tests-gen/balloon.inputs.rs::test_17", "code": "pub fn wait_for_epoll_threads(&mut self) {\n        self.common.wait_for_epoll_threads();\n    }", "test": "fn test_17() {\n    let bytes = [8, 8];\n    if bytes.len() < QUEUE_DATA_SIZE * QUEUE_NUM\n        || bytes.len() > (QUEUE_DATA_SIZE * QUEUE_NUM + MEM_SIZE)\n    {\n        return;\n    }\n    let mut balloon = virtio_devices::Balloon::new(\n        \"fuzzer_balloon\".to_owned(),\n        BALLOON_SIZE,\n        true,\n        true,\n        SeccompAction::Allow,\n        EventFd::new(EFD_NONBLOCK).unwrap(),\n        None,\n    )\n    .unwrap();\n    let queue_data = &bytes[..QUEUE_DATA_SIZE * QUEUE_NUM];\n    let mem_bytes = &bytes[QUEUE_DATA_SIZE * QUEUE_NUM..];\n    let mem = GuestMemoryMmap::from_ranges(&[(GuestAddress(0), MEM_SIZE)]).unwrap();\n    if mem.write_slice(mem_bytes, GuestAddress(0 as u64)).is_err() {\n        return;\n    }\n    let guest_memory = GuestMemoryAtomic::new(mem);\n    let mut queues = setup_virt_queues(\n        &[\n            &queue_data[..QUEUE_DATA_SIZE].try_into().unwrap(),\n            &queue_data[QUEUE_DATA_SIZE..QUEUE_DATA_SIZE * 2]\n                .try_into()\n                .unwrap(),\n            &queue_data[QUEUE_DATA_SIZE * 2..QUEUE_DATA_SIZE * 3]\n                .try_into()\n                .unwrap(),\n        ],\n        0,\n    );\n    let inflate_q = queues.remove(0);\n    let inflate_evt = EventFd::new(0).unwrap();\n    let inflate_queue_evt = unsafe { EventFd::from_raw_fd(libc::dup(inflate_evt.as_raw_fd())) };\n    let deflate_q = queues.remove(0);\n    let deflate_evt = EventFd::new(0).unwrap();\n    let deflate_queue_evt = unsafe { EventFd::from_raw_fd(libc::dup(deflate_evt.as_raw_fd())) };\n    let reporting_q = queues.remove(0);\n    let reporting_evt = EventFd::new(0).unwrap();\n    let reporting_queue_evt = unsafe { EventFd::from_raw_fd(libc::dup(reporting_evt.as_raw_fd())) };\n    inflate_queue_evt.write(1).unwrap();\n    deflate_queue_evt.write(1).unwrap();\n    reporting_queue_evt.write(1).unwrap();\n    balloon\n        .activate(\n            guest_memory,\n            Arc::new(NoopVirtioInterrupt {}),\n            vec![\n                (0, inflate_q, inflate_evt),\n                (1, deflate_q, deflate_evt),\n                (2, reporting_q, reporting_evt),\n            ],\n        )\n        .ok();\n    balloon.wait_for_epoll_threads();\n}"}
{"test_id": "gfx-rs-naga/gfx-rs-naga-92e41b4/tests-gen/wgsl_parser.inputs.rs::test_22", "code": "pub fn parse(mut self) -> Result<crate::Module, Error> {\n        let mut module = {\n            if self.next()? != spirv::MAGIC_NUMBER {\n                return Err(Error::InvalidHeader);\n            }\n            let version_raw = self.next()?;\n            let generator = self.next()?;\n            let _bound = self.next()?;\n            let _schema = self.next()?;\n            log::info!(\"Generated by {} version {:x}\", generator, version_raw);\n            crate::Module::default()\n        };\n\n        self.layouter.clear();\n        self.dummy_functions = Arena::new();\n        self.lookup_function.clear();\n        self.function_call_graph.clear();\n\n        loop {\n            use spirv::Op;\n\n            let inst = match self.next_inst() {\n                Ok(inst) => inst,\n                Err(Error::IncompleteData) => break,\n                Err(other) => return Err(other),\n            };\n            log::debug!(\"\\t{:?} [{}]\", inst.op, inst.wc);\n\n            match inst.op {\n                Op::Capability => self.parse_capability(inst),\n                Op::Extension => self.parse_extension(inst),\n                Op::ExtInstImport => self.parse_ext_inst_import(inst),\n                Op::MemoryModel => self.parse_memory_model(inst),\n                Op::EntryPoint => self.parse_entry_point(inst),\n                Op::ExecutionMode => self.parse_execution_mode(inst),\n                Op::String => self.parse_string(inst),\n                Op::Source => self.parse_source(inst),\n                Op::SourceExtension => self.parse_source_extension(inst),\n                Op::Name => self.parse_name(inst),\n                Op::MemberName => self.parse_member_name(inst),\n                Op::ModuleProcessed => self.parse_module_processed(inst),\n                Op::Decorate => self.parse_decorate(inst),\n                Op::MemberDecorate => self.parse_member_decorate(inst),\n                Op::TypeVoid => self.parse_type_void(inst),\n                Op::TypeBool => self.parse_type_bool(inst, &mut module),\n                Op::TypeInt => self.parse_type_int(inst, &mut module),\n                Op::TypeFloat => self.parse_type_float(inst, &mut module),\n                Op::TypeVector => self.parse_type_vector(inst, &mut module),\n                Op::TypeMatrix => self.parse_type_matrix(inst, &mut module),\n                Op::TypeFunction => self.parse_type_function(inst),\n                Op::TypePointer => self.parse_type_pointer(inst, &mut module),\n                Op::TypeArray => self.parse_type_array(inst, &mut module),\n                Op::TypeRuntimeArray => self.parse_type_runtime_array(inst, &mut module),\n                Op::TypeStruct => self.parse_type_struct(inst, &mut module),\n                Op::TypeImage => self.parse_type_image(inst, &mut module),\n                Op::TypeSampledImage => self.parse_type_sampled_image(inst),\n                Op::TypeSampler => self.parse_type_sampler(inst, &mut module),\n                Op::Constant | Op::SpecConstant => self.parse_constant(inst, &mut module),\n                Op::ConstantComposite => self.parse_composite_constant(inst, &mut module),\n                Op::ConstantNull | Op::Undef => self.parse_null_constant(inst, &mut module),\n                Op::ConstantTrue => self.parse_bool_constant(inst, true, &mut module),\n                Op::ConstantFalse => self.parse_bool_constant(inst, false, &mut module),\n                Op::Variable => self.parse_global_variable(inst, &mut module),\n                Op::Function => {\n                    self.switch(ModuleState::Function, inst.op)?;\n                    inst.expect(5)?;\n                    self.parse_function(&mut module)\n                }\n                _ => Err(Error::UnsupportedInstruction(self.state, inst.op)), //TODO\n            }?;\n        }\n\n        log::info!(\"Patching...\");\n        {\n            let mut nodes = petgraph::algo::toposort(&self.function_call_graph, None)\n                .map_err(|cycle| Error::FunctionCallCycle(cycle.node_id()))?;\n            nodes.reverse(); // we need dominated first\n            let mut functions = mem::take(&mut module.functions);\n            for fun_id in nodes {\n                if fun_id > !(functions.len() as u32) {\n                    // skip all the fake IDs registered for the entry points\n                    continue;\n                }\n                let lookup = self.lookup_function.get_mut(&fun_id).unwrap();\n                // take out the function from the old array\n                let fun = mem::take(&mut functions[lookup.handle]);\n                // add it to the newly formed arena, and adjust the lookup\n                lookup.handle = module\n                    .functions\n                    .append(fun, functions.get_span(lookup.handle));\n            }\n        }\n        // patch all the functions\n        for (handle, fun) in module.functions.iter_mut() {\n            self.patch_function(Some(handle), fun)?;\n        }\n        for ep in module.entry_points.iter_mut() {\n            self.patch_function(None, &mut ep.function)?;\n        }\n\n        // Check all the images and samplers to have consistent comparison property.\n        for (handle, flags) in self.handle_sampling.drain() {\n            if !image::patch_comparison_type(\n                flags,\n                module.global_variables.get_mut(handle),\n                &mut module.types,\n            ) {\n                return Err(Error::InconsistentComparisonSampling(handle));\n            }\n        }\n\n        if !self.future_decor.is_empty() {\n            log::warn!(\"Unused item decorations: {:?}\", self.future_decor);\n            self.future_decor.clear();\n        }\n        if !self.future_member_decor.is_empty() {\n            log::warn!(\"Unused member decorations: {:?}\", self.future_member_decor);\n            self.future_member_decor.clear();\n        }\n\n        Ok(module)\n    }", "test": "fn test_22() {\n    let data = \"!\\0>\";\n    let _result = Frontend::new().parse(&data);\n}"}
{"test_id": "image-rs-image/image-rs-image-e5580ec/tests-gen/fuzzer_script_tga.inputs.rs::test_80", "code": "fn decode(encoded: &[u8]) -> Vec<u8> {\n        let decoder = JpegDecoder::new(Cursor::new(encoded)).expect(\"Could not decode image\");\n\n        let mut decoded = vec![0; decoder.total_bytes() as usize];\n        decoder\n            .read_image(&mut decoded)\n            .expect(\"Could not decode image\");\n        decoded\n    }", "test": "fn test_80() {\n    let data = [10, 10, 38, 34];\n    let _ = decode(data);\n}"}
{"test_id": "rustls-rustls/rustls-rustls-ae583bd/tests-gen/message.inputs.rs::test_15", "code": "pub fn used(&self) -> usize {\n        self.cursor\n    }", "test": "fn test_15() {\n    let data = [22, 3, 3, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0];\n    let mut rdr = Reader::init(data);\n    if let Ok(m) = OpaqueMessage::read(&mut rdr) {\n        let msg = match Message::try_from(m.into_plain_message()) {\n            Ok(msg) => msg,\n            Err(_) => return,\n        };\n        let enc = PlainMessage::from(msg)\n            .into_unencrypted_opaque()\n            .encode();\n        assert_eq!(enc, data[..rdr.used()]);\n    }\n}"}
{"test_id": "gimli-rs-gimli/gimli-rs-gimli-3947879/tests-gen/debug_abbrev.inputs.rs::test_20", "code": "pub fn get<R: Reader>(\n        &self,\n        debug_abbrev: &DebugAbbrev<R>,\n        offset: DebugAbbrevOffset<R::Offset>,\n    ) -> Result<Arc<Abbreviations>> {\n        if offset.0 != R::Offset::from_u8(0) {\n            return debug_abbrev.abbreviations(offset).map(Arc::new);\n        }\n        self.abbreviations\n            .get(|| debug_abbrev.abbreviations(offset))\n    }", "test": "fn test_20() {\n    let debug_abbrev = [43, 8];\n    let len = debug_abbrev.len();\n    let debug_abbrev = DebugAbbrev::new(&debug_abbrev, LittleEndian);\n    let offset = DebugAbbrevOffset(0);\n    if let Ok(abbreviations) = debug_abbrev.abbreviations(offset) {\n        for i in 1..len {\n            let _ = abbreviations.get(i as u64);\n        }\n    }\n}"}
{"test_id": "quinn-rs-quinn/quinn-rs-quinn-83e4f46/tests-gen/streamid.inputs.rs::test_99", "code": "pub fn initiator(self) -> Side {\n        if self.0 & 0x1 == 0 {\n            Side::Client\n        } else {\n            Side::Server\n        }\n    }", "test": "fn test_99() {\n    let data = StreamIdParams {\n        side: Server,\n        dir: Uni,\n        index: 12514849900987264429,\n    };\n    let s = StreamId::new(data.side, data.dir, data.index);\n    assert_eq!(s.initiator(), data.side);\n    assert_eq!(s.dir(), data.dir);\n}"}
{"test_id": "winnow-rs-winnow/winnow-rs-winnow-9e88734/tests-gen/fuzz_arithmetic.inputs.rs::test_57", "code": "fn factor(i: &mut &str) -> PResult<Expr> {\n    delimited(\n        multispaces,\n        alt((digits.try_map(FromStr::from_str).map(Expr::Value), parens)),\n        multispaces,\n    )\n    .parse_next(i)\n}", "test": "fn test_57() {\n    let data = [0, 126, 0, 0];\n    reset();\n    let _ = match str::from_utf8(data) {\n        Ok(mut v) => factor(&mut v),\n        Err(_) => factor(&mut \"2\"),\n    };\n}"}
{"test_id": "dtolnay-syn/dtolnay-syn-b1a038c/tests-gen/create_token_buffer.inputs.rs::test_26", "code": "fn parse_str(self, s: &str) -> Result<Self::Output> {\n        self.parse2(proc_macro2::TokenStream::from_str(s)?)\n    }", "test": "fn test_26() {\n    let data = [61, 38];\n    if data.len() < 300 {\n        if let Ok(string) = str::from_utf8(data) {\n            let _ = immediate_fail.parse_str(string);\n        }\n    }\n}"}
{"test_id": "bodil-im-rs/bodil-im-rs-2afaf54/tests-gen/ordset.inputs.rs::test_89", "code": "pub fn remove<BA>(&mut self, a: &BA) -> Option<A>\n    where\n        BA: Hash + Eq + ?Sized,\n        A: Borrow<BA>,\n    {\n        let root = PoolRef::make_mut(&self.pool.0, &mut self.root);\n        let result = root.remove(&self.pool.0, hash_key(&*self.hasher, a), 0, a);\n        if result.is_some() {\n            self.size -= 1;\n        }\n        result.map(|v| v.0)\n    }", "test": "fn test_89() {\n    let actions = [Insert(4991471925827290368)];\n    let mut set = OrdSet::new();\n    let mut nat = NatSet::new();\n    for action in actions {\n        match action {\n            Action::Insert(value) => {\n                let len = nat.len() + if nat.contains(&value) { 0 } else { 1 };\n                nat.insert(value);\n                set.insert(value);\n                assert_eq!(len, set.len());\n            }\n            Action::Remove(value) => {\n                let len = nat.len() - if nat.contains(&value) { 1 } else { 0 };\n                nat.remove(&value);\n                set.remove(&value);\n                assert_eq!(len, set.len());\n            }\n        }\n        assert_eq!(nat.len(), set.len());\n        assert_eq!(OrdSet::from(nat.clone()), set);\n    }\n}"}
{"test_id": "rust-bio-rust-bio/rust-bio-rust-bio-319a0d8/tests-gen/myers_matching.inputs.rs::test_76", "code": "fn validate_alignment (aln : & Alignment , x : & [u8] , y : & [u8]) { let y = & y [aln . ystart .. aln . yend] ; let mut ix = 0 ; let mut iy = 0 ; let mut calc_dist = 0 ; for op in & aln . operations { match * op { Match => { assert ! (x [ix] == y [iy] , \"Match operation, but characters are not equal\") ; ix += 1 ; iy += 1 ; } Subst => { assert ! (x [ix] != y [iy] , \"Subst operation, but characters are equal\") ; calc_dist += 1 ; ix += 1 ; iy += 1 ; } Del => { calc_dist += 1 ; iy += 1 ; } Ins => { calc_dist += 1 ; ix += 1 ; } _ => unreachable ! () } } assert_eq ! (calc_dist , aln . score as usize) ; }", "test": "fn test_76() {\n    let data = [1, 0];\n    if data.len() < 3 {\n        return;\n    }\n    let (max_dist, data) = data.split_first().unwrap();\n    let (pattern_len, data) = data.split_first().unwrap();\n    let max_dist = min(64, *max_dist);\n    let pattern_len = max(1, min(64, min(data.len(), *pattern_len as usize)));\n    if data.iter().any(|&b| b < 65 || b > 122 || b > 90 && b < 97) {\n        return;\n    }\n    let (pattern, text) = data.split_at(pattern_len);\n    let max_dist = max_dist as u8;\n    let _ = MyersBuilder::new().build_64(pattern);\n    let _ = MyersBuilder::new().build_long_64(pattern);\n    let mut myers = Myers::<u64>::new(pattern);\n    let mut myers_long = long::Myers::<u8>::new(pattern);\n    let end_dist: Vec<_> = myers.find_all_end(text, max_dist).collect();\n    let end_dist_long: Vec<_> = myers_long\n        .find_all_end(text, max_dist as usize)\n        .map(|(end, dist)| (end, dist as u8))\n        .collect();\n    assert_eq!(end_dist, end_dist_long);\n    let mut aln = Alignment::default();\n    let mut aln_long = Alignment::default();\n    {\n        let mut matches = myers.find_all(text, max_dist);\n        let mut matches_long = myers_long.find_all(text, max_dist as usize);\n        matches.alignment(&mut aln);\n        matches_long.alignment(&mut aln_long);\n        let mut end_dist_iter = end_dist.iter();\n        while matches.next_alignment(&mut aln) {\n            assert!(matches_long.next_alignment(&mut aln_long));\n            assert_eq!(aln, aln_long);\n            validate_alignment(&aln, pattern, text);\n            assert!(aln.score as u8 <= max_dist);\n            let (end, dist) = end_dist_iter.next().unwrap();\n            assert_eq!(*end + 1, aln.yend);\n            assert_eq!(*dist, aln.score as u8);\n        }\n        assert!(end_dist_iter.next().is_none());\n        assert!(!matches_long.next_alignment(&mut aln_long));\n    }\n    {\n        let mut matches = myers.find_all_lazy(text, max_dist);\n        let mut matches_long = myers_long.find_all_lazy(text, max_dist as usize);\n        let mut end_dist_iter = end_dist.iter();\n        while let Some((end, dist)) = matches.next() {\n            let (end_long, dist_long) = matches_long.next().unwrap();\n            assert_eq!((end, dist), (end_long, dist_long as u8));\n            assert!(matches.alignment_at(end, &mut aln));\n            assert!(matches_long.alignment_at(end, &mut aln_long));\n            assert_eq!(aln, aln_long);\n            validate_alignment(&aln, pattern, text);\n            assert_eq!(dist, aln.score as u8);\n            assert!(aln.score as u8 <= max_dist);\n            let (end, dist) = end_dist_iter.next().unwrap();\n            assert_eq!(*end + 1, aln.yend);\n            assert_eq!(*dist, aln.score as u8);\n            assert!(!matches.alignment_at(end + 1, &mut aln));\n        }\n        assert!(end_dist_iter.next().is_none());\n    }\n    let mut matches = myers.find_all_lazy(text, u8::max_value());\n    let mut matches_long = myers_long.find_all_lazy(text, u8::max_value() as usize);\n    let mut i = 0;\n    while let Some((end, dist)) = matches.next() {\n        assert_eq!(end, i);\n        let (end_long, dist_long) = matches_long.next().unwrap();\n        assert_eq!((end, dist), (end_long, dist_long as u8));\n        assert!(matches.alignment_at(end, &mut aln));\n        assert!(matches_long.alignment_at(end, &mut aln_long));\n        assert_eq!(aln, aln_long);\n        validate_alignment(&aln, pattern, text);\n        assert_eq!(dist, aln.score as u8);\n        assert!(aln.score as u8 <= u8::max_value());\n        assert!(!matches.alignment_at(end + 1, &mut aln));\n        assert!(!matches_long.alignment_at(end + 1, &mut aln_long));\n        i += 1;\n    }\n}"}
{"test_id": "zip-rs-zip/zip-rs-zip-ed187d6/tests-gen/fuzz_read.inputs.rs::test_59", "code": "fn decompress_all (data : & [u8]) -> Result < () , Box < dyn std :: error :: Error > > { let reader = std :: io :: Cursor :: new (data) ; let mut zip = zip :: ZipArchive :: new (reader) ? ; for i in 0 .. zip . len () { let mut file = zip . by_index (i) ? ; if file . size () < 1 << 20 { let _ = std :: io :: copy (& mut file , & mut std :: io :: sink ()) ; } } Ok (()) }", "test": "fn test_59() {\n    let data = [134, 152, 10, 93];\n    let _ = decompress_all(data);\n}"}
{"test_id": "rust-bio-rust-bio/rust-bio-rust-bio-319a0d8/tests-gen/banded_aligner.inputs.rs::test_45", "code": "fn validate_alignment_score(al: &Alignment, x: TextSlice, y: TextSlice, scoring: &Scoring<MatchParams>) -> bool {\n    use AlignmentOperation::*;\n    let path = al.path();\n    let mut score = 0;\n    if al.mode==AlignmentMode::Custom {\n        if al.xstart > 0 {\n            score += scoring.xclip_prefix;\n        }\n        if al.ystart > 0 {\n            score += scoring.yclip_prefix;\n        }\n        if al.xend < al.xlen {\n            score += scoring.xclip_suffix;\n        }\n        if al.yend < al.ylen {\n            score += scoring.yclip_suffix;\n        }\n    }\n    let mut last_op = None;\n    for (i, j, op) in path {\n        score += match op {\n            Match | Subst => scoring.match_fn.score(x[i-1], y[j-1]),\n            Del => if last_op==Some(Del) { scoring.gap_extend } else { scoring.gap_open + scoring.gap_extend },\n            Ins => if last_op==Some(Ins) { scoring.gap_extend } else { scoring.gap_open + scoring.gap_extend },\n            _ => 0,\n        };\n        last_op = Some(op);\n    }\n    al.score==score\n}", "test": "fn test_45() {\n    let data = [10, 10, 38, 40];\n    if data.len() < 50 || data.len() > 300 {\n        return;\n    }\n    let (split_byte, data) = data.split_first().unwrap();\n    let (kmer_byte, data) = data.split_first().unwrap();\n    let (window_byte, data) = data.split_first().unwrap();\n    let (match_score_byte, data) = data.split_first().unwrap();\n    let (mismatch_score_byte, data) = data.split_first().unwrap();\n    let (gap_open_byte, data) = data.split_first().unwrap();\n    let (gap_extend_byte, data) = data.split_first().unwrap();\n    let (xclip_prefix_byte, data) = data.split_first().unwrap();\n    let (xclip_suffix_byte, data) = data.split_first().unwrap();\n    let (yclip_prefix_byte, data) = data.split_first().unwrap();\n    let (yclip_suffix_byte, data) = data.split_first().unwrap();\n    let alphabets = b\"ACGT\";\n    let v: Vec<_> = data\n        .iter()\n        .map(|i| alphabets[(*i as usize) % alphabets.len()])\n        .collect();\n    let kmer_len: usize = 5 + (*kmer_byte as usize) % 10;\n    let window_size: usize = 5 + (*window_byte as usize) % 10;\n    let split_pos: usize = min(data.len() - 1, max(*split_byte as usize, 1));\n    let match_score = 1 + (*match_score_byte as i32) % 5;\n    let mismatch_score = -((*mismatch_score_byte as i32) % 10);\n    let gap_open = -((*gap_open_byte as i32) % 20);\n    let gap_extend = -((*gap_extend_byte as i32) % 10);\n    let (x, y) = v.split_at(split_pos);\n    println!(\n        \"x: {}, y: {}, k: {}, w: {}, scoring ({}, {}, {}, {})\",\n        String::from_utf8(x.to_vec()).unwrap(),\n        String::from_utf8(y.to_vec()).unwrap(),\n        kmer_len,\n        window_size,\n        gap_open,\n        gap_extend,\n        match_score,\n        mismatch_score\n    );\n    let base_score = Scoring::from_scores(gap_open, gap_extend, match_score, mismatch_score);\n    {\n        println!(\n            \"Clip scores ({}, {}, {}, {})\",\n            xclip_prefix_byte, xclip_suffix_byte, yclip_prefix_byte, yclip_suffix_byte\n        );\n        let scoring = Scoring {\n            xclip_prefix: -(*xclip_prefix_byte as i32),\n            xclip_suffix: -(*xclip_suffix_byte as i32),\n            yclip_prefix: -(*yclip_prefix_byte as i32),\n            yclip_suffix: -(*yclip_suffix_byte as i32),\n            ..base_score.clone()\n        };\n        let mut b_aligner = banded::Aligner::with_scoring(scoring.clone(), kmer_len, window_size);\n        let b_alignment = b_aligner.custom(x, y);\n        assert!(validate_alignment_score(&b_alignment, x, y, &scoring));\n        let mut f_aligner = pairwise::Aligner::with_scoring(scoring.clone());\n        let f_alignment = f_aligner.custom(x, y);\n        assert!(validate_alignment_score(&f_alignment, x, y, &scoring));\n        let band_all_alignment = b_aligner.custom_with_matches(x, y, &Vec::new());\n        assert_eq!(band_all_alignment.score, f_alignment.score);\n    }\n    {\n        let scoring = Scoring {\n            xclip_prefix: 0,\n            xclip_suffix: 0,\n            yclip_suffix: 0,\n            ..base_score.clone()\n        };\n        let mut b_aligner = banded::Aligner::with_scoring(scoring.clone(), kmer_len, window_size);\n        let b_alignment = b_aligner.custom(x, y);\n        assert_eq!(b_alignment.ystart, 0);\n        assert!(validate_alignment_score(&b_alignment, x, y, &scoring));\n        let mut f_aligner = pairwise::Aligner::with_scoring(scoring.clone());\n        let f_alignment = f_aligner.custom(x, y);\n        assert_eq!(f_alignment.ystart, 0);\n        assert!(validate_alignment_score(&f_alignment, x, y, &scoring));\n        let band_all_alignment = b_aligner.custom_with_matches(x, y, &Vec::new());\n        assert_eq!(band_all_alignment.score, f_alignment.score);\n    }\n    {\n        let scoring = Scoring {\n            xclip_prefix: 0,\n            xclip_suffix: 0,\n            yclip_prefix: 0,\n            ..base_score.clone()\n        };\n        let mut b_aligner = banded::Aligner::with_scoring(scoring.clone(), kmer_len, window_size);\n        let b_alignment = b_aligner.custom(x, y);\n        assert_eq!(b_alignment.yend, b_alignment.ylen);\n        assert!(validate_alignment_score(&b_alignment, x, y, &scoring));\n        let mut f_aligner = pairwise::Aligner::with_scoring(scoring.clone());\n        let f_alignment = f_aligner.custom(x, y);\n        assert_eq!(f_alignment.yend, f_alignment.ylen);\n        assert!(validate_alignment_score(&f_alignment, x, y, &scoring));\n        let band_all_alignment = b_aligner.custom_with_matches(x, y, &Vec::new());\n        assert_eq!(band_all_alignment.score, f_alignment.score);\n    }\n    {\n        let scoring = Scoring {\n            xclip_suffix: 0,\n            yclip_prefix: 0,\n            yclip_suffix: 0,\n            ..base_score.clone()\n        };\n        let mut b_aligner = banded::Aligner::with_scoring(scoring.clone(), kmer_len, window_size);\n        let b_alignment = b_aligner.custom(x, y);\n        assert_eq!(b_alignment.xstart, 0);\n        assert!(validate_alignment_score(&b_alignment, x, y, &scoring));\n        let mut f_aligner = pairwise::Aligner::with_scoring(scoring.clone());\n        let f_alignment = f_aligner.custom(x, y);\n        assert_eq!(f_alignment.xstart, 0);\n        assert!(validate_alignment_score(&f_alignment, x, y, &scoring));\n        let band_all_alignment = b_aligner.custom_with_matches(x, y, &Vec::new());\n        assert_eq!(band_all_alignment.score, f_alignment.score);\n    }\n    {\n        let scoring = Scoring {\n            xclip_prefix: 0,\n            yclip_prefix: 0,\n            yclip_suffix: 0,\n            ..base_score.clone()\n        };\n        let mut b_aligner = banded::Aligner::with_scoring(scoring.clone(), kmer_len, window_size);\n        let b_alignment = b_aligner.custom(x, y);\n        assert_eq!(b_alignment.xend, b_alignment.xlen);\n        assert!(validate_alignment_score(&b_alignment, x, y, &scoring));\n        let mut f_aligner = pairwise::Aligner::with_scoring(scoring.clone());\n        let f_alignment = f_aligner.custom(x, y);\n        assert_eq!(f_alignment.xend, f_alignment.xlen);\n        assert!(validate_alignment_score(&f_alignment, x, y, &scoring));\n        let band_all_alignment = b_aligner.custom_with_matches(x, y, &Vec::new());\n        assert_eq!(band_all_alignment.score, f_alignment.score);\n    }\n    {\n        let mut aligner = banded::Aligner::with_scoring(base_score.clone(), kmer_len, window_size);\n        let alignment = aligner.local(x, y);\n        assert!(alignment.score >= 0);\n        assert!(validate_alignment_score(&alignment, x, y, &base_score));\n        let alignment = aligner.semiglobal(x, y);\n        assert_eq!(alignment.xstart, 0);\n        assert_eq!(alignment.xend, alignment.xlen);\n        assert!(validate_alignment_score(&alignment, x, y, &base_score));\n        let alignment = aligner.global(x, y);\n        assert_eq!(alignment.xstart, 0);\n        assert_eq!(alignment.xend, alignment.xlen);\n        assert_eq!(alignment.ystart, 0);\n        assert_eq!(alignment.yend, alignment.ylen);\n        assert!(validate_alignment_score(&alignment, x, y, &base_score));\n    }\n    {\n        let mut aligner = pairwise::Aligner::with_scoring(base_score.clone());\n        let alignment = aligner.local(x, y);\n        assert!(alignment.score >= 0);\n        assert!(validate_alignment_score(&alignment, x, y, &base_score));\n        let alignment = aligner.semiglobal(x, y);\n        assert_eq!(alignment.xstart, 0);\n        assert_eq!(alignment.xend, alignment.xlen);\n        assert!(validate_alignment_score(&alignment, x, y, &base_score));\n        let alignment = aligner.global(x, y);\n        assert_eq!(alignment.xstart, 0);\n        assert_eq!(alignment.xend, alignment.xlen);\n        assert_eq!(alignment.ystart, 0);\n        assert_eq!(alignment.yend, alignment.ylen);\n        assert!(validate_alignment_score(&alignment, x, y, &base_score));\n    }\n}"}
{"test_id": "gfx-rs-naga/gfx-rs-naga-92e41b4/tests-gen/wgsl_parser.inputs.rs::test_92", "code": "pub fn parse(mut self) -> Result<crate::Module, Error> {\n        let mut module = {\n            if self.next()? != spirv::MAGIC_NUMBER {\n                return Err(Error::InvalidHeader);\n            }\n            let version_raw = self.next()?;\n            let generator = self.next()?;\n            let _bound = self.next()?;\n            let _schema = self.next()?;\n            log::info!(\"Generated by {} version {:x}\", generator, version_raw);\n            crate::Module::default()\n        };\n\n        self.layouter.clear();\n        self.dummy_functions = Arena::new();\n        self.lookup_function.clear();\n        self.function_call_graph.clear();\n\n        loop {\n            use spirv::Op;\n\n            let inst = match self.next_inst() {\n                Ok(inst) => inst,\n                Err(Error::IncompleteData) => break,\n                Err(other) => return Err(other),\n            };\n            log::debug!(\"\\t{:?} [{}]\", inst.op, inst.wc);\n\n            match inst.op {\n                Op::Capability => self.parse_capability(inst),\n                Op::Extension => self.parse_extension(inst),\n                Op::ExtInstImport => self.parse_ext_inst_import(inst),\n                Op::MemoryModel => self.parse_memory_model(inst),\n                Op::EntryPoint => self.parse_entry_point(inst),\n                Op::ExecutionMode => self.parse_execution_mode(inst),\n                Op::String => self.parse_string(inst),\n                Op::Source => self.parse_source(inst),\n                Op::SourceExtension => self.parse_source_extension(inst),\n                Op::Name => self.parse_name(inst),\n                Op::MemberName => self.parse_member_name(inst),\n                Op::ModuleProcessed => self.parse_module_processed(inst),\n                Op::Decorate => self.parse_decorate(inst),\n                Op::MemberDecorate => self.parse_member_decorate(inst),\n                Op::TypeVoid => self.parse_type_void(inst),\n                Op::TypeBool => self.parse_type_bool(inst, &mut module),\n                Op::TypeInt => self.parse_type_int(inst, &mut module),\n                Op::TypeFloat => self.parse_type_float(inst, &mut module),\n                Op::TypeVector => self.parse_type_vector(inst, &mut module),\n                Op::TypeMatrix => self.parse_type_matrix(inst, &mut module),\n                Op::TypeFunction => self.parse_type_function(inst),\n                Op::TypePointer => self.parse_type_pointer(inst, &mut module),\n                Op::TypeArray => self.parse_type_array(inst, &mut module),\n                Op::TypeRuntimeArray => self.parse_type_runtime_array(inst, &mut module),\n                Op::TypeStruct => self.parse_type_struct(inst, &mut module),\n                Op::TypeImage => self.parse_type_image(inst, &mut module),\n                Op::TypeSampledImage => self.parse_type_sampled_image(inst),\n                Op::TypeSampler => self.parse_type_sampler(inst, &mut module),\n                Op::Constant | Op::SpecConstant => self.parse_constant(inst, &mut module),\n                Op::ConstantComposite => self.parse_composite_constant(inst, &mut module),\n                Op::ConstantNull | Op::Undef => self.parse_null_constant(inst, &mut module),\n                Op::ConstantTrue => self.parse_bool_constant(inst, true, &mut module),\n                Op::ConstantFalse => self.parse_bool_constant(inst, false, &mut module),\n                Op::Variable => self.parse_global_variable(inst, &mut module),\n                Op::Function => {\n                    self.switch(ModuleState::Function, inst.op)?;\n                    inst.expect(5)?;\n                    self.parse_function(&mut module)\n                }\n                _ => Err(Error::UnsupportedInstruction(self.state, inst.op)), //TODO\n            }?;\n        }\n\n        log::info!(\"Patching...\");\n        {\n            let mut nodes = petgraph::algo::toposort(&self.function_call_graph, None)\n                .map_err(|cycle| Error::FunctionCallCycle(cycle.node_id()))?;\n            nodes.reverse(); // we need dominated first\n            let mut functions = mem::take(&mut module.functions);\n            for fun_id in nodes {\n                if fun_id > !(functions.len() as u32) {\n                    // skip all the fake IDs registered for the entry points\n                    continue;\n                }\n                let lookup = self.lookup_function.get_mut(&fun_id).unwrap();\n                // take out the function from the old array\n                let fun = mem::take(&mut functions[lookup.handle]);\n                // add it to the newly formed arena, and adjust the lookup\n                lookup.handle = module\n                    .functions\n                    .append(fun, functions.get_span(lookup.handle));\n            }\n        }\n        // patch all the functions\n        for (handle, fun) in module.functions.iter_mut() {\n            self.patch_function(Some(handle), fun)?;\n        }\n        for ep in module.entry_points.iter_mut() {\n            self.patch_function(None, &mut ep.function)?;\n        }\n\n        // Check all the images and samplers to have consistent comparison property.\n        for (handle, flags) in self.handle_sampling.drain() {\n            if !image::patch_comparison_type(\n                flags,\n                module.global_variables.get_mut(handle),\n                &mut module.types,\n            ) {\n                return Err(Error::InconsistentComparisonSampling(handle));\n            }\n        }\n\n        if !self.future_decor.is_empty() {\n            log::warn!(\"Unused item decorations: {:?}\", self.future_decor);\n            self.future_decor.clear();\n        }\n        if !self.future_member_decor.is_empty() {\n            log::warn!(\"Unused member decorations: {:?}\", self.future_member_decor);\n            self.future_member_decor.clear();\n        }\n\n        Ok(module)\n    }", "test": "fn test_92() {\n    let data = \"!\\u{1a}]\";\n    let _result = Frontend::new().parse(&data);\n}"}
{"test_id": "gimli-rs-gimli/gimli-rs-gimli-3947879/tests-gen/eh_frame.inputs.rs::test_81", "code": "pub fn next_row(&mut self) -> Result<Option<(&LineProgramHeader<R, Offset>, &LineRow)>> {\n        // Perform any reset that was required after copying the previous row.\n        self.row.reset(self.program.header());\n\n        loop {\n            // Split the borrow here, rather than calling `self.header()`.\n            match self.instructions.next_instruction(self.program.header()) {\n                Err(err) => return Err(err),\n                Ok(None) => return Ok(None),\n                Ok(Some(instruction)) => {\n                    if self.row.execute(instruction, &mut self.program) {\n                        if self.row.tombstone {\n                            // Perform any reset that was required for the tombstone row.\n                            // Normally this is done when `next_row` is called again, but for\n                            // tombstones we loop immediately.\n                            self.row.reset(self.program.header());\n                        } else {\n                            return Ok(Some((self.header(), &self.row)));\n                        }\n                    }\n                    // Fall through, parse the next instruction, and see if that\n                    // yields a row.\n                }\n            }\n        }\n    }", "test": "fn test_81() {\n    let eh_frame = [33];\n    let eh_frame = EhFrame::new(&eh_frame, LittleEndian);\n    let mut ctx = Box::new(UnwindContext::new());\n    let bases = BaseAddresses::default()\n        .set_eh_frame(0)\n        .set_eh_frame_hdr(0)\n        .set_text(0)\n        .set_got(0);\n    let mut entries = eh_frame.entries(&bases);\n    while let Ok(Some(entry)) = entries.next() {\n        match entry {\n            CieOrFde::Cie(_) => continue,\n            CieOrFde::Fde(partial) => {\n                if let Ok(fde) = partial.parse(EhFrame::cie_from_offset) {\n                    if let Ok(mut table) = fde.rows(&eh_frame, &bases, &mut ctx) {\n                        while let Ok(Some(_row)) = table.next_row() {\n                            continue;\n                        }\n                    }\n                }\n            }\n        };\n    }\n}"}
{"test_id": "uutils-coreutils/uutils-coreutils-73b7c46/tests-gen/fuzz_parse_size.inputs.rs::test_74", "code": "pub fn parse_size(size: &str) -> Result<u64, ParseSizeError> {\n    Parser::default().parse(size)\n}", "test": "fn test_74() {\n    let data = [10, 38, 105, 66];\n    if let Ok(s) = std::str::from_utf8(data) {\n        _ = parse_size(s);\n    }\n}"}
{"test_id": "dtolnay-syn/dtolnay-syn-b1a038c/tests-gen/create_token_buffer.inputs.rs::test_52", "code": "fn parse_str(self, s: &str) -> Result<Self::Output> {\n        self.parse2(proc_macro2::TokenStream::from_str(s)?)\n    }", "test": "fn test_52() {\n    let data = [0, 1, 192];\n    if data.len() < 300 {\n        if let Ok(string) = str::from_utf8(data) {\n            let _ = immediate_fail.parse_str(string);\n        }\n    }\n}"}
{"test_id": "uutils-coreutils/uutils-coreutils-73b7c46/tests-gen/fuzz_parse_size.inputs.rs::test_42", "code": "pub fn parse_size(size: &str) -> Result<u64, ParseSizeError> {\n    Parser::default().parse(size)\n}", "test": "fn test_42() {\n    let data = [10, 255, 10, 10];\n    if let Ok(s) = std::str::from_utf8(data) {\n        _ = parse_size(s);\n    }\n}"}
{"test_id": "gimli-rs-gimli/gimli-rs-gimli-3947879/tests-gen/debug_abbrev.inputs.rs::test_63", "code": "pub fn get<R: Reader>(\n        &self,\n        debug_abbrev: &DebugAbbrev<R>,\n        offset: DebugAbbrevOffset<R::Offset>,\n    ) -> Result<Arc<Abbreviations>> {\n        if offset.0 != R::Offset::from_u8(0) {\n            return debug_abbrev.abbreviations(offset).map(Arc::new);\n        }\n        self.abbreviations\n            .get(|| debug_abbrev.abbreviations(offset))\n    }", "test": "fn test_63() {\n    let debug_abbrev = [242];\n    let len = debug_abbrev.len();\n    let debug_abbrev = DebugAbbrev::new(&debug_abbrev, LittleEndian);\n    let offset = DebugAbbrevOffset(0);\n    if let Ok(abbreviations) = debug_abbrev.abbreviations(offset) {\n        for i in 1..len {\n            let _ = abbreviations.get(i as u64);\n        }\n    }\n}"}
{"test_id": "image-rs-image-gif/image-rs-image-gif-80fd8c0/tests-gen/decode.inputs.rs::test_60", "code": "fn try_decode (data : & [u8]) -> Result < () , gif :: DecodingError > { let mut reader = gif :: Decoder :: new (data) ? ; while let Some (_) = reader . read_next_frame () ? { } Ok (()) }", "test": "fn test_60() {\n    let data = [10];\n    let _ = try_decode(data);\n}"}
{"test_id": "gimli-rs-gimli/gimli-rs-gimli-3947879/tests-gen/debug_line.inputs.rs::test_47", "code": "pub fn next_row(&mut self) -> Result<Option<(&LineProgramHeader<R, Offset>, &LineRow)>> {\n        // Perform any reset that was required after copying the previous row.\n        self.row.reset(self.program.header());\n\n        loop {\n            // Split the borrow here, rather than calling `self.header()`.\n            match self.instructions.next_instruction(self.program.header()) {\n                Err(err) => return Err(err),\n                Ok(None) => return Ok(None),\n                Ok(Some(instruction)) => {\n                    if self.row.execute(instruction, &mut self.program) {\n                        if self.row.tombstone {\n                            // Perform any reset that was required for the tombstone row.\n                            // Normally this is done when `next_row` is called again, but for\n                            // tombstones we loop immediately.\n                            self.row.reset(self.program.header());\n                        } else {\n                            return Ok(Some((self.header(), &self.row)));\n                        }\n                    }\n                    // Fall through, parse the next instruction, and see if that\n                    // yields a row.\n                }\n            }\n        }\n    }", "test": "fn test_47() {\n    let debug_line = [178, 91, 178];\n    let debug_line = DebugLine::new(&debug_line, LittleEndian);\n    let offset = DebugLineOffset(0);\n    let address_size = 8;\n    if let Ok(program) = debug_line.program(offset, address_size, None, None) {\n        let mut rows = program.rows();\n        while let Ok(Some(row)) = rows.next_row() {\n            let _ = row;\n        }\n    }\n}"}
{"test_id": "rust-bakery-nom/rust-bakery-nom-869f897/tests-gen/fuzz_arithmetic.inputs.rs::test_5", "code": "fn factor(i: &str) -> IResult<&str, Expr> {\n  alt((\n    map(\n      map_res(delimited(multispace, digit, multispace), FromStr::from_str),\n      Expr::Value,\n    ),\n    parens,\n  ))(i)\n}", "test": "fn test_5() {\n  let data = [138, 10];\n  reset();\n  let temp = match str::from_utf8(data) {\n    Ok(v) => factor(v),\n    Err(e) => factor(\"2\"),\n  };\n}"}
{"test_id": "BurntSushi-memchr/BurntSushi-memchr-f3fde7a/tests-gen/memrmem.inputs.rs::test_29", "code": "pub fn count(&self, haystack: &[u8]) -> usize {\n        // SAFETY: All of our pointers are derived directly from a borrowed\n        // slice, which is guaranteed to be valid.\n        unsafe {\n            let start = haystack.as_ptr();\n            let end = start.add(haystack.len());\n            self.count_raw(start, end)\n        }\n    }", "test": "fn test_29() {\n    let data = [23, 96];\n    if data.len() < 2 {\n        return;\n    }\n    let split = std::cmp::max(data[0] as usize, 1) % data.len() as usize;\n    let (needle, haystack) = (&data[..split], &data[split..]);\n    memmem::rfind_iter(haystack, needle).count();\n}"}
{"test_id": "rustls-rustls/rustls-rustls-ae583bd/tests-gen/server.inputs.rs::test_21", "code": "pub fn process_new_packets(&mut self) -> Result<IoState, Error> {\n        match self {\n            Self::Client(conn) => conn.process_new_packets(),\n            Self::Server(conn) => conn.process_new_packets(),\n        }\n    }", "test": "fn test_21() {\n    let data = [\n        22, 3, 1, 0, 191, 1, 0, 0, 187, 11, 3, 116, 201, 219, 206, 244, 81, 172, 68, 161, 77, 114,\n        224, 59, 98, 153, 198, 0, 56, 96, 244, 241, 2, 236, 14, 79, 17, 174, 249, 51, 180, 155, 27,\n        0, 0, 20, 19, 3, 19, 2, 19, 1, 204, 169, 204, 168, 192, 44, 192, 43, 192, 48, 192, 47, 0,\n        255, 1, 0, 0, 126, 0, 43, 0, 5, 4, 127, 18, 3, 3, 0, 0, 0, 15, 0, 13, 0, 16, 10, 103, 111,\n        111, 103, 108, 101, 46, 99, 111, 109, 0, 11, 0, 2, 1, 0, 0, 10, 0, 8, 0, 6, 0, 29, 0, 24,\n        0, 23, 0, 13, 0, 20, 0, 18, 5, 3, 4, 3, 8, 6, 8, 5, 8, 4, 6, 1, 5, 1, 4, 1, 2, 1, 0, 23, 0,\n        0, 0, 40, 0, 38, 0, 36, 0, 29, 0, 32, 54, 50, 250, 159, 54, 152, 227, 159, 53, 55, 94, 176,\n        131, 156, 2, 150, 252, 203, 146, 242, 91, 198, 7, 168, 50, 15, 199, 10, 239, 16, 176, 28,\n        0, 45, 0, 246, 1, 1, 0, 35, 0, 197, 101, 209, 80, 21, 197, 16, 192, 38, 207, 23, 3, 238,\n        64, 160, 89, 49, 176, 161, 116, 71, 184, 117, 131, 29, 119, 30, 254, 193, 66, 215, 34, 226,\n        85, 150, 137, 157, 149, 108, 207, 252, 23, 86, 20, 3, 3, 0, 1, 1, 22, 3, 3, 0, 32, 95, 94,\n        179, 244, 73, 139, 102, 175, 65, 93, 186, 57, 105, 115, 213, 76, 207, 171, 68, 112, 247,\n        61, 197, 101, 209, 80, 21, 197, 16, 192, 38, 207, 23, 3, 3, 0, 97, 120, 117, 231, 50, 21,\n        63, 29, 51, 245, 52, 162, 204, 116, 31, 170, 96, 116, 142, 202, 95, 61, 225, 162, 123, 121,\n        16, 255, 65, 75, 58, 240, 144, 126, 84, 211, 122, 180, 80, 33, 217, 230, 174, 165, 86, 84,\n        15, 81, 33, 185, 130, 213, 253, 25, 71, 114, 234, 252, 121, 45, 228, 152, 129, 143, 46,\n        242, 77, 51, 217, 52, 140, 254, 35, 190, 4, 221, 201, 108, 193, 173, 125, 212, 238, 242,\n        253, 229, 253, 109, 45, 138, 27, 227, 19, 14, 157, 167, 133, 69,\n    ];\n    let config = Arc::new(\n        ServerConfig::builder()\n            .with_safe_defaults()\n            .with_no_client_auth()\n            .with_cert_resolver(Arc::new(Fail)),\n    );\n    let mut server = ServerConnection::new(config).unwrap();\n    let _ = server.read_tls(&mut io::Cursor::new(data));\n    let _ = server.process_new_packets();\n}"}
{"test_id": "image-rs-image/image-rs-image-e5580ec/tests-gen/fuzzer_script_exr.inputs.rs::test_84", "code": "fn roundtrip (bytes : & [u8]) -> ImageResult < () > { # [doc = \" Read the file from the specified path into an `Rgba32FImage`.\"] fn read_as_rgba_byte_image (read : impl Read + Seek) -> ImageResult < (u32 , u32 , Vec < u8 >) > { let mut decoder = OpenExrDecoder :: with_alpha_preference (read , Some (true)) ? ; match usize :: try_from (decoder . total_bytes ()) { Ok (decoded_size) if decoded_size <= 256 * 1024 * 1024 => { decoder . set_limits (Limits :: default ()) ? ; let (width , height) = decoder . dimensions () ; let mut buffer = vec ! [0 ; decoded_size] ; decoder . read_image (buffer . as_mut_slice ()) ? ; Ok ((width , height , buffer)) } _ => Err (image :: ImageError :: Limits (image :: error :: LimitError :: from_kind (image :: error :: LimitErrorKind :: InsufficientMemory ,) ,)) , } } # [doc = \" Write an `Rgba32FImage`.\"] # [doc = \" Assumes the writer is buffered. In most cases,\"] # [doc = \" you should wrap your writer in a `BufWriter` for best performance.\"] fn write_rgba_image (write : impl Write + Seek , (width , height , data) : & (u32 , u32 , Vec < u8 >) ,) -> ImageResult < () > { OpenExrEncoder :: new (write) . write_image (data . as_slice () , * width , * height , ColorType :: Rgba32F) } let decoded_image = read_as_rgba_byte_image (Cursor :: new (bytes)) ? ; let mut bytes = Vec :: with_capacity (bytes . len () + 20) ; write_rgba_image (Cursor :: new (& mut bytes) , & decoded_image) ? ; let redecoded_image = read_as_rgba_byte_image (Cursor :: new (bytes)) ? ; assert_eq ! (decoded_image , redecoded_image , \"image was valid but was not reproducible\") ; Ok (()) }", "test": "fn test_84() {\n    let data = [45, 63];\n    let _img = roundtrip(data);\n}"}
{"test_id": "cloud-hypervisor-cloud-hypervisor/cloud-hypervisor-cloud-hypervisor-db3a5f3/tests-gen/iommu.inputs.rs::test_16", "code": "pub fn wait_for_epoll_threads(&mut self) {\n        self.common.wait_for_epoll_threads();\n    }", "test": "fn test_16() {\n    let bytes = [10, 10];\n    if bytes.len() < (QUEUE_DATA_SIZE + QUEUE_BYTES_SIZE)\n        || bytes.len() > (QUEUE_DATA_SIZE + QUEUE_BYTES_SIZE + MEM_SIZE)\n    {\n        return;\n    }\n    let (mut iommu, _) = virtio_devices::Iommu::new(\n        \"fuzzer_iommu\".to_owned(),\n        SeccompAction::Allow,\n        EventFd::new(EFD_NONBLOCK).unwrap(),\n        ((MEM_SIZE - IOVA_SPACE_SIZE) as u64, (MEM_SIZE - 1) as u64),\n        None,\n    )\n    .unwrap();\n    let queue_data = &bytes[..QUEUE_DATA_SIZE];\n    let queue_bytes = &bytes[QUEUE_DATA_SIZE..QUEUE_DATA_SIZE + QUEUE_BYTES_SIZE];\n    let mem_bytes = &bytes[QUEUE_DATA_SIZE + QUEUE_BYTES_SIZE..];\n    let request_queue = setup_virt_queue(queue_data.try_into().unwrap());\n    let _event_queue = setup_virt_queue(queue_data.try_into().unwrap());\n    let mem = GuestMemoryMmap::from_ranges(&[\n        (GuestAddress(0), MEM_SIZE),\n        (GuestAddress(DESC_TABLE_ADDR), QUEUE_BYTES_SIZE),\n    ])\n    .unwrap();\n    if mem\n        .write_slice(queue_bytes, GuestAddress(DESC_TABLE_ADDR))\n        .is_err()\n    {\n        return;\n    }\n    if mem.write_slice(mem_bytes, GuestAddress(0 as u64)).is_err() {\n        return;\n    }\n    let guest_memory = GuestMemoryAtomic::new(mem);\n    let request_evt = EventFd::new(0).unwrap();\n    let request_queue_evt = unsafe { EventFd::from_raw_fd(libc::dup(request_evt.as_raw_fd())) };\n    let _event_evt = EventFd::new(0).unwrap();\n    request_queue_evt.write(1).unwrap();\n    iommu\n        .activate(\n            guest_memory,\n            Arc::new(NoopVirtioInterrupt {}),\n            vec![\n                (0, request_queue, request_evt),\n                (0, _event_queue, _event_evt),\n            ],\n        )\n        .ok();\n    iommu.wait_for_epoll_threads();\n}"}
{"test_id": "image-rs-image-png/image-rs-image-png-e113d76/tests-gen/decode.inputs.rs::test_3", "code": "fn png_decode (data : & [u8]) -> Result < (Option < png :: OutputInfo > , Vec < u8 >) , () > { let limits = png :: Limits { bytes : 1 << 16 } ; let decoder = png :: Decoder :: new_with_limits (data , limits) ; let mut reader = decoder . read_info () . map_err (| _ | ()) ? ; if reader . info () . raw_bytes () > 5_000_000 { return Err (()) ; } let mut img_data = vec ! [0u8 ; reader . info () . raw_bytes ()] ; let mut last_info = None ; while let Ok (info) = reader . next_frame (& mut img_data) { last_info = Some (info) ; } Ok ((last_info , img_data)) }", "test": "fn test_3() {\n    let data = [107, 46, 73];\n    let _ = png_decode(&data);\n}"}
{"test_id": "bodil-im-rs/bodil-im-rs-2afaf54/tests-gen/hashset.inputs.rs::test_12", "code": "pub fn remove<BA>(&mut self, a: &BA) -> Option<A>\n    where\n        BA: Hash + Eq + ?Sized,\n        A: Borrow<BA>,\n    {\n        let root = PoolRef::make_mut(&self.pool.0, &mut self.root);\n        let result = root.remove(&self.pool.0, hash_key(&*self.hasher, a), 0, a);\n        if result.is_some() {\n            self.size -= 1;\n        }\n        result.map(|v| v.0)\n    }", "test": "fn test_12() {\n    let actions = [Remove(11068130656266)];\n    let mut set = HashSet::new();\n    let mut nat = NatSet::new();\n    for action in actions {\n        match action {\n            Action::Insert(value) => {\n                let len = nat.len() + if nat.contains(&value) { 0 } else { 1 };\n                nat.insert(value);\n                set.insert(value);\n                assert_eq!(len, set.len());\n            }\n            Action::Remove(value) => {\n                let len = nat.len() - if nat.contains(&value) { 1 } else { 0 };\n                nat.remove(&value);\n                set.remove(&value);\n                assert_eq!(len, set.len());\n            }\n        }\n        assert_eq!(nat.len(), set.len());\n        assert_eq!(HashSet::from(nat.clone()), set);\n    }\n}"}
{"test_id": "XAMPPRocky-tokei/XAMPPRocky-tokei-92ddc2e/tests-gen/parse_from_slice_panic.inputs.rs::test_9", "code": "pub fn parse_from_slice (input : FuzzInput , check_total : bool) { let config = & Config { treat_doc_strings_as_comments : Some (input . treat_doc_strings_as_comments) , columns : None , hidden : None , no_ignore : None , no_ignore_parent : None , no_ignore_dot : None , no_ignore_vcs : None , sort : None , types : None , for_each_fn : None , } ; let stats = input . lang . parse_from_slice (input . data , config) ; if check_total { if let Ok (s) = str :: from_utf8 (input . data) { assert ! (stats . lines () <= s . lines () . count () , \"{} got more total lines ({}) than str::lines ({}). Code: {}, Comments: {}, Blanks: {}. treat_doc_strings_as_comments: {}. File contents (as UTF-8):\\n{}\" , input . lang . name () , stats . lines () , s . lines () . count () , stats . code , stats . comments , input . treat_doc_strings_as_comments , stats . blanks , s) } ; } }", "test": "fn test_9() {\n    let data = FuzzInput {\n        lang: ABNF,\n        treat_doc_strings_as_comments: false,\n        data: [0, 0, 0, 0, 13, 255, 212, 251, 88],\n    };\n    parse_from_slice(data, false);\n}"}
{"test_id": "BurntSushi-memchr/BurntSushi-memchr-f3fde7a/tests-gen/memmem.inputs.rs::test_14", "code": "pub fn count(&self, haystack: &[u8]) -> usize {\n        // SAFETY: All of our pointers are derived directly from a borrowed\n        // slice, which is guaranteed to be valid.\n        unsafe {\n            let start = haystack.as_ptr();\n            let end = start.add(haystack.len());\n            self.count_raw(start, end)\n        }\n    }", "test": "fn test_14() {\n    let data = [10, 91];\n    if data.len() < 2 {\n        return;\n    }\n    let split = std::cmp::max(data[0] as usize, 1) % data.len() as usize;\n    let (needle, haystack) = (&data[..split], &data[split..]);\n    memmem::find_iter(haystack, needle).count();\n}"}
{"test_id": "BurntSushi-memchr/BurntSushi-memchr-f3fde7a/tests-gen/memchr3.inputs.rs::test_48", "code": "fn count(self) -> usize {\n        self.it.count(|s, e| {\n            // SAFETY: We rely on our generic iterator to return valid start\n            // and end pointers.\n            unsafe { count_raw(self.needle1, s, e) }\n        })\n    }", "test": "fn test_48() {\n    let data = [10, 10, 255, 47];\n    if data.len() < 3 {\n        return;\n    }\n    memchr3_iter(data[0], data[1], data[2], &data[3..]).count();\n}"}
{"test_id": "cloud-hypervisor-cloud-hypervisor/cloud-hypervisor-cloud-hypervisor-db3a5f3/tests-gen/rng.inputs.rs::test_91", "code": "pub fn wait_for_epoll_threads(&mut self) {\n        self.common.wait_for_epoll_threads();\n    }", "test": "fn test_91() {\n    let bytes = [5, 69, 59, 208];\n    if bytes.len() < (QUEUE_DATA_SIZE + QUEUE_BYTES_SIZE)\n        || bytes.len() > (QUEUE_DATA_SIZE + QUEUE_BYTES_SIZE + MEM_SIZE)\n    {\n        return;\n    }\n    let mut rng = virtio_devices::Rng::new(\n        \"fuzzer_rng\".to_owned(),\n        \"/dev/urandom\",\n        false,\n        SeccompAction::Allow,\n        EventFd::new(EFD_NONBLOCK).unwrap(),\n        None,\n    )\n    .unwrap();\n    let queue_data = &bytes[..QUEUE_DATA_SIZE];\n    let queue_bytes = &bytes[QUEUE_DATA_SIZE..QUEUE_DATA_SIZE + QUEUE_BYTES_SIZE];\n    let mem_bytes = &bytes[QUEUE_DATA_SIZE + QUEUE_BYTES_SIZE..];\n    let q = setup_virt_queue(queue_data.try_into().unwrap());\n    let mem = GuestMemoryMmap::from_ranges(&[\n        (GuestAddress(0), MEM_SIZE),\n        (GuestAddress(DESC_TABLE_ADDR), QUEUE_BYTES_SIZE),\n    ])\n    .unwrap();\n    if mem\n        .write_slice(queue_bytes, GuestAddress(DESC_TABLE_ADDR))\n        .is_err()\n    {\n        return;\n    }\n    if mem.write_slice(mem_bytes, GuestAddress(0 as u64)).is_err() {\n        return;\n    }\n    let guest_memory = GuestMemoryAtomic::new(mem);\n    let evt = EventFd::new(0).unwrap();\n    let queue_evt = unsafe { EventFd::from_raw_fd(libc::dup(evt.as_raw_fd())) };\n    queue_evt.write(1).unwrap();\n    rng.activate(\n        guest_memory,\n        Arc::new(NoopVirtioInterrupt {}),\n        vec![(0, q, evt)],\n    )\n    .ok();\n    rng.wait_for_epoll_threads();\n}"}
{"test_id": "gfx-rs-naga/gfx-rs-naga-92e41b4/tests-gen/wgsl_parser.inputs.rs::test_42", "code": "pub fn parse(mut self) -> Result<crate::Module, Error> {\n        let mut module = {\n            if self.next()? != spirv::MAGIC_NUMBER {\n                return Err(Error::InvalidHeader);\n            }\n            let version_raw = self.next()?;\n            let generator = self.next()?;\n            let _bound = self.next()?;\n            let _schema = self.next()?;\n            log::info!(\"Generated by {} version {:x}\", generator, version_raw);\n            crate::Module::default()\n        };\n\n        self.layouter.clear();\n        self.dummy_functions = Arena::new();\n        self.lookup_function.clear();\n        self.function_call_graph.clear();\n\n        loop {\n            use spirv::Op;\n\n            let inst = match self.next_inst() {\n                Ok(inst) => inst,\n                Err(Error::IncompleteData) => break,\n                Err(other) => return Err(other),\n            };\n            log::debug!(\"\\t{:?} [{}]\", inst.op, inst.wc);\n\n            match inst.op {\n                Op::Capability => self.parse_capability(inst),\n                Op::Extension => self.parse_extension(inst),\n                Op::ExtInstImport => self.parse_ext_inst_import(inst),\n                Op::MemoryModel => self.parse_memory_model(inst),\n                Op::EntryPoint => self.parse_entry_point(inst),\n                Op::ExecutionMode => self.parse_execution_mode(inst),\n                Op::String => self.parse_string(inst),\n                Op::Source => self.parse_source(inst),\n                Op::SourceExtension => self.parse_source_extension(inst),\n                Op::Name => self.parse_name(inst),\n                Op::MemberName => self.parse_member_name(inst),\n                Op::ModuleProcessed => self.parse_module_processed(inst),\n                Op::Decorate => self.parse_decorate(inst),\n                Op::MemberDecorate => self.parse_member_decorate(inst),\n                Op::TypeVoid => self.parse_type_void(inst),\n                Op::TypeBool => self.parse_type_bool(inst, &mut module),\n                Op::TypeInt => self.parse_type_int(inst, &mut module),\n                Op::TypeFloat => self.parse_type_float(inst, &mut module),\n                Op::TypeVector => self.parse_type_vector(inst, &mut module),\n                Op::TypeMatrix => self.parse_type_matrix(inst, &mut module),\n                Op::TypeFunction => self.parse_type_function(inst),\n                Op::TypePointer => self.parse_type_pointer(inst, &mut module),\n                Op::TypeArray => self.parse_type_array(inst, &mut module),\n                Op::TypeRuntimeArray => self.parse_type_runtime_array(inst, &mut module),\n                Op::TypeStruct => self.parse_type_struct(inst, &mut module),\n                Op::TypeImage => self.parse_type_image(inst, &mut module),\n                Op::TypeSampledImage => self.parse_type_sampled_image(inst),\n                Op::TypeSampler => self.parse_type_sampler(inst, &mut module),\n                Op::Constant | Op::SpecConstant => self.parse_constant(inst, &mut module),\n                Op::ConstantComposite => self.parse_composite_constant(inst, &mut module),\n                Op::ConstantNull | Op::Undef => self.parse_null_constant(inst, &mut module),\n                Op::ConstantTrue => self.parse_bool_constant(inst, true, &mut module),\n                Op::ConstantFalse => self.parse_bool_constant(inst, false, &mut module),\n                Op::Variable => self.parse_global_variable(inst, &mut module),\n                Op::Function => {\n                    self.switch(ModuleState::Function, inst.op)?;\n                    inst.expect(5)?;\n                    self.parse_function(&mut module)\n                }\n                _ => Err(Error::UnsupportedInstruction(self.state, inst.op)), //TODO\n            }?;\n        }\n\n        log::info!(\"Patching...\");\n        {\n            let mut nodes = petgraph::algo::toposort(&self.function_call_graph, None)\n                .map_err(|cycle| Error::FunctionCallCycle(cycle.node_id()))?;\n            nodes.reverse(); // we need dominated first\n            let mut functions = mem::take(&mut module.functions);\n            for fun_id in nodes {\n                if fun_id > !(functions.len() as u32) {\n                    // skip all the fake IDs registered for the entry points\n                    continue;\n                }\n                let lookup = self.lookup_function.get_mut(&fun_id).unwrap();\n                // take out the function from the old array\n                let fun = mem::take(&mut functions[lookup.handle]);\n                // add it to the newly formed arena, and adjust the lookup\n                lookup.handle = module\n                    .functions\n                    .append(fun, functions.get_span(lookup.handle));\n            }\n        }\n        // patch all the functions\n        for (handle, fun) in module.functions.iter_mut() {\n            self.patch_function(Some(handle), fun)?;\n        }\n        for ep in module.entry_points.iter_mut() {\n            self.patch_function(None, &mut ep.function)?;\n        }\n\n        // Check all the images and samplers to have consistent comparison property.\n        for (handle, flags) in self.handle_sampling.drain() {\n            if !image::patch_comparison_type(\n                flags,\n                module.global_variables.get_mut(handle),\n                &mut module.types,\n            ) {\n                return Err(Error::InconsistentComparisonSampling(handle));\n            }\n        }\n\n        if !self.future_decor.is_empty() {\n            log::warn!(\"Unused item decorations: {:?}\", self.future_decor);\n            self.future_decor.clear();\n        }\n        if !self.future_member_decor.is_empty() {\n            log::warn!(\"Unused member decorations: {:?}\", self.future_member_decor);\n            self.future_member_decor.clear();\n        }\n\n        Ok(module)\n    }", "test": "fn test_42() {\n    let data = \"\\0\";\n    let _result = Frontend::new().parse(&data);\n}"}
{"test_id": "cloud-hypervisor-cloud-hypervisor/cloud-hypervisor-cloud-hypervisor-db3a5f3/tests-gen/iommu.inputs.rs::test_34", "code": "pub fn wait_for_epoll_threads(&mut self) {\n        self.common.wait_for_epoll_threads();\n    }", "test": "fn test_34() {\n    let bytes = [52];\n    if bytes.len() < (QUEUE_DATA_SIZE + QUEUE_BYTES_SIZE)\n        || bytes.len() > (QUEUE_DATA_SIZE + QUEUE_BYTES_SIZE + MEM_SIZE)\n    {\n        return;\n    }\n    let (mut iommu, _) = virtio_devices::Iommu::new(\n        \"fuzzer_iommu\".to_owned(),\n        SeccompAction::Allow,\n        EventFd::new(EFD_NONBLOCK).unwrap(),\n        ((MEM_SIZE - IOVA_SPACE_SIZE) as u64, (MEM_SIZE - 1) as u64),\n        None,\n    )\n    .unwrap();\n    let queue_data = &bytes[..QUEUE_DATA_SIZE];\n    let queue_bytes = &bytes[QUEUE_DATA_SIZE..QUEUE_DATA_SIZE + QUEUE_BYTES_SIZE];\n    let mem_bytes = &bytes[QUEUE_DATA_SIZE + QUEUE_BYTES_SIZE..];\n    let request_queue = setup_virt_queue(queue_data.try_into().unwrap());\n    let _event_queue = setup_virt_queue(queue_data.try_into().unwrap());\n    let mem = GuestMemoryMmap::from_ranges(&[\n        (GuestAddress(0), MEM_SIZE),\n        (GuestAddress(DESC_TABLE_ADDR), QUEUE_BYTES_SIZE),\n    ])\n    .unwrap();\n    if mem\n        .write_slice(queue_bytes, GuestAddress(DESC_TABLE_ADDR))\n        .is_err()\n    {\n        return;\n    }\n    if mem.write_slice(mem_bytes, GuestAddress(0 as u64)).is_err() {\n        return;\n    }\n    let guest_memory = GuestMemoryAtomic::new(mem);\n    let request_evt = EventFd::new(0).unwrap();\n    let request_queue_evt = unsafe { EventFd::from_raw_fd(libc::dup(request_evt.as_raw_fd())) };\n    let _event_evt = EventFd::new(0).unwrap();\n    request_queue_evt.write(1).unwrap();\n    iommu\n        .activate(\n            guest_memory,\n            Arc::new(NoopVirtioInterrupt {}),\n            vec![\n                (0, request_queue, request_evt),\n                (0, _event_queue, _event_evt),\n            ],\n        )\n        .ok();\n    iommu.wait_for_epoll_threads();\n}"}
{"test_id": "cloud-hypervisor-cloud-hypervisor/cloud-hypervisor-cloud-hypervisor-db3a5f3/tests-gen/balloon.inputs.rs::test_36", "code": "pub fn wait_for_epoll_threads(&mut self) {\n        self.common.wait_for_epoll_threads();\n    }", "test": "fn test_36() {\n    let bytes = [8, 157, 8, 8];\n    if bytes.len() < QUEUE_DATA_SIZE * QUEUE_NUM\n        || bytes.len() > (QUEUE_DATA_SIZE * QUEUE_NUM + MEM_SIZE)\n    {\n        return;\n    }\n    let mut balloon = virtio_devices::Balloon::new(\n        \"fuzzer_balloon\".to_owned(),\n        BALLOON_SIZE,\n        true,\n        true,\n        SeccompAction::Allow,\n        EventFd::new(EFD_NONBLOCK).unwrap(),\n        None,\n    )\n    .unwrap();\n    let queue_data = &bytes[..QUEUE_DATA_SIZE * QUEUE_NUM];\n    let mem_bytes = &bytes[QUEUE_DATA_SIZE * QUEUE_NUM..];\n    let mem = GuestMemoryMmap::from_ranges(&[(GuestAddress(0), MEM_SIZE)]).unwrap();\n    if mem.write_slice(mem_bytes, GuestAddress(0 as u64)).is_err() {\n        return;\n    }\n    let guest_memory = GuestMemoryAtomic::new(mem);\n    let mut queues = setup_virt_queues(\n        &[\n            &queue_data[..QUEUE_DATA_SIZE].try_into().unwrap(),\n            &queue_data[QUEUE_DATA_SIZE..QUEUE_DATA_SIZE * 2]\n                .try_into()\n                .unwrap(),\n            &queue_data[QUEUE_DATA_SIZE * 2..QUEUE_DATA_SIZE * 3]\n                .try_into()\n                .unwrap(),\n        ],\n        0,\n    );\n    let inflate_q = queues.remove(0);\n    let inflate_evt = EventFd::new(0).unwrap();\n    let inflate_queue_evt = unsafe { EventFd::from_raw_fd(libc::dup(inflate_evt.as_raw_fd())) };\n    let deflate_q = queues.remove(0);\n    let deflate_evt = EventFd::new(0).unwrap();\n    let deflate_queue_evt = unsafe { EventFd::from_raw_fd(libc::dup(deflate_evt.as_raw_fd())) };\n    let reporting_q = queues.remove(0);\n    let reporting_evt = EventFd::new(0).unwrap();\n    let reporting_queue_evt = unsafe { EventFd::from_raw_fd(libc::dup(reporting_evt.as_raw_fd())) };\n    inflate_queue_evt.write(1).unwrap();\n    deflate_queue_evt.write(1).unwrap();\n    reporting_queue_evt.write(1).unwrap();\n    balloon\n        .activate(\n            guest_memory,\n            Arc::new(NoopVirtioInterrupt {}),\n            vec![\n                (0, inflate_q, inflate_evt),\n                (1, deflate_q, deflate_evt),\n                (2, reporting_q, reporting_evt),\n            ],\n        )\n        .ok();\n    balloon.wait_for_epoll_threads();\n}"}
{"test_id": "cloud-hypervisor-cloud-hypervisor/cloud-hypervisor-cloud-hypervisor-db3a5f3/tests-gen/rng.inputs.rs::test_28", "code": "pub fn wait_for_epoll_threads(&mut self) {\n        self.common.wait_for_epoll_threads();\n    }", "test": "fn test_28() {\n    let bytes = [126, 5, 10, 10];\n    if bytes.len() < (QUEUE_DATA_SIZE + QUEUE_BYTES_SIZE)\n        || bytes.len() > (QUEUE_DATA_SIZE + QUEUE_BYTES_SIZE + MEM_SIZE)\n    {\n        return;\n    }\n    let mut rng = virtio_devices::Rng::new(\n        \"fuzzer_rng\".to_owned(),\n        \"/dev/urandom\",\n        false,\n        SeccompAction::Allow,\n        EventFd::new(EFD_NONBLOCK).unwrap(),\n        None,\n    )\n    .unwrap();\n    let queue_data = &bytes[..QUEUE_DATA_SIZE];\n    let queue_bytes = &bytes[QUEUE_DATA_SIZE..QUEUE_DATA_SIZE + QUEUE_BYTES_SIZE];\n    let mem_bytes = &bytes[QUEUE_DATA_SIZE + QUEUE_BYTES_SIZE..];\n    let q = setup_virt_queue(queue_data.try_into().unwrap());\n    let mem = GuestMemoryMmap::from_ranges(&[\n        (GuestAddress(0), MEM_SIZE),\n        (GuestAddress(DESC_TABLE_ADDR), QUEUE_BYTES_SIZE),\n    ])\n    .unwrap();\n    if mem\n        .write_slice(queue_bytes, GuestAddress(DESC_TABLE_ADDR))\n        .is_err()\n    {\n        return;\n    }\n    if mem.write_slice(mem_bytes, GuestAddress(0 as u64)).is_err() {\n        return;\n    }\n    let guest_memory = GuestMemoryAtomic::new(mem);\n    let evt = EventFd::new(0).unwrap();\n    let queue_evt = unsafe { EventFd::from_raw_fd(libc::dup(evt.as_raw_fd())) };\n    queue_evt.write(1).unwrap();\n    rng.activate(\n        guest_memory,\n        Arc::new(NoopVirtioInterrupt {}),\n        vec![(0, q, evt)],\n    )\n    .ok();\n    rng.wait_for_epoll_threads();\n}"}
{"test_id": "rust-bio-rust-bio/rust-bio-rust-bio-319a0d8/tests-gen/myers_matching.inputs.rs::test_1", "code": "fn validate_alignment (aln : & Alignment , x : & [u8] , y : & [u8]) { let y = & y [aln . ystart .. aln . yend] ; let mut ix = 0 ; let mut iy = 0 ; let mut calc_dist = 0 ; for op in & aln . operations { match * op { Match => { assert ! (x [ix] == y [iy] , \"Match operation, but characters are not equal\") ; ix += 1 ; iy += 1 ; } Subst => { assert ! (x [ix] != y [iy] , \"Subst operation, but characters are equal\") ; calc_dist += 1 ; ix += 1 ; iy += 1 ; } Del => { calc_dist += 1 ; iy += 1 ; } Ins => { calc_dist += 1 ; ix += 1 ; } _ => unreachable ! () } } assert_eq ! (calc_dist , aln . score as usize) ; }", "test": "fn test_1() {\n    let data = [145, 10];\n    if data.len() < 3 {\n        return;\n    }\n    let (max_dist, data) = data.split_first().unwrap();\n    let (pattern_len, data) = data.split_first().unwrap();\n    let max_dist = min(64, *max_dist);\n    let pattern_len = max(1, min(64, min(data.len(), *pattern_len as usize)));\n    if data.iter().any(|&b| b < 65 || b > 122 || b > 90 && b < 97) {\n        return;\n    }\n    let (pattern, text) = data.split_at(pattern_len);\n    let max_dist = max_dist as u8;\n    let _ = MyersBuilder::new().build_64(pattern);\n    let _ = MyersBuilder::new().build_long_64(pattern);\n    let mut myers = Myers::<u64>::new(pattern);\n    let mut myers_long = long::Myers::<u8>::new(pattern);\n    let end_dist: Vec<_> = myers.find_all_end(text, max_dist).collect();\n    let end_dist_long: Vec<_> = myers_long\n        .find_all_end(text, max_dist as usize)\n        .map(|(end, dist)| (end, dist as u8))\n        .collect();\n    assert_eq!(end_dist, end_dist_long);\n    let mut aln = Alignment::default();\n    let mut aln_long = Alignment::default();\n    {\n        let mut matches = myers.find_all(text, max_dist);\n        let mut matches_long = myers_long.find_all(text, max_dist as usize);\n        matches.alignment(&mut aln);\n        matches_long.alignment(&mut aln_long);\n        let mut end_dist_iter = end_dist.iter();\n        while matches.next_alignment(&mut aln) {\n            assert!(matches_long.next_alignment(&mut aln_long));\n            assert_eq!(aln, aln_long);\n            validate_alignment(&aln, pattern, text);\n            assert!(aln.score as u8 <= max_dist);\n            let (end, dist) = end_dist_iter.next().unwrap();\n            assert_eq!(*end + 1, aln.yend);\n            assert_eq!(*dist, aln.score as u8);\n        }\n        assert!(end_dist_iter.next().is_none());\n        assert!(!matches_long.next_alignment(&mut aln_long));\n    }\n    {\n        let mut matches = myers.find_all_lazy(text, max_dist);\n        let mut matches_long = myers_long.find_all_lazy(text, max_dist as usize);\n        let mut end_dist_iter = end_dist.iter();\n        while let Some((end, dist)) = matches.next() {\n            let (end_long, dist_long) = matches_long.next().unwrap();\n            assert_eq!((end, dist), (end_long, dist_long as u8));\n            assert!(matches.alignment_at(end, &mut aln));\n            assert!(matches_long.alignment_at(end, &mut aln_long));\n            assert_eq!(aln, aln_long);\n            validate_alignment(&aln, pattern, text);\n            assert_eq!(dist, aln.score as u8);\n            assert!(aln.score as u8 <= max_dist);\n            let (end, dist) = end_dist_iter.next().unwrap();\n            assert_eq!(*end + 1, aln.yend);\n            assert_eq!(*dist, aln.score as u8);\n            assert!(!matches.alignment_at(end + 1, &mut aln));\n        }\n        assert!(end_dist_iter.next().is_none());\n    }\n    let mut matches = myers.find_all_lazy(text, u8::max_value());\n    let mut matches_long = myers_long.find_all_lazy(text, u8::max_value() as usize);\n    let mut i = 0;\n    while let Some((end, dist)) = matches.next() {\n        assert_eq!(end, i);\n        let (end_long, dist_long) = matches_long.next().unwrap();\n        assert_eq!((end, dist), (end_long, dist_long as u8));\n        assert!(matches.alignment_at(end, &mut aln));\n        assert!(matches_long.alignment_at(end, &mut aln_long));\n        assert_eq!(aln, aln_long);\n        validate_alignment(&aln, pattern, text);\n        assert_eq!(dist, aln.score as u8);\n        assert!(aln.score as u8 <= u8::max_value());\n        assert!(!matches.alignment_at(end + 1, &mut aln));\n        assert!(!matches_long.alignment_at(end + 1, &mut aln_long));\n        i += 1;\n    }\n}"}
{"test_id": "image-rs-image-png/image-rs-image-png-e113d76/tests-gen/buf_independent.inputs.rs::test_90", "code": "fn new (inner : R , cap : usize) -> Self { SmalBuf { inner , cap } }", "test": "fn test_90() {\n    let data = [1, 0, 0, 0];\n    let limits = png::Limits { bytes: 1 << 16 };\n    let reference = png::Decoder::new_with_limits(data, limits);\n    let smal = png::Decoder::new_with_limits(SmalBuf::new(data, 1), limits);\n    let _ = png_compare(reference, smal);\n}"}
{"test_id": "gimli-rs-gimli/gimli-rs-gimli-3947879/tests-gen/eh_frame.inputs.rs::test_17", "code": "pub fn next_row(&mut self) -> Result<Option<(&LineProgramHeader<R, Offset>, &LineRow)>> {\n        // Perform any reset that was required after copying the previous row.\n        self.row.reset(self.program.header());\n\n        loop {\n            // Split the borrow here, rather than calling `self.header()`.\n            match self.instructions.next_instruction(self.program.header()) {\n                Err(err) => return Err(err),\n                Ok(None) => return Ok(None),\n                Ok(Some(instruction)) => {\n                    if self.row.execute(instruction, &mut self.program) {\n                        if self.row.tombstone {\n                            // Perform any reset that was required for the tombstone row.\n                            // Normally this is done when `next_row` is called again, but for\n                            // tombstones we loop immediately.\n                            self.row.reset(self.program.header());\n                        } else {\n                            return Ok(Some((self.header(), &self.row)));\n                        }\n                    }\n                    // Fall through, parse the next instruction, and see if that\n                    // yields a row.\n                }\n            }\n        }\n    }", "test": "fn test_17() {\n    let eh_frame = [41, 96, 156];\n    let eh_frame = EhFrame::new(&eh_frame, LittleEndian);\n    let mut ctx = Box::new(UnwindContext::new());\n    let bases = BaseAddresses::default()\n        .set_eh_frame(0)\n        .set_eh_frame_hdr(0)\n        .set_text(0)\n        .set_got(0);\n    let mut entries = eh_frame.entries(&bases);\n    while let Ok(Some(entry)) = entries.next() {\n        match entry {\n            CieOrFde::Cie(_) => continue,\n            CieOrFde::Fde(partial) => {\n                if let Ok(fde) = partial.parse(EhFrame::cie_from_offset) {\n                    if let Ok(mut table) = fde.rows(&eh_frame, &bases, &mut ctx) {\n                        while let Ok(Some(_row)) = table.next_row() {\n                            continue;\n                        }\n                    }\n                }\n            }\n        };\n    }\n}"}
{"test_id": "rustls-rustls/rustls-rustls-ae583bd/tests-gen/client.inputs.rs::test_82", "code": "pub fn process_new_packets(&mut self) -> Result<IoState, Error> {\n        match self {\n            Self::Client(conn) => conn.process_new_packets(),\n            Self::Server(conn) => conn.process_new_packets(),\n        }\n    }", "test": "fn test_82() {\n    let data = [\n        22, 3, 3, 0, 63, 2, 0, 0, 59, 3, 3, 89, 16, 236, 200, 17, 90, 14, 121, 52, 150, 218, 66,\n        28, 227, 55, 237, 109, 95, 209, 111, 252, 56, 238, 6, 251, 154, 147, 123, 211, 206, 186,\n        114, 0, 204, 169, 0, 0, 19, 255, 1, 0, 1, 0, 0, 23, 0, 0, 0, 35, 0, 0, 0, 11, 0, 2, 1, 0,\n        22, 3, 3, 14, 229, 11, 0, 14, 91, 0, 14, 222, 0, 7, 96, 48, 130, 7, 92, 48, 130, 6, 68,\n        160, 3, 2, 1, 2, 2, 8, 83, 65, 61, 145, 120, 210, 140, 39, 48, 13, 6, 9, 42, 134, 72, 134,\n        247, 13, 1, 1, 11, 5, 0, 48, 73, 49, 11, 48, 9, 6, 3, 85, 4, 6, 19, 2, 85, 83, 49, 19, 48,\n        17, 6, 3, 85, 4, 10, 19, 10, 71, 111, 111, 103, 108, 101, 32, 73, 110, 99, 49, 37, 48, 35,\n        6, 3, 85, 4, 3, 19, 28, 71, 111, 111, 103, 108, 101, 32, 73, 110, 116, 101, 114, 110, 101,\n        116, 32, 65, 117, 116, 104, 111, 114, 105, 116, 121, 32, 71, 50, 48, 30, 23, 13, 49, 55,\n        48, 52, 50, 55, 48, 56, 51, 48, 48, 48, 90, 23, 13, 49, 55, 48, 55, 50, 48, 48, 56, 51, 48,\n        48, 48, 90, 48, 102, 49, 11, 48, 9, 6, 3, 85, 4, 6, 19, 2, 85, 83, 49, 19, 48, 17, 6, 3,\n        85, 4, 8, 12, 10, 67, 97, 108, 105, 102, 111, 114, 110, 105, 97, 49, 22, 48, 20, 6, 3, 85,\n        4, 7, 12, 13, 77, 111, 117, 110, 116, 97, 105, 110, 32, 86, 105, 101, 119, 49, 19, 48, 17,\n        6, 3, 85, 4, 10, 12, 10, 71, 111, 111, 103, 108, 101, 32, 73, 110, 99, 49, 21, 48, 19, 6,\n        3, 85, 4, 3, 12, 12, 42, 46, 103, 111, 111, 103, 108, 101, 46, 99, 111, 109, 48, 89, 48,\n        19, 6, 7, 42, 134, 72, 206, 61, 2, 1, 6, 8, 42, 134, 72, 206, 61, 3, 1, 7, 3, 66, 0, 4,\n        189, 77, 48, 133, 70, 173, 158, 211, 104, 157, 203, 90, 81, 210, 82, 202, 205, 147, 209,\n        252, 62, 33, 220, 191, 25, 45, 49, 119, 71, 86, 34, 248, 128, 116, 164, 199, 172, 91, 179,\n        223, 239, 76, 76, 63, 25, 69, 53, 53, 110, 197, 165, 220, 25, 210, 237, 147, 30, 18, 131,\n        158, 196, 86, 94, 111, 163, 130, 4, 244, 48, 130, 4, 240, 48, 29, 6, 3, 85, 29, 37, 4, 22,\n        48, 20, 6, 8, 43, 6, 1, 5, 5, 7, 3, 1, 6, 8, 43, 6, 1, 5, 5, 7, 3, 2, 48, 11, 6, 3, 85, 29,\n        15, 4, 4, 3, 2, 7, 128, 48, 130, 3, 179, 6, 3, 85, 29, 17, 4, 130, 3, 170, 48, 130, 3, 166,\n        130, 12, 42, 46, 103, 111, 111, 103, 108, 101, 46, 99, 111, 109, 130, 13, 42, 46, 97, 110,\n        100, 114, 111, 105, 100, 46, 99, 111, 109, 130, 22, 42, 46, 97, 112, 112, 101, 110, 103,\n        105, 110, 101, 46, 103, 111, 111, 103, 108, 101, 46, 99, 111, 109, 130, 18, 42, 46, 99,\n        108, 111, 178, 114, 110, 79, 20, 3, 3, 0, 1, 1, 22, 3, 3, 0, 32, 183, 30, 234, 49, 21, 153,\n        244, 50, 141, 222, 123, 52, 1, 109, 64, 238, 29, 191, 187, 51, 222, 29, 236, 211, 51, 142,\n        115, 248, 228, 41, 223, 232, 23, 3, 3, 5, 145, 183, 198, 127, 233, 133, 132, 204, 255, 193,\n        240, 165, 168, 179, 134, 137, 28, 111, 57, 20, 103, 109, 40, 93, 116, 27, 183, 6, 173, 163,\n        53, 13, 72, 122, 43, 63, 229, 34, 239, 206, 238, 224, 219, 154, 89, 232, 199, 231, 76, 220,\n        48, 166, 150, 198, 187, 179, 212, 170, 99, 14, 86, 71, 119, 180, 116, 170, 223, 163, 40,\n        114, 100, 115, 113, 43, 44, 114, 235, 76, 52, 47, 163, 154, 106, 75, 206, 13, 169, 35, 146,\n        186, 235, 26, 215, 226, 25, 96, 82, 134, 106, 165, 127, 165, 151, 155, 237, 16, 83, 188,\n        25, 119, 139, 21, 127, 119, 176, 100, 73, 39, 111, 86, 232, 52, 9, 66, 93, 115, 223, 106,\n        49, 206, 238, 160, 132, 136, 64, 102, 43, 74, 71, 121, 174, 29, 24, 97, 80, 95, 52, 218,\n        59, 92, 197, 127, 255, 57, 181, 131, 22, 44, 103, 181, 255, 147, 102, 90, 15, 183, 116, 87,\n        9, 234, 149, 220, 97, 185, 51, 15, 48, 192, 77, 192, 92, 6, 25, 231, 98, 183, 247, 191, 91,\n        35, 232, 21, 25, 172, 40, 237, 60, 161, 137, 231, 74, 255, 83, 254, 36, 142, 212, 17, 244,\n        228, 22, 175, 11, 18, 28, 10, 13, 59, 153, 59, 167, 135, 132, 139, 137, 113, 140, 127, 144,\n        118, 200, 162, 233, 78, 190, 163, 76, 226, 254, 141, 23, 103, 104, 130, 9, 249, 38, 224,\n        186, 81, 202, 138, 93, 91, 204, 157, 215, 80, 29, 100, 172, 90, 238, 198, 240, 210, 187,\n        19, 62, 115, 118, 162, 168, 216, 71, 112, 46, 23, 133, 22, 189, 210, 149, 133, 48, 200,\n        136, 154, 38, 232, 39, 155, 118, 193, 34, 213, 153, 254, 27, 118, 184, 252, 128, 4, 175, 4,\n        84, 119, 78, 252, 154, 99, 252, 142, 108, 170, 171, 108, 4, 181, 42, 121, 214, 195, 219,\n        86, 242, 192, 126, 196, 223, 239, 42, 199, 225, 212, 234, 10, 122, 3, 193, 28, 84, 12, 112,\n        161, 253, 10, 169, 105, 164, 63, 97, 189, 164, 233, 134, 45, 115, 68, 28, 24, 245, 177,\n        156, 59, 119, 158, 169, 190, 92, 55, 25, 81, 131, 16, 97, 164, 233, 188, 6, 13, 197, 35,\n        180, 215, 5, 222, 218, 153, 211, 204, 140, 43, 16, 66, 70, 37, 188, 245, 142, 91, 181, 176,\n        50, 210, 247, 126, 210, 254, 254, 56, 58, 202, 187, 189, 198, 247, 74, 189, 80, 143, 231,\n        208, 22, 188, 255, 184, 79, 239, 101, 153, 38, 185, 223, 119, 141, 143, 241, 93, 236, 72,\n        153, 185, 119, 215, 135, 123, 202, 66, 204, 12, 243, 246, 48, 43, 154, 83, 0, 100, 146,\n        157, 230, 233, 147, 209, 45, 106, 170, 231, 113, 162, 217, 136, 142, 254, 179, 55, 216,\n        202, 171, 112, 33, 169, 211, 27, 69, 131, 131, 186, 210, 79, 186, 244, 223, 25, 153, 0,\n        204, 17, 150, 183, 82, 33, 40, 165, 178, 214, 212, 185, 215, 118, 116, 192, 121, 23, 111,\n        14, 148, 118, 17, 195, 123, 98, 96, 227, 160, 203, 98, 44, 10, 17, 73, 153, 8, 104, 225,\n        126, 28, 62, 50, 167, 146, 93, 246, 148, 222, 56, 235, 205, 189, 222, 186, 74, 242, 195,\n        91, 54, 135, 245, 245, 139, 235, 233, 43, 125, 89, 87, 250, 179, 228, 228, 166, 141, 238,\n        53, 245, 80, 235, 32, 142, 81, 180, 51, 107, 117, 28, 197, 62, 15, 107, 40, 167, 63, 119,\n        215, 239, 4, 53, 26, 254, 55, 153, 8, 89, 253, 156, 98, 25, 51, 54, 205, 255, 183, 37, 76,\n        39, 153, 92, 240, 79, 178, 157, 153, 205, 242, 91, 133, 204, 26, 107, 7, 105, 59, 186, 37,\n        217, 61, 171, 159, 165, 68, 171, 10, 91, 29, 236, 136, 188, 153, 202, 63, 99, 47, 38, 246,\n        92, 156, 111, 100, 241, 142, 19, 98, 204, 171, 188, 6, 5, 117, 91, 47, 16, 227, 100, 43,\n        77, 56, 70, 231, 10, 161, 170, 195, 142, 34, 154, 173, 32, 78, 93, 39, 56, 185, 38, 249,\n        59, 219, 48, 15, 106, 245, 187, 64, 82, 47, 144, 134, 130, 154, 54, 87, 70, 166, 72, 234,\n        147, 121, 227, 24, 77, 204, 246, 109, 49, 57, 104, 114, 128, 35, 40, 34, 113, 75, 116, 91,\n        6, 43, 28, 123, 123, 43, 180, 82, 237, 1, 250, 108, 126, 244, 40, 186, 108, 59, 59, 1, 232,\n        50, 14, 248, 26, 158, 112, 110, 245, 133, 40, 44, 38, 130, 187, 34, 190, 179, 134, 98, 54,\n        71, 52, 151, 64, 70, 253, 247, 48, 201, 189, 117, 28, 18, 6, 111, 239, 64, 248, 250, 231,\n        85, 20, 133, 210, 238, 207, 121, 136, 37, 127, 16, 135, 191, 150, 42, 174, 107, 239, 142,\n        40, 108, 34, 66, 36, 233, 104, 52, 137, 12, 49, 17, 219, 213, 165, 132, 160, 153, 6, 175,\n        133, 172, 78, 183, 236, 228, 81, 164, 11, 152, 93, 194, 212, 117, 179, 84, 175, 251, 73,\n        172, 77, 252, 207, 166, 218, 20, 168, 183, 0, 205, 40, 203, 120, 130, 87, 123, 61, 140,\n        237, 224, 132, 178, 103, 208, 78, 140, 40, 13, 123, 9, 47, 68, 171, 162, 116, 160, 87, 84,\n        2, 14, 84, 180, 242, 73, 38, 223, 191, 114, 45, 232, 208, 252, 180, 95, 17, 205, 199, 106,\n        169, 123, 181, 212, 6, 41, 91, 38, 81, 23, 176, 105, 40, 194, 246, 174, 78, 30, 205, 204,\n        147, 9, 172, 98, 65, 188, 225, 83, 245, 167, 203, 99, 201, 207, 126, 192, 173, 250, 25, 28,\n        101, 164, 88, 191, 186, 203, 199, 243, 35, 13, 187, 204, 61, 180, 2, 24, 198, 83, 6, 147,\n        212, 139, 186, 164, 180, 193, 193, 241, 96, 217, 160, 58, 117, 133, 132, 97, 135, 174, 24,\n        49, 123, 161, 202, 191, 10, 20, 238, 223, 213, 107, 139, 69, 58, 239, 56, 147, 15, 71, 130,\n        244, 112, 179, 219, 45, 136, 223, 145, 5, 100, 70, 194, 104, 130, 39, 47, 144, 40, 179,\n        162, 166, 177, 238, 10, 122, 181, 88, 128, 242, 228, 211, 145, 239, 231, 38, 58, 56, 75,\n        175, 203, 162, 198, 220, 58, 152, 213, 24, 223, 20, 41, 227, 102, 59, 122, 94, 95, 197, 33,\n        196, 28, 96, 184, 228, 76, 194, 197, 105, 5, 26, 90, 174, 79, 27, 218, 172, 92, 44, 155,\n        33, 236, 30, 190, 13, 110, 13, 60, 176, 93, 14, 91, 214, 255, 254, 88, 103, 178, 198, 121,\n        186, 64, 227, 162, 168, 215, 191, 237, 199, 111, 169, 20, 159, 6, 182, 229, 25, 157, 45,\n        54, 158, 121, 226, 199, 147, 48, 82, 174, 41, 55, 185, 164, 65, 101, 174, 22, 69, 163, 141,\n        174, 103, 99, 196, 91, 121, 197, 219, 197, 90, 242, 150, 42, 209, 60, 97, 55, 242, 58, 126,\n        231, 22, 127, 91, 166, 44, 228, 231, 29, 236, 61, 35, 12, 152, 48, 104, 183, 24, 213, 102,\n        189, 214, 101, 136, 11, 226, 31, 83, 243, 242, 206, 101, 180, 179, 14, 35, 13, 104, 249,\n        151, 118, 148, 180, 205, 245, 29, 35, 253, 113, 62, 102, 109, 228, 28, 120, 68, 76, 243,\n        62, 250, 159, 100, 137, 94, 216, 30, 90, 10, 230, 54, 242, 196, 232, 13, 12, 177, 50, 32,\n        91, 126, 103, 88, 54, 57, 13, 172, 80, 167, 15, 51, 109, 159, 237, 164, 251, 229, 16, 134,\n        132, 56, 93, 60, 51, 230, 25, 105, 230, 1, 54, 204, 248, 53, 80, 16, 54, 168, 4, 173, 246,\n        198, 106, 252, 153, 5, 227, 23, 169, 9, 2, 162, 237, 46, 114, 238, 203, 103, 62, 66, 43,\n        119, 56, 209, 97, 60, 189, 54, 25, 228, 137, 19, 198, 68, 137, 40, 197, 159, 152, 220, 149,\n        128, 201, 201, 138, 46, 70, 97, 140, 146, 244, 106, 103, 120, 211, 231, 150, 37, 41, 30,\n        87, 208, 191, 66, 142, 55, 222, 11, 102, 197, 30, 213, 6, 144, 18, 123, 235, 145, 73, 249,\n        60, 240, 251, 161, 240, 147, 201, 165, 206, 167, 115, 79, 225, 189, 27, 95, 168, 239, 189,\n        46, 13, 198, 47, 228, 179, 156, 53, 40, 209, 116, 191, 177, 143, 60, 157, 172, 193, 123,\n        252, 146, 28, 6, 20, 225, 237, 80, 166, 97, 59, 162, 189, 172, 91, 121, 248, 134, 72, 36,\n        23, 3, 3, 1, 134, 184, 233, 245, 63, 202, 189, 95, 218, 14, 44, 104, 150, 88, 57, 147, 139,\n        108, 12, 24, 244, 48, 244, 12, 105, 140, 216, 220, 203, 61, 245, 166, 98, 248, 29, 21, 205,\n        163, 217, 131, 222, 142, 243, 231, 56, 251, 8, 91, 104, 142, 192, 167, 237, 78, 125, 38,\n        215, 152, 134, 128, 126, 89, 102, 207, 188, 230, 246, 14, 24, 126, 138, 114, 180, 118, 107,\n        248, 123, 189, 108, 188, 51, 72, 43, 11, 120, 144, 125, 151, 128, 70, 175, 208, 157, 21,\n        23, 181, 116, 24, 151, 213, 169, 71, 137, 211, 133, 66, 217, 94, 57, 172, 53, 200, 76, 212,\n        201, 64, 165, 40, 211, 58, 41, 133, 5, 180, 151, 59, 17, 112, 75, 19, 186, 172, 50, 36,\n        184, 98, 225, 103, 3, 192, 196, 234, 34, 58, 122, 13, 145, 186, 175, 6, 194, 14, 113, 209,\n        83, 212, 155, 61, 162, 156, 108, 103, 139, 224, 128, 191, 58, 168, 228, 223, 63, 16, 216,\n        161, 129, 103, 100, 126, 196, 98, 10, 77, 40, 217, 195, 19, 205, 202, 220, 96, 17, 175, 95,\n        25, 22, 158, 125, 215, 107, 136, 1, 124, 91, 213, 38, 226, 229, 171, 102, 229, 43, 21, 96,\n        64, 18, 250, 121, 28, 196, 204, 232, 170, 196, 217, 241, 72, 52, 204, 213, 15, 38, 22, 211,\n        23, 30, 200, 130, 144, 162, 241, 75, 131, 109, 216, 53, 176, 129, 181, 234, 255, 221, 66,\n        0, 103, 20, 218, 25, 242, 178, 29, 66, 74, 132, 102, 65, 47, 113, 156, 220, 240, 218, 205,\n        242, 139, 64, 190, 177, 79, 163, 13, 245, 95, 144, 138, 214, 18, 105, 157, 143, 227, 178,\n        156, 38, 215, 106, 254, 245, 153, 14, 188, 52, 101, 188, 238, 86, 47, 120, 37, 100, 136,\n        93, 124, 217, 73, 77, 154, 46, 244, 106, 178, 10, 189, 146, 171, 135, 220, 144, 201, 229,\n        61, 61, 135, 192, 76, 64, 222, 138, 66, 197, 214, 166, 41, 39, 147, 245, 35, 15, 191, 134,\n        204, 64, 72, 168, 114, 232, 179, 225, 117, 94, 47, 184, 219, 143, 107, 210, 56, 223, 248,\n        86, 107, 154, 214, 43, 23, 71, 130, 241, 25, 50, 204, 144, 244, 19, 51, 33, 180, 0, 17,\n        184, 61, 147,\n    ];\n    let root_store = RootCertStore::empty();\n    let config = Arc::new(\n        ClientConfig::builder()\n            .with_safe_defaults()\n            .with_root_certificates(root_store)\n            .with_no_client_auth(),\n    );\n    let example_com = \"example.com\".try_into().unwrap();\n    let mut client = ClientConnection::new(config, example_com).unwrap();\n    let _ = client.read_tls(&mut io::Cursor::new(data));\n    let _ = client.process_new_packets();\n}"}
{"test_id": "zip-rs-zip/zip-rs-zip-ed187d6/tests-gen/fuzz_read.inputs.rs::test_97", "code": "fn decompress_all (data : & [u8]) -> Result < () , Box < dyn std :: error :: Error > > { let reader = std :: io :: Cursor :: new (data) ; let mut zip = zip :: ZipArchive :: new (reader) ? ; for i in 0 .. zip . len () { let mut file = zip . by_index (i) ? ; if file . size () < 1 << 20 { let _ = std :: io :: copy (& mut file , & mut std :: io :: sink ()) ; } } Ok (()) }", "test": "fn test_97() {\n    let data = [156, 49];\n    let _ = decompress_all(data);\n}"}
{"test_id": "gimli-rs-gimli/gimli-rs-gimli-3947879/tests-gen/debug_aranges.inputs.rs::test_84", "code": "pub fn next(&mut self) -> Result<Option<UnitHeader<R>>> {\n        if self.input.is_empty() {\n            Ok(None)\n        } else {\n            let len = self.input.len();\n            match parse_unit_header(&mut self.input, self.offset.into()) {\n                Ok(header) => {\n                    self.offset.0 += len - self.input.len();\n                    Ok(Some(header))\n                }\n                Err(e) => {\n                    self.input.empty();\n                    Err(e)\n                }\n            }\n        }\n    }", "test": "fn test_84() {\n    let debug_aranges = [250];\n    let debug_aranges = DebugAranges::new(&debug_aranges, LittleEndian);\n    let mut headers = debug_aranges.headers();\n    while let Ok(Some(header)) = headers.next() {\n        let mut entries = header.entries();\n        while let Ok(Some(_entry)) = entries.next() {\n            continue;\n        }\n    }\n}"}
{"test_id": "cloud-hypervisor-cloud-hypervisor/cloud-hypervisor-cloud-hypervisor-db3a5f3/tests-gen/rng.inputs.rs::test_51", "code": "pub fn wait_for_epoll_threads(&mut self) {\n        self.common.wait_for_epoll_threads();\n    }", "test": "fn test_51() {\n    let bytes = [64, 161, 42];\n    if bytes.len() < (QUEUE_DATA_SIZE + QUEUE_BYTES_SIZE)\n        || bytes.len() > (QUEUE_DATA_SIZE + QUEUE_BYTES_SIZE + MEM_SIZE)\n    {\n        return;\n    }\n    let mut rng = virtio_devices::Rng::new(\n        \"fuzzer_rng\".to_owned(),\n        \"/dev/urandom\",\n        false,\n        SeccompAction::Allow,\n        EventFd::new(EFD_NONBLOCK).unwrap(),\n        None,\n    )\n    .unwrap();\n    let queue_data = &bytes[..QUEUE_DATA_SIZE];\n    let queue_bytes = &bytes[QUEUE_DATA_SIZE..QUEUE_DATA_SIZE + QUEUE_BYTES_SIZE];\n    let mem_bytes = &bytes[QUEUE_DATA_SIZE + QUEUE_BYTES_SIZE..];\n    let q = setup_virt_queue(queue_data.try_into().unwrap());\n    let mem = GuestMemoryMmap::from_ranges(&[\n        (GuestAddress(0), MEM_SIZE),\n        (GuestAddress(DESC_TABLE_ADDR), QUEUE_BYTES_SIZE),\n    ])\n    .unwrap();\n    if mem\n        .write_slice(queue_bytes, GuestAddress(DESC_TABLE_ADDR))\n        .is_err()\n    {\n        return;\n    }\n    if mem.write_slice(mem_bytes, GuestAddress(0 as u64)).is_err() {\n        return;\n    }\n    let guest_memory = GuestMemoryAtomic::new(mem);\n    let evt = EventFd::new(0).unwrap();\n    let queue_evt = unsafe { EventFd::from_raw_fd(libc::dup(evt.as_raw_fd())) };\n    queue_evt.write(1).unwrap();\n    rng.activate(\n        guest_memory,\n        Arc::new(NoopVirtioInterrupt {}),\n        vec![(0, q, evt)],\n    )\n    .ok();\n    rng.wait_for_epoll_threads();\n}"}
{"test_id": "image-rs-image-png/image-rs-image-png-e113d76/tests-gen/buf_independent.inputs.rs::test_44", "code": "fn new (inner : R , cap : usize) -> Self { SmalBuf { inner , cap } }", "test": "fn test_44() {\n    let data = [132, 0, 0];\n    let limits = png::Limits { bytes: 1 << 16 };\n    let reference = png::Decoder::new_with_limits(data, limits);\n    let smal = png::Decoder::new_with_limits(SmalBuf::new(data, 1), limits);\n    let _ = png_compare(reference, smal);\n}"}
{"test_id": "rustls-rustls/rustls-rustls-ae583bd/tests-gen/message.inputs.rs::test_48", "code": "pub fn used(&self) -> usize {\n        self.cursor\n    }", "test": "fn test_48() {\n    let data = [\n        22, 3, 3, 0, 16, 20, 0, 0, 12, 126, 225, 40, 122, 131, 96, 180, 119, 8, 201, 94, 178,\n    ];\n    let mut rdr = Reader::init(data);\n    if let Ok(m) = OpaqueMessage::read(&mut rdr) {\n        let msg = match Message::try_from(m.into_plain_message()) {\n            Ok(msg) => msg,\n            Err(_) => return,\n        };\n        let enc = PlainMessage::from(msg)\n            .into_unencrypted_opaque()\n            .encode();\n        assert_eq!(enc, data[..rdr.used()]);\n    }\n}"}
{"test_id": "gfx-rs-naga/gfx-rs-naga-92e41b4/tests-gen/wgsl_parser.inputs.rs::test_33", "code": "pub fn parse(mut self) -> Result<crate::Module, Error> {\n        let mut module = {\n            if self.next()? != spirv::MAGIC_NUMBER {\n                return Err(Error::InvalidHeader);\n            }\n            let version_raw = self.next()?;\n            let generator = self.next()?;\n            let _bound = self.next()?;\n            let _schema = self.next()?;\n            log::info!(\"Generated by {} version {:x}\", generator, version_raw);\n            crate::Module::default()\n        };\n\n        self.layouter.clear();\n        self.dummy_functions = Arena::new();\n        self.lookup_function.clear();\n        self.function_call_graph.clear();\n\n        loop {\n            use spirv::Op;\n\n            let inst = match self.next_inst() {\n                Ok(inst) => inst,\n                Err(Error::IncompleteData) => break,\n                Err(other) => return Err(other),\n            };\n            log::debug!(\"\\t{:?} [{}]\", inst.op, inst.wc);\n\n            match inst.op {\n                Op::Capability => self.parse_capability(inst),\n                Op::Extension => self.parse_extension(inst),\n                Op::ExtInstImport => self.parse_ext_inst_import(inst),\n                Op::MemoryModel => self.parse_memory_model(inst),\n                Op::EntryPoint => self.parse_entry_point(inst),\n                Op::ExecutionMode => self.parse_execution_mode(inst),\n                Op::String => self.parse_string(inst),\n                Op::Source => self.parse_source(inst),\n                Op::SourceExtension => self.parse_source_extension(inst),\n                Op::Name => self.parse_name(inst),\n                Op::MemberName => self.parse_member_name(inst),\n                Op::ModuleProcessed => self.parse_module_processed(inst),\n                Op::Decorate => self.parse_decorate(inst),\n                Op::MemberDecorate => self.parse_member_decorate(inst),\n                Op::TypeVoid => self.parse_type_void(inst),\n                Op::TypeBool => self.parse_type_bool(inst, &mut module),\n                Op::TypeInt => self.parse_type_int(inst, &mut module),\n                Op::TypeFloat => self.parse_type_float(inst, &mut module),\n                Op::TypeVector => self.parse_type_vector(inst, &mut module),\n                Op::TypeMatrix => self.parse_type_matrix(inst, &mut module),\n                Op::TypeFunction => self.parse_type_function(inst),\n                Op::TypePointer => self.parse_type_pointer(inst, &mut module),\n                Op::TypeArray => self.parse_type_array(inst, &mut module),\n                Op::TypeRuntimeArray => self.parse_type_runtime_array(inst, &mut module),\n                Op::TypeStruct => self.parse_type_struct(inst, &mut module),\n                Op::TypeImage => self.parse_type_image(inst, &mut module),\n                Op::TypeSampledImage => self.parse_type_sampled_image(inst),\n                Op::TypeSampler => self.parse_type_sampler(inst, &mut module),\n                Op::Constant | Op::SpecConstant => self.parse_constant(inst, &mut module),\n                Op::ConstantComposite => self.parse_composite_constant(inst, &mut module),\n                Op::ConstantNull | Op::Undef => self.parse_null_constant(inst, &mut module),\n                Op::ConstantTrue => self.parse_bool_constant(inst, true, &mut module),\n                Op::ConstantFalse => self.parse_bool_constant(inst, false, &mut module),\n                Op::Variable => self.parse_global_variable(inst, &mut module),\n                Op::Function => {\n                    self.switch(ModuleState::Function, inst.op)?;\n                    inst.expect(5)?;\n                    self.parse_function(&mut module)\n                }\n                _ => Err(Error::UnsupportedInstruction(self.state, inst.op)), //TODO\n            }?;\n        }\n\n        log::info!(\"Patching...\");\n        {\n            let mut nodes = petgraph::algo::toposort(&self.function_call_graph, None)\n                .map_err(|cycle| Error::FunctionCallCycle(cycle.node_id()))?;\n            nodes.reverse(); // we need dominated first\n            let mut functions = mem::take(&mut module.functions);\n            for fun_id in nodes {\n                if fun_id > !(functions.len() as u32) {\n                    // skip all the fake IDs registered for the entry points\n                    continue;\n                }\n                let lookup = self.lookup_function.get_mut(&fun_id).unwrap();\n                // take out the function from the old array\n                let fun = mem::take(&mut functions[lookup.handle]);\n                // add it to the newly formed arena, and adjust the lookup\n                lookup.handle = module\n                    .functions\n                    .append(fun, functions.get_span(lookup.handle));\n            }\n        }\n        // patch all the functions\n        for (handle, fun) in module.functions.iter_mut() {\n            self.patch_function(Some(handle), fun)?;\n        }\n        for ep in module.entry_points.iter_mut() {\n            self.patch_function(None, &mut ep.function)?;\n        }\n\n        // Check all the images and samplers to have consistent comparison property.\n        for (handle, flags) in self.handle_sampling.drain() {\n            if !image::patch_comparison_type(\n                flags,\n                module.global_variables.get_mut(handle),\n                &mut module.types,\n            ) {\n                return Err(Error::InconsistentComparisonSampling(handle));\n            }\n        }\n\n        if !self.future_decor.is_empty() {\n            log::warn!(\"Unused item decorations: {:?}\", self.future_decor);\n            self.future_decor.clear();\n        }\n        if !self.future_member_decor.is_empty() {\n            log::warn!(\"Unused member decorations: {:?}\", self.future_member_decor);\n            self.future_member_decor.clear();\n        }\n\n        Ok(module)\n    }", "test": "fn test_33() {\n    let data = \"!\\r\\01\";\n    let _result = Frontend::new().parse(&data);\n}"}
{"test_id": "marshallpierce-rust-base64/marshallpierce-rust-base64-4ef33cc/tests-gen/roundtrip_no_pad.inputs.rs::test_42", "code": "fn decode<T: AsRef<[u8]>>(&self, input: T) -> Result<Vec<u8>, DecodeError> {\n        fn inner<E>(engine: &E, input_bytes: &[u8]) -> Result<Vec<u8>, DecodeError>\n        where\n            E: Engine + ?Sized,\n        {\n            let estimate = engine.internal_decoded_len_estimate(input_bytes.len());\n            let mut buffer = vec![0; estimate.decoded_len_estimate()];\n\n            let bytes_written = engine\n                .internal_decode(input_bytes, &mut buffer, estimate)?\n                .decoded_len;\n\n            buffer.truncate(bytes_written);\n\n            Ok(buffer)\n        }\n\n        inner(self, input.as_ref())\n    }", "test": "fn test_42() {\n    let data = [141, 44];\n    let config = general_purpose::GeneralPurposeConfig::new()\n        .with_encode_padding(false)\n        .with_decode_padding_mode(engine::DecodePaddingMode::RequireNone);\n    let engine = general_purpose::GeneralPurpose::new(&base64::alphabet::STANDARD, config);\n    let encoded = engine.encode(data);\n    let decoded = engine.decode(&encoded).unwrap();\n    assert_eq!(data, decoded.as_slice());\n}"}
{"test_id": "marshallpierce-rust-base64/marshallpierce-rust-base64-4ef33cc/tests-gen/roundtrip_random_config.inputs.rs::test_19", "code": "fn decode<T: AsRef<[u8]>>(&self, input: T) -> Result<Vec<u8>, DecodeError> {\n        fn inner<E>(engine: &E, input_bytes: &[u8]) -> Result<Vec<u8>, DecodeError>\n        where\n            E: Engine + ?Sized,\n        {\n            let estimate = engine.internal_decoded_len_estimate(input_bytes.len());\n            let mut buffer = vec![0; estimate.decoded_len_estimate()];\n\n            let bytes_written = engine\n                .internal_decode(input_bytes, &mut buffer, estimate)?\n                .decoded_len;\n\n            buffer.truncate(bytes_written);\n\n            Ok(buffer)\n        }\n\n        inner(self, input.as_ref())\n    }", "test": "fn test_19() {\n    let data = [10, 0, 10, 0];\n    let engine = utils::random_engine(data);\n    let encoded = engine.encode(data);\n    let decoded = engine.decode(&encoded).unwrap();\n    assert_eq!(data, decoded.as_slice());\n}"}
{"test_id": "tafia-calamine/tafia-calamine-5a5804d/tests-gen/fuzz_all.inputs.rs::test_46", "code": "fn count<R: Reader<BufReader<File>>>(path: &str) -> usize {\n    let path = format!(\"{}/{}\", env!(\"CARGO_MANIFEST_DIR\"), path);\n    let mut excel: R = open_workbook(&path).expect(\"cannot open excel file\");\n\n    let sheets = excel.sheet_names().to_owned();\n    let mut count = 0;\n    for s in sheets {\n        count += excel\n            .worksheet_range(&s)\n            .unwrap()\n            .unwrap()\n            .rows()\n            .flat_map(|r| r.iter())\n            .count();\n    }\n    count\n}", "test": "fn test_46() {\n    let data = [69, 12];\n    let file_name = \"fuzz.xlsx\";\n    if let Ok(mut file) = File::create(file_name) {\n        if file.write_all(data).is_err() {\n            return;\n        }\n    }\n    let mut workbook: Xlsx<_> = match open_workbook(file_name) {\n        Ok(excel) => excel,\n        Err(_) => return,\n    };\n    for worksheet in workbook.worksheets() {\n        if let Some(Ok(range)) = workbook.worksheet_range(&worksheet.0) {\n            let _ = range.get_size().0 * range.get_size().1;\n            range.used_cells().count();\n        }\n    }\n    if let Some(Ok(mut vba)) = workbook.vba_project() {\n        let vba = vba.to_mut();\n        for module_name in vba.get_module_names() {\n            if vba.get_module(module_name).is_ok() {\n                for r in vba.get_references() {\n                    r.is_missing();\n                }\n            }\n        }\n    }\n    let sheets = workbook.sheet_names().to_owned();\n    for s in sheets {\n        if let Some(Ok(formula)) = workbook.worksheet_formula(&s) {\n            formula\n                .rows()\n                .flat_map(|r| r.iter().filter(|f| !f.is_empty()))\n                .count();\n        }\n    }\n}"}
{"test_id": "gimli-rs-gimli/gimli-rs-gimli-3947879/tests-gen/debug_info.inputs.rs::test_50", "code": "pub fn next(&mut self) -> Result<Option<RawLocListEntry<R>>> {\n        if self.input.is_empty() {\n            return Ok(None);\n        }\n\n        match RawLocListEntry::parse(&mut self.input, self.encoding, self.format) {\n            Ok(entry) => {\n                if entry.is_none() {\n                    self.input.empty();\n                }\n                Ok(entry)\n            }\n            Err(e) => {\n                self.input.empty();\n                Err(e)\n            }\n        }\n    }", "test": "fn test_50() {\n    let sections = (\n        [],\n        [\n            224, 26, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,\n        ],\n    );\n    let (debug_abbrev, debug_info) = sections;\n    let debug_abbrev = DebugAbbrev::new(&debug_abbrev, LittleEndian);\n    let debug_info = DebugInfo::new(&debug_info, LittleEndian);\n    let mut units = debug_info.units();\n    while let Ok(Some(unit)) = units.next() {\n        if let Ok(abbrevs) = unit.abbreviations(&debug_abbrev) {\n            let mut cursor = unit.entries(&abbrevs);\n            while let Ok(Some((_delta, entry))) = cursor.next_dfs() {\n                let mut attrs = entry.attrs();\n                while let Ok(Some(_attr)) = attrs.next() {\n                    continue;\n                }\n            }\n        }\n    }\n}"}
{"test_id": "BurntSushi-memchr/BurntSushi-memchr-f3fde7a/tests-gen/memrmem.inputs.rs::test_6", "code": "pub fn count(&self, haystack: &[u8]) -> usize {\n        // SAFETY: All of our pointers are derived directly from a borrowed\n        // slice, which is guaranteed to be valid.\n        unsafe {\n            let start = haystack.as_ptr();\n            let end = start.add(haystack.len());\n            self.count_raw(start, end)\n        }\n    }", "test": "fn test_6() {\n    let data = [35];\n    if data.len() < 2 {\n        return;\n    }\n    let split = std::cmp::max(data[0] as usize, 1) % data.len() as usize;\n    let (needle, haystack) = (&data[..split], &data[split..]);\n    memmem::rfind_iter(haystack, needle).count();\n}"}
{"test_id": "rustls-rustls/rustls-rustls-ae583bd/tests-gen/server.inputs.rs::test_39", "code": "pub fn process_new_packets(&mut self) -> Result<IoState, Error> {\n        match self {\n            Self::Client(conn) => conn.process_new_packets(),\n            Self::Server(conn) => conn.process_new_packets(),\n        }\n    }", "test": "fn test_39() {\n    let data = [\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 50, 15, 199, 10,\n        239, 16, 176, 28, 0, 45, 0, 2, 1, 1, 0, 35, 0, 0, 22, 3, 3, 0, 37, 16, 0, 0, 33, 32, 174,\n        22, 3, 1, 0, 187, 1, 0, 0, 183, 3, 3, 220, 22, 167, 168, 177, 163, 9, 68, 53, 77, 77, 39,\n        28, 131, 125, 157, 176, 186, 53, 22, 211, 5, 127, 250, 92, 65, 31, 143, 93, 97, 146, 138,\n        0, 0, 20, 19, 3, 19, 2, 19, 1, 204, 169, 204, 168, 192, 44, 192, 43, 3, 1, 0, 53, 219, 184,\n        117, 77, 19, 58, 216, 56, 206, 189, 136, 130, 200, 75, 166, 179, 221, 205, 76, 177, 233,\n        190, 144, 63, 232, 169, 106, 107, 196, 128, 137, 238, 184, 1, 0, 0, 0, 0, 0, 0, 1, 16, 155,\n        32, 243, 35, 34, 228, 249, 131, 79, 5, 236, 23, 3, 1, 0, 98, 232, 125, 164, 163, 59, 238,\n        64, 160, 89, 49, 176, 161, 116, 71, 184, 117, 131, 29, 119, 30, 254, 193, 66, 215, 34, 226,\n        85, 150, 137, 157, 149, 108, 207, 252, 23, 86, 20, 3, 3, 0, 1, 1, 22, 3, 3, 0, 32, 95, 94,\n        179, 244, 73, 139, 102, 175, 65, 93, 186, 57, 105, 115, 213, 72, 207, 171, 68, 112, 247,\n        61, 197, 101, 209, 80, 21, 197, 16, 192, 38, 207, 23, 3, 1, 0, 0, 0, 0, 0, 0, 1, 3, 0, 97,\n        120, 117, 231, 51, 21, 63, 29, 51, 245, 52, 162, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 99, 156, 191, 129,\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 130, 16, 57, 3, 3, 220, 22, 167, 168, 177, 163, 9,\n        0, 0, 68,\n    ];\n    let config = Arc::new(\n        ServerConfig::builder()\n            .with_safe_defaults()\n            .with_no_client_auth()\n            .with_cert_resolver(Arc::new(Fail)),\n    );\n    let mut server = ServerConnection::new(config).unwrap();\n    let _ = server.read_tls(&mut io::Cursor::new(data));\n    let _ = server.process_new_packets();\n}"}
{"test_id": "uutils-coreutils/uutils-coreutils-73b7c46/tests-gen/fuzz_parse_size.inputs.rs::test_44", "code": "pub fn parse_size(size: &str) -> Result<u64, ParseSizeError> {\n    Parser::default().parse(size)\n}", "test": "fn test_44() {\n    let data = [255, 10, 244];\n    if let Ok(s) = std::str::from_utf8(data) {\n        _ = parse_size(s);\n    }\n}"}
{"test_id": "rust-bakery-nom/rust-bakery-nom-869f897/tests-gen/fuzz_arithmetic.inputs.rs::test_18", "code": "fn factor(i: &str) -> IResult<&str, Expr> {\n  alt((\n    map(\n      map_res(delimited(multispace, digit, multispace), FromStr::from_str),\n      Expr::Value,\n    ),\n    parens,\n  ))(i)\n}", "test": "fn test_18() {\n  let data = [253];\n  reset();\n  let temp = match str::from_utf8(data) {\n    Ok(v) => factor(v),\n    Err(e) => factor(\"2\"),\n  };\n}"}
{"test_id": "XAMPPRocky-tokei/XAMPPRocky-tokei-92ddc2e/tests-gen/parse_from_slice_total.inputs.rs::test_15", "code": "pub fn parse_from_slice (input : FuzzInput , check_total : bool) { let config = & Config { treat_doc_strings_as_comments : Some (input . treat_doc_strings_as_comments) , columns : None , hidden : None , no_ignore : None , no_ignore_parent : None , no_ignore_dot : None , no_ignore_vcs : None , sort : None , types : None , for_each_fn : None , } ; let stats = input . lang . parse_from_slice (input . data , config) ; if check_total { if let Ok (s) = str :: from_utf8 (input . data) { assert ! (stats . lines () <= s . lines () . count () , \"{} got more total lines ({}) than str::lines ({}). Code: {}, Comments: {}, Blanks: {}. treat_doc_strings_as_comments: {}. File contents (as UTF-8):\\n{}\" , input . lang . name () , stats . lines () , s . lines () . count () , stats . code , stats . comments , input . treat_doc_strings_as_comments , stats . blanks , s) } ; } }", "test": "fn test_15() {\n    let data = FuzzInput {\n        lang: Zsh,\n        treat_doc_strings_as_comments: true,\n        data: [255, 1, 245, 245, 0, 0, 0, 246, 239],\n    };\n    parse_from_slice(data, true);\n}"}
{"test_id": "rust-bio-rust-bio/rust-bio-rust-bio-319a0d8/tests-gen/myers_matching.inputs.rs::test_34", "code": "fn validate_alignment (aln : & Alignment , x : & [u8] , y : & [u8]) { let y = & y [aln . ystart .. aln . yend] ; let mut ix = 0 ; let mut iy = 0 ; let mut calc_dist = 0 ; for op in & aln . operations { match * op { Match => { assert ! (x [ix] == y [iy] , \"Match operation, but characters are not equal\") ; ix += 1 ; iy += 1 ; } Subst => { assert ! (x [ix] != y [iy] , \"Subst operation, but characters are equal\") ; calc_dist += 1 ; ix += 1 ; iy += 1 ; } Del => { calc_dist += 1 ; iy += 1 ; } Ins => { calc_dist += 1 ; ix += 1 ; } _ => unreachable ! () } } assert_eq ! (calc_dist , aln . score as usize) ; }", "test": "fn test_34() {\n    let data = [6, 246, 226];\n    if data.len() < 3 {\n        return;\n    }\n    let (max_dist, data) = data.split_first().unwrap();\n    let (pattern_len, data) = data.split_first().unwrap();\n    let max_dist = min(64, *max_dist);\n    let pattern_len = max(1, min(64, min(data.len(), *pattern_len as usize)));\n    if data.iter().any(|&b| b < 65 || b > 122 || b > 90 && b < 97) {\n        return;\n    }\n    let (pattern, text) = data.split_at(pattern_len);\n    let max_dist = max_dist as u8;\n    let _ = MyersBuilder::new().build_64(pattern);\n    let _ = MyersBuilder::new().build_long_64(pattern);\n    let mut myers = Myers::<u64>::new(pattern);\n    let mut myers_long = long::Myers::<u8>::new(pattern);\n    let end_dist: Vec<_> = myers.find_all_end(text, max_dist).collect();\n    let end_dist_long: Vec<_> = myers_long\n        .find_all_end(text, max_dist as usize)\n        .map(|(end, dist)| (end, dist as u8))\n        .collect();\n    assert_eq!(end_dist, end_dist_long);\n    let mut aln = Alignment::default();\n    let mut aln_long = Alignment::default();\n    {\n        let mut matches = myers.find_all(text, max_dist);\n        let mut matches_long = myers_long.find_all(text, max_dist as usize);\n        matches.alignment(&mut aln);\n        matches_long.alignment(&mut aln_long);\n        let mut end_dist_iter = end_dist.iter();\n        while matches.next_alignment(&mut aln) {\n            assert!(matches_long.next_alignment(&mut aln_long));\n            assert_eq!(aln, aln_long);\n            validate_alignment(&aln, pattern, text);\n            assert!(aln.score as u8 <= max_dist);\n            let (end, dist) = end_dist_iter.next().unwrap();\n            assert_eq!(*end + 1, aln.yend);\n            assert_eq!(*dist, aln.score as u8);\n        }\n        assert!(end_dist_iter.next().is_none());\n        assert!(!matches_long.next_alignment(&mut aln_long));\n    }\n    {\n        let mut matches = myers.find_all_lazy(text, max_dist);\n        let mut matches_long = myers_long.find_all_lazy(text, max_dist as usize);\n        let mut end_dist_iter = end_dist.iter();\n        while let Some((end, dist)) = matches.next() {\n            let (end_long, dist_long) = matches_long.next().unwrap();\n            assert_eq!((end, dist), (end_long, dist_long as u8));\n            assert!(matches.alignment_at(end, &mut aln));\n            assert!(matches_long.alignment_at(end, &mut aln_long));\n            assert_eq!(aln, aln_long);\n            validate_alignment(&aln, pattern, text);\n            assert_eq!(dist, aln.score as u8);\n            assert!(aln.score as u8 <= max_dist);\n            let (end, dist) = end_dist_iter.next().unwrap();\n            assert_eq!(*end + 1, aln.yend);\n            assert_eq!(*dist, aln.score as u8);\n            assert!(!matches.alignment_at(end + 1, &mut aln));\n        }\n        assert!(end_dist_iter.next().is_none());\n    }\n    let mut matches = myers.find_all_lazy(text, u8::max_value());\n    let mut matches_long = myers_long.find_all_lazy(text, u8::max_value() as usize);\n    let mut i = 0;\n    while let Some((end, dist)) = matches.next() {\n        assert_eq!(end, i);\n        let (end_long, dist_long) = matches_long.next().unwrap();\n        assert_eq!((end, dist), (end_long, dist_long as u8));\n        assert!(matches.alignment_at(end, &mut aln));\n        assert!(matches_long.alignment_at(end, &mut aln_long));\n        assert_eq!(aln, aln_long);\n        validate_alignment(&aln, pattern, text);\n        assert_eq!(dist, aln.score as u8);\n        assert!(aln.score as u8 <= u8::max_value());\n        assert!(!matches.alignment_at(end + 1, &mut aln));\n        assert!(!matches_long.alignment_at(end + 1, &mut aln_long));\n        i += 1;\n    }\n}"}
{"test_id": "image-rs-image/image-rs-image-e5580ec/tests-gen/fuzzer_script_tga.inputs.rs::test_92", "code": "fn decode(encoded: &[u8]) -> Vec<u8> {\n        let decoder = JpegDecoder::new(Cursor::new(encoded)).expect(\"Could not decode image\");\n\n        let mut decoded = vec![0; decoder.total_bytes() as usize];\n        decoder\n            .read_image(&mut decoded)\n            .expect(\"Could not decode image\");\n        decoded\n    }", "test": "fn test_92() {\n    let data = [96];\n    let _ = decode(data);\n}"}
{"test_id": "gimli-rs-gimli/gimli-rs-gimli-3947879/tests-gen/debug_info.inputs.rs::test_33", "code": "pub fn next(&mut self) -> Result<Option<RawLocListEntry<R>>> {\n        if self.input.is_empty() {\n            return Ok(None);\n        }\n\n        match RawLocListEntry::parse(&mut self.input, self.encoding, self.format) {\n            Ok(entry) => {\n                if entry.is_none() {\n                    self.input.empty();\n                }\n                Ok(entry)\n            }\n            Err(e) => {\n                self.input.empty();\n                Err(e)\n            }\n        }\n    }", "test": "fn test_33() {\n    let sections = (\n        [],\n        [\n            0, 0, 255, 255, 255, 5, 0, 255, 255, 255, 255, 255, 255, 247, 255, 255,\n        ],\n    );\n    let (debug_abbrev, debug_info) = sections;\n    let debug_abbrev = DebugAbbrev::new(&debug_abbrev, LittleEndian);\n    let debug_info = DebugInfo::new(&debug_info, LittleEndian);\n    let mut units = debug_info.units();\n    while let Ok(Some(unit)) = units.next() {\n        if let Ok(abbrevs) = unit.abbreviations(&debug_abbrev) {\n            let mut cursor = unit.entries(&abbrevs);\n            while let Ok(Some((_delta, entry))) = cursor.next_dfs() {\n                let mut attrs = entry.attrs();\n                while let Ok(Some(_attr)) = attrs.next() {\n                    continue;\n                }\n            }\n        }\n    }\n}"}
{"test_id": "seanmonstar-httparse/seanmonstar-httparse-638848e/tests-gen/parse_request.inputs.rs::test_88", "code": "pub fn parse(&mut self, buf: &'b [u8]) -> Result<usize> {\n        self.parse_with_config(buf, &Default::default())\n    }", "test": "fn test_88() {\n    let data = [130, 10];\n    let mut headers = [httparse::EMPTY_HEADER; 16];\n    let mut req = httparse::Request::new(&mut headers);\n    req.parse(data);\n}"}
{"test_id": "gimli-rs-gimli/gimli-rs-gimli-3947879/tests-gen/debug_abbrev.inputs.rs::test_49", "code": "pub fn get<R: Reader>(\n        &self,\n        debug_abbrev: &DebugAbbrev<R>,\n        offset: DebugAbbrevOffset<R::Offset>,\n    ) -> Result<Arc<Abbreviations>> {\n        if offset.0 != R::Offset::from_u8(0) {\n            return debug_abbrev.abbreviations(offset).map(Arc::new);\n        }\n        self.abbreviations\n            .get(|| debug_abbrev.abbreviations(offset))\n    }", "test": "fn test_49() {\n    let debug_abbrev = [11, 11];\n    let len = debug_abbrev.len();\n    let debug_abbrev = DebugAbbrev::new(&debug_abbrev, LittleEndian);\n    let offset = DebugAbbrevOffset(0);\n    if let Ok(abbreviations) = debug_abbrev.abbreviations(offset) {\n        for i in 1..len {\n            let _ = abbreviations.get(i as u64);\n        }\n    }\n}"}
{"test_id": "marshallpierce-rust-base64/marshallpierce-rust-base64-4ef33cc/tests-gen/roundtrip_no_pad.inputs.rs::test_28", "code": "fn decode<T: AsRef<[u8]>>(&self, input: T) -> Result<Vec<u8>, DecodeError> {\n        fn inner<E>(engine: &E, input_bytes: &[u8]) -> Result<Vec<u8>, DecodeError>\n        where\n            E: Engine + ?Sized,\n        {\n            let estimate = engine.internal_decoded_len_estimate(input_bytes.len());\n            let mut buffer = vec![0; estimate.decoded_len_estimate()];\n\n            let bytes_written = engine\n                .internal_decode(input_bytes, &mut buffer, estimate)?\n                .decoded_len;\n\n            buffer.truncate(bytes_written);\n\n            Ok(buffer)\n        }\n\n        inner(self, input.as_ref())\n    }", "test": "fn test_28() {\n    let data = [41, 138, 63, 0];\n    let config = general_purpose::GeneralPurposeConfig::new()\n        .with_encode_padding(false)\n        .with_decode_padding_mode(engine::DecodePaddingMode::RequireNone);\n    let engine = general_purpose::GeneralPurpose::new(&base64::alphabet::STANDARD, config);\n    let encoded = engine.encode(data);\n    let decoded = engine.decode(&encoded).unwrap();\n    assert_eq!(data, decoded.as_slice());\n}"}
{"test_id": "image-rs-image/image-rs-image-e5580ec/tests-gen/fuzzer_script_exr.inputs.rs::test_47", "code": "fn roundtrip (bytes : & [u8]) -> ImageResult < () > { # [doc = \" Read the file from the specified path into an `Rgba32FImage`.\"] fn read_as_rgba_byte_image (read : impl Read + Seek) -> ImageResult < (u32 , u32 , Vec < u8 >) > { let mut decoder = OpenExrDecoder :: with_alpha_preference (read , Some (true)) ? ; match usize :: try_from (decoder . total_bytes ()) { Ok (decoded_size) if decoded_size <= 256 * 1024 * 1024 => { decoder . set_limits (Limits :: default ()) ? ; let (width , height) = decoder . dimensions () ; let mut buffer = vec ! [0 ; decoded_size] ; decoder . read_image (buffer . as_mut_slice ()) ? ; Ok ((width , height , buffer)) } _ => Err (image :: ImageError :: Limits (image :: error :: LimitError :: from_kind (image :: error :: LimitErrorKind :: InsufficientMemory ,) ,)) , } } # [doc = \" Write an `Rgba32FImage`.\"] # [doc = \" Assumes the writer is buffered. In most cases,\"] # [doc = \" you should wrap your writer in a `BufWriter` for best performance.\"] fn write_rgba_image (write : impl Write + Seek , (width , height , data) : & (u32 , u32 , Vec < u8 >) ,) -> ImageResult < () > { OpenExrEncoder :: new (write) . write_image (data . as_slice () , * width , * height , ColorType :: Rgba32F) } let decoded_image = read_as_rgba_byte_image (Cursor :: new (bytes)) ? ; let mut bytes = Vec :: with_capacity (bytes . len () + 20) ; write_rgba_image (Cursor :: new (& mut bytes) , & decoded_image) ? ; let redecoded_image = read_as_rgba_byte_image (Cursor :: new (bytes)) ? ; assert_eq ! (decoded_image , redecoded_image , \"image was valid but was not reproducible\") ; Ok (()) }", "test": "fn test_47() {\n    let data = [138, 39, 193, 161];\n    let _img = roundtrip(data);\n}"}
{"test_id": "image-rs-image/image-rs-image-e5580ec/tests-gen/fuzzer_script_exr.inputs.rs::test_51", "code": "fn roundtrip (bytes : & [u8]) -> ImageResult < () > { # [doc = \" Read the file from the specified path into an `Rgba32FImage`.\"] fn read_as_rgba_byte_image (read : impl Read + Seek) -> ImageResult < (u32 , u32 , Vec < u8 >) > { let mut decoder = OpenExrDecoder :: with_alpha_preference (read , Some (true)) ? ; match usize :: try_from (decoder . total_bytes ()) { Ok (decoded_size) if decoded_size <= 256 * 1024 * 1024 => { decoder . set_limits (Limits :: default ()) ? ; let (width , height) = decoder . dimensions () ; let mut buffer = vec ! [0 ; decoded_size] ; decoder . read_image (buffer . as_mut_slice ()) ? ; Ok ((width , height , buffer)) } _ => Err (image :: ImageError :: Limits (image :: error :: LimitError :: from_kind (image :: error :: LimitErrorKind :: InsufficientMemory ,) ,)) , } } # [doc = \" Write an `Rgba32FImage`.\"] # [doc = \" Assumes the writer is buffered. In most cases,\"] # [doc = \" you should wrap your writer in a `BufWriter` for best performance.\"] fn write_rgba_image (write : impl Write + Seek , (width , height , data) : & (u32 , u32 , Vec < u8 >) ,) -> ImageResult < () > { OpenExrEncoder :: new (write) . write_image (data . as_slice () , * width , * height , ColorType :: Rgba32F) } let decoded_image = read_as_rgba_byte_image (Cursor :: new (bytes)) ? ; let mut bytes = Vec :: with_capacity (bytes . len () + 20) ; write_rgba_image (Cursor :: new (& mut bytes) , & decoded_image) ? ; let redecoded_image = read_as_rgba_byte_image (Cursor :: new (bytes)) ? ; assert_eq ! (decoded_image , redecoded_image , \"image was valid but was not reproducible\") ; Ok (()) }", "test": "fn test_51() {\n    let data = [26, 186, 187, 26];\n    let _img = roundtrip(data);\n}"}
{"test_id": "BurntSushi-memchr/BurntSushi-memchr-f3fde7a/tests-gen/memchr3.inputs.rs::test_96", "code": "fn count(self) -> usize {\n        self.it.count(|s, e| {\n            // SAFETY: We rely on our generic iterator to return valid start\n            // and end pointers.\n            unsafe { count_raw(self.needle1, s, e) }\n        })\n    }", "test": "fn test_96() {\n    let data = [47, 255, 10];\n    if data.len() < 3 {\n        return;\n    }\n    memchr3_iter(data[0], data[1], data[2], &data[3..]).count();\n}"}
{"test_id": "gimli-rs-gimli/gimli-rs-gimli-3947879/tests-gen/debug_line.inputs.rs::test_65", "code": "pub fn next_row(&mut self) -> Result<Option<(&LineProgramHeader<R, Offset>, &LineRow)>> {\n        // Perform any reset that was required after copying the previous row.\n        self.row.reset(self.program.header());\n\n        loop {\n            // Split the borrow here, rather than calling `self.header()`.\n            match self.instructions.next_instruction(self.program.header()) {\n                Err(err) => return Err(err),\n                Ok(None) => return Ok(None),\n                Ok(Some(instruction)) => {\n                    if self.row.execute(instruction, &mut self.program) {\n                        if self.row.tombstone {\n                            // Perform any reset that was required for the tombstone row.\n                            // Normally this is done when `next_row` is called again, but for\n                            // tombstones we loop immediately.\n                            self.row.reset(self.program.header());\n                        } else {\n                            return Ok(Some((self.header(), &self.row)));\n                        }\n                    }\n                    // Fall through, parse the next instruction, and see if that\n                    // yields a row.\n                }\n            }\n        }\n    }", "test": "fn test_65() {\n    let debug_line = [123, 10];\n    let debug_line = DebugLine::new(&debug_line, LittleEndian);\n    let offset = DebugLineOffset(0);\n    let address_size = 8;\n    if let Ok(program) = debug_line.program(offset, address_size, None, None) {\n        let mut rows = program.rows();\n        while let Ok(Some(row)) = rows.next_row() {\n            let _ = row;\n        }\n    }\n}"}
{"test_id": "cloud-hypervisor-cloud-hypervisor/cloud-hypervisor-cloud-hypervisor-db3a5f3/tests-gen/pmem.inputs.rs::test_54", "code": "pub fn wait_for_epoll_threads(&mut self) {\n        self.common.wait_for_epoll_threads();\n    }", "test": "fn test_54() {\n    let bytes = [10, 145];\n    if bytes.len() < QUEUE_DATA_SIZE || bytes.len() > (QUEUE_DATA_SIZE + MEM_SIZE) {\n        return;\n    }\n    let mut pmem = create_dummy_pmem();\n    let queue_data = &bytes[..QUEUE_DATA_SIZE];\n    let mem_bytes = &bytes[QUEUE_DATA_SIZE..];\n    let q = setup_virt_queue(queue_data.try_into().unwrap());\n    let mem = GuestMemoryMmap::from_ranges(&[(GuestAddress(0), MEM_SIZE)]).unwrap();\n    if mem.write_slice(mem_bytes, GuestAddress(0 as u64)).is_err() {\n        return;\n    }\n    let guest_memory = GuestMemoryAtomic::new(mem);\n    let evt = EventFd::new(0).unwrap();\n    let queue_evt = unsafe { EventFd::from_raw_fd(libc::dup(evt.as_raw_fd())) };\n    queue_evt.write(1).unwrap();\n    pmem.activate(\n        guest_memory,\n        Arc::new(NoopVirtioInterrupt {}),\n        vec![(0, q, evt)],\n    )\n    .ok();\n    pmem.wait_for_epoll_threads();\n}"}
{"test_id": "image-rs-image-png/image-rs-image-png-e113d76/tests-gen/decode.inputs.rs::test_53", "code": "fn png_decode (data : & [u8]) -> Result < (Option < png :: OutputInfo > , Vec < u8 >) , () > { let limits = png :: Limits { bytes : 1 << 16 } ; let decoder = png :: Decoder :: new_with_limits (data , limits) ; let mut reader = decoder . read_info () . map_err (| _ | ()) ? ; if reader . info () . raw_bytes () > 5_000_000 { return Err (()) ; } let mut img_data = vec ! [0u8 ; reader . info () . raw_bytes ()] ; let mut last_info = None ; while let Ok (info) = reader . next_frame (& mut img_data) { last_info = Some (info) ; } Ok ((last_info , img_data)) }", "test": "fn test_53() {\n    let data = [\n        137, 80, 78, 71, 13, 10, 26, 10, 0, 0, 0, 13, 73, 72, 68, 82, 0, 0, 0, 0, 0, 0, 0, 2, 1, 3,\n        0, 0, 1, 138, 120, 182, 87, 0, 0, 0, 10, 73, 68, 65, 84, 78,\n    ];\n    let _ = png_decode(&data);\n}"}
{"test_id": "XAMPPRocky-tokei/XAMPPRocky-tokei-92ddc2e/tests-gen/parse_from_slice_panic.inputs.rs::test_26", "code": "pub fn parse_from_slice (input : FuzzInput , check_total : bool) { let config = & Config { treat_doc_strings_as_comments : Some (input . treat_doc_strings_as_comments) , columns : None , hidden : None , no_ignore : None , no_ignore_parent : None , no_ignore_dot : None , no_ignore_vcs : None , sort : None , types : None , for_each_fn : None , } ; let stats = input . lang . parse_from_slice (input . data , config) ; if check_total { if let Ok (s) = str :: from_utf8 (input . data) { assert ! (stats . lines () <= s . lines () . count () , \"{} got more total lines ({}) than str::lines ({}). Code: {}, Comments: {}, Blanks: {}. treat_doc_strings_as_comments: {}. File contents (as UTF-8):\\n{}\" , input . lang . name () , stats . lines () , s . lines () . count () , stats . code , stats . comments , input . treat_doc_strings_as_comments , stats . blanks , s) } ; } }", "test": "fn test_26() {\n    let data = FuzzInput {\n        lang: ABNF,\n        treat_doc_strings_as_comments: false,\n        data: [0, 0, 0, 0, 0, 0, 0, 13, 88],\n    };\n    parse_from_slice(data, false);\n}"}
{"test_id": "BurntSushi-memchr/BurntSushi-memchr-f3fde7a/tests-gen/memchr2.inputs.rs::test_9", "code": "fn count(self) -> usize {\n        self.it.count(|s, e| {\n            // SAFETY: We rely on our generic iterator to return valid start\n            // and end pointers.\n            unsafe { count_raw(self.needle1, s, e) }\n        })\n    }", "test": "fn test_9() {\n    let data = [148, 10, 175];\n    if data.len() < 2 {\n        return;\n    }\n    memchr2_iter(data[0], data[1], &data[2..]).count();\n}"}
{"test_id": "bodil-im-rs/bodil-im-rs-2afaf54/tests-gen/hashset.inputs.rs::test_14", "code": "pub fn remove<BA>(&mut self, a: &BA) -> Option<A>\n    where\n        BA: Hash + Eq + ?Sized,\n        A: Borrow<BA>,\n    {\n        let root = PoolRef::make_mut(&self.pool.0, &mut self.root);\n        let result = root.remove(&self.pool.0, hash_key(&*self.hasher, a), 0, a);\n        if result.is_some() {\n            self.size -= 1;\n        }\n        result.map(|v| v.0)\n    }", "test": "fn test_14() {\n    let actions = [Remove(18379471549980737546)];\n    let mut set = HashSet::new();\n    let mut nat = NatSet::new();\n    for action in actions {\n        match action {\n            Action::Insert(value) => {\n                let len = nat.len() + if nat.contains(&value) { 0 } else { 1 };\n                nat.insert(value);\n                set.insert(value);\n                assert_eq!(len, set.len());\n            }\n            Action::Remove(value) => {\n                let len = nat.len() - if nat.contains(&value) { 1 } else { 0 };\n                nat.remove(&value);\n                set.remove(&value);\n                assert_eq!(len, set.len());\n            }\n        }\n        assert_eq!(nat.len(), set.len());\n        assert_eq!(HashSet::from(nat.clone()), set);\n    }\n}"}
{"test_id": "cloud-hypervisor-cloud-hypervisor/cloud-hypervisor-cloud-hypervisor-db3a5f3/tests-gen/iommu.inputs.rs::test_53", "code": "pub fn wait_for_epoll_threads(&mut self) {\n        self.common.wait_for_epoll_threads();\n    }", "test": "fn test_53() {\n    let bytes = [58, 58, 249, 26];\n    if bytes.len() < (QUEUE_DATA_SIZE + QUEUE_BYTES_SIZE)\n        || bytes.len() > (QUEUE_DATA_SIZE + QUEUE_BYTES_SIZE + MEM_SIZE)\n    {\n        return;\n    }\n    let (mut iommu, _) = virtio_devices::Iommu::new(\n        \"fuzzer_iommu\".to_owned(),\n        SeccompAction::Allow,\n        EventFd::new(EFD_NONBLOCK).unwrap(),\n        ((MEM_SIZE - IOVA_SPACE_SIZE) as u64, (MEM_SIZE - 1) as u64),\n        None,\n    )\n    .unwrap();\n    let queue_data = &bytes[..QUEUE_DATA_SIZE];\n    let queue_bytes = &bytes[QUEUE_DATA_SIZE..QUEUE_DATA_SIZE + QUEUE_BYTES_SIZE];\n    let mem_bytes = &bytes[QUEUE_DATA_SIZE + QUEUE_BYTES_SIZE..];\n    let request_queue = setup_virt_queue(queue_data.try_into().unwrap());\n    let _event_queue = setup_virt_queue(queue_data.try_into().unwrap());\n    let mem = GuestMemoryMmap::from_ranges(&[\n        (GuestAddress(0), MEM_SIZE),\n        (GuestAddress(DESC_TABLE_ADDR), QUEUE_BYTES_SIZE),\n    ])\n    .unwrap();\n    if mem\n        .write_slice(queue_bytes, GuestAddress(DESC_TABLE_ADDR))\n        .is_err()\n    {\n        return;\n    }\n    if mem.write_slice(mem_bytes, GuestAddress(0 as u64)).is_err() {\n        return;\n    }\n    let guest_memory = GuestMemoryAtomic::new(mem);\n    let request_evt = EventFd::new(0).unwrap();\n    let request_queue_evt = unsafe { EventFd::from_raw_fd(libc::dup(request_evt.as_raw_fd())) };\n    let _event_evt = EventFd::new(0).unwrap();\n    request_queue_evt.write(1).unwrap();\n    iommu\n        .activate(\n            guest_memory,\n            Arc::new(NoopVirtioInterrupt {}),\n            vec![\n                (0, request_queue, request_evt),\n                (0, _event_queue, _event_evt),\n            ],\n        )\n        .ok();\n    iommu.wait_for_epoll_threads();\n}"}
{"test_id": "gimli-rs-gimli/gimli-rs-gimli-3947879/tests-gen/debug_info.inputs.rs::test_24", "code": "pub fn next(&mut self) -> Result<Option<RawLocListEntry<R>>> {\n        if self.input.is_empty() {\n            return Ok(None);\n        }\n\n        match RawLocListEntry::parse(&mut self.input, self.encoding, self.format) {\n            Ok(entry) => {\n                if entry.is_none() {\n                    self.input.empty();\n                }\n                Ok(entry)\n            }\n            Err(e) => {\n                self.input.empty();\n                Err(e)\n            }\n        }\n    }", "test": "fn test_24() {\n    let sections = (\n        [],\n        [\n            224, 26, 239, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,\n        ],\n    );\n    let (debug_abbrev, debug_info) = sections;\n    let debug_abbrev = DebugAbbrev::new(&debug_abbrev, LittleEndian);\n    let debug_info = DebugInfo::new(&debug_info, LittleEndian);\n    let mut units = debug_info.units();\n    while let Ok(Some(unit)) = units.next() {\n        if let Ok(abbrevs) = unit.abbreviations(&debug_abbrev) {\n            let mut cursor = unit.entries(&abbrevs);\n            while let Ok(Some((_delta, entry))) = cursor.next_dfs() {\n                let mut attrs = entry.attrs();\n                while let Ok(Some(_attr)) = attrs.next() {\n                    continue;\n                }\n            }\n        }\n    }\n}"}
{"test_id": "image-rs-image-png/image-rs-image-png-e113d76/tests-gen/buf_independent.inputs.rs::test_86", "code": "fn new (inner : R , cap : usize) -> Self { SmalBuf { inner , cap } }", "test": "fn test_86() {\n    let data = [1, 0, 0, 0];\n    let limits = png::Limits { bytes: 1 << 16 };\n    let reference = png::Decoder::new_with_limits(data, limits);\n    let smal = png::Decoder::new_with_limits(SmalBuf::new(data, 1), limits);\n    let _ = png_compare(reference, smal);\n}"}
{"test_id": "rust-bakery-nom/rust-bakery-nom-869f897/tests-gen/fuzz_arithmetic.inputs.rs::test_81", "code": "fn factor(i: &str) -> IResult<&str, Expr> {\n  alt((\n    map(\n      map_res(delimited(multispace, digit, multispace), FromStr::from_str),\n      Expr::Value,\n    ),\n    parens,\n  ))(i)\n}", "test": "fn test_81() {\n  let data = [10, 10, 10, 178];\n  reset();\n  let temp = match str::from_utf8(data) {\n    Ok(v) => factor(v),\n    Err(e) => factor(\"2\"),\n  };\n}"}
{"test_id": "cloud-hypervisor-cloud-hypervisor/cloud-hypervisor-cloud-hypervisor-db3a5f3/tests-gen/cmos.inputs.rs::test_85", "code": "fn write(&mut self, _base: u64, offset: u64, data: &[u8]) -> Option<Arc<Barrier>> {\n        if data.len() != 1 {\n            warn!(\"Invalid write size on CMOS device: {}\", data.len());\n            return None;\n        }\n\n        match offset {\n            INDEX_OFFSET => self.index = data[0],\n            DATA_OFFSET => {\n                if self.index == 0x8f && data[0] == 0 {\n                    info!(\"CMOS reset\");\n                    self.reset_evt.write(1).unwrap();\n                    if let Some(vcpus_kill_signalled) = self.vcpus_kill_signalled.take() {\n                        // Spin until we are sure the reset_evt has been handled and that when\n                        // we return from the KVM_RUN we will exit rather than re-enter the guest.\n                        while !vcpus_kill_signalled.load(Ordering::SeqCst) {\n                            // This is more effective than thread::yield_now() at\n                            // avoiding a priority inversion with the VMM thread\n                            thread::sleep(std::time::Duration::from_millis(1));\n                        }\n                    }\n                } else {\n                    self.data[(self.index & INDEX_MASK) as usize] = data[0]\n                }\n            }\n            o => warn!(\"bad write offset on CMOS device: {}\", o),\n        };\n        None\n    }", "test": "fn test_85() {\n    let bytes = [10];\n    if bytes.len() < 16 {\n        return;\n    }\n    let mut below_4g = [0u8; 8];\n    let mut above_4g = [0u8; 8];\n    below_4g.copy_from_slice(&bytes[0..8]);\n    above_4g.copy_from_slice(&bytes[8..16]);\n    let mut cmos = Cmos::new(\n        u64::from_le_bytes(below_4g),\n        u64::from_le_bytes(above_4g),\n        EventFd::new(EFD_NONBLOCK).unwrap(),\n        None,\n    );\n    let mut i = 16;\n    while i < bytes.len() {\n        let read = bytes.get(i).unwrap_or(&0) % 2 == 0;\n        i += 1;\n        if read {\n            let offset = (bytes.get(i).unwrap_or(&0) % 2) as u64;\n            i += 1;\n            let mut out_bytes = vec![0];\n            cmos.read(0, offset, &mut out_bytes);\n        } else {\n            let offset = (bytes.get(i).unwrap_or(&0) % 2) as u64;\n            i += 1;\n            let data = vec![*bytes.get(i).unwrap_or(&0)];\n            i += 1;\n            cmos.write(0, offset, &data);\n        }\n    }\n}"}
{"test_id": "image-rs-image-png/image-rs-image-png-e113d76/tests-gen/roundtrip.inputs.rs::test_44", "code": "fn encode_png < 'a > (width : u8 , filter : u8 , compression : u8 , color_type : u8 , raw_bit_depth : u8 , raw_palette : & 'a [u8] , data : & 'a [u8]) -> Option < (& 'a [u8] , Vec < u8 >) > { let width = width as u32 ; if width == 0 { return None } ; let filter = FilterType :: from_u8 (filter) ? ; let bit_depth = BitDepth :: from_u8 (raw_bit_depth) ? ; let max_palette_length = 3 * u32 :: pow (2 , raw_bit_depth as u32) as usize ; let mut palette = raw_palette ; let color_type = ColorType :: from_u8 (color_type) ? ; if let ColorType :: Indexed = color_type { if raw_palette . len () > max_palette_length { palette = & raw_palette [.. max_palette_length] ; } } let compression = match compression { 0 => png :: Compression :: Default , 1 => png :: Compression :: Fast , 2 => png :: Compression :: Best , 3 => png :: Compression :: Huffman , 4 => png :: Compression :: Rle , _ => return None , } ; let bytes_per_row = raw_row_length_from_width (bit_depth , color_type , width) - 1 ; let height = data . len () / bytes_per_row ; let total_bytes = bytes_per_row * height ; let data_to_encode = & data [.. total_bytes] ; let mut output : Vec < u8 > = Vec :: new () ; { let mut encoder = png :: Encoder :: new (& mut output , width , height as u32) ; encoder . set_depth (bit_depth) ; encoder . set_color (color_type) ; encoder . set_filter (filter) ; encoder . set_compression (compression) ; if let ColorType :: Indexed = color_type { encoder . set_palette (palette) } let mut writer = encoder . write_header () . ok () ? ; writer . write_image_data (data_to_encode) . expect (\"Encoding failed\") ; } Some ((data_to_encode , output)) }", "test": "fn test_44() {\n    let data = (10, 10, 30, 40, 10, [10, 30], []);\n    if let Some((raw, encoded)) =\n        encode_png(data.0, data.1, data.2, data.3, data.4, &data.5, &data.6)\n    {\n        let (_info, raw_decoded) = decode_png(&encoded);\n        let raw_decoded = &raw_decoded[..raw.len()];\n        assert_eq!(raw, raw_decoded);\n    }\n}"}
{"test_id": "cloud-hypervisor-cloud-hypervisor/cloud-hypervisor-cloud-hypervisor-db3a5f3/tests-gen/balloon.inputs.rs::test_23", "code": "pub fn wait_for_epoll_threads(&mut self) {\n        self.common.wait_for_epoll_threads();\n    }", "test": "fn test_23() {\n    let bytes = [37, 146];\n    if bytes.len() < QUEUE_DATA_SIZE * QUEUE_NUM\n        || bytes.len() > (QUEUE_DATA_SIZE * QUEUE_NUM + MEM_SIZE)\n    {\n        return;\n    }\n    let mut balloon = virtio_devices::Balloon::new(\n        \"fuzzer_balloon\".to_owned(),\n        BALLOON_SIZE,\n        true,\n        true,\n        SeccompAction::Allow,\n        EventFd::new(EFD_NONBLOCK).unwrap(),\n        None,\n    )\n    .unwrap();\n    let queue_data = &bytes[..QUEUE_DATA_SIZE * QUEUE_NUM];\n    let mem_bytes = &bytes[QUEUE_DATA_SIZE * QUEUE_NUM..];\n    let mem = GuestMemoryMmap::from_ranges(&[(GuestAddress(0), MEM_SIZE)]).unwrap();\n    if mem.write_slice(mem_bytes, GuestAddress(0 as u64)).is_err() {\n        return;\n    }\n    let guest_memory = GuestMemoryAtomic::new(mem);\n    let mut queues = setup_virt_queues(\n        &[\n            &queue_data[..QUEUE_DATA_SIZE].try_into().unwrap(),\n            &queue_data[QUEUE_DATA_SIZE..QUEUE_DATA_SIZE * 2]\n                .try_into()\n                .unwrap(),\n            &queue_data[QUEUE_DATA_SIZE * 2..QUEUE_DATA_SIZE * 3]\n                .try_into()\n                .unwrap(),\n        ],\n        0,\n    );\n    let inflate_q = queues.remove(0);\n    let inflate_evt = EventFd::new(0).unwrap();\n    let inflate_queue_evt = unsafe { EventFd::from_raw_fd(libc::dup(inflate_evt.as_raw_fd())) };\n    let deflate_q = queues.remove(0);\n    let deflate_evt = EventFd::new(0).unwrap();\n    let deflate_queue_evt = unsafe { EventFd::from_raw_fd(libc::dup(deflate_evt.as_raw_fd())) };\n    let reporting_q = queues.remove(0);\n    let reporting_evt = EventFd::new(0).unwrap();\n    let reporting_queue_evt = unsafe { EventFd::from_raw_fd(libc::dup(reporting_evt.as_raw_fd())) };\n    inflate_queue_evt.write(1).unwrap();\n    deflate_queue_evt.write(1).unwrap();\n    reporting_queue_evt.write(1).unwrap();\n    balloon\n        .activate(\n            guest_memory,\n            Arc::new(NoopVirtioInterrupt {}),\n            vec![\n                (0, inflate_q, inflate_evt),\n                (1, deflate_q, deflate_evt),\n                (2, reporting_q, reporting_evt),\n            ],\n        )\n        .ok();\n    balloon.wait_for_epoll_threads();\n}"}
{"test_id": "image-rs-image/image-rs-image-e5580ec/tests-gen/fuzzer_script_tga.inputs.rs::test_83", "code": "fn decode(encoded: &[u8]) -> Vec<u8> {\n        let decoder = JpegDecoder::new(Cursor::new(encoded)).expect(\"Could not decode image\");\n\n        let mut decoded = vec![0; decoder.total_bytes() as usize];\n        decoder\n            .read_image(&mut decoded)\n            .expect(\"Could not decode image\");\n        decoded\n    }", "test": "fn test_83() {\n    let data = [10, 10, 10];\n    let _ = decode(data);\n}"}
{"test_id": "marshallpierce-rust-base64/marshallpierce-rust-base64-4ef33cc/tests-gen/decode_random.inputs.rs::test_49", "code": "fn decode<T: AsRef<[u8]>>(&self, input: T) -> Result<Vec<u8>, DecodeError> {\n        fn inner<E>(engine: &E, input_bytes: &[u8]) -> Result<Vec<u8>, DecodeError>\n        where\n            E: Engine + ?Sized,\n        {\n            let estimate = engine.internal_decoded_len_estimate(input_bytes.len());\n            let mut buffer = vec![0; estimate.decoded_len_estimate()];\n\n            let bytes_written = engine\n                .internal_decode(input_bytes, &mut buffer, estimate)?\n                .decoded_len;\n\n            buffer.truncate(bytes_written);\n\n            Ok(buffer)\n        }\n\n        inner(self, input.as_ref())\n    }", "test": "fn test_49() {\n    let data = [208, 223];\n    let engine = utils::random_engine(data);\n    let _ = engine.decode(data);\n}"}
{"test_id": "uutils-coreutils/uutils-coreutils-73b7c46/tests-gen/fuzz_parse_size.inputs.rs::test_95", "code": "pub fn parse_size(size: &str) -> Result<u64, ParseSizeError> {\n    Parser::default().parse(size)\n}", "test": "fn test_95() {\n    let data = [10, 14, 10, 10];\n    if let Ok(s) = std::str::from_utf8(data) {\n        _ = parse_size(s);\n    }\n}"}
{"test_id": "cloud-hypervisor-cloud-hypervisor/cloud-hypervisor-cloud-hypervisor-db3a5f3/tests-gen/console.inputs.rs::test_57", "code": "pub fn wait_for_epoll_threads(&mut self) {\n        self.common.wait_for_epoll_threads();\n    }", "test": "fn test_57() {\n    let bytes = [10, 45];\n    if bytes.len() < (QUEUE_DATA_SIZE + QUEUE_BYTES_SIZE) * QUEUE_NUM + CONSOLE_INPUT_SIZE\n        || bytes.len()\n            > (QUEUE_DATA_SIZE + QUEUE_BYTES_SIZE) * QUEUE_NUM + CONSOLE_INPUT_SIZE + MEM_SIZE\n    {\n        return;\n    }\n    let (pipe_rx, mut pipe_tx) = create_pipe().unwrap();\n    let output = unsafe {\n        File::from_raw_fd(\n            memfd_create(&std::ffi::CString::new(\"fuzz_console_output\").unwrap()).unwrap(),\n        )\n    };\n    let endpoint = virtio_devices::Endpoint::FilePair(output, pipe_rx);\n    let (mut console, _) = virtio_devices::Console::new(\n        \"fuzzer_console\".to_owned(),\n        endpoint,\n        None,\n        false,\n        SeccompAction::Allow,\n        EventFd::new(EFD_NONBLOCK).unwrap(),\n        None,\n    )\n    .unwrap();\n    let console_input_bytes = &bytes[..CONSOLE_INPUT_SIZE];\n    let queue_data = &bytes[CONSOLE_INPUT_SIZE..CONSOLE_INPUT_SIZE + QUEUE_DATA_SIZE * QUEUE_NUM];\n    let queue_bytes = &bytes[CONSOLE_INPUT_SIZE + QUEUE_DATA_SIZE * QUEUE_NUM\n        ..CONSOLE_INPUT_SIZE + (QUEUE_DATA_SIZE + QUEUE_BYTES_SIZE) * QUEUE_NUM];\n    let mem_bytes = &bytes[CONSOLE_INPUT_SIZE + (QUEUE_DATA_SIZE + QUEUE_BYTES_SIZE) * QUEUE_NUM..];\n    let mut queues = setup_virt_queues(\n        &[\n            &queue_data[..QUEUE_DATA_SIZE].try_into().unwrap(),\n            &queue_data[QUEUE_DATA_SIZE..QUEUE_DATA_SIZE * 2]\n                .try_into()\n                .unwrap(),\n        ],\n        BASE_VIRT_QUEUE_ADDR,\n    );\n    let mem = GuestMemoryMmap::from_ranges(&[\n        (GuestAddress(0), MEM_SIZE),\n        (GuestAddress(BASE_VIRT_QUEUE_ADDR), queue_bytes.len()),\n    ])\n    .unwrap();\n    if mem\n        .write_slice(queue_bytes, GuestAddress(BASE_VIRT_QUEUE_ADDR))\n        .is_err()\n    {\n        return;\n    }\n    if mem.write_slice(mem_bytes, GuestAddress(0 as u64)).is_err() {\n        return;\n    }\n    let guest_memory = GuestMemoryAtomic::new(mem);\n    let input_queue = queues.remove(0);\n    let input_evt = EventFd::new(0).unwrap();\n    let input_queue_evt = unsafe { EventFd::from_raw_fd(libc::dup(input_evt.as_raw_fd())) };\n    let output_queue = queues.remove(0);\n    let output_evt = EventFd::new(0).unwrap();\n    let output_queue_evt = unsafe { EventFd::from_raw_fd(libc::dup(output_evt.as_raw_fd())) };\n    input_queue_evt.write(1).unwrap();\n    output_queue_evt.write(1).unwrap();\n    pipe_tx.write_all(console_input_bytes).unwrap();\n    console\n        .activate(\n            guest_memory,\n            Arc::new(NoopVirtioInterrupt {}),\n            vec![(0, input_queue, input_evt), (1, output_queue, output_evt)],\n        )\n        .unwrap();\n    console.wait_for_epoll_threads();\n}"}
{"test_id": "quinn-rs-quinn/quinn-rs-quinn-83e4f46/tests-gen/packet.inputs.rs::test_82", "code": "fn to_vec(params: &TransportParameters) -> Vec<u8> {\n    let mut bytes = Vec::new();\n    params.write(&mut bytes);\n    bytes\n}", "test": "fn test_82() {\n    let data = PacketParams {\n        local_cid_len: 20,\n        buf: b\"\",\n        grease_quic_bit: false,\n    };\n    let len = data.buf.len();\n    let supported_versions = DEFAULT_SUPPORTED_VERSIONS.to_vec();\n    if let Ok(decoded) = PartialDecode::new(\n        data.buf,\n        data.local_cid_len,\n        &supported_versions,\n        data.grease_quic_bit,\n    ) {\n        match decoded.1 {\n            Some(x) => assert_eq!(len, decoded.0.len() + x.len()),\n            None => assert_eq!(len, decoded.0.len()),\n        }\n    }\n}"}
{"test_id": "cloud-hypervisor-cloud-hypervisor/cloud-hypervisor-cloud-hypervisor-db3a5f3/tests-gen/iommu.inputs.rs::test_21", "code": "pub fn wait_for_epoll_threads(&mut self) {\n        self.common.wait_for_epoll_threads();\n    }", "test": "fn test_21() {\n    let bytes = [58, 6, 10];\n    if bytes.len() < (QUEUE_DATA_SIZE + QUEUE_BYTES_SIZE)\n        || bytes.len() > (QUEUE_DATA_SIZE + QUEUE_BYTES_SIZE + MEM_SIZE)\n    {\n        return;\n    }\n    let (mut iommu, _) = virtio_devices::Iommu::new(\n        \"fuzzer_iommu\".to_owned(),\n        SeccompAction::Allow,\n        EventFd::new(EFD_NONBLOCK).unwrap(),\n        ((MEM_SIZE - IOVA_SPACE_SIZE) as u64, (MEM_SIZE - 1) as u64),\n        None,\n    )\n    .unwrap();\n    let queue_data = &bytes[..QUEUE_DATA_SIZE];\n    let queue_bytes = &bytes[QUEUE_DATA_SIZE..QUEUE_DATA_SIZE + QUEUE_BYTES_SIZE];\n    let mem_bytes = &bytes[QUEUE_DATA_SIZE + QUEUE_BYTES_SIZE..];\n    let request_queue = setup_virt_queue(queue_data.try_into().unwrap());\n    let _event_queue = setup_virt_queue(queue_data.try_into().unwrap());\n    let mem = GuestMemoryMmap::from_ranges(&[\n        (GuestAddress(0), MEM_SIZE),\n        (GuestAddress(DESC_TABLE_ADDR), QUEUE_BYTES_SIZE),\n    ])\n    .unwrap();\n    if mem\n        .write_slice(queue_bytes, GuestAddress(DESC_TABLE_ADDR))\n        .is_err()\n    {\n        return;\n    }\n    if mem.write_slice(mem_bytes, GuestAddress(0 as u64)).is_err() {\n        return;\n    }\n    let guest_memory = GuestMemoryAtomic::new(mem);\n    let request_evt = EventFd::new(0).unwrap();\n    let request_queue_evt = unsafe { EventFd::from_raw_fd(libc::dup(request_evt.as_raw_fd())) };\n    let _event_evt = EventFd::new(0).unwrap();\n    request_queue_evt.write(1).unwrap();\n    iommu\n        .activate(\n            guest_memory,\n            Arc::new(NoopVirtioInterrupt {}),\n            vec![\n                (0, request_queue, request_evt),\n                (0, _event_queue, _event_evt),\n            ],\n        )\n        .ok();\n    iommu.wait_for_epoll_threads();\n}"}
{"test_id": "gimli-rs-gimli/gimli-rs-gimli-3947879/tests-gen/eh_frame_hdr.inputs.rs::test_45", "code": "fn parse<R: Reader>(input: &mut R) -> Result<Abbreviations> {\n        let mut abbrevs = Abbreviations::empty();\n\n        while let Some(abbrev) = Abbreviation::parse(input)? {\n            if abbrevs.insert(abbrev).is_err() {\n                return Err(Error::DuplicateAbbreviationCode);\n            }\n        }\n\n        Ok(abbrevs)\n    }", "test": "fn test_45() {\n    let eh_frame_hdr = [0, 10];\n    let eh_frame_hdr = EhFrameHdr::new(eh_frame_hdr, LittleEndian);\n    let bases = BaseAddresses::default()\n        .set_eh_frame(0)\n        .set_eh_frame_hdr(0)\n        .set_text(0)\n        .set_got(0);\n    let address_size = 8;\n    let _ = eh_frame_hdr.parse(&bases, address_size);\n}"}
{"test_id": "gimli-rs-gimli/gimli-rs-gimli-3947879/tests-gen/eh_frame.inputs.rs::test_41", "code": "pub fn next_row(&mut self) -> Result<Option<(&LineProgramHeader<R, Offset>, &LineRow)>> {\n        // Perform any reset that was required after copying the previous row.\n        self.row.reset(self.program.header());\n\n        loop {\n            // Split the borrow here, rather than calling `self.header()`.\n            match self.instructions.next_instruction(self.program.header()) {\n                Err(err) => return Err(err),\n                Ok(None) => return Ok(None),\n                Ok(Some(instruction)) => {\n                    if self.row.execute(instruction, &mut self.program) {\n                        if self.row.tombstone {\n                            // Perform any reset that was required for the tombstone row.\n                            // Normally this is done when `next_row` is called again, but for\n                            // tombstones we loop immediately.\n                            self.row.reset(self.program.header());\n                        } else {\n                            return Ok(Some((self.header(), &self.row)));\n                        }\n                    }\n                    // Fall through, parse the next instruction, and see if that\n                    // yields a row.\n                }\n            }\n        }\n    }", "test": "fn test_41() {\n    let eh_frame = [41, 206, 96, 206];\n    let eh_frame = EhFrame::new(&eh_frame, LittleEndian);\n    let mut ctx = Box::new(UnwindContext::new());\n    let bases = BaseAddresses::default()\n        .set_eh_frame(0)\n        .set_eh_frame_hdr(0)\n        .set_text(0)\n        .set_got(0);\n    let mut entries = eh_frame.entries(&bases);\n    while let Ok(Some(entry)) = entries.next() {\n        match entry {\n            CieOrFde::Cie(_) => continue,\n            CieOrFde::Fde(partial) => {\n                if let Ok(fde) = partial.parse(EhFrame::cie_from_offset) {\n                    if let Ok(mut table) = fde.rows(&eh_frame, &bases, &mut ctx) {\n                        while let Ok(Some(_row)) = table.next_row() {\n                            continue;\n                        }\n                    }\n                }\n            }\n        };\n    }\n}"}
{"test_id": "marshallpierce-rust-base64/marshallpierce-rust-base64-4ef33cc/tests-gen/decode_random.inputs.rs::test_96", "code": "fn decode<T: AsRef<[u8]>>(&self, input: T) -> Result<Vec<u8>, DecodeError> {\n        fn inner<E>(engine: &E, input_bytes: &[u8]) -> Result<Vec<u8>, DecodeError>\n        where\n            E: Engine + ?Sized,\n        {\n            let estimate = engine.internal_decoded_len_estimate(input_bytes.len());\n            let mut buffer = vec![0; estimate.decoded_len_estimate()];\n\n            let bytes_written = engine\n                .internal_decode(input_bytes, &mut buffer, estimate)?\n                .decoded_len;\n\n            buffer.truncate(bytes_written);\n\n            Ok(buffer)\n        }\n\n        inner(self, input.as_ref())\n    }", "test": "fn test_96() {\n    let data = [63];\n    let engine = utils::random_engine(data);\n    let _ = engine.decode(data);\n}"}
{"test_id": "BurntSushi-memchr/BurntSushi-memchr-f3fde7a/tests-gen/memrmem.inputs.rs::test_84", "code": "pub fn count(&self, haystack: &[u8]) -> usize {\n        // SAFETY: All of our pointers are derived directly from a borrowed\n        // slice, which is guaranteed to be valid.\n        unsafe {\n            let start = haystack.as_ptr();\n            let end = start.add(haystack.len());\n            self.count_raw(start, end)\n        }\n    }", "test": "fn test_84() {\n    let data = [10, 8];\n    if data.len() < 2 {\n        return;\n    }\n    let split = std::cmp::max(data[0] as usize, 1) % data.len() as usize;\n    let (needle, haystack) = (&data[..split], &data[split..]);\n    memmem::rfind_iter(haystack, needle).count();\n}"}
{"test_id": "XAMPPRocky-tokei/XAMPPRocky-tokei-92ddc2e/tests-gen/parse_from_slice_total.inputs.rs::test_52", "code": "pub fn parse_from_slice (input : FuzzInput , check_total : bool) { let config = & Config { treat_doc_strings_as_comments : Some (input . treat_doc_strings_as_comments) , columns : None , hidden : None , no_ignore : None , no_ignore_parent : None , no_ignore_dot : None , no_ignore_vcs : None , sort : None , types : None , for_each_fn : None , } ; let stats = input . lang . parse_from_slice (input . data , config) ; if check_total { if let Ok (s) = str :: from_utf8 (input . data) { assert ! (stats . lines () <= s . lines () . count () , \"{} got more total lines ({}) than str::lines ({}). Code: {}, Comments: {}, Blanks: {}. treat_doc_strings_as_comments: {}. File contents (as UTF-8):\\n{}\" , input . lang . name () , stats . lines () , s . lines () . count () , stats . code , stats . comments , input . treat_doc_strings_as_comments , stats . blanks , s) } ; } }", "test": "fn test_52() {\n    let data = FuzzInput {\n        lang: Zsh,\n        treat_doc_strings_as_comments: true,\n        data: [56, 10, 255, 255, 61, 255, 255, 255],\n    };\n    parse_from_slice(data, true);\n}"}
{"test_id": "gfx-rs-naga/gfx-rs-naga-92e41b4/tests-gen/wgsl_parser.inputs.rs::test_96", "code": "pub fn parse(mut self) -> Result<crate::Module, Error> {\n        let mut module = {\n            if self.next()? != spirv::MAGIC_NUMBER {\n                return Err(Error::InvalidHeader);\n            }\n            let version_raw = self.next()?;\n            let generator = self.next()?;\n            let _bound = self.next()?;\n            let _schema = self.next()?;\n            log::info!(\"Generated by {} version {:x}\", generator, version_raw);\n            crate::Module::default()\n        };\n\n        self.layouter.clear();\n        self.dummy_functions = Arena::new();\n        self.lookup_function.clear();\n        self.function_call_graph.clear();\n\n        loop {\n            use spirv::Op;\n\n            let inst = match self.next_inst() {\n                Ok(inst) => inst,\n                Err(Error::IncompleteData) => break,\n                Err(other) => return Err(other),\n            };\n            log::debug!(\"\\t{:?} [{}]\", inst.op, inst.wc);\n\n            match inst.op {\n                Op::Capability => self.parse_capability(inst),\n                Op::Extension => self.parse_extension(inst),\n                Op::ExtInstImport => self.parse_ext_inst_import(inst),\n                Op::MemoryModel => self.parse_memory_model(inst),\n                Op::EntryPoint => self.parse_entry_point(inst),\n                Op::ExecutionMode => self.parse_execution_mode(inst),\n                Op::String => self.parse_string(inst),\n                Op::Source => self.parse_source(inst),\n                Op::SourceExtension => self.parse_source_extension(inst),\n                Op::Name => self.parse_name(inst),\n                Op::MemberName => self.parse_member_name(inst),\n                Op::ModuleProcessed => self.parse_module_processed(inst),\n                Op::Decorate => self.parse_decorate(inst),\n                Op::MemberDecorate => self.parse_member_decorate(inst),\n                Op::TypeVoid => self.parse_type_void(inst),\n                Op::TypeBool => self.parse_type_bool(inst, &mut module),\n                Op::TypeInt => self.parse_type_int(inst, &mut module),\n                Op::TypeFloat => self.parse_type_float(inst, &mut module),\n                Op::TypeVector => self.parse_type_vector(inst, &mut module),\n                Op::TypeMatrix => self.parse_type_matrix(inst, &mut module),\n                Op::TypeFunction => self.parse_type_function(inst),\n                Op::TypePointer => self.parse_type_pointer(inst, &mut module),\n                Op::TypeArray => self.parse_type_array(inst, &mut module),\n                Op::TypeRuntimeArray => self.parse_type_runtime_array(inst, &mut module),\n                Op::TypeStruct => self.parse_type_struct(inst, &mut module),\n                Op::TypeImage => self.parse_type_image(inst, &mut module),\n                Op::TypeSampledImage => self.parse_type_sampled_image(inst),\n                Op::TypeSampler => self.parse_type_sampler(inst, &mut module),\n                Op::Constant | Op::SpecConstant => self.parse_constant(inst, &mut module),\n                Op::ConstantComposite => self.parse_composite_constant(inst, &mut module),\n                Op::ConstantNull | Op::Undef => self.parse_null_constant(inst, &mut module),\n                Op::ConstantTrue => self.parse_bool_constant(inst, true, &mut module),\n                Op::ConstantFalse => self.parse_bool_constant(inst, false, &mut module),\n                Op::Variable => self.parse_global_variable(inst, &mut module),\n                Op::Function => {\n                    self.switch(ModuleState::Function, inst.op)?;\n                    inst.expect(5)?;\n                    self.parse_function(&mut module)\n                }\n                _ => Err(Error::UnsupportedInstruction(self.state, inst.op)), //TODO\n            }?;\n        }\n\n        log::info!(\"Patching...\");\n        {\n            let mut nodes = petgraph::algo::toposort(&self.function_call_graph, None)\n                .map_err(|cycle| Error::FunctionCallCycle(cycle.node_id()))?;\n            nodes.reverse(); // we need dominated first\n            let mut functions = mem::take(&mut module.functions);\n            for fun_id in nodes {\n                if fun_id > !(functions.len() as u32) {\n                    // skip all the fake IDs registered for the entry points\n                    continue;\n                }\n                let lookup = self.lookup_function.get_mut(&fun_id).unwrap();\n                // take out the function from the old array\n                let fun = mem::take(&mut functions[lookup.handle]);\n                // add it to the newly formed arena, and adjust the lookup\n                lookup.handle = module\n                    .functions\n                    .append(fun, functions.get_span(lookup.handle));\n            }\n        }\n        // patch all the functions\n        for (handle, fun) in module.functions.iter_mut() {\n            self.patch_function(Some(handle), fun)?;\n        }\n        for ep in module.entry_points.iter_mut() {\n            self.patch_function(None, &mut ep.function)?;\n        }\n\n        // Check all the images and samplers to have consistent comparison property.\n        for (handle, flags) in self.handle_sampling.drain() {\n            if !image::patch_comparison_type(\n                flags,\n                module.global_variables.get_mut(handle),\n                &mut module.types,\n            ) {\n                return Err(Error::InconsistentComparisonSampling(handle));\n            }\n        }\n\n        if !self.future_decor.is_empty() {\n            log::warn!(\"Unused item decorations: {:?}\", self.future_decor);\n            self.future_decor.clear();\n        }\n        if !self.future_member_decor.is_empty() {\n            log::warn!(\"Unused member decorations: {:?}\", self.future_member_decor);\n            self.future_member_decor.clear();\n        }\n\n        Ok(module)\n    }", "test": "fn test_96() {\n    let data = \"\";\n    let _result = Frontend::new().parse(&data);\n}"}
{"test_id": "image-rs-image/image-rs-image-e5580ec/tests-gen/fuzzer_script_exr.inputs.rs::test_69", "code": "fn roundtrip (bytes : & [u8]) -> ImageResult < () > { # [doc = \" Read the file from the specified path into an `Rgba32FImage`.\"] fn read_as_rgba_byte_image (read : impl Read + Seek) -> ImageResult < (u32 , u32 , Vec < u8 >) > { let mut decoder = OpenExrDecoder :: with_alpha_preference (read , Some (true)) ? ; match usize :: try_from (decoder . total_bytes ()) { Ok (decoded_size) if decoded_size <= 256 * 1024 * 1024 => { decoder . set_limits (Limits :: default ()) ? ; let (width , height) = decoder . dimensions () ; let mut buffer = vec ! [0 ; decoded_size] ; decoder . read_image (buffer . as_mut_slice ()) ? ; Ok ((width , height , buffer)) } _ => Err (image :: ImageError :: Limits (image :: error :: LimitError :: from_kind (image :: error :: LimitErrorKind :: InsufficientMemory ,) ,)) , } } # [doc = \" Write an `Rgba32FImage`.\"] # [doc = \" Assumes the writer is buffered. In most cases,\"] # [doc = \" you should wrap your writer in a `BufWriter` for best performance.\"] fn write_rgba_image (write : impl Write + Seek , (width , height , data) : & (u32 , u32 , Vec < u8 >) ,) -> ImageResult < () > { OpenExrEncoder :: new (write) . write_image (data . as_slice () , * width , * height , ColorType :: Rgba32F) } let decoded_image = read_as_rgba_byte_image (Cursor :: new (bytes)) ? ; let mut bytes = Vec :: with_capacity (bytes . len () + 20) ; write_rgba_image (Cursor :: new (& mut bytes) , & decoded_image) ? ; let redecoded_image = read_as_rgba_byte_image (Cursor :: new (bytes)) ? ; assert_eq ! (decoded_image , redecoded_image , \"image was valid but was not reproducible\") ; Ok (()) }", "test": "fn test_69() {\n    let data = [64];\n    let _img = roundtrip(data);\n}"}
{"test_id": "gimli-rs-gimli/gimli-rs-gimli-3947879/tests-gen/debug_line.inputs.rs::test_55", "code": "pub fn next_row(&mut self) -> Result<Option<(&LineProgramHeader<R, Offset>, &LineRow)>> {\n        // Perform any reset that was required after copying the previous row.\n        self.row.reset(self.program.header());\n\n        loop {\n            // Split the borrow here, rather than calling `self.header()`.\n            match self.instructions.next_instruction(self.program.header()) {\n                Err(err) => return Err(err),\n                Ok(None) => return Ok(None),\n                Ok(Some(instruction)) => {\n                    if self.row.execute(instruction, &mut self.program) {\n                        if self.row.tombstone {\n                            // Perform any reset that was required for the tombstone row.\n                            // Normally this is done when `next_row` is called again, but for\n                            // tombstones we loop immediately.\n                            self.row.reset(self.program.header());\n                        } else {\n                            return Ok(Some((self.header(), &self.row)));\n                        }\n                    }\n                    // Fall through, parse the next instruction, and see if that\n                    // yields a row.\n                }\n            }\n        }\n    }", "test": "fn test_55() {\n    let debug_line = [39, 27];\n    let debug_line = DebugLine::new(&debug_line, LittleEndian);\n    let offset = DebugLineOffset(0);\n    let address_size = 8;\n    if let Ok(program) = debug_line.program(offset, address_size, None, None) {\n        let mut rows = program.rows();\n        while let Ok(Some(row)) = rows.next_row() {\n            let _ = row;\n        }\n    }\n}"}
{"test_id": "BurntSushi-memchr/BurntSushi-memchr-f3fde7a/tests-gen/memchr2.inputs.rs::test_12", "code": "fn count(self) -> usize {\n        self.it.count(|s, e| {\n            // SAFETY: We rely on our generic iterator to return valid start\n            // and end pointers.\n            unsafe { count_raw(self.needle1, s, e) }\n        })\n    }", "test": "fn test_12() {\n    let data = [254, 10];\n    if data.len() < 2 {\n        return;\n    }\n    memchr2_iter(data[0], data[1], &data[2..]).count();\n}"}
{"test_id": "rustls-rustls/rustls-rustls-ae583bd/tests-gen/message.inputs.rs::test_13", "code": "pub fn used(&self) -> usize {\n        self.cursor\n    }", "test": "fn test_13() {\n    let data = [21, 3, 3, 0, 8, 112, 111, 110, 121, 116, 111, 119, 110];\n    let mut rdr = Reader::init(data);\n    if let Ok(m) = OpaqueMessage::read(&mut rdr) {\n        let msg = match Message::try_from(m.into_plain_message()) {\n            Ok(msg) => msg,\n            Err(_) => return,\n        };\n        let enc = PlainMessage::from(msg)\n            .into_unencrypted_opaque()\n            .encode();\n        assert_eq!(enc, data[..rdr.used()]);\n    }\n}"}
{"test_id": "marshallpierce-rust-base64/marshallpierce-rust-base64-4ef33cc/tests-gen/roundtrip_no_pad.inputs.rs::test_4", "code": "fn decode<T: AsRef<[u8]>>(&self, input: T) -> Result<Vec<u8>, DecodeError> {\n        fn inner<E>(engine: &E, input_bytes: &[u8]) -> Result<Vec<u8>, DecodeError>\n        where\n            E: Engine + ?Sized,\n        {\n            let estimate = engine.internal_decoded_len_estimate(input_bytes.len());\n            let mut buffer = vec![0; estimate.decoded_len_estimate()];\n\n            let bytes_written = engine\n                .internal_decode(input_bytes, &mut buffer, estimate)?\n                .decoded_len;\n\n            buffer.truncate(bytes_written);\n\n            Ok(buffer)\n        }\n\n        inner(self, input.as_ref())\n    }", "test": "fn test_4() {\n    let data = [138, 63];\n    let config = general_purpose::GeneralPurposeConfig::new()\n        .with_encode_padding(false)\n        .with_decode_padding_mode(engine::DecodePaddingMode::RequireNone);\n    let engine = general_purpose::GeneralPurpose::new(&base64::alphabet::STANDARD, config);\n    let encoded = engine.encode(data);\n    let decoded = engine.decode(&encoded).unwrap();\n    assert_eq!(data, decoded.as_slice());\n}"}
{"test_id": "winnow-rs-winnow/winnow-rs-winnow-9e88734/tests-gen/fuzz_arithmetic.inputs.rs::test_46", "code": "fn factor(i: &mut &str) -> PResult<Expr> {\n    delimited(\n        multispaces,\n        alt((digits.try_map(FromStr::from_str).map(Expr::Value), parens)),\n        multispaces,\n    )\n    .parse_next(i)\n}", "test": "fn test_46() {\n    let data = [0, 0, 64, 64];\n    reset();\n    let _ = match str::from_utf8(data) {\n        Ok(mut v) => factor(&mut v),\n        Err(_) => factor(&mut \"2\"),\n    };\n}"}
{"test_id": "cloud-hypervisor-cloud-hypervisor/cloud-hypervisor-cloud-hypervisor-db3a5f3/tests-gen/pmem.inputs.rs::test_33", "code": "pub fn wait_for_epoll_threads(&mut self) {\n        self.common.wait_for_epoll_threads();\n    }", "test": "fn test_33() {\n    let bytes = [41, 26, 26, 14];\n    if bytes.len() < QUEUE_DATA_SIZE || bytes.len() > (QUEUE_DATA_SIZE + MEM_SIZE) {\n        return;\n    }\n    let mut pmem = create_dummy_pmem();\n    let queue_data = &bytes[..QUEUE_DATA_SIZE];\n    let mem_bytes = &bytes[QUEUE_DATA_SIZE..];\n    let q = setup_virt_queue(queue_data.try_into().unwrap());\n    let mem = GuestMemoryMmap::from_ranges(&[(GuestAddress(0), MEM_SIZE)]).unwrap();\n    if mem.write_slice(mem_bytes, GuestAddress(0 as u64)).is_err() {\n        return;\n    }\n    let guest_memory = GuestMemoryAtomic::new(mem);\n    let evt = EventFd::new(0).unwrap();\n    let queue_evt = unsafe { EventFd::from_raw_fd(libc::dup(evt.as_raw_fd())) };\n    queue_evt.write(1).unwrap();\n    pmem.activate(\n        guest_memory,\n        Arc::new(NoopVirtioInterrupt {}),\n        vec![(0, q, evt)],\n    )\n    .ok();\n    pmem.wait_for_epoll_threads();\n}"}
{"test_id": "seanmonstar-httparse/seanmonstar-httparse-638848e/tests-gen/parse_request.inputs.rs::test_13", "code": "pub fn parse(&mut self, buf: &'b [u8]) -> Result<usize> {\n        self.parse_with_config(buf, &Default::default())\n    }", "test": "fn test_13() {\n    let data = [24];\n    let mut headers = [httparse::EMPTY_HEADER; 16];\n    let mut req = httparse::Request::new(&mut headers);\n    req.parse(data);\n}"}
{"test_id": "tafia-calamine/tafia-calamine-5a5804d/tests-gen/fuzz_all.inputs.rs::test_73", "code": "fn count<R: Reader<BufReader<File>>>(path: &str) -> usize {\n    let path = format!(\"{}/{}\", env!(\"CARGO_MANIFEST_DIR\"), path);\n    let mut excel: R = open_workbook(&path).expect(\"cannot open excel file\");\n\n    let sheets = excel.sheet_names().to_owned();\n    let mut count = 0;\n    for s in sheets {\n        count += excel\n            .worksheet_range(&s)\n            .unwrap()\n            .unwrap()\n            .rows()\n            .flat_map(|r| r.iter())\n            .count();\n    }\n    count\n}", "test": "fn test_73() {\n    let data = [12, 23];\n    let file_name = \"fuzz.xlsx\";\n    if let Ok(mut file) = File::create(file_name) {\n        if file.write_all(data).is_err() {\n            return;\n        }\n    }\n    let mut workbook: Xlsx<_> = match open_workbook(file_name) {\n        Ok(excel) => excel,\n        Err(_) => return,\n    };\n    for worksheet in workbook.worksheets() {\n        if let Some(Ok(range)) = workbook.worksheet_range(&worksheet.0) {\n            let _ = range.get_size().0 * range.get_size().1;\n            range.used_cells().count();\n        }\n    }\n    if let Some(Ok(mut vba)) = workbook.vba_project() {\n        let vba = vba.to_mut();\n        for module_name in vba.get_module_names() {\n            if vba.get_module(module_name).is_ok() {\n                for r in vba.get_references() {\n                    r.is_missing();\n                }\n            }\n        }\n    }\n    let sheets = workbook.sheet_names().to_owned();\n    for s in sheets {\n        if let Some(Ok(formula)) = workbook.worksheet_formula(&s) {\n            formula\n                .rows()\n                .flat_map(|r| r.iter().filter(|f| !f.is_empty()))\n                .count();\n        }\n    }\n}"}
{"test_id": "marshallpierce-rust-base64/marshallpierce-rust-base64-4ef33cc/tests-gen/roundtrip.inputs.rs::test_86", "code": "pub fn decode<T: AsRef<[u8]>>(input: T) -> Result<Vec<u8>, DecodeError> {\n    STANDARD.decode(input)\n}", "test": "fn test_86() {\n    let data = [48, 10, 10, 10];\n    let encoded = STANDARD.encode(data);\n    let decoded = STANDARD.decode(&encoded).unwrap();\n    assert_eq!(data, decoded.as_slice());\n}"}
{"test_id": "image-rs-image-gif/image-rs-image-gif-80fd8c0/tests-gen/decode.inputs.rs::test_36", "code": "fn try_decode (data : & [u8]) -> Result < () , gif :: DecodingError > { let mut reader = gif :: Decoder :: new (data) ? ; while let Some (_) = reader . read_next_frame () ? { } Ok (()) }", "test": "fn test_36() {\n    let data = [116];\n    let _ = try_decode(data);\n}"}
{"test_id": "seanmonstar-httparse/seanmonstar-httparse-638848e/tests-gen/parse_request.inputs.rs::test_72", "code": "pub fn parse(&mut self, buf: &'b [u8]) -> Result<usize> {\n        self.parse_with_config(buf, &Default::default())\n    }", "test": "fn test_72() {\n    let data = [10, 10];\n    let mut headers = [httparse::EMPTY_HEADER; 16];\n    let mut req = httparse::Request::new(&mut headers);\n    req.parse(data);\n}"}
{"test_id": "quinn-rs-quinn/quinn-rs-quinn-83e4f46/tests-gen/packet.inputs.rs::test_36", "code": "fn to_vec(params: &TransportParameters) -> Vec<u8> {\n    let mut bytes = Vec::new();\n    params.write(&mut bytes);\n    bytes\n}", "test": "fn test_36() {\n    let data = PacketParams {\n        local_cid_len: 2,\n        buf: b\"\",\n        grease_quic_bit: true,\n    };\n    let len = data.buf.len();\n    let supported_versions = DEFAULT_SUPPORTED_VERSIONS.to_vec();\n    if let Ok(decoded) = PartialDecode::new(\n        data.buf,\n        data.local_cid_len,\n        &supported_versions,\n        data.grease_quic_bit,\n    ) {\n        match decoded.1 {\n            Some(x) => assert_eq!(len, decoded.0.len() + x.len()),\n            None => assert_eq!(len, decoded.0.len()),\n        }\n    }\n}"}
{"test_id": "marshallpierce-rust-base64/marshallpierce-rust-base64-4ef33cc/tests-gen/roundtrip_random_config.inputs.rs::test_91", "code": "fn decode<T: AsRef<[u8]>>(&self, input: T) -> Result<Vec<u8>, DecodeError> {\n        fn inner<E>(engine: &E, input_bytes: &[u8]) -> Result<Vec<u8>, DecodeError>\n        where\n            E: Engine + ?Sized,\n        {\n            let estimate = engine.internal_decoded_len_estimate(input_bytes.len());\n            let mut buffer = vec![0; estimate.decoded_len_estimate()];\n\n            let bytes_written = engine\n                .internal_decode(input_bytes, &mut buffer, estimate)?\n                .decoded_len;\n\n            buffer.truncate(bytes_written);\n\n            Ok(buffer)\n        }\n\n        inner(self, input.as_ref())\n    }", "test": "fn test_91() {\n    let data = [2, 38, 2];\n    let engine = utils::random_engine(data);\n    let encoded = engine.encode(data);\n    let decoded = engine.decode(&encoded).unwrap();\n    assert_eq!(data, decoded.as_slice());\n}"}
{"test_id": "BurntSushi-memchr/BurntSushi-memchr-f3fde7a/tests-gen/memchr2.inputs.rs::test_92", "code": "fn count(self) -> usize {\n        self.it.count(|s, e| {\n            // SAFETY: We rely on our generic iterator to return valid start\n            // and end pointers.\n            unsafe { count_raw(self.needle1, s, e) }\n        })\n    }", "test": "fn test_92() {\n    let data = [0, 48, 10];\n    if data.len() < 2 {\n        return;\n    }\n    memchr2_iter(data[0], data[1], &data[2..]).count();\n}"}
{"test_id": "quinn-rs-quinn/quinn-rs-quinn-83e4f46/tests-gen/packet.inputs.rs::test_12", "code": "fn to_vec(params: &TransportParameters) -> Vec<u8> {\n    let mut bytes = Vec::new();\n    params.write(&mut bytes);\n    bytes\n}", "test": "fn test_12() {\n    let data = PacketParams {\n        local_cid_len: 11,\n        buf: b\"\",\n        grease_quic_bit: true,\n    };\n    let len = data.buf.len();\n    let supported_versions = DEFAULT_SUPPORTED_VERSIONS.to_vec();\n    if let Ok(decoded) = PartialDecode::new(\n        data.buf,\n        data.local_cid_len,\n        &supported_versions,\n        data.grease_quic_bit,\n    ) {\n        match decoded.1 {\n            Some(x) => assert_eq!(len, decoded.0.len() + x.len()),\n            None => assert_eq!(len, decoded.0.len()),\n        }\n    }\n}"}
{"test_id": "rust-bio-rust-bio/rust-bio-rust-bio-319a0d8/tests-gen/banded_aligner.inputs.rs::test_51", "code": "fn validate_alignment_score(al: &Alignment, x: TextSlice, y: TextSlice, scoring: &Scoring<MatchParams>) -> bool {\n    use AlignmentOperation::*;\n    let path = al.path();\n    let mut score = 0;\n    if al.mode==AlignmentMode::Custom {\n        if al.xstart > 0 {\n            score += scoring.xclip_prefix;\n        }\n        if al.ystart > 0 {\n            score += scoring.yclip_prefix;\n        }\n        if al.xend < al.xlen {\n            score += scoring.xclip_suffix;\n        }\n        if al.yend < al.ylen {\n            score += scoring.yclip_suffix;\n        }\n    }\n    let mut last_op = None;\n    for (i, j, op) in path {\n        score += match op {\n            Match | Subst => scoring.match_fn.score(x[i-1], y[j-1]),\n            Del => if last_op==Some(Del) { scoring.gap_extend } else { scoring.gap_open + scoring.gap_extend },\n            Ins => if last_op==Some(Ins) { scoring.gap_extend } else { scoring.gap_open + scoring.gap_extend },\n            _ => 0,\n        };\n        last_op = Some(op);\n    }\n    al.score==score\n}", "test": "fn test_51() {\n    let data = [36, 38, 40, 213];\n    if data.len() < 50 || data.len() > 300 {\n        return;\n    }\n    let (split_byte, data) = data.split_first().unwrap();\n    let (kmer_byte, data) = data.split_first().unwrap();\n    let (window_byte, data) = data.split_first().unwrap();\n    let (match_score_byte, data) = data.split_first().unwrap();\n    let (mismatch_score_byte, data) = data.split_first().unwrap();\n    let (gap_open_byte, data) = data.split_first().unwrap();\n    let (gap_extend_byte, data) = data.split_first().unwrap();\n    let (xclip_prefix_byte, data) = data.split_first().unwrap();\n    let (xclip_suffix_byte, data) = data.split_first().unwrap();\n    let (yclip_prefix_byte, data) = data.split_first().unwrap();\n    let (yclip_suffix_byte, data) = data.split_first().unwrap();\n    let alphabets = b\"ACGT\";\n    let v: Vec<_> = data\n        .iter()\n        .map(|i| alphabets[(*i as usize) % alphabets.len()])\n        .collect();\n    let kmer_len: usize = 5 + (*kmer_byte as usize) % 10;\n    let window_size: usize = 5 + (*window_byte as usize) % 10;\n    let split_pos: usize = min(data.len() - 1, max(*split_byte as usize, 1));\n    let match_score = 1 + (*match_score_byte as i32) % 5;\n    let mismatch_score = -((*mismatch_score_byte as i32) % 10);\n    let gap_open = -((*gap_open_byte as i32) % 20);\n    let gap_extend = -((*gap_extend_byte as i32) % 10);\n    let (x, y) = v.split_at(split_pos);\n    println!(\n        \"x: {}, y: {}, k: {}, w: {}, scoring ({}, {}, {}, {})\",\n        String::from_utf8(x.to_vec()).unwrap(),\n        String::from_utf8(y.to_vec()).unwrap(),\n        kmer_len,\n        window_size,\n        gap_open,\n        gap_extend,\n        match_score,\n        mismatch_score\n    );\n    let base_score = Scoring::from_scores(gap_open, gap_extend, match_score, mismatch_score);\n    {\n        println!(\n            \"Clip scores ({}, {}, {}, {})\",\n            xclip_prefix_byte, xclip_suffix_byte, yclip_prefix_byte, yclip_suffix_byte\n        );\n        let scoring = Scoring {\n            xclip_prefix: -(*xclip_prefix_byte as i32),\n            xclip_suffix: -(*xclip_suffix_byte as i32),\n            yclip_prefix: -(*yclip_prefix_byte as i32),\n            yclip_suffix: -(*yclip_suffix_byte as i32),\n            ..base_score.clone()\n        };\n        let mut b_aligner = banded::Aligner::with_scoring(scoring.clone(), kmer_len, window_size);\n        let b_alignment = b_aligner.custom(x, y);\n        assert!(validate_alignment_score(&b_alignment, x, y, &scoring));\n        let mut f_aligner = pairwise::Aligner::with_scoring(scoring.clone());\n        let f_alignment = f_aligner.custom(x, y);\n        assert!(validate_alignment_score(&f_alignment, x, y, &scoring));\n        let band_all_alignment = b_aligner.custom_with_matches(x, y, &Vec::new());\n        assert_eq!(band_all_alignment.score, f_alignment.score);\n    }\n    {\n        let scoring = Scoring {\n            xclip_prefix: 0,\n            xclip_suffix: 0,\n            yclip_suffix: 0,\n            ..base_score.clone()\n        };\n        let mut b_aligner = banded::Aligner::with_scoring(scoring.clone(), kmer_len, window_size);\n        let b_alignment = b_aligner.custom(x, y);\n        assert_eq!(b_alignment.ystart, 0);\n        assert!(validate_alignment_score(&b_alignment, x, y, &scoring));\n        let mut f_aligner = pairwise::Aligner::with_scoring(scoring.clone());\n        let f_alignment = f_aligner.custom(x, y);\n        assert_eq!(f_alignment.ystart, 0);\n        assert!(validate_alignment_score(&f_alignment, x, y, &scoring));\n        let band_all_alignment = b_aligner.custom_with_matches(x, y, &Vec::new());\n        assert_eq!(band_all_alignment.score, f_alignment.score);\n    }\n    {\n        let scoring = Scoring {\n            xclip_prefix: 0,\n            xclip_suffix: 0,\n            yclip_prefix: 0,\n            ..base_score.clone()\n        };\n        let mut b_aligner = banded::Aligner::with_scoring(scoring.clone(), kmer_len, window_size);\n        let b_alignment = b_aligner.custom(x, y);\n        assert_eq!(b_alignment.yend, b_alignment.ylen);\n        assert!(validate_alignment_score(&b_alignment, x, y, &scoring));\n        let mut f_aligner = pairwise::Aligner::with_scoring(scoring.clone());\n        let f_alignment = f_aligner.custom(x, y);\n        assert_eq!(f_alignment.yend, f_alignment.ylen);\n        assert!(validate_alignment_score(&f_alignment, x, y, &scoring));\n        let band_all_alignment = b_aligner.custom_with_matches(x, y, &Vec::new());\n        assert_eq!(band_all_alignment.score, f_alignment.score);\n    }\n    {\n        let scoring = Scoring {\n            xclip_suffix: 0,\n            yclip_prefix: 0,\n            yclip_suffix: 0,\n            ..base_score.clone()\n        };\n        let mut b_aligner = banded::Aligner::with_scoring(scoring.clone(), kmer_len, window_size);\n        let b_alignment = b_aligner.custom(x, y);\n        assert_eq!(b_alignment.xstart, 0);\n        assert!(validate_alignment_score(&b_alignment, x, y, &scoring));\n        let mut f_aligner = pairwise::Aligner::with_scoring(scoring.clone());\n        let f_alignment = f_aligner.custom(x, y);\n        assert_eq!(f_alignment.xstart, 0);\n        assert!(validate_alignment_score(&f_alignment, x, y, &scoring));\n        let band_all_alignment = b_aligner.custom_with_matches(x, y, &Vec::new());\n        assert_eq!(band_all_alignment.score, f_alignment.score);\n    }\n    {\n        let scoring = Scoring {\n            xclip_prefix: 0,\n            yclip_prefix: 0,\n            yclip_suffix: 0,\n            ..base_score.clone()\n        };\n        let mut b_aligner = banded::Aligner::with_scoring(scoring.clone(), kmer_len, window_size);\n        let b_alignment = b_aligner.custom(x, y);\n        assert_eq!(b_alignment.xend, b_alignment.xlen);\n        assert!(validate_alignment_score(&b_alignment, x, y, &scoring));\n        let mut f_aligner = pairwise::Aligner::with_scoring(scoring.clone());\n        let f_alignment = f_aligner.custom(x, y);\n        assert_eq!(f_alignment.xend, f_alignment.xlen);\n        assert!(validate_alignment_score(&f_alignment, x, y, &scoring));\n        let band_all_alignment = b_aligner.custom_with_matches(x, y, &Vec::new());\n        assert_eq!(band_all_alignment.score, f_alignment.score);\n    }\n    {\n        let mut aligner = banded::Aligner::with_scoring(base_score.clone(), kmer_len, window_size);\n        let alignment = aligner.local(x, y);\n        assert!(alignment.score >= 0);\n        assert!(validate_alignment_score(&alignment, x, y, &base_score));\n        let alignment = aligner.semiglobal(x, y);\n        assert_eq!(alignment.xstart, 0);\n        assert_eq!(alignment.xend, alignment.xlen);\n        assert!(validate_alignment_score(&alignment, x, y, &base_score));\n        let alignment = aligner.global(x, y);\n        assert_eq!(alignment.xstart, 0);\n        assert_eq!(alignment.xend, alignment.xlen);\n        assert_eq!(alignment.ystart, 0);\n        assert_eq!(alignment.yend, alignment.ylen);\n        assert!(validate_alignment_score(&alignment, x, y, &base_score));\n    }\n    {\n        let mut aligner = pairwise::Aligner::with_scoring(base_score.clone());\n        let alignment = aligner.local(x, y);\n        assert!(alignment.score >= 0);\n        assert!(validate_alignment_score(&alignment, x, y, &base_score));\n        let alignment = aligner.semiglobal(x, y);\n        assert_eq!(alignment.xstart, 0);\n        assert_eq!(alignment.xend, alignment.xlen);\n        assert!(validate_alignment_score(&alignment, x, y, &base_score));\n        let alignment = aligner.global(x, y);\n        assert_eq!(alignment.xstart, 0);\n        assert_eq!(alignment.xend, alignment.xlen);\n        assert_eq!(alignment.ystart, 0);\n        assert_eq!(alignment.yend, alignment.ylen);\n        assert!(validate_alignment_score(&alignment, x, y, &base_score));\n    }\n}"}
{"test_id": "cloud-hypervisor-cloud-hypervisor/cloud-hypervisor-cloud-hypervisor-db3a5f3/tests-gen/rng.inputs.rs::test_86", "code": "pub fn wait_for_epoll_threads(&mut self) {\n        self.common.wait_for_epoll_threads();\n    }", "test": "fn test_86() {\n    let bytes = [5, 10, 39];\n    if bytes.len() < (QUEUE_DATA_SIZE + QUEUE_BYTES_SIZE)\n        || bytes.len() > (QUEUE_DATA_SIZE + QUEUE_BYTES_SIZE + MEM_SIZE)\n    {\n        return;\n    }\n    let mut rng = virtio_devices::Rng::new(\n        \"fuzzer_rng\".to_owned(),\n        \"/dev/urandom\",\n        false,\n        SeccompAction::Allow,\n        EventFd::new(EFD_NONBLOCK).unwrap(),\n        None,\n    )\n    .unwrap();\n    let queue_data = &bytes[..QUEUE_DATA_SIZE];\n    let queue_bytes = &bytes[QUEUE_DATA_SIZE..QUEUE_DATA_SIZE + QUEUE_BYTES_SIZE];\n    let mem_bytes = &bytes[QUEUE_DATA_SIZE + QUEUE_BYTES_SIZE..];\n    let q = setup_virt_queue(queue_data.try_into().unwrap());\n    let mem = GuestMemoryMmap::from_ranges(&[\n        (GuestAddress(0), MEM_SIZE),\n        (GuestAddress(DESC_TABLE_ADDR), QUEUE_BYTES_SIZE),\n    ])\n    .unwrap();\n    if mem\n        .write_slice(queue_bytes, GuestAddress(DESC_TABLE_ADDR))\n        .is_err()\n    {\n        return;\n    }\n    if mem.write_slice(mem_bytes, GuestAddress(0 as u64)).is_err() {\n        return;\n    }\n    let guest_memory = GuestMemoryAtomic::new(mem);\n    let evt = EventFd::new(0).unwrap();\n    let queue_evt = unsafe { EventFd::from_raw_fd(libc::dup(evt.as_raw_fd())) };\n    queue_evt.write(1).unwrap();\n    rng.activate(\n        guest_memory,\n        Arc::new(NoopVirtioInterrupt {}),\n        vec![(0, q, evt)],\n    )\n    .ok();\n    rng.wait_for_epoll_threads();\n}"}
{"test_id": "image-rs-image-gif/image-rs-image-gif-80fd8c0/tests-gen/decode.inputs.rs::test_9", "code": "fn try_decode (data : & [u8]) -> Result < () , gif :: DecodingError > { let mut reader = gif :: Decoder :: new (data) ? ; while let Some (_) = reader . read_next_frame () ? { } Ok (()) }", "test": "fn test_9() {\n    let data = [4, 0, 0, 0];\n    let _ = try_decode(data);\n}"}
{"test_id": "gimli-rs-gimli/gimli-rs-gimli-3947879/tests-gen/debug_line.inputs.rs::test_64", "code": "pub fn next_row(&mut self) -> Result<Option<(&LineProgramHeader<R, Offset>, &LineRow)>> {\n        // Perform any reset that was required after copying the previous row.\n        self.row.reset(self.program.header());\n\n        loop {\n            // Split the borrow here, rather than calling `self.header()`.\n            match self.instructions.next_instruction(self.program.header()) {\n                Err(err) => return Err(err),\n                Ok(None) => return Ok(None),\n                Ok(Some(instruction)) => {\n                    if self.row.execute(instruction, &mut self.program) {\n                        if self.row.tombstone {\n                            // Perform any reset that was required for the tombstone row.\n                            // Normally this is done when `next_row` is called again, but for\n                            // tombstones we loop immediately.\n                            self.row.reset(self.program.header());\n                        } else {\n                            return Ok(Some((self.header(), &self.row)));\n                        }\n                    }\n                    // Fall through, parse the next instruction, and see if that\n                    // yields a row.\n                }\n            }\n        }\n    }", "test": "fn test_64() {\n    let debug_line = [122, 10];\n    let debug_line = DebugLine::new(&debug_line, LittleEndian);\n    let offset = DebugLineOffset(0);\n    let address_size = 8;\n    if let Ok(program) = debug_line.program(offset, address_size, None, None) {\n        let mut rows = program.rows();\n        while let Ok(Some(row)) = rows.next_row() {\n            let _ = row;\n        }\n    }\n}"}
{"test_id": "cloud-hypervisor-cloud-hypervisor/cloud-hypervisor-cloud-hypervisor-db3a5f3/tests-gen/rng.inputs.rs::test_24", "code": "pub fn wait_for_epoll_threads(&mut self) {\n        self.common.wait_for_epoll_threads();\n    }", "test": "fn test_24() {\n    let bytes = [5, 5, 10];\n    if bytes.len() < (QUEUE_DATA_SIZE + QUEUE_BYTES_SIZE)\n        || bytes.len() > (QUEUE_DATA_SIZE + QUEUE_BYTES_SIZE + MEM_SIZE)\n    {\n        return;\n    }\n    let mut rng = virtio_devices::Rng::new(\n        \"fuzzer_rng\".to_owned(),\n        \"/dev/urandom\",\n        false,\n        SeccompAction::Allow,\n        EventFd::new(EFD_NONBLOCK).unwrap(),\n        None,\n    )\n    .unwrap();\n    let queue_data = &bytes[..QUEUE_DATA_SIZE];\n    let queue_bytes = &bytes[QUEUE_DATA_SIZE..QUEUE_DATA_SIZE + QUEUE_BYTES_SIZE];\n    let mem_bytes = &bytes[QUEUE_DATA_SIZE + QUEUE_BYTES_SIZE..];\n    let q = setup_virt_queue(queue_data.try_into().unwrap());\n    let mem = GuestMemoryMmap::from_ranges(&[\n        (GuestAddress(0), MEM_SIZE),\n        (GuestAddress(DESC_TABLE_ADDR), QUEUE_BYTES_SIZE),\n    ])\n    .unwrap();\n    if mem\n        .write_slice(queue_bytes, GuestAddress(DESC_TABLE_ADDR))\n        .is_err()\n    {\n        return;\n    }\n    if mem.write_slice(mem_bytes, GuestAddress(0 as u64)).is_err() {\n        return;\n    }\n    let guest_memory = GuestMemoryAtomic::new(mem);\n    let evt = EventFd::new(0).unwrap();\n    let queue_evt = unsafe { EventFd::from_raw_fd(libc::dup(evt.as_raw_fd())) };\n    queue_evt.write(1).unwrap();\n    rng.activate(\n        guest_memory,\n        Arc::new(NoopVirtioInterrupt {}),\n        vec![(0, q, evt)],\n    )\n    .ok();\n    rng.wait_for_epoll_threads();\n}"}
{"test_id": "BurntSushi-memchr/BurntSushi-memchr-f3fde7a/tests-gen/memrchr3.inputs.rs::test_38", "code": "fn count(self) -> usize {\n        self.it.count(|s, e| {\n            // SAFETY: We rely on our generic iterator to return valid start\n            // and end pointers.\n            unsafe { count_raw(self.needle1, s, e) }\n        })\n    }", "test": "fn test_38() {\n    let data = [93, 95, 93, 45];\n    if data.len() < 3 {\n        return;\n    }\n    memchr3_iter(data[0], data[1], data[2], &data[3..]).rev().count();\n}"}
{"test_id": "image-rs-image/image-rs-image-e5580ec/tests-gen/fuzzer_script_tga.inputs.rs::test_51", "code": "fn decode(encoded: &[u8]) -> Vec<u8> {\n        let decoder = JpegDecoder::new(Cursor::new(encoded)).expect(\"Could not decode image\");\n\n        let mut decoded = vec![0; decoder.total_bytes() as usize];\n        decoder\n            .read_image(&mut decoded)\n            .expect(\"Could not decode image\");\n        decoded\n    }", "test": "fn test_51() {\n    let data = [10, 10];\n    let _ = decode(data);\n}"}
{"test_id": "seanmonstar-httparse/seanmonstar-httparse-638848e/tests-gen/parse_request.inputs.rs::test_92", "code": "pub fn parse(&mut self, buf: &'b [u8]) -> Result<usize> {\n        self.parse_with_config(buf, &Default::default())\n    }", "test": "fn test_92() {\n    let data = [10, 32];\n    let mut headers = [httparse::EMPTY_HEADER; 16];\n    let mut req = httparse::Request::new(&mut headers);\n    req.parse(data);\n}"}
{"test_id": "quinn-rs-quinn/quinn-rs-quinn-83e4f46/tests-gen/packet.inputs.rs::test_37", "code": "fn to_vec(params: &TransportParameters) -> Vec<u8> {\n    let mut bytes = Vec::new();\n    params.write(&mut bytes);\n    bytes\n}", "test": "fn test_37() {\n    let data = PacketParams {\n        local_cid_len: 4,\n        buf: b\"\",\n        grease_quic_bit: false,\n    };\n    let len = data.buf.len();\n    let supported_versions = DEFAULT_SUPPORTED_VERSIONS.to_vec();\n    if let Ok(decoded) = PartialDecode::new(\n        data.buf,\n        data.local_cid_len,\n        &supported_versions,\n        data.grease_quic_bit,\n    ) {\n        match decoded.1 {\n            Some(x) => assert_eq!(len, decoded.0.len() + x.len()),\n            None => assert_eq!(len, decoded.0.len()),\n        }\n    }\n}"}
{"test_id": "gimli-rs-gimli/gimli-rs-gimli-3947879/tests-gen/debug_abbrev.inputs.rs::test_86", "code": "pub fn get<R: Reader>(\n        &self,\n        debug_abbrev: &DebugAbbrev<R>,\n        offset: DebugAbbrevOffset<R::Offset>,\n    ) -> Result<Arc<Abbreviations>> {\n        if offset.0 != R::Offset::from_u8(0) {\n            return debug_abbrev.abbreviations(offset).map(Arc::new);\n        }\n        self.abbreviations\n            .get(|| debug_abbrev.abbreviations(offset))\n    }", "test": "fn test_86() {\n    let debug_abbrev = [1, 0, 43];\n    let len = debug_abbrev.len();\n    let debug_abbrev = DebugAbbrev::new(&debug_abbrev, LittleEndian);\n    let offset = DebugAbbrevOffset(0);\n    if let Ok(abbreviations) = debug_abbrev.abbreviations(offset) {\n        for i in 1..len {\n            let _ = abbreviations.get(i as u64);\n        }\n    }\n}"}
{"test_id": "cloud-hypervisor-cloud-hypervisor/cloud-hypervisor-cloud-hypervisor-db3a5f3/tests-gen/mem.inputs.rs::test_13", "code": "pub fn wait_for_epoll_threads(&mut self) {\n        self.common.wait_for_epoll_threads();\n    }", "test": "fn test_13() {\n    let bytes = [10, 54];\n    if bytes.len() < VIRTIO_MEM_DATA_SIZE + QUEUE_DATA_SIZE + QUEUE_BYTES_SIZE\n        || bytes.len() > (VIRTIO_MEM_DATA_SIZE + QUEUE_DATA_SIZE + QUEUE_BYTES_SIZE + MEM_SIZE)\n    {\n        return;\n    }\n    let virtio_mem_data = &bytes[..VIRTIO_MEM_DATA_SIZE];\n    let queue_data = &bytes[VIRTIO_MEM_DATA_SIZE..VIRTIO_MEM_DATA_SIZE + QUEUE_DATA_SIZE];\n    let queue_bytes = &bytes[VIRTIO_MEM_DATA_SIZE + QUEUE_DATA_SIZE\n        ..VIRTIO_MEM_DATA_SIZE + QUEUE_DATA_SIZE + QUEUE_BYTES_SIZE];\n    let mem_bytes = &bytes[VIRTIO_MEM_DATA_SIZE + QUEUE_DATA_SIZE + QUEUE_BYTES_SIZE..];\n    let (mut virtio_mem, virtio_mem_region) =\n        create_dummy_virtio_mem(virtio_mem_data.try_into().unwrap());\n    let q = setup_virt_queue(queue_data.try_into().unwrap());\n    let mem =\n        GuestMemoryMmap::from_ranges(&[(GuestAddress(DESC_TABLE_ADDR), QUEUE_BYTES_SIZE)]).unwrap();\n    if mem\n        .write_slice(queue_bytes, GuestAddress(DESC_TABLE_ADDR))\n        .is_err()\n    {\n        return;\n    }\n    let mem = mem.insert_region(virtio_mem_region).unwrap();\n    if mem\n        .write_slice(mem_bytes, GuestAddress(VIRTIO_MEM_REGION_ADDRESS))\n        .is_err()\n    {\n        return;\n    }\n    let guest_memory = GuestMemoryAtomic::new(mem);\n    let evt = EventFd::new(0).unwrap();\n    let queue_evt = unsafe { EventFd::from_raw_fd(libc::dup(evt.as_raw_fd())) };\n    queue_evt.write(1).unwrap();\n    virtio_mem\n        .activate(\n            guest_memory,\n            Arc::new(NoopVirtioInterrupt {}),\n            vec![(0, q, evt)],\n        )\n        .ok();\n    virtio_mem.wait_for_epoll_threads();\n}"}
{"test_id": "BurntSushi-memchr/BurntSushi-memchr-f3fde7a/tests-gen/memmem.inputs.rs::test_53", "code": "pub fn count(&self, haystack: &[u8]) -> usize {\n        // SAFETY: All of our pointers are derived directly from a borrowed\n        // slice, which is guaranteed to be valid.\n        unsafe {\n            let start = haystack.as_ptr();\n            let end = start.add(haystack.len());\n            self.count_raw(start, end)\n        }\n    }", "test": "fn test_53() {\n    let data = [10, 110, 10];\n    if data.len() < 2 {\n        return;\n    }\n    let split = std::cmp::max(data[0] as usize, 1) % data.len() as usize;\n    let (needle, haystack) = (&data[..split], &data[split..]);\n    memmem::find_iter(haystack, needle).count();\n}"}
{"test_id": "dtolnay-semver/dtolnay-semver-750f0ac/tests-gen/sort_version.inputs.rs::test_29", "code": "fn three_versions(bytes: &[u8]) -> Option<[Version; 3]> {\n    let mut inputs = str::from_utf8(bytes).ok()?.split(' ');\n    Some([\n        Version {\n            major: 0,\n            minor: 0,\n            patch: 0,\n            pre: inputs.next().map(Prerelease::new)?.ok()?,\n            build: inputs.next().map(BuildMetadata::new)?.ok()?,\n        },\n        Version {\n            major: 0,\n            minor: 0,\n            patch: 0,\n            pre: inputs.next().map(Prerelease::new)?.ok()?,\n            build: inputs.next().map(BuildMetadata::new)?.ok()?,\n        },\n        Version {\n            major: 0,\n            minor: 0,\n            patch: 0,\n            pre: inputs.next().map(Prerelease::new)?.ok()?,\n            build: inputs.next().map(BuildMetadata::new)?.ok()?,\n        },\n    ])\n}", "test": "fn test_29() {\n    let bytes = [100, 138, 195, 10];\n    if let Some([a, b, c]) = three_versions(bytes) {\n        if a < b && b < c && c < a {\n            panic!(\"{0} < {1} < {2} < {0}\", a, b, c);\n        }\n    }\n}"}
{"test_id": "rust-bakery-nom/rust-bakery-nom-869f897/tests-gen/fuzz_arithmetic.inputs.rs::test_15", "code": "fn factor(i: &str) -> IResult<&str, Expr> {\n  alt((\n    map(\n      map_res(delimited(multispace, digit, multispace), FromStr::from_str),\n      Expr::Value,\n    ),\n    parens,\n  ))(i)\n}", "test": "fn test_15() {\n  let data = [253];\n  reset();\n  let temp = match str::from_utf8(data) {\n    Ok(v) => factor(v),\n    Err(e) => factor(\"2\"),\n  };\n}"}
{"test_id": "bodil-im-rs/bodil-im-rs-2afaf54/tests-gen/hashset.inputs.rs::test_15", "code": "pub fn remove<BA>(&mut self, a: &BA) -> Option<A>\n    where\n        BA: Hash + Eq + ?Sized,\n        A: Borrow<BA>,\n    {\n        let root = PoolRef::make_mut(&self.pool.0, &mut self.root);\n        let result = root.remove(&self.pool.0, hash_key(&*self.hasher, a), 0, a);\n        if result.is_some() {\n            self.size -= 1;\n        }\n        result.map(|v| v.0)\n    }", "test": "fn test_15() {\n    let actions = [Insert(18379471549980737536)];\n    let mut set = HashSet::new();\n    let mut nat = NatSet::new();\n    for action in actions {\n        match action {\n            Action::Insert(value) => {\n                let len = nat.len() + if nat.contains(&value) { 0 } else { 1 };\n                nat.insert(value);\n                set.insert(value);\n                assert_eq!(len, set.len());\n            }\n            Action::Remove(value) => {\n                let len = nat.len() - if nat.contains(&value) { 1 } else { 0 };\n                nat.remove(&value);\n                set.remove(&value);\n                assert_eq!(len, set.len());\n            }\n        }\n        assert_eq!(nat.len(), set.len());\n        assert_eq!(HashSet::from(nat.clone()), set);\n    }\n}"}
{"test_id": "cloud-hypervisor-cloud-hypervisor/cloud-hypervisor-cloud-hypervisor-db3a5f3/tests-gen/mem.inputs.rs::test_35", "code": "pub fn wait_for_epoll_threads(&mut self) {\n        self.common.wait_for_epoll_threads();\n    }", "test": "fn test_35() {\n    let bytes = [108, 205, 235];\n    if bytes.len() < VIRTIO_MEM_DATA_SIZE + QUEUE_DATA_SIZE + QUEUE_BYTES_SIZE\n        || bytes.len() > (VIRTIO_MEM_DATA_SIZE + QUEUE_DATA_SIZE + QUEUE_BYTES_SIZE + MEM_SIZE)\n    {\n        return;\n    }\n    let virtio_mem_data = &bytes[..VIRTIO_MEM_DATA_SIZE];\n    let queue_data = &bytes[VIRTIO_MEM_DATA_SIZE..VIRTIO_MEM_DATA_SIZE + QUEUE_DATA_SIZE];\n    let queue_bytes = &bytes[VIRTIO_MEM_DATA_SIZE + QUEUE_DATA_SIZE\n        ..VIRTIO_MEM_DATA_SIZE + QUEUE_DATA_SIZE + QUEUE_BYTES_SIZE];\n    let mem_bytes = &bytes[VIRTIO_MEM_DATA_SIZE + QUEUE_DATA_SIZE + QUEUE_BYTES_SIZE..];\n    let (mut virtio_mem, virtio_mem_region) =\n        create_dummy_virtio_mem(virtio_mem_data.try_into().unwrap());\n    let q = setup_virt_queue(queue_data.try_into().unwrap());\n    let mem =\n        GuestMemoryMmap::from_ranges(&[(GuestAddress(DESC_TABLE_ADDR), QUEUE_BYTES_SIZE)]).unwrap();\n    if mem\n        .write_slice(queue_bytes, GuestAddress(DESC_TABLE_ADDR))\n        .is_err()\n    {\n        return;\n    }\n    let mem = mem.insert_region(virtio_mem_region).unwrap();\n    if mem\n        .write_slice(mem_bytes, GuestAddress(VIRTIO_MEM_REGION_ADDRESS))\n        .is_err()\n    {\n        return;\n    }\n    let guest_memory = GuestMemoryAtomic::new(mem);\n    let evt = EventFd::new(0).unwrap();\n    let queue_evt = unsafe { EventFd::from_raw_fd(libc::dup(evt.as_raw_fd())) };\n    queue_evt.write(1).unwrap();\n    virtio_mem\n        .activate(\n            guest_memory,\n            Arc::new(NoopVirtioInterrupt {}),\n            vec![(0, q, evt)],\n        )\n        .ok();\n    virtio_mem.wait_for_epoll_threads();\n}"}
{"test_id": "image-rs-image-png/image-rs-image-png-e113d76/tests-gen/buf_independent.inputs.rs::test_80", "code": "fn new (inner : R , cap : usize) -> Self { SmalBuf { inner , cap } }", "test": "fn test_80() {\n    let data = [1, 1, 0, 0];\n    let limits = png::Limits { bytes: 1 << 16 };\n    let reference = png::Decoder::new_with_limits(data, limits);\n    let smal = png::Decoder::new_with_limits(SmalBuf::new(data, 1), limits);\n    let _ = png_compare(reference, smal);\n}"}
{"test_id": "gimli-rs-gimli/gimli-rs-gimli-3947879/tests-gen/eh_frame_hdr.inputs.rs::test_60", "code": "fn parse<R: Reader>(input: &mut R) -> Result<Abbreviations> {\n        let mut abbrevs = Abbreviations::empty();\n\n        while let Some(abbrev) = Abbreviation::parse(input)? {\n            if abbrevs.insert(abbrev).is_err() {\n                return Err(Error::DuplicateAbbreviationCode);\n            }\n        }\n\n        Ok(abbrevs)\n    }", "test": "fn test_60() {\n    let eh_frame_hdr = [10, 112, 8, 112];\n    let eh_frame_hdr = EhFrameHdr::new(eh_frame_hdr, LittleEndian);\n    let bases = BaseAddresses::default()\n        .set_eh_frame(0)\n        .set_eh_frame_hdr(0)\n        .set_text(0)\n        .set_got(0);\n    let address_size = 8;\n    let _ = eh_frame_hdr.parse(&bases, address_size);\n}"}
{"test_id": "XAMPPRocky-tokei/XAMPPRocky-tokei-92ddc2e/tests-gen/parse_from_slice_total.inputs.rs::test_24", "code": "pub fn parse_from_slice (input : FuzzInput , check_total : bool) { let config = & Config { treat_doc_strings_as_comments : Some (input . treat_doc_strings_as_comments) , columns : None , hidden : None , no_ignore : None , no_ignore_parent : None , no_ignore_dot : None , no_ignore_vcs : None , sort : None , types : None , for_each_fn : None , } ; let stats = input . lang . parse_from_slice (input . data , config) ; if check_total { if let Ok (s) = str :: from_utf8 (input . data) { assert ! (stats . lines () <= s . lines () . count () , \"{} got more total lines ({}) than str::lines ({}). Code: {}, Comments: {}, Blanks: {}. treat_doc_strings_as_comments: {}. File contents (as UTF-8):\\n{}\" , input . lang . name () , stats . lines () , s . lines () . count () , stats . code , stats . comments , input . treat_doc_strings_as_comments , stats . blanks , s) } ; } }", "test": "fn test_24() {\n    let data = FuzzInput {\n        lang: AWK,\n        treat_doc_strings_as_comments: false,\n        data: [255, 255, 10, 255, 255, 255, 255, 10, 255],\n    };\n    parse_from_slice(data, true);\n}"}
{"test_id": "marshallpierce-rust-base64/marshallpierce-rust-base64-4ef33cc/tests-gen/roundtrip_no_pad.inputs.rs::test_68", "code": "fn decode<T: AsRef<[u8]>>(&self, input: T) -> Result<Vec<u8>, DecodeError> {\n        fn inner<E>(engine: &E, input_bytes: &[u8]) -> Result<Vec<u8>, DecodeError>\n        where\n            E: Engine + ?Sized,\n        {\n            let estimate = engine.internal_decoded_len_estimate(input_bytes.len());\n            let mut buffer = vec![0; estimate.decoded_len_estimate()];\n\n            let bytes_written = engine\n                .internal_decode(input_bytes, &mut buffer, estimate)?\n                .decoded_len;\n\n            buffer.truncate(bytes_written);\n\n            Ok(buffer)\n        }\n\n        inner(self, input.as_ref())\n    }", "test": "fn test_68() {\n    let data = [29, 45, 94, 10];\n    let config = general_purpose::GeneralPurposeConfig::new()\n        .with_encode_padding(false)\n        .with_decode_padding_mode(engine::DecodePaddingMode::RequireNone);\n    let engine = general_purpose::GeneralPurpose::new(&base64::alphabet::STANDARD, config);\n    let encoded = engine.encode(data);\n    let decoded = engine.decode(&encoded).unwrap();\n    assert_eq!(data, decoded.as_slice());\n}"}
{"test_id": "rust-bakery-nom/rust-bakery-nom-869f897/tests-gen/fuzz_arithmetic.inputs.rs::test_6", "code": "fn factor(i: &str) -> IResult<&str, Expr> {\n  alt((\n    map(\n      map_res(delimited(multispace, digit, multispace), FromStr::from_str),\n      Expr::Value,\n    ),\n    parens,\n  ))(i)\n}", "test": "fn test_6() {\n  let data = [138, 10];\n  reset();\n  let temp = match str::from_utf8(data) {\n    Ok(v) => factor(v),\n    Err(e) => factor(\"2\"),\n  };\n}"}
{"test_id": "cloud-hypervisor-cloud-hypervisor/cloud-hypervisor-cloud-hypervisor-db3a5f3/tests-gen/cmos.inputs.rs::test_45", "code": "fn write(&mut self, _base: u64, offset: u64, data: &[u8]) -> Option<Arc<Barrier>> {\n        if data.len() != 1 {\n            warn!(\"Invalid write size on CMOS device: {}\", data.len());\n            return None;\n        }\n\n        match offset {\n            INDEX_OFFSET => self.index = data[0],\n            DATA_OFFSET => {\n                if self.index == 0x8f && data[0] == 0 {\n                    info!(\"CMOS reset\");\n                    self.reset_evt.write(1).unwrap();\n                    if let Some(vcpus_kill_signalled) = self.vcpus_kill_signalled.take() {\n                        // Spin until we are sure the reset_evt has been handled and that when\n                        // we return from the KVM_RUN we will exit rather than re-enter the guest.\n                        while !vcpus_kill_signalled.load(Ordering::SeqCst) {\n                            // This is more effective than thread::yield_now() at\n                            // avoiding a priority inversion with the VMM thread\n                            thread::sleep(std::time::Duration::from_millis(1));\n                        }\n                    }\n                } else {\n                    self.data[(self.index & INDEX_MASK) as usize] = data[0]\n                }\n            }\n            o => warn!(\"bad write offset on CMOS device: {}\", o),\n        };\n        None\n    }", "test": "fn test_45() {\n    let bytes = [100, 39, 10, 89];\n    if bytes.len() < 16 {\n        return;\n    }\n    let mut below_4g = [0u8; 8];\n    let mut above_4g = [0u8; 8];\n    below_4g.copy_from_slice(&bytes[0..8]);\n    above_4g.copy_from_slice(&bytes[8..16]);\n    let mut cmos = Cmos::new(\n        u64::from_le_bytes(below_4g),\n        u64::from_le_bytes(above_4g),\n        EventFd::new(EFD_NONBLOCK).unwrap(),\n        None,\n    );\n    let mut i = 16;\n    while i < bytes.len() {\n        let read = bytes.get(i).unwrap_or(&0) % 2 == 0;\n        i += 1;\n        if read {\n            let offset = (bytes.get(i).unwrap_or(&0) % 2) as u64;\n            i += 1;\n            let mut out_bytes = vec![0];\n            cmos.read(0, offset, &mut out_bytes);\n        } else {\n            let offset = (bytes.get(i).unwrap_or(&0) % 2) as u64;\n            i += 1;\n            let data = vec![*bytes.get(i).unwrap_or(&0)];\n            i += 1;\n            cmos.write(0, offset, &data);\n        }\n    }\n}"}
{"test_id": "tafia-calamine/tafia-calamine-5a5804d/tests-gen/fuzz_all.inputs.rs::test_43", "code": "fn count<R: Reader<BufReader<File>>>(path: &str) -> usize {\n    let path = format!(\"{}/{}\", env!(\"CARGO_MANIFEST_DIR\"), path);\n    let mut excel: R = open_workbook(&path).expect(\"cannot open excel file\");\n\n    let sheets = excel.sheet_names().to_owned();\n    let mut count = 0;\n    for s in sheets {\n        count += excel\n            .worksheet_range(&s)\n            .unwrap()\n            .unwrap()\n            .rows()\n            .flat_map(|r| r.iter())\n            .count();\n    }\n    count\n}", "test": "fn test_43() {\n    let data = [14, 14, 76, 12];\n    let file_name = \"fuzz.xlsx\";\n    if let Ok(mut file) = File::create(file_name) {\n        if file.write_all(data).is_err() {\n            return;\n        }\n    }\n    let mut workbook: Xlsx<_> = match open_workbook(file_name) {\n        Ok(excel) => excel,\n        Err(_) => return,\n    };\n    for worksheet in workbook.worksheets() {\n        if let Some(Ok(range)) = workbook.worksheet_range(&worksheet.0) {\n            let _ = range.get_size().0 * range.get_size().1;\n            range.used_cells().count();\n        }\n    }\n    if let Some(Ok(mut vba)) = workbook.vba_project() {\n        let vba = vba.to_mut();\n        for module_name in vba.get_module_names() {\n            if vba.get_module(module_name).is_ok() {\n                for r in vba.get_references() {\n                    r.is_missing();\n                }\n            }\n        }\n    }\n    let sheets = workbook.sheet_names().to_owned();\n    for s in sheets {\n        if let Some(Ok(formula)) = workbook.worksheet_formula(&s) {\n            formula\n                .rows()\n                .flat_map(|r| r.iter().filter(|f| !f.is_empty()))\n                .count();\n        }\n    }\n}"}
{"test_id": "cloud-hypervisor-cloud-hypervisor/cloud-hypervisor-cloud-hypervisor-db3a5f3/tests-gen/console.inputs.rs::test_90", "code": "pub fn wait_for_epoll_threads(&mut self) {\n        self.common.wait_for_epoll_threads();\n    }", "test": "fn test_90() {\n    let bytes = [10, 255, 3];\n    if bytes.len() < (QUEUE_DATA_SIZE + QUEUE_BYTES_SIZE) * QUEUE_NUM + CONSOLE_INPUT_SIZE\n        || bytes.len()\n            > (QUEUE_DATA_SIZE + QUEUE_BYTES_SIZE) * QUEUE_NUM + CONSOLE_INPUT_SIZE + MEM_SIZE\n    {\n        return;\n    }\n    let (pipe_rx, mut pipe_tx) = create_pipe().unwrap();\n    let output = unsafe {\n        File::from_raw_fd(\n            memfd_create(&std::ffi::CString::new(\"fuzz_console_output\").unwrap()).unwrap(),\n        )\n    };\n    let endpoint = virtio_devices::Endpoint::FilePair(output, pipe_rx);\n    let (mut console, _) = virtio_devices::Console::new(\n        \"fuzzer_console\".to_owned(),\n        endpoint,\n        None,\n        false,\n        SeccompAction::Allow,\n        EventFd::new(EFD_NONBLOCK).unwrap(),\n        None,\n    )\n    .unwrap();\n    let console_input_bytes = &bytes[..CONSOLE_INPUT_SIZE];\n    let queue_data = &bytes[CONSOLE_INPUT_SIZE..CONSOLE_INPUT_SIZE + QUEUE_DATA_SIZE * QUEUE_NUM];\n    let queue_bytes = &bytes[CONSOLE_INPUT_SIZE + QUEUE_DATA_SIZE * QUEUE_NUM\n        ..CONSOLE_INPUT_SIZE + (QUEUE_DATA_SIZE + QUEUE_BYTES_SIZE) * QUEUE_NUM];\n    let mem_bytes = &bytes[CONSOLE_INPUT_SIZE + (QUEUE_DATA_SIZE + QUEUE_BYTES_SIZE) * QUEUE_NUM..];\n    let mut queues = setup_virt_queues(\n        &[\n            &queue_data[..QUEUE_DATA_SIZE].try_into().unwrap(),\n            &queue_data[QUEUE_DATA_SIZE..QUEUE_DATA_SIZE * 2]\n                .try_into()\n                .unwrap(),\n        ],\n        BASE_VIRT_QUEUE_ADDR,\n    );\n    let mem = GuestMemoryMmap::from_ranges(&[\n        (GuestAddress(0), MEM_SIZE),\n        (GuestAddress(BASE_VIRT_QUEUE_ADDR), queue_bytes.len()),\n    ])\n    .unwrap();\n    if mem\n        .write_slice(queue_bytes, GuestAddress(BASE_VIRT_QUEUE_ADDR))\n        .is_err()\n    {\n        return;\n    }\n    if mem.write_slice(mem_bytes, GuestAddress(0 as u64)).is_err() {\n        return;\n    }\n    let guest_memory = GuestMemoryAtomic::new(mem);\n    let input_queue = queues.remove(0);\n    let input_evt = EventFd::new(0).unwrap();\n    let input_queue_evt = unsafe { EventFd::from_raw_fd(libc::dup(input_evt.as_raw_fd())) };\n    let output_queue = queues.remove(0);\n    let output_evt = EventFd::new(0).unwrap();\n    let output_queue_evt = unsafe { EventFd::from_raw_fd(libc::dup(output_evt.as_raw_fd())) };\n    input_queue_evt.write(1).unwrap();\n    output_queue_evt.write(1).unwrap();\n    pipe_tx.write_all(console_input_bytes).unwrap();\n    console\n        .activate(\n            guest_memory,\n            Arc::new(NoopVirtioInterrupt {}),\n            vec![(0, input_queue, input_evt), (1, output_queue, output_evt)],\n        )\n        .unwrap();\n    console.wait_for_epoll_threads();\n}"}
{"test_id": "gfx-rs-naga/gfx-rs-naga-92e41b4/tests-gen/wgsl_parser.inputs.rs::test_47", "code": "pub fn parse(mut self) -> Result<crate::Module, Error> {\n        let mut module = {\n            if self.next()? != spirv::MAGIC_NUMBER {\n                return Err(Error::InvalidHeader);\n            }\n            let version_raw = self.next()?;\n            let generator = self.next()?;\n            let _bound = self.next()?;\n            let _schema = self.next()?;\n            log::info!(\"Generated by {} version {:x}\", generator, version_raw);\n            crate::Module::default()\n        };\n\n        self.layouter.clear();\n        self.dummy_functions = Arena::new();\n        self.lookup_function.clear();\n        self.function_call_graph.clear();\n\n        loop {\n            use spirv::Op;\n\n            let inst = match self.next_inst() {\n                Ok(inst) => inst,\n                Err(Error::IncompleteData) => break,\n                Err(other) => return Err(other),\n            };\n            log::debug!(\"\\t{:?} [{}]\", inst.op, inst.wc);\n\n            match inst.op {\n                Op::Capability => self.parse_capability(inst),\n                Op::Extension => self.parse_extension(inst),\n                Op::ExtInstImport => self.parse_ext_inst_import(inst),\n                Op::MemoryModel => self.parse_memory_model(inst),\n                Op::EntryPoint => self.parse_entry_point(inst),\n                Op::ExecutionMode => self.parse_execution_mode(inst),\n                Op::String => self.parse_string(inst),\n                Op::Source => self.parse_source(inst),\n                Op::SourceExtension => self.parse_source_extension(inst),\n                Op::Name => self.parse_name(inst),\n                Op::MemberName => self.parse_member_name(inst),\n                Op::ModuleProcessed => self.parse_module_processed(inst),\n                Op::Decorate => self.parse_decorate(inst),\n                Op::MemberDecorate => self.parse_member_decorate(inst),\n                Op::TypeVoid => self.parse_type_void(inst),\n                Op::TypeBool => self.parse_type_bool(inst, &mut module),\n                Op::TypeInt => self.parse_type_int(inst, &mut module),\n                Op::TypeFloat => self.parse_type_float(inst, &mut module),\n                Op::TypeVector => self.parse_type_vector(inst, &mut module),\n                Op::TypeMatrix => self.parse_type_matrix(inst, &mut module),\n                Op::TypeFunction => self.parse_type_function(inst),\n                Op::TypePointer => self.parse_type_pointer(inst, &mut module),\n                Op::TypeArray => self.parse_type_array(inst, &mut module),\n                Op::TypeRuntimeArray => self.parse_type_runtime_array(inst, &mut module),\n                Op::TypeStruct => self.parse_type_struct(inst, &mut module),\n                Op::TypeImage => self.parse_type_image(inst, &mut module),\n                Op::TypeSampledImage => self.parse_type_sampled_image(inst),\n                Op::TypeSampler => self.parse_type_sampler(inst, &mut module),\n                Op::Constant | Op::SpecConstant => self.parse_constant(inst, &mut module),\n                Op::ConstantComposite => self.parse_composite_constant(inst, &mut module),\n                Op::ConstantNull | Op::Undef => self.parse_null_constant(inst, &mut module),\n                Op::ConstantTrue => self.parse_bool_constant(inst, true, &mut module),\n                Op::ConstantFalse => self.parse_bool_constant(inst, false, &mut module),\n                Op::Variable => self.parse_global_variable(inst, &mut module),\n                Op::Function => {\n                    self.switch(ModuleState::Function, inst.op)?;\n                    inst.expect(5)?;\n                    self.parse_function(&mut module)\n                }\n                _ => Err(Error::UnsupportedInstruction(self.state, inst.op)), //TODO\n            }?;\n        }\n\n        log::info!(\"Patching...\");\n        {\n            let mut nodes = petgraph::algo::toposort(&self.function_call_graph, None)\n                .map_err(|cycle| Error::FunctionCallCycle(cycle.node_id()))?;\n            nodes.reverse(); // we need dominated first\n            let mut functions = mem::take(&mut module.functions);\n            for fun_id in nodes {\n                if fun_id > !(functions.len() as u32) {\n                    // skip all the fake IDs registered for the entry points\n                    continue;\n                }\n                let lookup = self.lookup_function.get_mut(&fun_id).unwrap();\n                // take out the function from the old array\n                let fun = mem::take(&mut functions[lookup.handle]);\n                // add it to the newly formed arena, and adjust the lookup\n                lookup.handle = module\n                    .functions\n                    .append(fun, functions.get_span(lookup.handle));\n            }\n        }\n        // patch all the functions\n        for (handle, fun) in module.functions.iter_mut() {\n            self.patch_function(Some(handle), fun)?;\n        }\n        for ep in module.entry_points.iter_mut() {\n            self.patch_function(None, &mut ep.function)?;\n        }\n\n        // Check all the images and samplers to have consistent comparison property.\n        for (handle, flags) in self.handle_sampling.drain() {\n            if !image::patch_comparison_type(\n                flags,\n                module.global_variables.get_mut(handle),\n                &mut module.types,\n            ) {\n                return Err(Error::InconsistentComparisonSampling(handle));\n            }\n        }\n\n        if !self.future_decor.is_empty() {\n            log::warn!(\"Unused item decorations: {:?}\", self.future_decor);\n            self.future_decor.clear();\n        }\n        if !self.future_member_decor.is_empty() {\n            log::warn!(\"Unused member decorations: {:?}\", self.future_member_decor);\n            self.future_member_decor.clear();\n        }\n\n        Ok(module)\n    }", "test": "fn test_47() {\n    let data = \"<\\0<<\";\n    let _result = Frontend::new().parse(&data);\n}"}
{"test_id": "cloud-hypervisor-cloud-hypervisor/cloud-hypervisor-cloud-hypervisor-db3a5f3/tests-gen/rng.inputs.rs::test_31", "code": "pub fn wait_for_epoll_threads(&mut self) {\n        self.common.wait_for_epoll_threads();\n    }", "test": "fn test_31() {\n    let bytes = [245, 10, 10];\n    if bytes.len() < (QUEUE_DATA_SIZE + QUEUE_BYTES_SIZE)\n        || bytes.len() > (QUEUE_DATA_SIZE + QUEUE_BYTES_SIZE + MEM_SIZE)\n    {\n        return;\n    }\n    let mut rng = virtio_devices::Rng::new(\n        \"fuzzer_rng\".to_owned(),\n        \"/dev/urandom\",\n        false,\n        SeccompAction::Allow,\n        EventFd::new(EFD_NONBLOCK).unwrap(),\n        None,\n    )\n    .unwrap();\n    let queue_data = &bytes[..QUEUE_DATA_SIZE];\n    let queue_bytes = &bytes[QUEUE_DATA_SIZE..QUEUE_DATA_SIZE + QUEUE_BYTES_SIZE];\n    let mem_bytes = &bytes[QUEUE_DATA_SIZE + QUEUE_BYTES_SIZE..];\n    let q = setup_virt_queue(queue_data.try_into().unwrap());\n    let mem = GuestMemoryMmap::from_ranges(&[\n        (GuestAddress(0), MEM_SIZE),\n        (GuestAddress(DESC_TABLE_ADDR), QUEUE_BYTES_SIZE),\n    ])\n    .unwrap();\n    if mem\n        .write_slice(queue_bytes, GuestAddress(DESC_TABLE_ADDR))\n        .is_err()\n    {\n        return;\n    }\n    if mem.write_slice(mem_bytes, GuestAddress(0 as u64)).is_err() {\n        return;\n    }\n    let guest_memory = GuestMemoryAtomic::new(mem);\n    let evt = EventFd::new(0).unwrap();\n    let queue_evt = unsafe { EventFd::from_raw_fd(libc::dup(evt.as_raw_fd())) };\n    queue_evt.write(1).unwrap();\n    rng.activate(\n        guest_memory,\n        Arc::new(NoopVirtioInterrupt {}),\n        vec![(0, q, evt)],\n    )\n    .ok();\n    rng.wait_for_epoll_threads();\n}"}
{"test_id": "cloud-hypervisor-cloud-hypervisor/cloud-hypervisor-cloud-hypervisor-db3a5f3/tests-gen/pmem.inputs.rs::test_73", "code": "pub fn wait_for_epoll_threads(&mut self) {\n        self.common.wait_for_epoll_threads();\n    }", "test": "fn test_73() {\n    let bytes = [10, 41, 255, 8];\n    if bytes.len() < QUEUE_DATA_SIZE || bytes.len() > (QUEUE_DATA_SIZE + MEM_SIZE) {\n        return;\n    }\n    let mut pmem = create_dummy_pmem();\n    let queue_data = &bytes[..QUEUE_DATA_SIZE];\n    let mem_bytes = &bytes[QUEUE_DATA_SIZE..];\n    let q = setup_virt_queue(queue_data.try_into().unwrap());\n    let mem = GuestMemoryMmap::from_ranges(&[(GuestAddress(0), MEM_SIZE)]).unwrap();\n    if mem.write_slice(mem_bytes, GuestAddress(0 as u64)).is_err() {\n        return;\n    }\n    let guest_memory = GuestMemoryAtomic::new(mem);\n    let evt = EventFd::new(0).unwrap();\n    let queue_evt = unsafe { EventFd::from_raw_fd(libc::dup(evt.as_raw_fd())) };\n    queue_evt.write(1).unwrap();\n    pmem.activate(\n        guest_memory,\n        Arc::new(NoopVirtioInterrupt {}),\n        vec![(0, q, evt)],\n    )\n    .ok();\n    pmem.wait_for_epoll_threads();\n}"}
{"test_id": "bodil-im-rs/bodil-im-rs-2afaf54/tests-gen/hashset.inputs.rs::test_99", "code": "pub fn remove<BA>(&mut self, a: &BA) -> Option<A>\n    where\n        BA: Hash + Eq + ?Sized,\n        A: Borrow<BA>,\n    {\n        let root = PoolRef::make_mut(&self.pool.0, &mut self.root);\n        let result = root.remove(&self.pool.0, hash_key(&*self.hasher, a), 0, a);\n        if result.is_some() {\n            self.size -= 1;\n        }\n        result.map(|v| v.0)\n    }", "test": "fn test_99() {\n    let actions = [Remove(18422256803440686582)];\n    let mut set = HashSet::new();\n    let mut nat = NatSet::new();\n    for action in actions {\n        match action {\n            Action::Insert(value) => {\n                let len = nat.len() + if nat.contains(&value) { 0 } else { 1 };\n                nat.insert(value);\n                set.insert(value);\n                assert_eq!(len, set.len());\n            }\n            Action::Remove(value) => {\n                let len = nat.len() - if nat.contains(&value) { 1 } else { 0 };\n                nat.remove(&value);\n                set.remove(&value);\n                assert_eq!(len, set.len());\n            }\n        }\n        assert_eq!(nat.len(), set.len());\n        assert_eq!(HashSet::from(nat.clone()), set);\n    }\n}"}
{"test_id": "cloud-hypervisor-cloud-hypervisor/cloud-hypervisor-cloud-hypervisor-db3a5f3/tests-gen/watchdog.inputs.rs::test_27", "code": "pub fn wait_for_epoll_threads(&mut self) {\n        self.common.wait_for_epoll_threads();\n    }", "test": "fn test_27() {\n    let bytes = [10, 35, 10];\n    if bytes.len() < QUEUE_DATA_SIZE || bytes.len() > (QUEUE_DATA_SIZE + MEM_SIZE) {\n        return;\n    }\n    let mut watchdog = virtio_devices::Watchdog::new(\n        \"fuzzer_watchdog\".to_owned(),\n        EventFd::new(EFD_NONBLOCK).unwrap(),\n        SeccompAction::Allow,\n        EventFd::new(EFD_NONBLOCK).unwrap(),\n        None,\n    )\n    .unwrap();\n    let queue_data = &bytes[..QUEUE_DATA_SIZE];\n    let mem_bytes = &bytes[QUEUE_DATA_SIZE..];\n    let q = setup_virt_queue(queue_data.try_into().unwrap());\n    let mem = GuestMemoryMmap::from_ranges(&[(GuestAddress(0), MEM_SIZE)]).unwrap();\n    if mem.write_slice(mem_bytes, GuestAddress(0 as u64)).is_err() {\n        return;\n    }\n    let guest_memory = GuestMemoryAtomic::new(mem);\n    let evt = EventFd::new(0).unwrap();\n    let queue_evt = unsafe { EventFd::from_raw_fd(libc::dup(evt.as_raw_fd())) };\n    queue_evt.write(1).unwrap();\n    watchdog\n        .activate(\n            guest_memory,\n            Arc::new(NoopVirtioInterrupt {}),\n            vec![(0, q, evt)],\n        )\n        .ok();\n    watchdog.wait_for_epoll_threads();\n}"}
{"test_id": "bodil-im-rs/bodil-im-rs-2afaf54/tests-gen/ordset.inputs.rs::test_43", "code": "pub fn remove<BA>(&mut self, a: &BA) -> Option<A>\n    where\n        BA: Hash + Eq + ?Sized,\n        A: Borrow<BA>,\n    {\n        let root = PoolRef::make_mut(&self.pool.0, &mut self.root);\n        let result = root.remove(&self.pool.0, hash_key(&*self.hasher, a), 0, a);\n        if result.is_some() {\n            self.size -= 1;\n        }\n        result.map(|v| v.0)\n    }", "test": "fn test_43() {\n    let actions = [Remove(72057589914402815)];\n    let mut set = OrdSet::new();\n    let mut nat = NatSet::new();\n    for action in actions {\n        match action {\n            Action::Insert(value) => {\n                let len = nat.len() + if nat.contains(&value) { 0 } else { 1 };\n                nat.insert(value);\n                set.insert(value);\n                assert_eq!(len, set.len());\n            }\n            Action::Remove(value) => {\n                let len = nat.len() - if nat.contains(&value) { 1 } else { 0 };\n                nat.remove(&value);\n                set.remove(&value);\n                assert_eq!(len, set.len());\n            }\n        }\n        assert_eq!(nat.len(), set.len());\n        assert_eq!(OrdSet::from(nat.clone()), set);\n    }\n}"}
{"test_id": "image-rs-image/image-rs-image-e5580ec/tests-gen/fuzzer_script_tga.inputs.rs::test_13", "code": "fn decode(encoded: &[u8]) -> Vec<u8> {\n        let decoder = JpegDecoder::new(Cursor::new(encoded)).expect(\"Could not decode image\");\n\n        let mut decoded = vec![0; decoder.total_bytes() as usize];\n        decoder\n            .read_image(&mut decoded)\n            .expect(\"Could not decode image\");\n        decoded\n    }", "test": "fn test_13() {\n    let data = [185, 10];\n    let _ = decode(data);\n}"}
{"test_id": "rustls-rustls/rustls-rustls-ae583bd/tests-gen/server.inputs.rs::test_73", "code": "pub fn process_new_packets(&mut self) -> Result<IoState, Error> {\n        match self {\n            Self::Client(conn) => conn.process_new_packets(),\n            Self::Server(conn) => conn.process_new_packets(),\n        }\n    }", "test": "fn test_73() {\n    let data = [\n        22, 3, 1, 0, 196, 1, 0, 43, 183, 3, 3, 220, 22, 51, 168, 177, 163, 9, 68, 53, 77, 77, 35,\n        28, 3, 125, 157, 176, 186, 53, 22, 211, 5, 127, 250, 92, 65, 31, 143, 93, 97, 146, 138, 0,\n        0, 20, 19, 245, 236, 2, 19, 1, 204, 169, 204, 168, 192, 44, 192, 43, 3, 1, 0, 53, 219, 184,\n        117, 77, 19, 58, 216, 56, 206, 189, 136, 130, 200, 75, 0, 154, 207, 11, 90, 130, 199, 181,\n        127, 192, 247, 83, 193, 104, 19, 154, 127, 255, 255, 255, 255, 255, 255, 255, 255, 255,\n        255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,\n        6, 156, 172, 21, 121, 252, 87, 250, 196, 88, 45, 208, 213, 175, 154, 154, 143, 29, 48, 69,\n        68, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,\n        255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,\n        255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,\n        255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,\n        255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,\n        255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 43,\n    ];\n    let config = Arc::new(\n        ServerConfig::builder()\n            .with_safe_defaults()\n            .with_no_client_auth()\n            .with_cert_resolver(Arc::new(Fail)),\n    );\n    let mut server = ServerConnection::new(config).unwrap();\n    let _ = server.read_tls(&mut io::Cursor::new(data));\n    let _ = server.process_new_packets();\n}"}
{"test_id": "rustls-rustls/rustls-rustls-ae583bd/tests-gen/message.inputs.rs::test_96", "code": "pub fn used(&self) -> usize {\n        self.cursor\n    }", "test": "fn test_96() {\n    let data = [\n        21, 3, 3, 0, 26, 221, 148, 205, 37, 159, 160, 166, 80, 140, 71, 156, 57, 30, 13, 28, 3,\n        236, 70, 135, 150, 100, 120, 24, 170, 234, 18,\n    ];\n    let mut rdr = Reader::init(data);\n    if let Ok(m) = OpaqueMessage::read(&mut rdr) {\n        let msg = match Message::try_from(m.into_plain_message()) {\n            Ok(msg) => msg,\n            Err(_) => return,\n        };\n        let enc = PlainMessage::from(msg)\n            .into_unencrypted_opaque()\n            .encode();\n        assert_eq!(enc, data[..rdr.used()]);\n    }\n}"}
{"test_id": "image-rs-image-png/image-rs-image-png-e113d76/tests-gen/decode.inputs.rs::test_56", "code": "fn png_decode (data : & [u8]) -> Result < (Option < png :: OutputInfo > , Vec < u8 >) , () > { let limits = png :: Limits { bytes : 1 << 16 } ; let decoder = png :: Decoder :: new_with_limits (data , limits) ; let mut reader = decoder . read_info () . map_err (| _ | ()) ? ; if reader . info () . raw_bytes () > 5_000_000 { return Err (()) ; } let mut img_data = vec ! [0u8 ; reader . info () . raw_bytes ()] ; let mut last_info = None ; while let Ok (info) = reader . next_frame (& mut img_data) { last_info = Some (info) ; } Ok ((last_info , img_data)) }", "test": "fn test_56() {\n    let data = [\n        137, 80, 78, 71, 13, 10, 26, 10, 0, 0, 0, 13, 73, 72, 68, 82, 0, 0, 0, 10, 0, 0, 0, 33, 16,\n        0, 0, 0, 1, 229, 9, 140, 119, 41, 1, 0, 5, 73, 68, 65, 84, 180,\n    ];\n    let _ = png_decode(&data);\n}"}
{"test_id": "cloud-hypervisor-cloud-hypervisor/cloud-hypervisor-cloud-hypervisor-db3a5f3/tests-gen/mem.inputs.rs::test_80", "code": "pub fn wait_for_epoll_threads(&mut self) {\n        self.common.wait_for_epoll_threads();\n    }", "test": "fn test_80() {\n    let bytes = [10, 10, 129, 2];\n    if bytes.len() < VIRTIO_MEM_DATA_SIZE + QUEUE_DATA_SIZE + QUEUE_BYTES_SIZE\n        || bytes.len() > (VIRTIO_MEM_DATA_SIZE + QUEUE_DATA_SIZE + QUEUE_BYTES_SIZE + MEM_SIZE)\n    {\n        return;\n    }\n    let virtio_mem_data = &bytes[..VIRTIO_MEM_DATA_SIZE];\n    let queue_data = &bytes[VIRTIO_MEM_DATA_SIZE..VIRTIO_MEM_DATA_SIZE + QUEUE_DATA_SIZE];\n    let queue_bytes = &bytes[VIRTIO_MEM_DATA_SIZE + QUEUE_DATA_SIZE\n        ..VIRTIO_MEM_DATA_SIZE + QUEUE_DATA_SIZE + QUEUE_BYTES_SIZE];\n    let mem_bytes = &bytes[VIRTIO_MEM_DATA_SIZE + QUEUE_DATA_SIZE + QUEUE_BYTES_SIZE..];\n    let (mut virtio_mem, virtio_mem_region) =\n        create_dummy_virtio_mem(virtio_mem_data.try_into().unwrap());\n    let q = setup_virt_queue(queue_data.try_into().unwrap());\n    let mem =\n        GuestMemoryMmap::from_ranges(&[(GuestAddress(DESC_TABLE_ADDR), QUEUE_BYTES_SIZE)]).unwrap();\n    if mem\n        .write_slice(queue_bytes, GuestAddress(DESC_TABLE_ADDR))\n        .is_err()\n    {\n        return;\n    }\n    let mem = mem.insert_region(virtio_mem_region).unwrap();\n    if mem\n        .write_slice(mem_bytes, GuestAddress(VIRTIO_MEM_REGION_ADDRESS))\n        .is_err()\n    {\n        return;\n    }\n    let guest_memory = GuestMemoryAtomic::new(mem);\n    let evt = EventFd::new(0).unwrap();\n    let queue_evt = unsafe { EventFd::from_raw_fd(libc::dup(evt.as_raw_fd())) };\n    queue_evt.write(1).unwrap();\n    virtio_mem\n        .activate(\n            guest_memory,\n            Arc::new(NoopVirtioInterrupt {}),\n            vec![(0, q, evt)],\n        )\n        .ok();\n    virtio_mem.wait_for_epoll_threads();\n}"}
{"test_id": "cloud-hypervisor-cloud-hypervisor/cloud-hypervisor-cloud-hypervisor-db3a5f3/tests-gen/mem.inputs.rs::test_42", "code": "pub fn wait_for_epoll_threads(&mut self) {\n        self.common.wait_for_epoll_threads();\n    }", "test": "fn test_42() {\n    let bytes = [18, 10];\n    if bytes.len() < VIRTIO_MEM_DATA_SIZE + QUEUE_DATA_SIZE + QUEUE_BYTES_SIZE\n        || bytes.len() > (VIRTIO_MEM_DATA_SIZE + QUEUE_DATA_SIZE + QUEUE_BYTES_SIZE + MEM_SIZE)\n    {\n        return;\n    }\n    let virtio_mem_data = &bytes[..VIRTIO_MEM_DATA_SIZE];\n    let queue_data = &bytes[VIRTIO_MEM_DATA_SIZE..VIRTIO_MEM_DATA_SIZE + QUEUE_DATA_SIZE];\n    let queue_bytes = &bytes[VIRTIO_MEM_DATA_SIZE + QUEUE_DATA_SIZE\n        ..VIRTIO_MEM_DATA_SIZE + QUEUE_DATA_SIZE + QUEUE_BYTES_SIZE];\n    let mem_bytes = &bytes[VIRTIO_MEM_DATA_SIZE + QUEUE_DATA_SIZE + QUEUE_BYTES_SIZE..];\n    let (mut virtio_mem, virtio_mem_region) =\n        create_dummy_virtio_mem(virtio_mem_data.try_into().unwrap());\n    let q = setup_virt_queue(queue_data.try_into().unwrap());\n    let mem =\n        GuestMemoryMmap::from_ranges(&[(GuestAddress(DESC_TABLE_ADDR), QUEUE_BYTES_SIZE)]).unwrap();\n    if mem\n        .write_slice(queue_bytes, GuestAddress(DESC_TABLE_ADDR))\n        .is_err()\n    {\n        return;\n    }\n    let mem = mem.insert_region(virtio_mem_region).unwrap();\n    if mem\n        .write_slice(mem_bytes, GuestAddress(VIRTIO_MEM_REGION_ADDRESS))\n        .is_err()\n    {\n        return;\n    }\n    let guest_memory = GuestMemoryAtomic::new(mem);\n    let evt = EventFd::new(0).unwrap();\n    let queue_evt = unsafe { EventFd::from_raw_fd(libc::dup(evt.as_raw_fd())) };\n    queue_evt.write(1).unwrap();\n    virtio_mem\n        .activate(\n            guest_memory,\n            Arc::new(NoopVirtioInterrupt {}),\n            vec![(0, q, evt)],\n        )\n        .ok();\n    virtio_mem.wait_for_epoll_threads();\n}"}
{"test_id": "gimli-rs-gimli/gimli-rs-gimli-3947879/tests-gen/eh_frame_hdr.inputs.rs::test_8", "code": "fn parse<R: Reader>(input: &mut R) -> Result<Abbreviations> {\n        let mut abbrevs = Abbreviations::empty();\n\n        while let Some(abbrev) = Abbreviation::parse(input)? {\n            if abbrevs.insert(abbrev).is_err() {\n                return Err(Error::DuplicateAbbreviationCode);\n            }\n        }\n\n        Ok(abbrevs)\n    }", "test": "fn test_8() {\n    let eh_frame_hdr = [198, 198, 10, 10];\n    let eh_frame_hdr = EhFrameHdr::new(eh_frame_hdr, LittleEndian);\n    let bases = BaseAddresses::default()\n        .set_eh_frame(0)\n        .set_eh_frame_hdr(0)\n        .set_text(0)\n        .set_got(0);\n    let address_size = 8;\n    let _ = eh_frame_hdr.parse(&bases, address_size);\n}"}
{"test_id": "bodil-im-rs/bodil-im-rs-2afaf54/tests-gen/ordset.inputs.rs::test_52", "code": "pub fn remove<BA>(&mut self, a: &BA) -> Option<A>\n    where\n        BA: Hash + Eq + ?Sized,\n        A: Borrow<BA>,\n    {\n        let root = PoolRef::make_mut(&self.pool.0, &mut self.root);\n        let result = root.remove(&self.pool.0, hash_key(&*self.hasher, a), 0, a);\n        if result.is_some() {\n            self.size -= 1;\n        }\n        result.map(|v| v.0)\n    }", "test": "fn test_52() {\n    let actions = [Insert(3095125232192255)];\n    let mut set = OrdSet::new();\n    let mut nat = NatSet::new();\n    for action in actions {\n        match action {\n            Action::Insert(value) => {\n                let len = nat.len() + if nat.contains(&value) { 0 } else { 1 };\n                nat.insert(value);\n                set.insert(value);\n                assert_eq!(len, set.len());\n            }\n            Action::Remove(value) => {\n                let len = nat.len() - if nat.contains(&value) { 1 } else { 0 };\n                nat.remove(&value);\n                set.remove(&value);\n                assert_eq!(len, set.len());\n            }\n        }\n        assert_eq!(nat.len(), set.len());\n        assert_eq!(OrdSet::from(nat.clone()), set);\n    }\n}"}
{"test_id": "gimli-rs-gimli/gimli-rs-gimli-3947879/tests-gen/eh_frame.inputs.rs::test_42", "code": "pub fn next_row(&mut self) -> Result<Option<(&LineProgramHeader<R, Offset>, &LineRow)>> {\n        // Perform any reset that was required after copying the previous row.\n        self.row.reset(self.program.header());\n\n        loop {\n            // Split the borrow here, rather than calling `self.header()`.\n            match self.instructions.next_instruction(self.program.header()) {\n                Err(err) => return Err(err),\n                Ok(None) => return Ok(None),\n                Ok(Some(instruction)) => {\n                    if self.row.execute(instruction, &mut self.program) {\n                        if self.row.tombstone {\n                            // Perform any reset that was required for the tombstone row.\n                            // Normally this is done when `next_row` is called again, but for\n                            // tombstones we loop immediately.\n                            self.row.reset(self.program.header());\n                        } else {\n                            return Ok(Some((self.header(), &self.row)));\n                        }\n                    }\n                    // Fall through, parse the next instruction, and see if that\n                    // yields a row.\n                }\n            }\n        }\n    }", "test": "fn test_42() {\n    let eh_frame = [41, 206, 96, 46];\n    let eh_frame = EhFrame::new(&eh_frame, LittleEndian);\n    let mut ctx = Box::new(UnwindContext::new());\n    let bases = BaseAddresses::default()\n        .set_eh_frame(0)\n        .set_eh_frame_hdr(0)\n        .set_text(0)\n        .set_got(0);\n    let mut entries = eh_frame.entries(&bases);\n    while let Ok(Some(entry)) = entries.next() {\n        match entry {\n            CieOrFde::Cie(_) => continue,\n            CieOrFde::Fde(partial) => {\n                if let Ok(fde) = partial.parse(EhFrame::cie_from_offset) {\n                    if let Ok(mut table) = fde.rows(&eh_frame, &bases, &mut ctx) {\n                        while let Ok(Some(_row)) = table.next_row() {\n                            continue;\n                        }\n                    }\n                }\n            }\n        };\n    }\n}"}
{"test_id": "seanmonstar-httparse/seanmonstar-httparse-638848e/tests-gen/parse_request.inputs.rs::test_78", "code": "pub fn parse(&mut self, buf: &'b [u8]) -> Result<usize> {\n        self.parse_with_config(buf, &Default::default())\n    }", "test": "fn test_78() {\n    let data = [41, 10, 41, 36];\n    let mut headers = [httparse::EMPTY_HEADER; 16];\n    let mut req = httparse::Request::new(&mut headers);\n    req.parse(data);\n}"}
{"test_id": "bodil-im-rs/bodil-im-rs-2afaf54/tests-gen/ordset.inputs.rs::test_79", "code": "pub fn remove<BA>(&mut self, a: &BA) -> Option<A>\n    where\n        BA: Hash + Eq + ?Sized,\n        A: Borrow<BA>,\n    {\n        let root = PoolRef::make_mut(&self.pool.0, &mut self.root);\n        let result = root.remove(&self.pool.0, hash_key(&*self.hasher, a), 0, a);\n        if result.is_some() {\n            self.size -= 1;\n        }\n        result.map(|v| v.0)\n    }", "test": "fn test_79() {\n    let actions = [Remove(18374709569600356351)];\n    let mut set = OrdSet::new();\n    let mut nat = NatSet::new();\n    for action in actions {\n        match action {\n            Action::Insert(value) => {\n                let len = nat.len() + if nat.contains(&value) { 0 } else { 1 };\n                nat.insert(value);\n                set.insert(value);\n                assert_eq!(len, set.len());\n            }\n            Action::Remove(value) => {\n                let len = nat.len() - if nat.contains(&value) { 1 } else { 0 };\n                nat.remove(&value);\n                set.remove(&value);\n                assert_eq!(len, set.len());\n            }\n        }\n        assert_eq!(nat.len(), set.len());\n        assert_eq!(OrdSet::from(nat.clone()), set);\n    }\n}"}
{"test_id": "BurntSushi-memchr/BurntSushi-memchr-f3fde7a/tests-gen/memmem.inputs.rs::test_65", "code": "pub fn count(&self, haystack: &[u8]) -> usize {\n        // SAFETY: All of our pointers are derived directly from a borrowed\n        // slice, which is guaranteed to be valid.\n        unsafe {\n            let start = haystack.as_ptr();\n            let end = start.add(haystack.len());\n            self.count_raw(start, end)\n        }\n    }", "test": "fn test_65() {\n    let data = [75];\n    if data.len() < 2 {\n        return;\n    }\n    let split = std::cmp::max(data[0] as usize, 1) % data.len() as usize;\n    let (needle, haystack) = (&data[..split], &data[split..]);\n    memmem::find_iter(haystack, needle).count();\n}"}
{"test_id": "zip-rs-zip/zip-rs-zip-ed187d6/tests-gen/fuzz_read.inputs.rs::test_21", "code": "fn decompress_all (data : & [u8]) -> Result < () , Box < dyn std :: error :: Error > > { let reader = std :: io :: Cursor :: new (data) ; let mut zip = zip :: ZipArchive :: new (reader) ? ; for i in 0 .. zip . len () { let mut file = zip . by_index (i) ? ; if file . size () < 1 << 20 { let _ = std :: io :: copy (& mut file , & mut std :: io :: sink ()) ; } } Ok (()) }", "test": "fn test_21() {\n    let data = [152, 10];\n    let _ = decompress_all(data);\n}"}
{"test_id": "cloud-hypervisor-cloud-hypervisor/cloud-hypervisor-cloud-hypervisor-db3a5f3/tests-gen/rng.inputs.rs::test_10", "code": "pub fn wait_for_epoll_threads(&mut self) {\n        self.common.wait_for_epoll_threads();\n    }", "test": "fn test_10() {\n    let bytes = [5, 5, 255, 255];\n    if bytes.len() < (QUEUE_DATA_SIZE + QUEUE_BYTES_SIZE)\n        || bytes.len() > (QUEUE_DATA_SIZE + QUEUE_BYTES_SIZE + MEM_SIZE)\n    {\n        return;\n    }\n    let mut rng = virtio_devices::Rng::new(\n        \"fuzzer_rng\".to_owned(),\n        \"/dev/urandom\",\n        false,\n        SeccompAction::Allow,\n        EventFd::new(EFD_NONBLOCK).unwrap(),\n        None,\n    )\n    .unwrap();\n    let queue_data = &bytes[..QUEUE_DATA_SIZE];\n    let queue_bytes = &bytes[QUEUE_DATA_SIZE..QUEUE_DATA_SIZE + QUEUE_BYTES_SIZE];\n    let mem_bytes = &bytes[QUEUE_DATA_SIZE + QUEUE_BYTES_SIZE..];\n    let q = setup_virt_queue(queue_data.try_into().unwrap());\n    let mem = GuestMemoryMmap::from_ranges(&[\n        (GuestAddress(0), MEM_SIZE),\n        (GuestAddress(DESC_TABLE_ADDR), QUEUE_BYTES_SIZE),\n    ])\n    .unwrap();\n    if mem\n        .write_slice(queue_bytes, GuestAddress(DESC_TABLE_ADDR))\n        .is_err()\n    {\n        return;\n    }\n    if mem.write_slice(mem_bytes, GuestAddress(0 as u64)).is_err() {\n        return;\n    }\n    let guest_memory = GuestMemoryAtomic::new(mem);\n    let evt = EventFd::new(0).unwrap();\n    let queue_evt = unsafe { EventFd::from_raw_fd(libc::dup(evt.as_raw_fd())) };\n    queue_evt.write(1).unwrap();\n    rng.activate(\n        guest_memory,\n        Arc::new(NoopVirtioInterrupt {}),\n        vec![(0, q, evt)],\n    )\n    .ok();\n    rng.wait_for_epoll_threads();\n}"}
{"test_id": "gimli-rs-gimli/gimli-rs-gimli-3947879/tests-gen/debug_abbrev.inputs.rs::test_79", "code": "pub fn get<R: Reader>(\n        &self,\n        debug_abbrev: &DebugAbbrev<R>,\n        offset: DebugAbbrevOffset<R::Offset>,\n    ) -> Result<Arc<Abbreviations>> {\n        if offset.0 != R::Offset::from_u8(0) {\n            return debug_abbrev.abbreviations(offset).map(Arc::new);\n        }\n        self.abbreviations\n            .get(|| debug_abbrev.abbreviations(offset))\n    }", "test": "fn test_79() {\n    let debug_abbrev = [40, 122, 169];\n    let len = debug_abbrev.len();\n    let debug_abbrev = DebugAbbrev::new(&debug_abbrev, LittleEndian);\n    let offset = DebugAbbrevOffset(0);\n    if let Ok(abbreviations) = debug_abbrev.abbreviations(offset) {\n        for i in 1..len {\n            let _ = abbreviations.get(i as u64);\n        }\n    }\n}"}
{"test_id": "BurntSushi-memchr/BurntSushi-memchr-f3fde7a/tests-gen/memrchr.inputs.rs::test_56", "code": "fn count(self) -> usize {\n        self.it.count(|s, e| {\n            // SAFETY: We rely on our generic iterator to return valid start\n            // and end pointers.\n            unsafe { count_raw(self.needle1, s, e) }\n        })\n    }", "test": "fn test_56() {\n    let data = [0, 0, 0, 0];\n    if data.is_empty() {\n        return;\n    }\n    memchr_iter(data[0], &data[1..]).rev().count();\n}"}
{"test_id": "bodil-im-rs/bodil-im-rs-2afaf54/tests-gen/hashset.inputs.rs::test_58", "code": "pub fn remove<BA>(&mut self, a: &BA) -> Option<A>\n    where\n        BA: Hash + Eq + ?Sized,\n        A: Borrow<BA>,\n    {\n        let root = PoolRef::make_mut(&self.pool.0, &mut self.root);\n        let result = root.remove(&self.pool.0, hash_key(&*self.hasher, a), 0, a);\n        if result.is_some() {\n            self.size -= 1;\n        }\n        result.map(|v| v.0)\n    }", "test": "fn test_58() {\n    let actions = [Remove(2198821208310)];\n    let mut set = HashSet::new();\n    let mut nat = NatSet::new();\n    for action in actions {\n        match action {\n            Action::Insert(value) => {\n                let len = nat.len() + if nat.contains(&value) { 0 } else { 1 };\n                nat.insert(value);\n                set.insert(value);\n                assert_eq!(len, set.len());\n            }\n            Action::Remove(value) => {\n                let len = nat.len() - if nat.contains(&value) { 1 } else { 0 };\n                nat.remove(&value);\n                set.remove(&value);\n                assert_eq!(len, set.len());\n            }\n        }\n        assert_eq!(nat.len(), set.len());\n        assert_eq!(HashSet::from(nat.clone()), set);\n    }\n}"}
{"test_id": "cloud-hypervisor-cloud-hypervisor/cloud-hypervisor-cloud-hypervisor-db3a5f3/tests-gen/block.inputs.rs::test_12", "code": "pub fn wait_for_epoll_threads(&mut self) {\n        self.common.wait_for_epoll_threads();\n    }", "test": "fn test_12() {\n    let bytes = [10, 246, 0];\n    if bytes.len() < QUEUE_DATA_SIZE || bytes.len() > (QUEUE_DATA_SIZE + MEM_SIZE) {\n        return;\n    }\n    let queue_data = &bytes[..QUEUE_DATA_SIZE];\n    let mem_bytes = &bytes[QUEUE_DATA_SIZE..];\n    let shm = memfd_create(&ffi::CString::new(\"fuzz\").unwrap(), 0).unwrap();\n    let disk_file: File = unsafe { File::from_raw_fd(shm) };\n    let qcow_disk = Box::new(RawFileDiskSync::new(disk_file)) as Box<dyn DiskFile>;\n    let mut block = Block::new(\n        \"tmp\".to_owned(),\n        qcow_disk,\n        PathBuf::from(\"\"),\n        false,\n        false,\n        2,\n        256,\n        None,\n        SeccompAction::Allow,\n        None,\n        EventFd::new(EFD_NONBLOCK).unwrap(),\n        None,\n    )\n    .unwrap();\n    let q = setup_virt_queue(queue_data.try_into().unwrap());\n    let mem = GuestMemoryMmap::from_ranges(&[(GuestAddress(0), MEM_SIZE)]).unwrap();\n    if mem.write_slice(mem_bytes, GuestAddress(0 as u64)).is_err() {\n        return;\n    }\n    let guest_memory = GuestMemoryAtomic::new(mem);\n    let evt = EventFd::new(0).unwrap();\n    let queue_evt = unsafe { EventFd::from_raw_fd(libc::dup(evt.as_raw_fd())) };\n    queue_evt.write(1).unwrap();\n    block\n        .activate(\n            guest_memory,\n            Arc::new(NoopVirtioInterrupt {}),\n            vec![(0, q, evt)],\n        )\n        .ok();\n    block.wait_for_epoll_threads();\n}"}
{"test_id": "seanmonstar-httparse/seanmonstar-httparse-638848e/tests-gen/parse_request.inputs.rs::test_3", "code": "pub fn parse(&mut self, buf: &'b [u8]) -> Result<usize> {\n        self.parse_with_config(buf, &Default::default())\n    }", "test": "fn test_3() {\n    let data = [10];\n    let mut headers = [httparse::EMPTY_HEADER; 16];\n    let mut req = httparse::Request::new(&mut headers);\n    req.parse(data);\n}"}
{"test_id": "rust-bio-rust-bio/rust-bio-rust-bio-319a0d8/tests-gen/myers_matching.inputs.rs::test_84", "code": "fn validate_alignment (aln : & Alignment , x : & [u8] , y : & [u8]) { let y = & y [aln . ystart .. aln . yend] ; let mut ix = 0 ; let mut iy = 0 ; let mut calc_dist = 0 ; for op in & aln . operations { match * op { Match => { assert ! (x [ix] == y [iy] , \"Match operation, but characters are not equal\") ; ix += 1 ; iy += 1 ; } Subst => { assert ! (x [ix] != y [iy] , \"Subst operation, but characters are equal\") ; calc_dist += 1 ; ix += 1 ; iy += 1 ; } Del => { calc_dist += 1 ; iy += 1 ; } Ins => { calc_dist += 1 ; ix += 1 ; } _ => unreachable ! () } } assert_eq ! (calc_dist , aln . score as usize) ; }", "test": "fn test_84() {\n    let data = [10, 1, 0, 145];\n    if data.len() < 3 {\n        return;\n    }\n    let (max_dist, data) = data.split_first().unwrap();\n    let (pattern_len, data) = data.split_first().unwrap();\n    let max_dist = min(64, *max_dist);\n    let pattern_len = max(1, min(64, min(data.len(), *pattern_len as usize)));\n    if data.iter().any(|&b| b < 65 || b > 122 || b > 90 && b < 97) {\n        return;\n    }\n    let (pattern, text) = data.split_at(pattern_len);\n    let max_dist = max_dist as u8;\n    let _ = MyersBuilder::new().build_64(pattern);\n    let _ = MyersBuilder::new().build_long_64(pattern);\n    let mut myers = Myers::<u64>::new(pattern);\n    let mut myers_long = long::Myers::<u8>::new(pattern);\n    let end_dist: Vec<_> = myers.find_all_end(text, max_dist).collect();\n    let end_dist_long: Vec<_> = myers_long\n        .find_all_end(text, max_dist as usize)\n        .map(|(end, dist)| (end, dist as u8))\n        .collect();\n    assert_eq!(end_dist, end_dist_long);\n    let mut aln = Alignment::default();\n    let mut aln_long = Alignment::default();\n    {\n        let mut matches = myers.find_all(text, max_dist);\n        let mut matches_long = myers_long.find_all(text, max_dist as usize);\n        matches.alignment(&mut aln);\n        matches_long.alignment(&mut aln_long);\n        let mut end_dist_iter = end_dist.iter();\n        while matches.next_alignment(&mut aln) {\n            assert!(matches_long.next_alignment(&mut aln_long));\n            assert_eq!(aln, aln_long);\n            validate_alignment(&aln, pattern, text);\n            assert!(aln.score as u8 <= max_dist);\n            let (end, dist) = end_dist_iter.next().unwrap();\n            assert_eq!(*end + 1, aln.yend);\n            assert_eq!(*dist, aln.score as u8);\n        }\n        assert!(end_dist_iter.next().is_none());\n        assert!(!matches_long.next_alignment(&mut aln_long));\n    }\n    {\n        let mut matches = myers.find_all_lazy(text, max_dist);\n        let mut matches_long = myers_long.find_all_lazy(text, max_dist as usize);\n        let mut end_dist_iter = end_dist.iter();\n        while let Some((end, dist)) = matches.next() {\n            let (end_long, dist_long) = matches_long.next().unwrap();\n            assert_eq!((end, dist), (end_long, dist_long as u8));\n            assert!(matches.alignment_at(end, &mut aln));\n            assert!(matches_long.alignment_at(end, &mut aln_long));\n            assert_eq!(aln, aln_long);\n            validate_alignment(&aln, pattern, text);\n            assert_eq!(dist, aln.score as u8);\n            assert!(aln.score as u8 <= max_dist);\n            let (end, dist) = end_dist_iter.next().unwrap();\n            assert_eq!(*end + 1, aln.yend);\n            assert_eq!(*dist, aln.score as u8);\n            assert!(!matches.alignment_at(end + 1, &mut aln));\n        }\n        assert!(end_dist_iter.next().is_none());\n    }\n    let mut matches = myers.find_all_lazy(text, u8::max_value());\n    let mut matches_long = myers_long.find_all_lazy(text, u8::max_value() as usize);\n    let mut i = 0;\n    while let Some((end, dist)) = matches.next() {\n        assert_eq!(end, i);\n        let (end_long, dist_long) = matches_long.next().unwrap();\n        assert_eq!((end, dist), (end_long, dist_long as u8));\n        assert!(matches.alignment_at(end, &mut aln));\n        assert!(matches_long.alignment_at(end, &mut aln_long));\n        assert_eq!(aln, aln_long);\n        validate_alignment(&aln, pattern, text);\n        assert_eq!(dist, aln.score as u8);\n        assert!(aln.score as u8 <= u8::max_value());\n        assert!(!matches.alignment_at(end + 1, &mut aln));\n        assert!(!matches_long.alignment_at(end + 1, &mut aln_long));\n        i += 1;\n    }\n}"}
{"test_id": "cloud-hypervisor-cloud-hypervisor/cloud-hypervisor-cloud-hypervisor-db3a5f3/tests-gen/watchdog.inputs.rs::test_3", "code": "pub fn wait_for_epoll_threads(&mut self) {\n        self.common.wait_for_epoll_threads();\n    }", "test": "fn test_3() {\n    let bytes = [42, 50];\n    if bytes.len() < QUEUE_DATA_SIZE || bytes.len() > (QUEUE_DATA_SIZE + MEM_SIZE) {\n        return;\n    }\n    let mut watchdog = virtio_devices::Watchdog::new(\n        \"fuzzer_watchdog\".to_owned(),\n        EventFd::new(EFD_NONBLOCK).unwrap(),\n        SeccompAction::Allow,\n        EventFd::new(EFD_NONBLOCK).unwrap(),\n        None,\n    )\n    .unwrap();\n    let queue_data = &bytes[..QUEUE_DATA_SIZE];\n    let mem_bytes = &bytes[QUEUE_DATA_SIZE..];\n    let q = setup_virt_queue(queue_data.try_into().unwrap());\n    let mem = GuestMemoryMmap::from_ranges(&[(GuestAddress(0), MEM_SIZE)]).unwrap();\n    if mem.write_slice(mem_bytes, GuestAddress(0 as u64)).is_err() {\n        return;\n    }\n    let guest_memory = GuestMemoryAtomic::new(mem);\n    let evt = EventFd::new(0).unwrap();\n    let queue_evt = unsafe { EventFd::from_raw_fd(libc::dup(evt.as_raw_fd())) };\n    queue_evt.write(1).unwrap();\n    watchdog\n        .activate(\n            guest_memory,\n            Arc::new(NoopVirtioInterrupt {}),\n            vec![(0, q, evt)],\n        )\n        .ok();\n    watchdog.wait_for_epoll_threads();\n}"}
{"test_id": "gfx-rs-naga/gfx-rs-naga-92e41b4/tests-gen/wgsl_parser.inputs.rs::test_11", "code": "pub fn parse(mut self) -> Result<crate::Module, Error> {\n        let mut module = {\n            if self.next()? != spirv::MAGIC_NUMBER {\n                return Err(Error::InvalidHeader);\n            }\n            let version_raw = self.next()?;\n            let generator = self.next()?;\n            let _bound = self.next()?;\n            let _schema = self.next()?;\n            log::info!(\"Generated by {} version {:x}\", generator, version_raw);\n            crate::Module::default()\n        };\n\n        self.layouter.clear();\n        self.dummy_functions = Arena::new();\n        self.lookup_function.clear();\n        self.function_call_graph.clear();\n\n        loop {\n            use spirv::Op;\n\n            let inst = match self.next_inst() {\n                Ok(inst) => inst,\n                Err(Error::IncompleteData) => break,\n                Err(other) => return Err(other),\n            };\n            log::debug!(\"\\t{:?} [{}]\", inst.op, inst.wc);\n\n            match inst.op {\n                Op::Capability => self.parse_capability(inst),\n                Op::Extension => self.parse_extension(inst),\n                Op::ExtInstImport => self.parse_ext_inst_import(inst),\n                Op::MemoryModel => self.parse_memory_model(inst),\n                Op::EntryPoint => self.parse_entry_point(inst),\n                Op::ExecutionMode => self.parse_execution_mode(inst),\n                Op::String => self.parse_string(inst),\n                Op::Source => self.parse_source(inst),\n                Op::SourceExtension => self.parse_source_extension(inst),\n                Op::Name => self.parse_name(inst),\n                Op::MemberName => self.parse_member_name(inst),\n                Op::ModuleProcessed => self.parse_module_processed(inst),\n                Op::Decorate => self.parse_decorate(inst),\n                Op::MemberDecorate => self.parse_member_decorate(inst),\n                Op::TypeVoid => self.parse_type_void(inst),\n                Op::TypeBool => self.parse_type_bool(inst, &mut module),\n                Op::TypeInt => self.parse_type_int(inst, &mut module),\n                Op::TypeFloat => self.parse_type_float(inst, &mut module),\n                Op::TypeVector => self.parse_type_vector(inst, &mut module),\n                Op::TypeMatrix => self.parse_type_matrix(inst, &mut module),\n                Op::TypeFunction => self.parse_type_function(inst),\n                Op::TypePointer => self.parse_type_pointer(inst, &mut module),\n                Op::TypeArray => self.parse_type_array(inst, &mut module),\n                Op::TypeRuntimeArray => self.parse_type_runtime_array(inst, &mut module),\n                Op::TypeStruct => self.parse_type_struct(inst, &mut module),\n                Op::TypeImage => self.parse_type_image(inst, &mut module),\n                Op::TypeSampledImage => self.parse_type_sampled_image(inst),\n                Op::TypeSampler => self.parse_type_sampler(inst, &mut module),\n                Op::Constant | Op::SpecConstant => self.parse_constant(inst, &mut module),\n                Op::ConstantComposite => self.parse_composite_constant(inst, &mut module),\n                Op::ConstantNull | Op::Undef => self.parse_null_constant(inst, &mut module),\n                Op::ConstantTrue => self.parse_bool_constant(inst, true, &mut module),\n                Op::ConstantFalse => self.parse_bool_constant(inst, false, &mut module),\n                Op::Variable => self.parse_global_variable(inst, &mut module),\n                Op::Function => {\n                    self.switch(ModuleState::Function, inst.op)?;\n                    inst.expect(5)?;\n                    self.parse_function(&mut module)\n                }\n                _ => Err(Error::UnsupportedInstruction(self.state, inst.op)), //TODO\n            }?;\n        }\n\n        log::info!(\"Patching...\");\n        {\n            let mut nodes = petgraph::algo::toposort(&self.function_call_graph, None)\n                .map_err(|cycle| Error::FunctionCallCycle(cycle.node_id()))?;\n            nodes.reverse(); // we need dominated first\n            let mut functions = mem::take(&mut module.functions);\n            for fun_id in nodes {\n                if fun_id > !(functions.len() as u32) {\n                    // skip all the fake IDs registered for the entry points\n                    continue;\n                }\n                let lookup = self.lookup_function.get_mut(&fun_id).unwrap();\n                // take out the function from the old array\n                let fun = mem::take(&mut functions[lookup.handle]);\n                // add it to the newly formed arena, and adjust the lookup\n                lookup.handle = module\n                    .functions\n                    .append(fun, functions.get_span(lookup.handle));\n            }\n        }\n        // patch all the functions\n        for (handle, fun) in module.functions.iter_mut() {\n            self.patch_function(Some(handle), fun)?;\n        }\n        for ep in module.entry_points.iter_mut() {\n            self.patch_function(None, &mut ep.function)?;\n        }\n\n        // Check all the images and samplers to have consistent comparison property.\n        for (handle, flags) in self.handle_sampling.drain() {\n            if !image::patch_comparison_type(\n                flags,\n                module.global_variables.get_mut(handle),\n                &mut module.types,\n            ) {\n                return Err(Error::InconsistentComparisonSampling(handle));\n            }\n        }\n\n        if !self.future_decor.is_empty() {\n            log::warn!(\"Unused item decorations: {:?}\", self.future_decor);\n            self.future_decor.clear();\n        }\n        if !self.future_member_decor.is_empty() {\n            log::warn!(\"Unused member decorations: {:?}\", self.future_member_decor);\n            self.future_member_decor.clear();\n        }\n\n        Ok(module)\n    }", "test": "fn test_11() {\n    let data = \"\\u{1}\";\n    let _result = Frontend::new().parse(&data);\n}"}
{"test_id": "BurntSushi-memchr/BurntSushi-memchr-f3fde7a/tests-gen/memchr2.inputs.rs::test_43", "code": "fn count(self) -> usize {\n        self.it.count(|s, e| {\n            // SAFETY: We rely on our generic iterator to return valid start\n            // and end pointers.\n            unsafe { count_raw(self.needle1, s, e) }\n        })\n    }", "test": "fn test_43() {\n    let data = [90, 90, 45];\n    if data.len() < 2 {\n        return;\n    }\n    memchr2_iter(data[0], data[1], &data[2..]).count();\n}"}
{"test_id": "BurntSushi-memchr/BurntSushi-memchr-f3fde7a/tests-gen/memrmem.inputs.rs::test_37", "code": "pub fn count(&self, haystack: &[u8]) -> usize {\n        // SAFETY: All of our pointers are derived directly from a borrowed\n        // slice, which is guaranteed to be valid.\n        unsafe {\n            let start = haystack.as_ptr();\n            let end = start.add(haystack.len());\n            self.count_raw(start, end)\n        }\n    }", "test": "fn test_37() {\n    let data = [91, 141, 10];\n    if data.len() < 2 {\n        return;\n    }\n    let split = std::cmp::max(data[0] as usize, 1) % data.len() as usize;\n    let (needle, haystack) = (&data[..split], &data[split..]);\n    memmem::rfind_iter(haystack, needle).count();\n}"}
{"test_id": "gimli-rs-gimli/gimli-rs-gimli-3947879/tests-gen/debug_line.inputs.rs::test_6", "code": "pub fn next_row(&mut self) -> Result<Option<(&LineProgramHeader<R, Offset>, &LineRow)>> {\n        // Perform any reset that was required after copying the previous row.\n        self.row.reset(self.program.header());\n\n        loop {\n            // Split the borrow here, rather than calling `self.header()`.\n            match self.instructions.next_instruction(self.program.header()) {\n                Err(err) => return Err(err),\n                Ok(None) => return Ok(None),\n                Ok(Some(instruction)) => {\n                    if self.row.execute(instruction, &mut self.program) {\n                        if self.row.tombstone {\n                            // Perform any reset that was required for the tombstone row.\n                            // Normally this is done when `next_row` is called again, but for\n                            // tombstones we loop immediately.\n                            self.row.reset(self.program.header());\n                        } else {\n                            return Ok(Some((self.header(), &self.row)));\n                        }\n                    }\n                    // Fall through, parse the next instruction, and see if that\n                    // yields a row.\n                }\n            }\n        }\n    }", "test": "fn test_6() {\n    let debug_line = [10];\n    let debug_line = DebugLine::new(&debug_line, LittleEndian);\n    let offset = DebugLineOffset(0);\n    let address_size = 8;\n    if let Ok(program) = debug_line.program(offset, address_size, None, None) {\n        let mut rows = program.rows();\n        while let Ok(Some(row)) = rows.next_row() {\n            let _ = row;\n        }\n    }\n}"}
{"test_id": "dtolnay-semver/dtolnay-semver-750f0ac/tests-gen/sort_version.inputs.rs::test_70", "code": "fn three_versions(bytes: &[u8]) -> Option<[Version; 3]> {\n    let mut inputs = str::from_utf8(bytes).ok()?.split(' ');\n    Some([\n        Version {\n            major: 0,\n            minor: 0,\n            patch: 0,\n            pre: inputs.next().map(Prerelease::new)?.ok()?,\n            build: inputs.next().map(BuildMetadata::new)?.ok()?,\n        },\n        Version {\n            major: 0,\n            minor: 0,\n            patch: 0,\n            pre: inputs.next().map(Prerelease::new)?.ok()?,\n            build: inputs.next().map(BuildMetadata::new)?.ok()?,\n        },\n        Version {\n            major: 0,\n            minor: 0,\n            patch: 0,\n            pre: inputs.next().map(Prerelease::new)?.ok()?,\n            build: inputs.next().map(BuildMetadata::new)?.ok()?,\n        },\n    ])\n}", "test": "fn test_70() {\n    let bytes = [10, 36, 61];\n    if let Some([a, b, c]) = three_versions(bytes) {\n        if a < b && b < c && c < a {\n            panic!(\"{0} < {1} < {2} < {0}\", a, b, c);\n        }\n    }\n}"}
{"test_id": "marshallpierce-rust-base64/marshallpierce-rust-base64-4ef33cc/tests-gen/roundtrip_random_config.inputs.rs::test_51", "code": "fn decode<T: AsRef<[u8]>>(&self, input: T) -> Result<Vec<u8>, DecodeError> {\n        fn inner<E>(engine: &E, input_bytes: &[u8]) -> Result<Vec<u8>, DecodeError>\n        where\n            E: Engine + ?Sized,\n        {\n            let estimate = engine.internal_decoded_len_estimate(input_bytes.len());\n            let mut buffer = vec![0; estimate.decoded_len_estimate()];\n\n            let bytes_written = engine\n                .internal_decode(input_bytes, &mut buffer, estimate)?\n                .decoded_len;\n\n            buffer.truncate(bytes_written);\n\n            Ok(buffer)\n        }\n\n        inner(self, input.as_ref())\n    }", "test": "fn test_51() {\n    let data = [35, 39];\n    let engine = utils::random_engine(data);\n    let encoded = engine.encode(data);\n    let decoded = engine.decode(&encoded).unwrap();\n    assert_eq!(data, decoded.as_slice());\n}"}
{"test_id": "marshallpierce-rust-base64/marshallpierce-rust-base64-4ef33cc/tests-gen/roundtrip.inputs.rs::test_23", "code": "pub fn decode<T: AsRef<[u8]>>(input: T) -> Result<Vec<u8>, DecodeError> {\n    STANDARD.decode(input)\n}", "test": "fn test_23() {\n    let data = [0, 0, 64, 2];\n    let encoded = STANDARD.encode(data);\n    let decoded = STANDARD.decode(&encoded).unwrap();\n    assert_eq!(data, decoded.as_slice());\n}"}
{"test_id": "BurntSushi-memchr/BurntSushi-memchr-f3fde7a/tests-gen/memrmem.inputs.rs::test_48", "code": "pub fn count(&self, haystack: &[u8]) -> usize {\n        // SAFETY: All of our pointers are derived directly from a borrowed\n        // slice, which is guaranteed to be valid.\n        unsafe {\n            let start = haystack.as_ptr();\n            let end = start.add(haystack.len());\n            self.count_raw(start, end)\n        }\n    }", "test": "fn test_48() {\n    let data = [8, 255, 14, 8];\n    if data.len() < 2 {\n        return;\n    }\n    let split = std::cmp::max(data[0] as usize, 1) % data.len() as usize;\n    let (needle, haystack) = (&data[..split], &data[split..]);\n    memmem::rfind_iter(haystack, needle).count();\n}"}
{"test_id": "cloud-hypervisor-cloud-hypervisor/cloud-hypervisor-cloud-hypervisor-db3a5f3/tests-gen/balloon.inputs.rs::test_82", "code": "pub fn wait_for_epoll_threads(&mut self) {\n        self.common.wait_for_epoll_threads();\n    }", "test": "fn test_82() {\n    let bytes = [11, 8, 10];\n    if bytes.len() < QUEUE_DATA_SIZE * QUEUE_NUM\n        || bytes.len() > (QUEUE_DATA_SIZE * QUEUE_NUM + MEM_SIZE)\n    {\n        return;\n    }\n    let mut balloon = virtio_devices::Balloon::new(\n        \"fuzzer_balloon\".to_owned(),\n        BALLOON_SIZE,\n        true,\n        true,\n        SeccompAction::Allow,\n        EventFd::new(EFD_NONBLOCK).unwrap(),\n        None,\n    )\n    .unwrap();\n    let queue_data = &bytes[..QUEUE_DATA_SIZE * QUEUE_NUM];\n    let mem_bytes = &bytes[QUEUE_DATA_SIZE * QUEUE_NUM..];\n    let mem = GuestMemoryMmap::from_ranges(&[(GuestAddress(0), MEM_SIZE)]).unwrap();\n    if mem.write_slice(mem_bytes, GuestAddress(0 as u64)).is_err() {\n        return;\n    }\n    let guest_memory = GuestMemoryAtomic::new(mem);\n    let mut queues = setup_virt_queues(\n        &[\n            &queue_data[..QUEUE_DATA_SIZE].try_into().unwrap(),\n            &queue_data[QUEUE_DATA_SIZE..QUEUE_DATA_SIZE * 2]\n                .try_into()\n                .unwrap(),\n            &queue_data[QUEUE_DATA_SIZE * 2..QUEUE_DATA_SIZE * 3]\n                .try_into()\n                .unwrap(),\n        ],\n        0,\n    );\n    let inflate_q = queues.remove(0);\n    let inflate_evt = EventFd::new(0).unwrap();\n    let inflate_queue_evt = unsafe { EventFd::from_raw_fd(libc::dup(inflate_evt.as_raw_fd())) };\n    let deflate_q = queues.remove(0);\n    let deflate_evt = EventFd::new(0).unwrap();\n    let deflate_queue_evt = unsafe { EventFd::from_raw_fd(libc::dup(deflate_evt.as_raw_fd())) };\n    let reporting_q = queues.remove(0);\n    let reporting_evt = EventFd::new(0).unwrap();\n    let reporting_queue_evt = unsafe { EventFd::from_raw_fd(libc::dup(reporting_evt.as_raw_fd())) };\n    inflate_queue_evt.write(1).unwrap();\n    deflate_queue_evt.write(1).unwrap();\n    reporting_queue_evt.write(1).unwrap();\n    balloon\n        .activate(\n            guest_memory,\n            Arc::new(NoopVirtioInterrupt {}),\n            vec![\n                (0, inflate_q, inflate_evt),\n                (1, deflate_q, deflate_evt),\n                (2, reporting_q, reporting_evt),\n            ],\n        )\n        .ok();\n    balloon.wait_for_epoll_threads();\n}"}
{"test_id": "tafia-calamine/tafia-calamine-5a5804d/tests-gen/fuzz_all.inputs.rs::test_21", "code": "fn count<R: Reader<BufReader<File>>>(path: &str) -> usize {\n    let path = format!(\"{}/{}\", env!(\"CARGO_MANIFEST_DIR\"), path);\n    let mut excel: R = open_workbook(&path).expect(\"cannot open excel file\");\n\n    let sheets = excel.sheet_names().to_owned();\n    let mut count = 0;\n    for s in sheets {\n        count += excel\n            .worksheet_range(&s)\n            .unwrap()\n            .unwrap()\n            .rows()\n            .flat_map(|r| r.iter())\n            .count();\n    }\n    count\n}", "test": "fn test_21() {\n    let data = [14, 10, 12];\n    let file_name = \"fuzz.xlsx\";\n    if let Ok(mut file) = File::create(file_name) {\n        if file.write_all(data).is_err() {\n            return;\n        }\n    }\n    let mut workbook: Xlsx<_> = match open_workbook(file_name) {\n        Ok(excel) => excel,\n        Err(_) => return,\n    };\n    for worksheet in workbook.worksheets() {\n        if let Some(Ok(range)) = workbook.worksheet_range(&worksheet.0) {\n            let _ = range.get_size().0 * range.get_size().1;\n            range.used_cells().count();\n        }\n    }\n    if let Some(Ok(mut vba)) = workbook.vba_project() {\n        let vba = vba.to_mut();\n        for module_name in vba.get_module_names() {\n            if vba.get_module(module_name).is_ok() {\n                for r in vba.get_references() {\n                    r.is_missing();\n                }\n            }\n        }\n    }\n    let sheets = workbook.sheet_names().to_owned();\n    for s in sheets {\n        if let Some(Ok(formula)) = workbook.worksheet_formula(&s) {\n            formula\n                .rows()\n                .flat_map(|r| r.iter().filter(|f| !f.is_empty()))\n                .count();\n        }\n    }\n}"}
{"test_id": "gimli-rs-gimli/gimli-rs-gimli-3947879/tests-gen/debug_info.inputs.rs::test_79", "code": "pub fn next(&mut self) -> Result<Option<RawLocListEntry<R>>> {\n        if self.input.is_empty() {\n            return Ok(None);\n        }\n\n        match RawLocListEntry::parse(&mut self.input, self.encoding, self.format) {\n            Ok(entry) => {\n                if entry.is_none() {\n                    self.input.empty();\n                }\n                Ok(entry)\n            }\n            Err(e) => {\n                self.input.empty();\n                Err(e)\n            }\n        }\n    }", "test": "fn test_79() {\n    let sections = (\n        [],\n        [\n            1, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 255, 35, 255, 255,\n        ],\n    );\n    let (debug_abbrev, debug_info) = sections;\n    let debug_abbrev = DebugAbbrev::new(&debug_abbrev, LittleEndian);\n    let debug_info = DebugInfo::new(&debug_info, LittleEndian);\n    let mut units = debug_info.units();\n    while let Ok(Some(unit)) = units.next() {\n        if let Ok(abbrevs) = unit.abbreviations(&debug_abbrev) {\n            let mut cursor = unit.entries(&abbrevs);\n            while let Ok(Some((_delta, entry))) = cursor.next_dfs() {\n                let mut attrs = entry.attrs();\n                while let Ok(Some(_attr)) = attrs.next() {\n                    continue;\n                }\n            }\n        }\n    }\n}"}
{"test_id": "quinn-rs-quinn/quinn-rs-quinn-83e4f46/tests-gen/streamid.inputs.rs::test_36", "code": "pub fn initiator(self) -> Side {\n        if self.0 & 0x1 == 0 {\n            Side::Client\n        } else {\n            Side::Server\n        }\n    }", "test": "fn test_36() {\n    let data = StreamIdParams {\n        side: Server,\n        dir: Uni,\n        index: 12226619524835552685,\n    };\n    let s = StreamId::new(data.side, data.dir, data.index);\n    assert_eq!(s.initiator(), data.side);\n    assert_eq!(s.dir(), data.dir);\n}"}
{"test_id": "gimli-rs-gimli/gimli-rs-gimli-3947879/tests-gen/debug_aranges.inputs.rs::test_64", "code": "pub fn next(&mut self) -> Result<Option<UnitHeader<R>>> {\n        if self.input.is_empty() {\n            Ok(None)\n        } else {\n            let len = self.input.len();\n            match parse_unit_header(&mut self.input, self.offset.into()) {\n                Ok(header) => {\n                    self.offset.0 += len - self.input.len();\n                    Ok(Some(header))\n                }\n                Err(e) => {\n                    self.input.empty();\n                    Err(e)\n                }\n            }\n        }\n    }", "test": "fn test_64() {\n    let debug_aranges = [15, 10];\n    let debug_aranges = DebugAranges::new(&debug_aranges, LittleEndian);\n    let mut headers = debug_aranges.headers();\n    while let Ok(Some(header)) = headers.next() {\n        let mut entries = header.entries();\n        while let Ok(Some(_entry)) = entries.next() {\n            continue;\n        }\n    }\n}"}
{"test_id": "cloud-hypervisor-cloud-hypervisor/cloud-hypervisor-cloud-hypervisor-db3a5f3/tests-gen/block.inputs.rs::test_75", "code": "pub fn wait_for_epoll_threads(&mut self) {\n        self.common.wait_for_epoll_threads();\n    }", "test": "fn test_75() {\n    let bytes = [130, 130, 59, 91];\n    if bytes.len() < QUEUE_DATA_SIZE || bytes.len() > (QUEUE_DATA_SIZE + MEM_SIZE) {\n        return;\n    }\n    let queue_data = &bytes[..QUEUE_DATA_SIZE];\n    let mem_bytes = &bytes[QUEUE_DATA_SIZE..];\n    let shm = memfd_create(&ffi::CString::new(\"fuzz\").unwrap(), 0).unwrap();\n    let disk_file: File = unsafe { File::from_raw_fd(shm) };\n    let qcow_disk = Box::new(RawFileDiskSync::new(disk_file)) as Box<dyn DiskFile>;\n    let mut block = Block::new(\n        \"tmp\".to_owned(),\n        qcow_disk,\n        PathBuf::from(\"\"),\n        false,\n        false,\n        2,\n        256,\n        None,\n        SeccompAction::Allow,\n        None,\n        EventFd::new(EFD_NONBLOCK).unwrap(),\n        None,\n    )\n    .unwrap();\n    let q = setup_virt_queue(queue_data.try_into().unwrap());\n    let mem = GuestMemoryMmap::from_ranges(&[(GuestAddress(0), MEM_SIZE)]).unwrap();\n    if mem.write_slice(mem_bytes, GuestAddress(0 as u64)).is_err() {\n        return;\n    }\n    let guest_memory = GuestMemoryAtomic::new(mem);\n    let evt = EventFd::new(0).unwrap();\n    let queue_evt = unsafe { EventFd::from_raw_fd(libc::dup(evt.as_raw_fd())) };\n    queue_evt.write(1).unwrap();\n    block\n        .activate(\n            guest_memory,\n            Arc::new(NoopVirtioInterrupt {}),\n            vec![(0, q, evt)],\n        )\n        .ok();\n    block.wait_for_epoll_threads();\n}"}
{"test_id": "image-rs-image/image-rs-image-e5580ec/tests-gen/fuzzer_script_tga.inputs.rs::test_91", "code": "fn decode(encoded: &[u8]) -> Vec<u8> {\n        let decoder = JpegDecoder::new(Cursor::new(encoded)).expect(\"Could not decode image\");\n\n        let mut decoded = vec![0; decoder.total_bytes() as usize];\n        decoder\n            .read_image(&mut decoded)\n            .expect(\"Could not decode image\");\n        decoded\n    }", "test": "fn test_91() {\n    let data = [10];\n    let _ = decode(data);\n}"}
{"test_id": "gimli-rs-gimli/gimli-rs-gimli-3947879/tests-gen/debug_abbrev.inputs.rs::test_13", "code": "pub fn get<R: Reader>(\n        &self,\n        debug_abbrev: &DebugAbbrev<R>,\n        offset: DebugAbbrevOffset<R::Offset>,\n    ) -> Result<Arc<Abbreviations>> {\n        if offset.0 != R::Offset::from_u8(0) {\n            return debug_abbrev.abbreviations(offset).map(Arc::new);\n        }\n        self.abbreviations\n            .get(|| debug_abbrev.abbreviations(offset))\n    }", "test": "fn test_13() {\n    let debug_abbrev = [91];\n    let len = debug_abbrev.len();\n    let debug_abbrev = DebugAbbrev::new(&debug_abbrev, LittleEndian);\n    let offset = DebugAbbrevOffset(0);\n    if let Ok(abbreviations) = debug_abbrev.abbreviations(offset) {\n        for i in 1..len {\n            let _ = abbreviations.get(i as u64);\n        }\n    }\n}"}
{"test_id": "image-rs-image/image-rs-image-e5580ec/tests-gen/fuzzer_script_exr.inputs.rs::test_24", "code": "fn roundtrip (bytes : & [u8]) -> ImageResult < () > { # [doc = \" Read the file from the specified path into an `Rgba32FImage`.\"] fn read_as_rgba_byte_image (read : impl Read + Seek) -> ImageResult < (u32 , u32 , Vec < u8 >) > { let mut decoder = OpenExrDecoder :: with_alpha_preference (read , Some (true)) ? ; match usize :: try_from (decoder . total_bytes ()) { Ok (decoded_size) if decoded_size <= 256 * 1024 * 1024 => { decoder . set_limits (Limits :: default ()) ? ; let (width , height) = decoder . dimensions () ; let mut buffer = vec ! [0 ; decoded_size] ; decoder . read_image (buffer . as_mut_slice ()) ? ; Ok ((width , height , buffer)) } _ => Err (image :: ImageError :: Limits (image :: error :: LimitError :: from_kind (image :: error :: LimitErrorKind :: InsufficientMemory ,) ,)) , } } # [doc = \" Write an `Rgba32FImage`.\"] # [doc = \" Assumes the writer is buffered. In most cases,\"] # [doc = \" you should wrap your writer in a `BufWriter` for best performance.\"] fn write_rgba_image (write : impl Write + Seek , (width , height , data) : & (u32 , u32 , Vec < u8 >) ,) -> ImageResult < () > { OpenExrEncoder :: new (write) . write_image (data . as_slice () , * width , * height , ColorType :: Rgba32F) } let decoded_image = read_as_rgba_byte_image (Cursor :: new (bytes)) ? ; let mut bytes = Vec :: with_capacity (bytes . len () + 20) ; write_rgba_image (Cursor :: new (& mut bytes) , & decoded_image) ? ; let redecoded_image = read_as_rgba_byte_image (Cursor :: new (bytes)) ? ; assert_eq ! (decoded_image , redecoded_image , \"image was valid but was not reproducible\") ; Ok (()) }", "test": "fn test_24() {\n    let data = [61, 63];\n    let _img = roundtrip(data);\n}"}
{"test_id": "rust-bio-rust-bio/rust-bio-rust-bio-319a0d8/tests-gen/banded_aligner.inputs.rs::test_95", "code": "fn validate_alignment_score(al: &Alignment, x: TextSlice, y: TextSlice, scoring: &Scoring<MatchParams>) -> bool {\n    use AlignmentOperation::*;\n    let path = al.path();\n    let mut score = 0;\n    if al.mode==AlignmentMode::Custom {\n        if al.xstart > 0 {\n            score += scoring.xclip_prefix;\n        }\n        if al.ystart > 0 {\n            score += scoring.yclip_prefix;\n        }\n        if al.xend < al.xlen {\n            score += scoring.xclip_suffix;\n        }\n        if al.yend < al.ylen {\n            score += scoring.yclip_suffix;\n        }\n    }\n    let mut last_op = None;\n    for (i, j, op) in path {\n        score += match op {\n            Match | Subst => scoring.match_fn.score(x[i-1], y[j-1]),\n            Del => if last_op==Some(Del) { scoring.gap_extend } else { scoring.gap_open + scoring.gap_extend },\n            Ins => if last_op==Some(Ins) { scoring.gap_extend } else { scoring.gap_open + scoring.gap_extend },\n            _ => 0,\n        };\n        last_op = Some(op);\n    }\n    al.score==score\n}", "test": "fn test_95() {\n    let data = [38, 40, 191, 38];\n    if data.len() < 50 || data.len() > 300 {\n        return;\n    }\n    let (split_byte, data) = data.split_first().unwrap();\n    let (kmer_byte, data) = data.split_first().unwrap();\n    let (window_byte, data) = data.split_first().unwrap();\n    let (match_score_byte, data) = data.split_first().unwrap();\n    let (mismatch_score_byte, data) = data.split_first().unwrap();\n    let (gap_open_byte, data) = data.split_first().unwrap();\n    let (gap_extend_byte, data) = data.split_first().unwrap();\n    let (xclip_prefix_byte, data) = data.split_first().unwrap();\n    let (xclip_suffix_byte, data) = data.split_first().unwrap();\n    let (yclip_prefix_byte, data) = data.split_first().unwrap();\n    let (yclip_suffix_byte, data) = data.split_first().unwrap();\n    let alphabets = b\"ACGT\";\n    let v: Vec<_> = data\n        .iter()\n        .map(|i| alphabets[(*i as usize) % alphabets.len()])\n        .collect();\n    let kmer_len: usize = 5 + (*kmer_byte as usize) % 10;\n    let window_size: usize = 5 + (*window_byte as usize) % 10;\n    let split_pos: usize = min(data.len() - 1, max(*split_byte as usize, 1));\n    let match_score = 1 + (*match_score_byte as i32) % 5;\n    let mismatch_score = -((*mismatch_score_byte as i32) % 10);\n    let gap_open = -((*gap_open_byte as i32) % 20);\n    let gap_extend = -((*gap_extend_byte as i32) % 10);\n    let (x, y) = v.split_at(split_pos);\n    println!(\n        \"x: {}, y: {}, k: {}, w: {}, scoring ({}, {}, {}, {})\",\n        String::from_utf8(x.to_vec()).unwrap(),\n        String::from_utf8(y.to_vec()).unwrap(),\n        kmer_len,\n        window_size,\n        gap_open,\n        gap_extend,\n        match_score,\n        mismatch_score\n    );\n    let base_score = Scoring::from_scores(gap_open, gap_extend, match_score, mismatch_score);\n    {\n        println!(\n            \"Clip scores ({}, {}, {}, {})\",\n            xclip_prefix_byte, xclip_suffix_byte, yclip_prefix_byte, yclip_suffix_byte\n        );\n        let scoring = Scoring {\n            xclip_prefix: -(*xclip_prefix_byte as i32),\n            xclip_suffix: -(*xclip_suffix_byte as i32),\n            yclip_prefix: -(*yclip_prefix_byte as i32),\n            yclip_suffix: -(*yclip_suffix_byte as i32),\n            ..base_score.clone()\n        };\n        let mut b_aligner = banded::Aligner::with_scoring(scoring.clone(), kmer_len, window_size);\n        let b_alignment = b_aligner.custom(x, y);\n        assert!(validate_alignment_score(&b_alignment, x, y, &scoring));\n        let mut f_aligner = pairwise::Aligner::with_scoring(scoring.clone());\n        let f_alignment = f_aligner.custom(x, y);\n        assert!(validate_alignment_score(&f_alignment, x, y, &scoring));\n        let band_all_alignment = b_aligner.custom_with_matches(x, y, &Vec::new());\n        assert_eq!(band_all_alignment.score, f_alignment.score);\n    }\n    {\n        let scoring = Scoring {\n            xclip_prefix: 0,\n            xclip_suffix: 0,\n            yclip_suffix: 0,\n            ..base_score.clone()\n        };\n        let mut b_aligner = banded::Aligner::with_scoring(scoring.clone(), kmer_len, window_size);\n        let b_alignment = b_aligner.custom(x, y);\n        assert_eq!(b_alignment.ystart, 0);\n        assert!(validate_alignment_score(&b_alignment, x, y, &scoring));\n        let mut f_aligner = pairwise::Aligner::with_scoring(scoring.clone());\n        let f_alignment = f_aligner.custom(x, y);\n        assert_eq!(f_alignment.ystart, 0);\n        assert!(validate_alignment_score(&f_alignment, x, y, &scoring));\n        let band_all_alignment = b_aligner.custom_with_matches(x, y, &Vec::new());\n        assert_eq!(band_all_alignment.score, f_alignment.score);\n    }\n    {\n        let scoring = Scoring {\n            xclip_prefix: 0,\n            xclip_suffix: 0,\n            yclip_prefix: 0,\n            ..base_score.clone()\n        };\n        let mut b_aligner = banded::Aligner::with_scoring(scoring.clone(), kmer_len, window_size);\n        let b_alignment = b_aligner.custom(x, y);\n        assert_eq!(b_alignment.yend, b_alignment.ylen);\n        assert!(validate_alignment_score(&b_alignment, x, y, &scoring));\n        let mut f_aligner = pairwise::Aligner::with_scoring(scoring.clone());\n        let f_alignment = f_aligner.custom(x, y);\n        assert_eq!(f_alignment.yend, f_alignment.ylen);\n        assert!(validate_alignment_score(&f_alignment, x, y, &scoring));\n        let band_all_alignment = b_aligner.custom_with_matches(x, y, &Vec::new());\n        assert_eq!(band_all_alignment.score, f_alignment.score);\n    }\n    {\n        let scoring = Scoring {\n            xclip_suffix: 0,\n            yclip_prefix: 0,\n            yclip_suffix: 0,\n            ..base_score.clone()\n        };\n        let mut b_aligner = banded::Aligner::with_scoring(scoring.clone(), kmer_len, window_size);\n        let b_alignment = b_aligner.custom(x, y);\n        assert_eq!(b_alignment.xstart, 0);\n        assert!(validate_alignment_score(&b_alignment, x, y, &scoring));\n        let mut f_aligner = pairwise::Aligner::with_scoring(scoring.clone());\n        let f_alignment = f_aligner.custom(x, y);\n        assert_eq!(f_alignment.xstart, 0);\n        assert!(validate_alignment_score(&f_alignment, x, y, &scoring));\n        let band_all_alignment = b_aligner.custom_with_matches(x, y, &Vec::new());\n        assert_eq!(band_all_alignment.score, f_alignment.score);\n    }\n    {\n        let scoring = Scoring {\n            xclip_prefix: 0,\n            yclip_prefix: 0,\n            yclip_suffix: 0,\n            ..base_score.clone()\n        };\n        let mut b_aligner = banded::Aligner::with_scoring(scoring.clone(), kmer_len, window_size);\n        let b_alignment = b_aligner.custom(x, y);\n        assert_eq!(b_alignment.xend, b_alignment.xlen);\n        assert!(validate_alignment_score(&b_alignment, x, y, &scoring));\n        let mut f_aligner = pairwise::Aligner::with_scoring(scoring.clone());\n        let f_alignment = f_aligner.custom(x, y);\n        assert_eq!(f_alignment.xend, f_alignment.xlen);\n        assert!(validate_alignment_score(&f_alignment, x, y, &scoring));\n        let band_all_alignment = b_aligner.custom_with_matches(x, y, &Vec::new());\n        assert_eq!(band_all_alignment.score, f_alignment.score);\n    }\n    {\n        let mut aligner = banded::Aligner::with_scoring(base_score.clone(), kmer_len, window_size);\n        let alignment = aligner.local(x, y);\n        assert!(alignment.score >= 0);\n        assert!(validate_alignment_score(&alignment, x, y, &base_score));\n        let alignment = aligner.semiglobal(x, y);\n        assert_eq!(alignment.xstart, 0);\n        assert_eq!(alignment.xend, alignment.xlen);\n        assert!(validate_alignment_score(&alignment, x, y, &base_score));\n        let alignment = aligner.global(x, y);\n        assert_eq!(alignment.xstart, 0);\n        assert_eq!(alignment.xend, alignment.xlen);\n        assert_eq!(alignment.ystart, 0);\n        assert_eq!(alignment.yend, alignment.ylen);\n        assert!(validate_alignment_score(&alignment, x, y, &base_score));\n    }\n    {\n        let mut aligner = pairwise::Aligner::with_scoring(base_score.clone());\n        let alignment = aligner.local(x, y);\n        assert!(alignment.score >= 0);\n        assert!(validate_alignment_score(&alignment, x, y, &base_score));\n        let alignment = aligner.semiglobal(x, y);\n        assert_eq!(alignment.xstart, 0);\n        assert_eq!(alignment.xend, alignment.xlen);\n        assert!(validate_alignment_score(&alignment, x, y, &base_score));\n        let alignment = aligner.global(x, y);\n        assert_eq!(alignment.xstart, 0);\n        assert_eq!(alignment.xend, alignment.xlen);\n        assert_eq!(alignment.ystart, 0);\n        assert_eq!(alignment.yend, alignment.ylen);\n        assert!(validate_alignment_score(&alignment, x, y, &base_score));\n    }\n}"}
{"test_id": "cloud-hypervisor-cloud-hypervisor/cloud-hypervisor-cloud-hypervisor-db3a5f3/tests-gen/balloon.inputs.rs::test_38", "code": "pub fn wait_for_epoll_threads(&mut self) {\n        self.common.wait_for_epoll_threads();\n    }", "test": "fn test_38() {\n    let bytes = [248, 98, 247, 247];\n    if bytes.len() < QUEUE_DATA_SIZE * QUEUE_NUM\n        || bytes.len() > (QUEUE_DATA_SIZE * QUEUE_NUM + MEM_SIZE)\n    {\n        return;\n    }\n    let mut balloon = virtio_devices::Balloon::new(\n        \"fuzzer_balloon\".to_owned(),\n        BALLOON_SIZE,\n        true,\n        true,\n        SeccompAction::Allow,\n        EventFd::new(EFD_NONBLOCK).unwrap(),\n        None,\n    )\n    .unwrap();\n    let queue_data = &bytes[..QUEUE_DATA_SIZE * QUEUE_NUM];\n    let mem_bytes = &bytes[QUEUE_DATA_SIZE * QUEUE_NUM..];\n    let mem = GuestMemoryMmap::from_ranges(&[(GuestAddress(0), MEM_SIZE)]).unwrap();\n    if mem.write_slice(mem_bytes, GuestAddress(0 as u64)).is_err() {\n        return;\n    }\n    let guest_memory = GuestMemoryAtomic::new(mem);\n    let mut queues = setup_virt_queues(\n        &[\n            &queue_data[..QUEUE_DATA_SIZE].try_into().unwrap(),\n            &queue_data[QUEUE_DATA_SIZE..QUEUE_DATA_SIZE * 2]\n                .try_into()\n                .unwrap(),\n            &queue_data[QUEUE_DATA_SIZE * 2..QUEUE_DATA_SIZE * 3]\n                .try_into()\n                .unwrap(),\n        ],\n        0,\n    );\n    let inflate_q = queues.remove(0);\n    let inflate_evt = EventFd::new(0).unwrap();\n    let inflate_queue_evt = unsafe { EventFd::from_raw_fd(libc::dup(inflate_evt.as_raw_fd())) };\n    let deflate_q = queues.remove(0);\n    let deflate_evt = EventFd::new(0).unwrap();\n    let deflate_queue_evt = unsafe { EventFd::from_raw_fd(libc::dup(deflate_evt.as_raw_fd())) };\n    let reporting_q = queues.remove(0);\n    let reporting_evt = EventFd::new(0).unwrap();\n    let reporting_queue_evt = unsafe { EventFd::from_raw_fd(libc::dup(reporting_evt.as_raw_fd())) };\n    inflate_queue_evt.write(1).unwrap();\n    deflate_queue_evt.write(1).unwrap();\n    reporting_queue_evt.write(1).unwrap();\n    balloon\n        .activate(\n            guest_memory,\n            Arc::new(NoopVirtioInterrupt {}),\n            vec![\n                (0, inflate_q, inflate_evt),\n                (1, deflate_q, deflate_evt),\n                (2, reporting_q, reporting_evt),\n            ],\n        )\n        .ok();\n    balloon.wait_for_epoll_threads();\n}"}
{"test_id": "bodil-im-rs/bodil-im-rs-2afaf54/tests-gen/ordset.inputs.rs::test_18", "code": "pub fn remove<BA>(&mut self, a: &BA) -> Option<A>\n    where\n        BA: Hash + Eq + ?Sized,\n        A: Borrow<BA>,\n    {\n        let root = PoolRef::make_mut(&self.pool.0, &mut self.root);\n        let result = root.remove(&self.pool.0, hash_key(&*self.hasher, a), 0, a);\n        if result.is_some() {\n            self.size -= 1;\n        }\n        result.map(|v| v.0)\n    }", "test": "fn test_18() {\n    let actions = [Insert(72057589742960640)];\n    let mut set = OrdSet::new();\n    let mut nat = NatSet::new();\n    for action in actions {\n        match action {\n            Action::Insert(value) => {\n                let len = nat.len() + if nat.contains(&value) { 0 } else { 1 };\n                nat.insert(value);\n                set.insert(value);\n                assert_eq!(len, set.len());\n            }\n            Action::Remove(value) => {\n                let len = nat.len() - if nat.contains(&value) { 1 } else { 0 };\n                nat.remove(&value);\n                set.remove(&value);\n                assert_eq!(len, set.len());\n            }\n        }\n        assert_eq!(nat.len(), set.len());\n        assert_eq!(OrdSet::from(nat.clone()), set);\n    }\n}"}
{"test_id": "BurntSushi-memchr/BurntSushi-memchr-f3fde7a/tests-gen/memchr3.inputs.rs::test_47", "code": "fn count(self) -> usize {\n        self.it.count(|s, e| {\n            // SAFETY: We rely on our generic iterator to return valid start\n            // and end pointers.\n            unsafe { count_raw(self.needle1, s, e) }\n        })\n    }", "test": "fn test_47() {\n    let data = [10, 10, 255, 48];\n    if data.len() < 3 {\n        return;\n    }\n    memchr3_iter(data[0], data[1], data[2], &data[3..]).count();\n}"}
{"test_id": "XAMPPRocky-tokei/XAMPPRocky-tokei-92ddc2e/tests-gen/parse_from_slice_total.inputs.rs::test_34", "code": "pub fn parse_from_slice (input : FuzzInput , check_total : bool) { let config = & Config { treat_doc_strings_as_comments : Some (input . treat_doc_strings_as_comments) , columns : None , hidden : None , no_ignore : None , no_ignore_parent : None , no_ignore_dot : None , no_ignore_vcs : None , sort : None , types : None , for_each_fn : None , } ; let stats = input . lang . parse_from_slice (input . data , config) ; if check_total { if let Ok (s) = str :: from_utf8 (input . data) { assert ! (stats . lines () <= s . lines () . count () , \"{} got more total lines ({}) than str::lines ({}). Code: {}, Comments: {}, Blanks: {}. treat_doc_strings_as_comments: {}. File contents (as UTF-8):\\n{}\" , input . lang . name () , stats . lines () , s . lines () . count () , stats . code , stats . comments , input . treat_doc_strings_as_comments , stats . blanks , s) } ; } }", "test": "fn test_34() {\n    let data = FuzzInput {\n        lang: Zsh,\n        treat_doc_strings_as_comments: true,\n        data: [255, 10, 10, 255, 255, 255, 255, 255, 255],\n    };\n    parse_from_slice(data, true);\n}"}
{"test_id": "image-rs-image-png/image-rs-image-png-e113d76/tests-gen/roundtrip.inputs.rs::test_45", "code": "fn encode_png < 'a > (width : u8 , filter : u8 , compression : u8 , color_type : u8 , raw_bit_depth : u8 , raw_palette : & 'a [u8] , data : & 'a [u8]) -> Option < (& 'a [u8] , Vec < u8 >) > { let width = width as u32 ; if width == 0 { return None } ; let filter = FilterType :: from_u8 (filter) ? ; let bit_depth = BitDepth :: from_u8 (raw_bit_depth) ? ; let max_palette_length = 3 * u32 :: pow (2 , raw_bit_depth as u32) as usize ; let mut palette = raw_palette ; let color_type = ColorType :: from_u8 (color_type) ? ; if let ColorType :: Indexed = color_type { if raw_palette . len () > max_palette_length { palette = & raw_palette [.. max_palette_length] ; } } let compression = match compression { 0 => png :: Compression :: Default , 1 => png :: Compression :: Fast , 2 => png :: Compression :: Best , 3 => png :: Compression :: Huffman , 4 => png :: Compression :: Rle , _ => return None , } ; let bytes_per_row = raw_row_length_from_width (bit_depth , color_type , width) - 1 ; let height = data . len () / bytes_per_row ; let total_bytes = bytes_per_row * height ; let data_to_encode = & data [.. total_bytes] ; let mut output : Vec < u8 > = Vec :: new () ; { let mut encoder = png :: Encoder :: new (& mut output , width , height as u32) ; encoder . set_depth (bit_depth) ; encoder . set_color (color_type) ; encoder . set_filter (filter) ; encoder . set_compression (compression) ; if let ColorType :: Indexed = color_type { encoder . set_palette (palette) } let mut writer = encoder . write_header () . ok () ? ; writer . write_image_data (data_to_encode) . expect (\"Encoding failed\") ; } Some ((data_to_encode , output)) }", "test": "fn test_45() {\n    let data = (10, 10, 62, 40, 10, [10, 62], []);\n    if let Some((raw, encoded)) =\n        encode_png(data.0, data.1, data.2, data.3, data.4, &data.5, &data.6)\n    {\n        let (_info, raw_decoded) = decode_png(&encoded);\n        let raw_decoded = &raw_decoded[..raw.len()];\n        assert_eq!(raw, raw_decoded);\n    }\n}"}
{"test_id": "uutils-coreutils/uutils-coreutils-73b7c46/tests-gen/fuzz_parse_size.inputs.rs::test_24", "code": "pub fn parse_size(size: &str) -> Result<u64, ParseSizeError> {\n    Parser::default().parse(size)\n}", "test": "fn test_24() {\n    let data = [10, 10, 10, 10];\n    if let Ok(s) = std::str::from_utf8(data) {\n        _ = parse_size(s);\n    }\n}"}
{"test_id": "seanmonstar-httparse/seanmonstar-httparse-638848e/tests-gen/parse_request.inputs.rs::test_44", "code": "pub fn parse(&mut self, buf: &'b [u8]) -> Result<usize> {\n        self.parse_with_config(buf, &Default::default())\n    }", "test": "fn test_44() {\n    let data = [64];\n    let mut headers = [httparse::EMPTY_HEADER; 16];\n    let mut req = httparse::Request::new(&mut headers);\n    req.parse(data);\n}"}
{"test_id": "marshallpierce-rust-base64/marshallpierce-rust-base64-4ef33cc/tests-gen/roundtrip_random_config.inputs.rs::test_45", "code": "fn decode<T: AsRef<[u8]>>(&self, input: T) -> Result<Vec<u8>, DecodeError> {\n        fn inner<E>(engine: &E, input_bytes: &[u8]) -> Result<Vec<u8>, DecodeError>\n        where\n            E: Engine + ?Sized,\n        {\n            let estimate = engine.internal_decoded_len_estimate(input_bytes.len());\n            let mut buffer = vec![0; estimate.decoded_len_estimate()];\n\n            let bytes_written = engine\n                .internal_decode(input_bytes, &mut buffer, estimate)?\n                .decoded_len;\n\n            buffer.truncate(bytes_written);\n\n            Ok(buffer)\n        }\n\n        inner(self, input.as_ref())\n    }", "test": "fn test_45() {\n    let data = [128, 2];\n    let engine = utils::random_engine(data);\n    let encoded = engine.encode(data);\n    let decoded = engine.decode(&encoded).unwrap();\n    assert_eq!(data, decoded.as_slice());\n}"}
{"test_id": "cloud-hypervisor-cloud-hypervisor/cloud-hypervisor-cloud-hypervisor-db3a5f3/tests-gen/mem.inputs.rs::test_55", "code": "pub fn wait_for_epoll_threads(&mut self) {\n        self.common.wait_for_epoll_threads();\n    }", "test": "fn test_55() {\n    let bytes = [1, 47];\n    if bytes.len() < VIRTIO_MEM_DATA_SIZE + QUEUE_DATA_SIZE + QUEUE_BYTES_SIZE\n        || bytes.len() > (VIRTIO_MEM_DATA_SIZE + QUEUE_DATA_SIZE + QUEUE_BYTES_SIZE + MEM_SIZE)\n    {\n        return;\n    }\n    let virtio_mem_data = &bytes[..VIRTIO_MEM_DATA_SIZE];\n    let queue_data = &bytes[VIRTIO_MEM_DATA_SIZE..VIRTIO_MEM_DATA_SIZE + QUEUE_DATA_SIZE];\n    let queue_bytes = &bytes[VIRTIO_MEM_DATA_SIZE + QUEUE_DATA_SIZE\n        ..VIRTIO_MEM_DATA_SIZE + QUEUE_DATA_SIZE + QUEUE_BYTES_SIZE];\n    let mem_bytes = &bytes[VIRTIO_MEM_DATA_SIZE + QUEUE_DATA_SIZE + QUEUE_BYTES_SIZE..];\n    let (mut virtio_mem, virtio_mem_region) =\n        create_dummy_virtio_mem(virtio_mem_data.try_into().unwrap());\n    let q = setup_virt_queue(queue_data.try_into().unwrap());\n    let mem =\n        GuestMemoryMmap::from_ranges(&[(GuestAddress(DESC_TABLE_ADDR), QUEUE_BYTES_SIZE)]).unwrap();\n    if mem\n        .write_slice(queue_bytes, GuestAddress(DESC_TABLE_ADDR))\n        .is_err()\n    {\n        return;\n    }\n    let mem = mem.insert_region(virtio_mem_region).unwrap();\n    if mem\n        .write_slice(mem_bytes, GuestAddress(VIRTIO_MEM_REGION_ADDRESS))\n        .is_err()\n    {\n        return;\n    }\n    let guest_memory = GuestMemoryAtomic::new(mem);\n    let evt = EventFd::new(0).unwrap();\n    let queue_evt = unsafe { EventFd::from_raw_fd(libc::dup(evt.as_raw_fd())) };\n    queue_evt.write(1).unwrap();\n    virtio_mem\n        .activate(\n            guest_memory,\n            Arc::new(NoopVirtioInterrupt {}),\n            vec![(0, q, evt)],\n        )\n        .ok();\n    virtio_mem.wait_for_epoll_threads();\n}"}
{"test_id": "seanmonstar-httparse/seanmonstar-httparse-638848e/tests-gen/parse_request.inputs.rs::test_69", "code": "pub fn parse(&mut self, buf: &'b [u8]) -> Result<usize> {\n        self.parse_with_config(buf, &Default::default())\n    }", "test": "fn test_69() {\n    let data = [8];\n    let mut headers = [httparse::EMPTY_HEADER; 16];\n    let mut req = httparse::Request::new(&mut headers);\n    req.parse(data);\n}"}
{"test_id": "BurntSushi-memchr/BurntSushi-memchr-f3fde7a/tests-gen/memrmem.inputs.rs::test_99", "code": "pub fn count(&self, haystack: &[u8]) -> usize {\n        // SAFETY: All of our pointers are derived directly from a borrowed\n        // slice, which is guaranteed to be valid.\n        unsafe {\n            let start = haystack.as_ptr();\n            let end = start.add(haystack.len());\n            self.count_raw(start, end)\n        }\n    }", "test": "fn test_99() {\n    let data = [14, 33, 14, 14];\n    if data.len() < 2 {\n        return;\n    }\n    let split = std::cmp::max(data[0] as usize, 1) % data.len() as usize;\n    let (needle, haystack) = (&data[..split], &data[split..]);\n    memmem::rfind_iter(haystack, needle).count();\n}"}
{"test_id": "BurntSushi-memchr/BurntSushi-memchr-f3fde7a/tests-gen/memchr3.inputs.rs::test_19", "code": "fn count(self) -> usize {\n        self.it.count(|s, e| {\n            // SAFETY: We rely on our generic iterator to return valid start\n            // and end pointers.\n            unsafe { count_raw(self.needle1, s, e) }\n        })\n    }", "test": "fn test_19() {\n    let data = [10, 10, 46, 10];\n    if data.len() < 3 {\n        return;\n    }\n    memchr3_iter(data[0], data[1], data[2], &data[3..]).count();\n}"}
{"test_id": "tafia-calamine/tafia-calamine-5a5804d/tests-gen/fuzz_all.inputs.rs::test_26", "code": "fn count<R: Reader<BufReader<File>>>(path: &str) -> usize {\n    let path = format!(\"{}/{}\", env!(\"CARGO_MANIFEST_DIR\"), path);\n    let mut excel: R = open_workbook(&path).expect(\"cannot open excel file\");\n\n    let sheets = excel.sheet_names().to_owned();\n    let mut count = 0;\n    for s in sheets {\n        count += excel\n            .worksheet_range(&s)\n            .unwrap()\n            .unwrap()\n            .rows()\n            .flat_map(|r| r.iter())\n            .count();\n    }\n    count\n}", "test": "fn test_26() {\n    let data = [41, 69];\n    let file_name = \"fuzz.xlsx\";\n    if let Ok(mut file) = File::create(file_name) {\n        if file.write_all(data).is_err() {\n            return;\n        }\n    }\n    let mut workbook: Xlsx<_> = match open_workbook(file_name) {\n        Ok(excel) => excel,\n        Err(_) => return,\n    };\n    for worksheet in workbook.worksheets() {\n        if let Some(Ok(range)) = workbook.worksheet_range(&worksheet.0) {\n            let _ = range.get_size().0 * range.get_size().1;\n            range.used_cells().count();\n        }\n    }\n    if let Some(Ok(mut vba)) = workbook.vba_project() {\n        let vba = vba.to_mut();\n        for module_name in vba.get_module_names() {\n            if vba.get_module(module_name).is_ok() {\n                for r in vba.get_references() {\n                    r.is_missing();\n                }\n            }\n        }\n    }\n    let sheets = workbook.sheet_names().to_owned();\n    for s in sheets {\n        if let Some(Ok(formula)) = workbook.worksheet_formula(&s) {\n            formula\n                .rows()\n                .flat_map(|r| r.iter().filter(|f| !f.is_empty()))\n                .count();\n        }\n    }\n}"}
{"test_id": "BurntSushi-memchr/BurntSushi-memchr-f3fde7a/tests-gen/memrchr3.inputs.rs::test_75", "code": "fn count(self) -> usize {\n        self.it.count(|s, e| {\n            // SAFETY: We rely on our generic iterator to return valid start\n            // and end pointers.\n            unsafe { count_raw(self.needle1, s, e) }\n        })\n    }", "test": "fn test_75() {\n    let data = [10];\n    if data.len() < 3 {\n        return;\n    }\n    memchr3_iter(data[0], data[1], data[2], &data[3..]).rev().count();\n}"}
{"test_id": "BurntSushi-memchr/BurntSushi-memchr-f3fde7a/tests-gen/memchr2.inputs.rs::test_49", "code": "fn count(self) -> usize {\n        self.it.count(|s, e| {\n            // SAFETY: We rely on our generic iterator to return valid start\n            // and end pointers.\n            unsafe { count_raw(self.needle1, s, e) }\n        })\n    }", "test": "fn test_49() {\n    let data = [148, 10];\n    if data.len() < 2 {\n        return;\n    }\n    memchr2_iter(data[0], data[1], &data[2..]).count();\n}"}
{"test_id": "gfx-rs-naga/gfx-rs-naga-92e41b4/tests-gen/wgsl_parser.inputs.rs::test_8", "code": "pub fn parse(mut self) -> Result<crate::Module, Error> {\n        let mut module = {\n            if self.next()? != spirv::MAGIC_NUMBER {\n                return Err(Error::InvalidHeader);\n            }\n            let version_raw = self.next()?;\n            let generator = self.next()?;\n            let _bound = self.next()?;\n            let _schema = self.next()?;\n            log::info!(\"Generated by {} version {:x}\", generator, version_raw);\n            crate::Module::default()\n        };\n\n        self.layouter.clear();\n        self.dummy_functions = Arena::new();\n        self.lookup_function.clear();\n        self.function_call_graph.clear();\n\n        loop {\n            use spirv::Op;\n\n            let inst = match self.next_inst() {\n                Ok(inst) => inst,\n                Err(Error::IncompleteData) => break,\n                Err(other) => return Err(other),\n            };\n            log::debug!(\"\\t{:?} [{}]\", inst.op, inst.wc);\n\n            match inst.op {\n                Op::Capability => self.parse_capability(inst),\n                Op::Extension => self.parse_extension(inst),\n                Op::ExtInstImport => self.parse_ext_inst_import(inst),\n                Op::MemoryModel => self.parse_memory_model(inst),\n                Op::EntryPoint => self.parse_entry_point(inst),\n                Op::ExecutionMode => self.parse_execution_mode(inst),\n                Op::String => self.parse_string(inst),\n                Op::Source => self.parse_source(inst),\n                Op::SourceExtension => self.parse_source_extension(inst),\n                Op::Name => self.parse_name(inst),\n                Op::MemberName => self.parse_member_name(inst),\n                Op::ModuleProcessed => self.parse_module_processed(inst),\n                Op::Decorate => self.parse_decorate(inst),\n                Op::MemberDecorate => self.parse_member_decorate(inst),\n                Op::TypeVoid => self.parse_type_void(inst),\n                Op::TypeBool => self.parse_type_bool(inst, &mut module),\n                Op::TypeInt => self.parse_type_int(inst, &mut module),\n                Op::TypeFloat => self.parse_type_float(inst, &mut module),\n                Op::TypeVector => self.parse_type_vector(inst, &mut module),\n                Op::TypeMatrix => self.parse_type_matrix(inst, &mut module),\n                Op::TypeFunction => self.parse_type_function(inst),\n                Op::TypePointer => self.parse_type_pointer(inst, &mut module),\n                Op::TypeArray => self.parse_type_array(inst, &mut module),\n                Op::TypeRuntimeArray => self.parse_type_runtime_array(inst, &mut module),\n                Op::TypeStruct => self.parse_type_struct(inst, &mut module),\n                Op::TypeImage => self.parse_type_image(inst, &mut module),\n                Op::TypeSampledImage => self.parse_type_sampled_image(inst),\n                Op::TypeSampler => self.parse_type_sampler(inst, &mut module),\n                Op::Constant | Op::SpecConstant => self.parse_constant(inst, &mut module),\n                Op::ConstantComposite => self.parse_composite_constant(inst, &mut module),\n                Op::ConstantNull | Op::Undef => self.parse_null_constant(inst, &mut module),\n                Op::ConstantTrue => self.parse_bool_constant(inst, true, &mut module),\n                Op::ConstantFalse => self.parse_bool_constant(inst, false, &mut module),\n                Op::Variable => self.parse_global_variable(inst, &mut module),\n                Op::Function => {\n                    self.switch(ModuleState::Function, inst.op)?;\n                    inst.expect(5)?;\n                    self.parse_function(&mut module)\n                }\n                _ => Err(Error::UnsupportedInstruction(self.state, inst.op)), //TODO\n            }?;\n        }\n\n        log::info!(\"Patching...\");\n        {\n            let mut nodes = petgraph::algo::toposort(&self.function_call_graph, None)\n                .map_err(|cycle| Error::FunctionCallCycle(cycle.node_id()))?;\n            nodes.reverse(); // we need dominated first\n            let mut functions = mem::take(&mut module.functions);\n            for fun_id in nodes {\n                if fun_id > !(functions.len() as u32) {\n                    // skip all the fake IDs registered for the entry points\n                    continue;\n                }\n                let lookup = self.lookup_function.get_mut(&fun_id).unwrap();\n                // take out the function from the old array\n                let fun = mem::take(&mut functions[lookup.handle]);\n                // add it to the newly formed arena, and adjust the lookup\n                lookup.handle = module\n                    .functions\n                    .append(fun, functions.get_span(lookup.handle));\n            }\n        }\n        // patch all the functions\n        for (handle, fun) in module.functions.iter_mut() {\n            self.patch_function(Some(handle), fun)?;\n        }\n        for ep in module.entry_points.iter_mut() {\n            self.patch_function(None, &mut ep.function)?;\n        }\n\n        // Check all the images and samplers to have consistent comparison property.\n        for (handle, flags) in self.handle_sampling.drain() {\n            if !image::patch_comparison_type(\n                flags,\n                module.global_variables.get_mut(handle),\n                &mut module.types,\n            ) {\n                return Err(Error::InconsistentComparisonSampling(handle));\n            }\n        }\n\n        if !self.future_decor.is_empty() {\n            log::warn!(\"Unused item decorations: {:?}\", self.future_decor);\n            self.future_decor.clear();\n        }\n        if !self.future_member_decor.is_empty() {\n            log::warn!(\"Unused member decorations: {:?}\", self.future_member_decor);\n            self.future_member_decor.clear();\n        }\n\n        Ok(module)\n    }", "test": "fn test_8() {\n    let data = \"\\u{1}0\";\n    let _result = Frontend::new().parse(&data);\n}"}
{"test_id": "gimli-rs-gimli/gimli-rs-gimli-3947879/tests-gen/eh_frame_hdr.inputs.rs::test_10", "code": "fn parse<R: Reader>(input: &mut R) -> Result<Abbreviations> {\n        let mut abbrevs = Abbreviations::empty();\n\n        while let Some(abbrev) = Abbreviation::parse(input)? {\n            if abbrevs.insert(abbrev).is_err() {\n                return Err(Error::DuplicateAbbreviationCode);\n            }\n        }\n\n        Ok(abbrevs)\n    }", "test": "fn test_10() {\n    let eh_frame_hdr = [10, 10];\n    let eh_frame_hdr = EhFrameHdr::new(eh_frame_hdr, LittleEndian);\n    let bases = BaseAddresses::default()\n        .set_eh_frame(0)\n        .set_eh_frame_hdr(0)\n        .set_text(0)\n        .set_got(0);\n    let address_size = 8;\n    let _ = eh_frame_hdr.parse(&bases, address_size);\n}"}
{"test_id": "BurntSushi-memchr/BurntSushi-memchr-f3fde7a/tests-gen/memchr2.inputs.rs::test_16", "code": "fn count(self) -> usize {\n        self.it.count(|s, e| {\n            // SAFETY: We rely on our generic iterator to return valid start\n            // and end pointers.\n            unsafe { count_raw(self.needle1, s, e) }\n        })\n    }", "test": "fn test_16() {\n    let data = [90, 90, 10];\n    if data.len() < 2 {\n        return;\n    }\n    memchr2_iter(data[0], data[1], &data[2..]).count();\n}"}
{"test_id": "cloud-hypervisor-cloud-hypervisor/cloud-hypervisor-cloud-hypervisor-db3a5f3/tests-gen/balloon.inputs.rs::test_93", "code": "pub fn wait_for_epoll_threads(&mut self) {\n        self.common.wait_for_epoll_threads();\n    }", "test": "fn test_93() {\n    let bytes = [8, 8, 8, 153];\n    if bytes.len() < QUEUE_DATA_SIZE * QUEUE_NUM\n        || bytes.len() > (QUEUE_DATA_SIZE * QUEUE_NUM + MEM_SIZE)\n    {\n        return;\n    }\n    let mut balloon = virtio_devices::Balloon::new(\n        \"fuzzer_balloon\".to_owned(),\n        BALLOON_SIZE,\n        true,\n        true,\n        SeccompAction::Allow,\n        EventFd::new(EFD_NONBLOCK).unwrap(),\n        None,\n    )\n    .unwrap();\n    let queue_data = &bytes[..QUEUE_DATA_SIZE * QUEUE_NUM];\n    let mem_bytes = &bytes[QUEUE_DATA_SIZE * QUEUE_NUM..];\n    let mem = GuestMemoryMmap::from_ranges(&[(GuestAddress(0), MEM_SIZE)]).unwrap();\n    if mem.write_slice(mem_bytes, GuestAddress(0 as u64)).is_err() {\n        return;\n    }\n    let guest_memory = GuestMemoryAtomic::new(mem);\n    let mut queues = setup_virt_queues(\n        &[\n            &queue_data[..QUEUE_DATA_SIZE].try_into().unwrap(),\n            &queue_data[QUEUE_DATA_SIZE..QUEUE_DATA_SIZE * 2]\n                .try_into()\n                .unwrap(),\n            &queue_data[QUEUE_DATA_SIZE * 2..QUEUE_DATA_SIZE * 3]\n                .try_into()\n                .unwrap(),\n        ],\n        0,\n    );\n    let inflate_q = queues.remove(0);\n    let inflate_evt = EventFd::new(0).unwrap();\n    let inflate_queue_evt = unsafe { EventFd::from_raw_fd(libc::dup(inflate_evt.as_raw_fd())) };\n    let deflate_q = queues.remove(0);\n    let deflate_evt = EventFd::new(0).unwrap();\n    let deflate_queue_evt = unsafe { EventFd::from_raw_fd(libc::dup(deflate_evt.as_raw_fd())) };\n    let reporting_q = queues.remove(0);\n    let reporting_evt = EventFd::new(0).unwrap();\n    let reporting_queue_evt = unsafe { EventFd::from_raw_fd(libc::dup(reporting_evt.as_raw_fd())) };\n    inflate_queue_evt.write(1).unwrap();\n    deflate_queue_evt.write(1).unwrap();\n    reporting_queue_evt.write(1).unwrap();\n    balloon\n        .activate(\n            guest_memory,\n            Arc::new(NoopVirtioInterrupt {}),\n            vec![\n                (0, inflate_q, inflate_evt),\n                (1, deflate_q, deflate_evt),\n                (2, reporting_q, reporting_evt),\n            ],\n        )\n        .ok();\n    balloon.wait_for_epoll_threads();\n}"}
{"test_id": "image-rs-image/image-rs-image-e5580ec/tests-gen/fuzzer_script_tga.inputs.rs::test_20", "code": "fn decode(encoded: &[u8]) -> Vec<u8> {\n        let decoder = JpegDecoder::new(Cursor::new(encoded)).expect(\"Could not decode image\");\n\n        let mut decoded = vec![0; decoder.total_bytes() as usize];\n        decoder\n            .read_image(&mut decoded)\n            .expect(\"Could not decode image\");\n        decoded\n    }", "test": "fn test_20() {\n    let data = [146];\n    let _ = decode(data);\n}"}
{"test_id": "dtolnay-syn/dtolnay-syn-b1a038c/tests-gen/create_token_buffer.inputs.rs::test_76", "code": "fn parse_str(self, s: &str) -> Result<Self::Output> {\n        self.parse2(proc_macro2::TokenStream::from_str(s)?)\n    }", "test": "fn test_76() {\n    let data = [78, 29];\n    if data.len() < 300 {\n        if let Ok(string) = str::from_utf8(data) {\n            let _ = immediate_fail.parse_str(string);\n        }\n    }\n}"}
{"test_id": "gimli-rs-gimli/gimli-rs-gimli-3947879/tests-gen/eh_frame_hdr.inputs.rs::test_25", "code": "fn parse<R: Reader>(input: &mut R) -> Result<Abbreviations> {\n        let mut abbrevs = Abbreviations::empty();\n\n        while let Some(abbrev) = Abbreviation::parse(input)? {\n            if abbrevs.insert(abbrev).is_err() {\n                return Err(Error::DuplicateAbbreviationCode);\n            }\n        }\n\n        Ok(abbrevs)\n    }", "test": "fn test_25() {\n    let eh_frame_hdr = [2];\n    let eh_frame_hdr = EhFrameHdr::new(eh_frame_hdr, LittleEndian);\n    let bases = BaseAddresses::default()\n        .set_eh_frame(0)\n        .set_eh_frame_hdr(0)\n        .set_text(0)\n        .set_got(0);\n    let address_size = 8;\n    let _ = eh_frame_hdr.parse(&bases, address_size);\n}"}
{"test_id": "XAMPPRocky-tokei/XAMPPRocky-tokei-92ddc2e/tests-gen/parse_from_slice_panic.inputs.rs::test_54", "code": "pub fn parse_from_slice (input : FuzzInput , check_total : bool) { let config = & Config { treat_doc_strings_as_comments : Some (input . treat_doc_strings_as_comments) , columns : None , hidden : None , no_ignore : None , no_ignore_parent : None , no_ignore_dot : None , no_ignore_vcs : None , sort : None , types : None , for_each_fn : None , } ; let stats = input . lang . parse_from_slice (input . data , config) ; if check_total { if let Ok (s) = str :: from_utf8 (input . data) { assert ! (stats . lines () <= s . lines () . count () , \"{} got more total lines ({}) than str::lines ({}). Code: {}, Comments: {}, Blanks: {}. treat_doc_strings_as_comments: {}. File contents (as UTF-8):\\n{}\" , input . lang . name () , stats . lines () , s . lines () . count () , stats . code , stats . comments , input . treat_doc_strings_as_comments , stats . blanks , s) } ; } }", "test": "fn test_54() {\n    let data = FuzzInput {\n        lang: ABNF,\n        treat_doc_strings_as_comments: false,\n        data: [0, 0, 0, 13, 255, 255, 254, 0],\n    };\n    parse_from_slice(data, false);\n}"}
{"test_id": "dtolnay-syn/dtolnay-syn-b1a038c/tests-gen/create_token_buffer.inputs.rs::test_36", "code": "fn parse_str(self, s: &str) -> Result<Self::Output> {\n        self.parse2(proc_macro2::TokenStream::from_str(s)?)\n    }", "test": "fn test_36() {\n    let data = [74, 0, 1];\n    if data.len() < 300 {\n        if let Ok(string) = str::from_utf8(data) {\n            let _ = immediate_fail.parse_str(string);\n        }\n    }\n}"}
{"test_id": "image-rs-image-gif/image-rs-image-gif-80fd8c0/tests-gen/decode.inputs.rs::test_15", "code": "fn try_decode (data : & [u8]) -> Result < () , gif :: DecodingError > { let mut reader = gif :: Decoder :: new (data) ? ; while let Some (_) = reader . read_next_frame () ? { } Ok (()) }", "test": "fn test_15() {\n    let data = [15, 10, 251, 36];\n    let _ = try_decode(data);\n}"}
{"test_id": "quinn-rs-quinn/quinn-rs-quinn-83e4f46/tests-gen/packet.inputs.rs::test_1", "code": "fn to_vec(params: &TransportParameters) -> Vec<u8> {\n    let mut bytes = Vec::new();\n    params.write(&mut bytes);\n    bytes\n}", "test": "fn test_1() {\n    let data = PacketParams {\n        local_cid_len: 10,\n        buf: b\"\",\n        grease_quic_bit: false,\n    };\n    let len = data.buf.len();\n    let supported_versions = DEFAULT_SUPPORTED_VERSIONS.to_vec();\n    if let Ok(decoded) = PartialDecode::new(\n        data.buf,\n        data.local_cid_len,\n        &supported_versions,\n        data.grease_quic_bit,\n    ) {\n        match decoded.1 {\n            Some(x) => assert_eq!(len, decoded.0.len() + x.len()),\n            None => assert_eq!(len, decoded.0.len()),\n        }\n    }\n}"}
{"test_id": "dtolnay-semver/dtolnay-semver-750f0ac/tests-gen/sort_version.inputs.rs::test_94", "code": "fn three_versions(bytes: &[u8]) -> Option<[Version; 3]> {\n    let mut inputs = str::from_utf8(bytes).ok()?.split(' ');\n    Some([\n        Version {\n            major: 0,\n            minor: 0,\n            patch: 0,\n            pre: inputs.next().map(Prerelease::new)?.ok()?,\n            build: inputs.next().map(BuildMetadata::new)?.ok()?,\n        },\n        Version {\n            major: 0,\n            minor: 0,\n            patch: 0,\n            pre: inputs.next().map(Prerelease::new)?.ok()?,\n            build: inputs.next().map(BuildMetadata::new)?.ok()?,\n        },\n        Version {\n            major: 0,\n            minor: 0,\n            patch: 0,\n            pre: inputs.next().map(Prerelease::new)?.ok()?,\n            build: inputs.next().map(BuildMetadata::new)?.ok()?,\n        },\n    ])\n}", "test": "fn test_94() {\n    let bytes = [10, 0];\n    if let Some([a, b, c]) = three_versions(bytes) {\n        if a < b && b < c && c < a {\n            panic!(\"{0} < {1} < {2} < {0}\", a, b, c);\n        }\n    }\n}"}
{"test_id": "cloud-hypervisor-cloud-hypervisor/cloud-hypervisor-cloud-hypervisor-db3a5f3/tests-gen/console.inputs.rs::test_8", "code": "pub fn wait_for_epoll_threads(&mut self) {\n        self.common.wait_for_epoll_threads();\n    }", "test": "fn test_8() {\n    let bytes = [93];\n    if bytes.len() < (QUEUE_DATA_SIZE + QUEUE_BYTES_SIZE) * QUEUE_NUM + CONSOLE_INPUT_SIZE\n        || bytes.len()\n            > (QUEUE_DATA_SIZE + QUEUE_BYTES_SIZE) * QUEUE_NUM + CONSOLE_INPUT_SIZE + MEM_SIZE\n    {\n        return;\n    }\n    let (pipe_rx, mut pipe_tx) = create_pipe().unwrap();\n    let output = unsafe {\n        File::from_raw_fd(\n            memfd_create(&std::ffi::CString::new(\"fuzz_console_output\").unwrap()).unwrap(),\n        )\n    };\n    let endpoint = virtio_devices::Endpoint::FilePair(output, pipe_rx);\n    let (mut console, _) = virtio_devices::Console::new(\n        \"fuzzer_console\".to_owned(),\n        endpoint,\n        None,\n        false,\n        SeccompAction::Allow,\n        EventFd::new(EFD_NONBLOCK).unwrap(),\n        None,\n    )\n    .unwrap();\n    let console_input_bytes = &bytes[..CONSOLE_INPUT_SIZE];\n    let queue_data = &bytes[CONSOLE_INPUT_SIZE..CONSOLE_INPUT_SIZE + QUEUE_DATA_SIZE * QUEUE_NUM];\n    let queue_bytes = &bytes[CONSOLE_INPUT_SIZE + QUEUE_DATA_SIZE * QUEUE_NUM\n        ..CONSOLE_INPUT_SIZE + (QUEUE_DATA_SIZE + QUEUE_BYTES_SIZE) * QUEUE_NUM];\n    let mem_bytes = &bytes[CONSOLE_INPUT_SIZE + (QUEUE_DATA_SIZE + QUEUE_BYTES_SIZE) * QUEUE_NUM..];\n    let mut queues = setup_virt_queues(\n        &[\n            &queue_data[..QUEUE_DATA_SIZE].try_into().unwrap(),\n            &queue_data[QUEUE_DATA_SIZE..QUEUE_DATA_SIZE * 2]\n                .try_into()\n                .unwrap(),\n        ],\n        BASE_VIRT_QUEUE_ADDR,\n    );\n    let mem = GuestMemoryMmap::from_ranges(&[\n        (GuestAddress(0), MEM_SIZE),\n        (GuestAddress(BASE_VIRT_QUEUE_ADDR), queue_bytes.len()),\n    ])\n    .unwrap();\n    if mem\n        .write_slice(queue_bytes, GuestAddress(BASE_VIRT_QUEUE_ADDR))\n        .is_err()\n    {\n        return;\n    }\n    if mem.write_slice(mem_bytes, GuestAddress(0 as u64)).is_err() {\n        return;\n    }\n    let guest_memory = GuestMemoryAtomic::new(mem);\n    let input_queue = queues.remove(0);\n    let input_evt = EventFd::new(0).unwrap();\n    let input_queue_evt = unsafe { EventFd::from_raw_fd(libc::dup(input_evt.as_raw_fd())) };\n    let output_queue = queues.remove(0);\n    let output_evt = EventFd::new(0).unwrap();\n    let output_queue_evt = unsafe { EventFd::from_raw_fd(libc::dup(output_evt.as_raw_fd())) };\n    input_queue_evt.write(1).unwrap();\n    output_queue_evt.write(1).unwrap();\n    pipe_tx.write_all(console_input_bytes).unwrap();\n    console\n        .activate(\n            guest_memory,\n            Arc::new(NoopVirtioInterrupt {}),\n            vec![(0, input_queue, input_evt), (1, output_queue, output_evt)],\n        )\n        .unwrap();\n    console.wait_for_epoll_threads();\n}"}
{"test_id": "cloud-hypervisor-cloud-hypervisor/cloud-hypervisor-cloud-hypervisor-db3a5f3/tests-gen/mem.inputs.rs::test_39", "code": "pub fn wait_for_epoll_threads(&mut self) {\n        self.common.wait_for_epoll_threads();\n    }", "test": "fn test_39() {\n    let bytes = [26, 26, 26, 154];\n    if bytes.len() < VIRTIO_MEM_DATA_SIZE + QUEUE_DATA_SIZE + QUEUE_BYTES_SIZE\n        || bytes.len() > (VIRTIO_MEM_DATA_SIZE + QUEUE_DATA_SIZE + QUEUE_BYTES_SIZE + MEM_SIZE)\n    {\n        return;\n    }\n    let virtio_mem_data = &bytes[..VIRTIO_MEM_DATA_SIZE];\n    let queue_data = &bytes[VIRTIO_MEM_DATA_SIZE..VIRTIO_MEM_DATA_SIZE + QUEUE_DATA_SIZE];\n    let queue_bytes = &bytes[VIRTIO_MEM_DATA_SIZE + QUEUE_DATA_SIZE\n        ..VIRTIO_MEM_DATA_SIZE + QUEUE_DATA_SIZE + QUEUE_BYTES_SIZE];\n    let mem_bytes = &bytes[VIRTIO_MEM_DATA_SIZE + QUEUE_DATA_SIZE + QUEUE_BYTES_SIZE..];\n    let (mut virtio_mem, virtio_mem_region) =\n        create_dummy_virtio_mem(virtio_mem_data.try_into().unwrap());\n    let q = setup_virt_queue(queue_data.try_into().unwrap());\n    let mem =\n        GuestMemoryMmap::from_ranges(&[(GuestAddress(DESC_TABLE_ADDR), QUEUE_BYTES_SIZE)]).unwrap();\n    if mem\n        .write_slice(queue_bytes, GuestAddress(DESC_TABLE_ADDR))\n        .is_err()\n    {\n        return;\n    }\n    let mem = mem.insert_region(virtio_mem_region).unwrap();\n    if mem\n        .write_slice(mem_bytes, GuestAddress(VIRTIO_MEM_REGION_ADDRESS))\n        .is_err()\n    {\n        return;\n    }\n    let guest_memory = GuestMemoryAtomic::new(mem);\n    let evt = EventFd::new(0).unwrap();\n    let queue_evt = unsafe { EventFd::from_raw_fd(libc::dup(evt.as_raw_fd())) };\n    queue_evt.write(1).unwrap();\n    virtio_mem\n        .activate(\n            guest_memory,\n            Arc::new(NoopVirtioInterrupt {}),\n            vec![(0, q, evt)],\n        )\n        .ok();\n    virtio_mem.wait_for_epoll_threads();\n}"}
{"test_id": "BurntSushi-memchr/BurntSushi-memchr-f3fde7a/tests-gen/memchr3.inputs.rs::test_94", "code": "fn count(self) -> usize {\n        self.it.count(|s, e| {\n            // SAFETY: We rely on our generic iterator to return valid start\n            // and end pointers.\n            unsafe { count_raw(self.needle1, s, e) }\n        })\n    }", "test": "fn test_94() {\n    let data = [254, 255, 14, 10];\n    if data.len() < 3 {\n        return;\n    }\n    memchr3_iter(data[0], data[1], data[2], &data[3..]).count();\n}"}
{"test_id": "bodil-im-rs/bodil-im-rs-2afaf54/tests-gen/hashset.inputs.rs::test_20", "code": "pub fn remove<BA>(&mut self, a: &BA) -> Option<A>\n    where\n        BA: Hash + Eq + ?Sized,\n        A: Borrow<BA>,\n    {\n        let root = PoolRef::make_mut(&self.pool.0, &mut self.root);\n        let result = root.remove(&self.pool.0, hash_key(&*self.hasher, a), 0, a);\n        if result.is_some() {\n            self.size -= 1;\n        }\n        result.map(|v| v.0)\n    }", "test": "fn test_20() {\n    let actions = [Insert(1881096170283663104)];\n    let mut set = HashSet::new();\n    let mut nat = NatSet::new();\n    for action in actions {\n        match action {\n            Action::Insert(value) => {\n                let len = nat.len() + if nat.contains(&value) { 0 } else { 1 };\n                nat.insert(value);\n                set.insert(value);\n                assert_eq!(len, set.len());\n            }\n            Action::Remove(value) => {\n                let len = nat.len() - if nat.contains(&value) { 1 } else { 0 };\n                nat.remove(&value);\n                set.remove(&value);\n                assert_eq!(len, set.len());\n            }\n        }\n        assert_eq!(nat.len(), set.len());\n        assert_eq!(HashSet::from(nat.clone()), set);\n    }\n}"}
{"test_id": "marshallpierce-rust-base64/marshallpierce-rust-base64-4ef33cc/tests-gen/decode_random.inputs.rs::test_74", "code": "fn decode<T: AsRef<[u8]>>(&self, input: T) -> Result<Vec<u8>, DecodeError> {\n        fn inner<E>(engine: &E, input_bytes: &[u8]) -> Result<Vec<u8>, DecodeError>\n        where\n            E: Engine + ?Sized,\n        {\n            let estimate = engine.internal_decoded_len_estimate(input_bytes.len());\n            let mut buffer = vec![0; estimate.decoded_len_estimate()];\n\n            let bytes_written = engine\n                .internal_decode(input_bytes, &mut buffer, estimate)?\n                .decoded_len;\n\n            buffer.truncate(bytes_written);\n\n            Ok(buffer)\n        }\n\n        inner(self, input.as_ref())\n    }", "test": "fn test_74() {\n    let data = [48];\n    let engine = utils::random_engine(data);\n    let _ = engine.decode(data);\n}"}
{"test_id": "BurntSushi-memchr/BurntSushi-memchr-f3fde7a/tests-gen/memrchr3.inputs.rs::test_76", "code": "fn count(self) -> usize {\n        self.it.count(|s, e| {\n            // SAFETY: We rely on our generic iterator to return valid start\n            // and end pointers.\n            unsafe { count_raw(self.needle1, s, e) }\n        })\n    }", "test": "fn test_76() {\n    let data = [10];\n    if data.len() < 3 {\n        return;\n    }\n    memchr3_iter(data[0], data[1], data[2], &data[3..]).rev().count();\n}"}
{"test_id": "BurntSushi-memchr/BurntSushi-memchr-f3fde7a/tests-gen/memchr2.inputs.rs::test_96", "code": "fn count(self) -> usize {\n        self.it.count(|s, e| {\n            // SAFETY: We rely on our generic iterator to return valid start\n            // and end pointers.\n            unsafe { count_raw(self.needle1, s, e) }\n        })\n    }", "test": "fn test_96() {\n    let data = [91];\n    if data.len() < 2 {\n        return;\n    }\n    memchr2_iter(data[0], data[1], &data[2..]).count();\n}"}
{"test_id": "quinn-rs-quinn/quinn-rs-quinn-83e4f46/tests-gen/packet.inputs.rs::test_85", "code": "fn to_vec(params: &TransportParameters) -> Vec<u8> {\n    let mut bytes = Vec::new();\n    params.write(&mut bytes);\n    bytes\n}", "test": "fn test_85() {\n    let data = PacketParams {\n        local_cid_len: 20,\n        buf: b\"\\0\",\n        grease_quic_bit: false,\n    };\n    let len = data.buf.len();\n    let supported_versions = DEFAULT_SUPPORTED_VERSIONS.to_vec();\n    if let Ok(decoded) = PartialDecode::new(\n        data.buf,\n        data.local_cid_len,\n        &supported_versions,\n        data.grease_quic_bit,\n    ) {\n        match decoded.1 {\n            Some(x) => assert_eq!(len, decoded.0.len() + x.len()),\n            None => assert_eq!(len, decoded.0.len()),\n        }\n    }\n}"}
{"test_id": "quinn-rs-quinn/quinn-rs-quinn-83e4f46/tests-gen/streamid.inputs.rs::test_69", "code": "pub fn initiator(self) -> Side {\n        if self.0 & 0x1 == 0 {\n            Side::Client\n        } else {\n            Side::Server\n        }\n    }", "test": "fn test_69() {\n    let data = StreamIdParams {\n        side: Server,\n        dir: Uni,\n        index: 12482470383060889005,\n    };\n    let s = StreamId::new(data.side, data.dir, data.index);\n    assert_eq!(s.initiator(), data.side);\n    assert_eq!(s.dir(), data.dir);\n}"}
{"test_id": "cloud-hypervisor-cloud-hypervisor/cloud-hypervisor-cloud-hypervisor-db3a5f3/tests-gen/pmem.inputs.rs::test_84", "code": "pub fn wait_for_epoll_threads(&mut self) {\n        self.common.wait_for_epoll_threads();\n    }", "test": "fn test_84() {\n    let bytes = [10, 41, 41, 15];\n    if bytes.len() < QUEUE_DATA_SIZE || bytes.len() > (QUEUE_DATA_SIZE + MEM_SIZE) {\n        return;\n    }\n    let mut pmem = create_dummy_pmem();\n    let queue_data = &bytes[..QUEUE_DATA_SIZE];\n    let mem_bytes = &bytes[QUEUE_DATA_SIZE..];\n    let q = setup_virt_queue(queue_data.try_into().unwrap());\n    let mem = GuestMemoryMmap::from_ranges(&[(GuestAddress(0), MEM_SIZE)]).unwrap();\n    if mem.write_slice(mem_bytes, GuestAddress(0 as u64)).is_err() {\n        return;\n    }\n    let guest_memory = GuestMemoryAtomic::new(mem);\n    let evt = EventFd::new(0).unwrap();\n    let queue_evt = unsafe { EventFd::from_raw_fd(libc::dup(evt.as_raw_fd())) };\n    queue_evt.write(1).unwrap();\n    pmem.activate(\n        guest_memory,\n        Arc::new(NoopVirtioInterrupt {}),\n        vec![(0, q, evt)],\n    )\n    .ok();\n    pmem.wait_for_epoll_threads();\n}"}
{"test_id": "tafia-calamine/tafia-calamine-5a5804d/tests-gen/fuzz_all.inputs.rs::test_7", "code": "fn count<R: Reader<BufReader<File>>>(path: &str) -> usize {\n    let path = format!(\"{}/{}\", env!(\"CARGO_MANIFEST_DIR\"), path);\n    let mut excel: R = open_workbook(&path).expect(\"cannot open excel file\");\n\n    let sheets = excel.sheet_names().to_owned();\n    let mut count = 0;\n    for s in sheets {\n        count += excel\n            .worksheet_range(&s)\n            .unwrap()\n            .unwrap()\n            .rows()\n            .flat_map(|r| r.iter())\n            .count();\n    }\n    count\n}", "test": "fn test_7() {\n    let data = [1];\n    let file_name = \"fuzz.xlsx\";\n    if let Ok(mut file) = File::create(file_name) {\n        if file.write_all(data).is_err() {\n            return;\n        }\n    }\n    let mut workbook: Xlsx<_> = match open_workbook(file_name) {\n        Ok(excel) => excel,\n        Err(_) => return,\n    };\n    for worksheet in workbook.worksheets() {\n        if let Some(Ok(range)) = workbook.worksheet_range(&worksheet.0) {\n            let _ = range.get_size().0 * range.get_size().1;\n            range.used_cells().count();\n        }\n    }\n    if let Some(Ok(mut vba)) = workbook.vba_project() {\n        let vba = vba.to_mut();\n        for module_name in vba.get_module_names() {\n            if vba.get_module(module_name).is_ok() {\n                for r in vba.get_references() {\n                    r.is_missing();\n                }\n            }\n        }\n    }\n    let sheets = workbook.sheet_names().to_owned();\n    for s in sheets {\n        if let Some(Ok(formula)) = workbook.worksheet_formula(&s) {\n            formula\n                .rows()\n                .flat_map(|r| r.iter().filter(|f| !f.is_empty()))\n                .count();\n        }\n    }\n}"}
{"test_id": "image-rs-image-png/image-rs-image-png-e113d76/tests-gen/buf_independent.inputs.rs::test_32", "code": "fn new (inner : R , cap : usize) -> Self { SmalBuf { inner , cap } }", "test": "fn test_32() {\n    let data = [4];\n    let limits = png::Limits { bytes: 1 << 16 };\n    let reference = png::Decoder::new_with_limits(data, limits);\n    let smal = png::Decoder::new_with_limits(SmalBuf::new(data, 1), limits);\n    let _ = png_compare(reference, smal);\n}"}
{"test_id": "cloud-hypervisor-cloud-hypervisor/cloud-hypervisor-cloud-hypervisor-db3a5f3/tests-gen/mem.inputs.rs::test_1", "code": "pub fn wait_for_epoll_threads(&mut self) {\n        self.common.wait_for_epoll_threads();\n    }", "test": "fn test_1() {\n    let bytes = [10, 10];\n    if bytes.len() < VIRTIO_MEM_DATA_SIZE + QUEUE_DATA_SIZE + QUEUE_BYTES_SIZE\n        || bytes.len() > (VIRTIO_MEM_DATA_SIZE + QUEUE_DATA_SIZE + QUEUE_BYTES_SIZE + MEM_SIZE)\n    {\n        return;\n    }\n    let virtio_mem_data = &bytes[..VIRTIO_MEM_DATA_SIZE];\n    let queue_data = &bytes[VIRTIO_MEM_DATA_SIZE..VIRTIO_MEM_DATA_SIZE + QUEUE_DATA_SIZE];\n    let queue_bytes = &bytes[VIRTIO_MEM_DATA_SIZE + QUEUE_DATA_SIZE\n        ..VIRTIO_MEM_DATA_SIZE + QUEUE_DATA_SIZE + QUEUE_BYTES_SIZE];\n    let mem_bytes = &bytes[VIRTIO_MEM_DATA_SIZE + QUEUE_DATA_SIZE + QUEUE_BYTES_SIZE..];\n    let (mut virtio_mem, virtio_mem_region) =\n        create_dummy_virtio_mem(virtio_mem_data.try_into().unwrap());\n    let q = setup_virt_queue(queue_data.try_into().unwrap());\n    let mem =\n        GuestMemoryMmap::from_ranges(&[(GuestAddress(DESC_TABLE_ADDR), QUEUE_BYTES_SIZE)]).unwrap();\n    if mem\n        .write_slice(queue_bytes, GuestAddress(DESC_TABLE_ADDR))\n        .is_err()\n    {\n        return;\n    }\n    let mem = mem.insert_region(virtio_mem_region).unwrap();\n    if mem\n        .write_slice(mem_bytes, GuestAddress(VIRTIO_MEM_REGION_ADDRESS))\n        .is_err()\n    {\n        return;\n    }\n    let guest_memory = GuestMemoryAtomic::new(mem);\n    let evt = EventFd::new(0).unwrap();\n    let queue_evt = unsafe { EventFd::from_raw_fd(libc::dup(evt.as_raw_fd())) };\n    queue_evt.write(1).unwrap();\n    virtio_mem\n        .activate(\n            guest_memory,\n            Arc::new(NoopVirtioInterrupt {}),\n            vec![(0, q, evt)],\n        )\n        .ok();\n    virtio_mem.wait_for_epoll_threads();\n}"}
{"test_id": "cloud-hypervisor-cloud-hypervisor/cloud-hypervisor-cloud-hypervisor-db3a5f3/tests-gen/mem.inputs.rs::test_71", "code": "pub fn wait_for_epoll_threads(&mut self) {\n        self.common.wait_for_epoll_threads();\n    }", "test": "fn test_71() {\n    let bytes = [157];\n    if bytes.len() < VIRTIO_MEM_DATA_SIZE + QUEUE_DATA_SIZE + QUEUE_BYTES_SIZE\n        || bytes.len() > (VIRTIO_MEM_DATA_SIZE + QUEUE_DATA_SIZE + QUEUE_BYTES_SIZE + MEM_SIZE)\n    {\n        return;\n    }\n    let virtio_mem_data = &bytes[..VIRTIO_MEM_DATA_SIZE];\n    let queue_data = &bytes[VIRTIO_MEM_DATA_SIZE..VIRTIO_MEM_DATA_SIZE + QUEUE_DATA_SIZE];\n    let queue_bytes = &bytes[VIRTIO_MEM_DATA_SIZE + QUEUE_DATA_SIZE\n        ..VIRTIO_MEM_DATA_SIZE + QUEUE_DATA_SIZE + QUEUE_BYTES_SIZE];\n    let mem_bytes = &bytes[VIRTIO_MEM_DATA_SIZE + QUEUE_DATA_SIZE + QUEUE_BYTES_SIZE..];\n    let (mut virtio_mem, virtio_mem_region) =\n        create_dummy_virtio_mem(virtio_mem_data.try_into().unwrap());\n    let q = setup_virt_queue(queue_data.try_into().unwrap());\n    let mem =\n        GuestMemoryMmap::from_ranges(&[(GuestAddress(DESC_TABLE_ADDR), QUEUE_BYTES_SIZE)]).unwrap();\n    if mem\n        .write_slice(queue_bytes, GuestAddress(DESC_TABLE_ADDR))\n        .is_err()\n    {\n        return;\n    }\n    let mem = mem.insert_region(virtio_mem_region).unwrap();\n    if mem\n        .write_slice(mem_bytes, GuestAddress(VIRTIO_MEM_REGION_ADDRESS))\n        .is_err()\n    {\n        return;\n    }\n    let guest_memory = GuestMemoryAtomic::new(mem);\n    let evt = EventFd::new(0).unwrap();\n    let queue_evt = unsafe { EventFd::from_raw_fd(libc::dup(evt.as_raw_fd())) };\n    queue_evt.write(1).unwrap();\n    virtio_mem\n        .activate(\n            guest_memory,\n            Arc::new(NoopVirtioInterrupt {}),\n            vec![(0, q, evt)],\n        )\n        .ok();\n    virtio_mem.wait_for_epoll_threads();\n}"}
{"test_id": "BurntSushi-memchr/BurntSushi-memchr-f3fde7a/tests-gen/memchr2.inputs.rs::test_35", "code": "fn count(self) -> usize {\n        self.it.count(|s, e| {\n            // SAFETY: We rely on our generic iterator to return valid start\n            // and end pointers.\n            unsafe { count_raw(self.needle1, s, e) }\n        })\n    }", "test": "fn test_35() {\n    let data = [38];\n    if data.len() < 2 {\n        return;\n    }\n    memchr2_iter(data[0], data[1], &data[2..]).count();\n}"}
{"test_id": "rustls-rustls/rustls-rustls-ae583bd/tests-gen/message.inputs.rs::test_19", "code": "pub fn used(&self) -> usize {\n        self.cursor\n    }", "test": "fn test_19() {\n    let data = [22, 3, 3, 0, 10, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14];\n    let mut rdr = Reader::init(data);\n    if let Ok(m) = OpaqueMessage::read(&mut rdr) {\n        let msg = match Message::try_from(m.into_plain_message()) {\n            Ok(msg) => msg,\n            Err(_) => return,\n        };\n        let enc = PlainMessage::from(msg)\n            .into_unencrypted_opaque()\n            .encode();\n        assert_eq!(enc, data[..rdr.used()]);\n    }\n}"}
{"test_id": "BurntSushi-memchr/BurntSushi-memchr-f3fde7a/tests-gen/memchr.inputs.rs::test_40", "code": "fn count(self) -> usize {\n        self.it.count(|s, e| {\n            // SAFETY: We rely on our generic iterator to return valid start\n            // and end pointers.\n            unsafe { count_raw(self.needle1, s, e) }\n        })\n    }", "test": "fn test_40() {\n    let data = [49, 47, 235, 220];\n    if data.is_empty() {\n        return;\n    }\n    memchr_iter(data[0], &data[1..]).count();\n}"}
{"test_id": "gimli-rs-gimli/gimli-rs-gimli-3947879/tests-gen/debug_aranges.inputs.rs::test_99", "code": "pub fn next(&mut self) -> Result<Option<UnitHeader<R>>> {\n        if self.input.is_empty() {\n            Ok(None)\n        } else {\n            let len = self.input.len();\n            match parse_unit_header(&mut self.input, self.offset.into()) {\n                Ok(header) => {\n                    self.offset.0 += len - self.input.len();\n                    Ok(Some(header))\n                }\n                Err(e) => {\n                    self.input.empty();\n                    Err(e)\n                }\n            }\n        }\n    }", "test": "fn test_99() {\n    let debug_aranges = [249, 219, 10];\n    let debug_aranges = DebugAranges::new(&debug_aranges, LittleEndian);\n    let mut headers = debug_aranges.headers();\n    while let Ok(Some(header)) = headers.next() {\n        let mut entries = header.entries();\n        while let Ok(Some(_entry)) = entries.next() {\n            continue;\n        }\n    }\n}"}
{"test_id": "image-rs-image-png/image-rs-image-png-e113d76/tests-gen/decode.inputs.rs::test_25", "code": "fn png_decode (data : & [u8]) -> Result < (Option < png :: OutputInfo > , Vec < u8 >) , () > { let limits = png :: Limits { bytes : 1 << 16 } ; let decoder = png :: Decoder :: new_with_limits (data , limits) ; let mut reader = decoder . read_info () . map_err (| _ | ()) ? ; if reader . info () . raw_bytes () > 5_000_000 { return Err (()) ; } let mut img_data = vec ! [0u8 ; reader . info () . raw_bytes ()] ; let mut last_info = None ; while let Ok (info) = reader . next_frame (& mut img_data) { last_info = Some (info) ; } Ok ((last_info , img_data)) }", "test": "fn test_25() {\n    let data = [\n        137, 80, 78, 71, 13, 10, 26, 10, 0, 0, 0, 11, 73, 72, 68, 82, 0, 4, 0, 32, 0, 249, 0, 32,\n        16, 2, 0, 130,\n    ];\n    let _ = png_decode(&data);\n}"}
{"test_id": "dtolnay-semver/dtolnay-semver-750f0ac/tests-gen/sort_version.inputs.rs::test_13", "code": "fn three_versions(bytes: &[u8]) -> Option<[Version; 3]> {\n    let mut inputs = str::from_utf8(bytes).ok()?.split(' ');\n    Some([\n        Version {\n            major: 0,\n            minor: 0,\n            patch: 0,\n            pre: inputs.next().map(Prerelease::new)?.ok()?,\n            build: inputs.next().map(BuildMetadata::new)?.ok()?,\n        },\n        Version {\n            major: 0,\n            minor: 0,\n            patch: 0,\n            pre: inputs.next().map(Prerelease::new)?.ok()?,\n            build: inputs.next().map(BuildMetadata::new)?.ok()?,\n        },\n        Version {\n            major: 0,\n            minor: 0,\n            patch: 0,\n            pre: inputs.next().map(Prerelease::new)?.ok()?,\n            build: inputs.next().map(BuildMetadata::new)?.ok()?,\n        },\n    ])\n}", "test": "fn test_13() {\n    let bytes = [10];\n    if let Some([a, b, c]) = three_versions(bytes) {\n        if a < b && b < c && c < a {\n            panic!(\"{0} < {1} < {2} < {0}\", a, b, c);\n        }\n    }\n}"}
{"test_id": "image-rs-image-png/image-rs-image-png-e113d76/tests-gen/buf_independent.inputs.rs::test_7", "code": "fn new (inner : R , cap : usize) -> Self { SmalBuf { inner , cap } }", "test": "fn test_7() {\n    let data = [0, 0, 0, 10];\n    let limits = png::Limits { bytes: 1 << 16 };\n    let reference = png::Decoder::new_with_limits(data, limits);\n    let smal = png::Decoder::new_with_limits(SmalBuf::new(data, 1), limits);\n    let _ = png_compare(reference, smal);\n}"}
{"test_id": "tafia-calamine/tafia-calamine-5a5804d/tests-gen/fuzz_all.inputs.rs::test_38", "code": "fn count<R: Reader<BufReader<File>>>(path: &str) -> usize {\n    let path = format!(\"{}/{}\", env!(\"CARGO_MANIFEST_DIR\"), path);\n    let mut excel: R = open_workbook(&path).expect(\"cannot open excel file\");\n\n    let sheets = excel.sheet_names().to_owned();\n    let mut count = 0;\n    for s in sheets {\n        count += excel\n            .worksheet_range(&s)\n            .unwrap()\n            .unwrap()\n            .rows()\n            .flat_map(|r| r.iter())\n            .count();\n    }\n    count\n}", "test": "fn test_38() {\n    let data = [154];\n    let file_name = \"fuzz.xlsx\";\n    if let Ok(mut file) = File::create(file_name) {\n        if file.write_all(data).is_err() {\n            return;\n        }\n    }\n    let mut workbook: Xlsx<_> = match open_workbook(file_name) {\n        Ok(excel) => excel,\n        Err(_) => return,\n    };\n    for worksheet in workbook.worksheets() {\n        if let Some(Ok(range)) = workbook.worksheet_range(&worksheet.0) {\n            let _ = range.get_size().0 * range.get_size().1;\n            range.used_cells().count();\n        }\n    }\n    if let Some(Ok(mut vba)) = workbook.vba_project() {\n        let vba = vba.to_mut();\n        for module_name in vba.get_module_names() {\n            if vba.get_module(module_name).is_ok() {\n                for r in vba.get_references() {\n                    r.is_missing();\n                }\n            }\n        }\n    }\n    let sheets = workbook.sheet_names().to_owned();\n    for s in sheets {\n        if let Some(Ok(formula)) = workbook.worksheet_formula(&s) {\n            formula\n                .rows()\n                .flat_map(|r| r.iter().filter(|f| !f.is_empty()))\n                .count();\n        }\n    }\n}"}
{"test_id": "BurntSushi-memchr/BurntSushi-memchr-f3fde7a/tests-gen/memchr.inputs.rs::test_87", "code": "fn count(self) -> usize {\n        self.it.count(|s, e| {\n            // SAFETY: We rely on our generic iterator to return valid start\n            // and end pointers.\n            unsafe { count_raw(self.needle1, s, e) }\n        })\n    }", "test": "fn test_87() {\n    let data = [48, 235, 50];\n    if data.is_empty() {\n        return;\n    }\n    memchr_iter(data[0], &data[1..]).count();\n}"}
{"test_id": "dtolnay-syn/dtolnay-syn-b1a038c/tests-gen/create_token_buffer.inputs.rs::test_45", "code": "fn parse_str(self, s: &str) -> Result<Self::Output> {\n        self.parse2(proc_macro2::TokenStream::from_str(s)?)\n    }", "test": "fn test_45() {\n    let data = [1, 64, 8, 1];\n    if data.len() < 300 {\n        if let Ok(string) = str::from_utf8(data) {\n            let _ = immediate_fail.parse_str(string);\n        }\n    }\n}"}
{"test_id": "XAMPPRocky-tokei/XAMPPRocky-tokei-92ddc2e/tests-gen/parse_from_slice_total.inputs.rs::test_18", "code": "pub fn parse_from_slice (input : FuzzInput , check_total : bool) { let config = & Config { treat_doc_strings_as_comments : Some (input . treat_doc_strings_as_comments) , columns : None , hidden : None , no_ignore : None , no_ignore_parent : None , no_ignore_dot : None , no_ignore_vcs : None , sort : None , types : None , for_each_fn : None , } ; let stats = input . lang . parse_from_slice (input . data , config) ; if check_total { if let Ok (s) = str :: from_utf8 (input . data) { assert ! (stats . lines () <= s . lines () . count () , \"{} got more total lines ({}) than str::lines ({}). Code: {}, Comments: {}, Blanks: {}. treat_doc_strings_as_comments: {}. File contents (as UTF-8):\\n{}\" , input . lang . name () , stats . lines () , s . lines () . count () , stats . code , stats . comments , input . treat_doc_strings_as_comments , stats . blanks , s) } ; } }", "test": "fn test_18() {\n    let data = FuzzInput {\n        lang: Zsh,\n        treat_doc_strings_as_comments: true,\n        data: [255, 255, 10, 255, 255, 255, 255, 10, 255],\n    };\n    parse_from_slice(data, true);\n}"}
{"test_id": "XAMPPRocky-tokei/XAMPPRocky-tokei-92ddc2e/tests-gen/parse_from_slice_total.inputs.rs::test_77", "code": "pub fn parse_from_slice (input : FuzzInput , check_total : bool) { let config = & Config { treat_doc_strings_as_comments : Some (input . treat_doc_strings_as_comments) , columns : None , hidden : None , no_ignore : None , no_ignore_parent : None , no_ignore_dot : None , no_ignore_vcs : None , sort : None , types : None , for_each_fn : None , } ; let stats = input . lang . parse_from_slice (input . data , config) ; if check_total { if let Ok (s) = str :: from_utf8 (input . data) { assert ! (stats . lines () <= s . lines () . count () , \"{} got more total lines ({}) than str::lines ({}). Code: {}, Comments: {}, Blanks: {}. treat_doc_strings_as_comments: {}. File contents (as UTF-8):\\n{}\" , input . lang . name () , stats . lines () , s . lines () . count () , stats . code , stats . comments , input . treat_doc_strings_as_comments , stats . blanks , s) } ; } }", "test": "fn test_77() {\n    let data = FuzzInput {\n        lang: Zsh,\n        treat_doc_strings_as_comments: true,\n        data: [255, 255, 255, 255, 255, 255, 255, 255],\n    };\n    parse_from_slice(data, true);\n}"}
{"test_id": "cloud-hypervisor-cloud-hypervisor/cloud-hypervisor-cloud-hypervisor-db3a5f3/tests-gen/console.inputs.rs::test_66", "code": "pub fn wait_for_epoll_threads(&mut self) {\n        self.common.wait_for_epoll_threads();\n    }", "test": "fn test_66() {\n    let bytes = [15, 10, 10];\n    if bytes.len() < (QUEUE_DATA_SIZE + QUEUE_BYTES_SIZE) * QUEUE_NUM + CONSOLE_INPUT_SIZE\n        || bytes.len()\n            > (QUEUE_DATA_SIZE + QUEUE_BYTES_SIZE) * QUEUE_NUM + CONSOLE_INPUT_SIZE + MEM_SIZE\n    {\n        return;\n    }\n    let (pipe_rx, mut pipe_tx) = create_pipe().unwrap();\n    let output = unsafe {\n        File::from_raw_fd(\n            memfd_create(&std::ffi::CString::new(\"fuzz_console_output\").unwrap()).unwrap(),\n        )\n    };\n    let endpoint = virtio_devices::Endpoint::FilePair(output, pipe_rx);\n    let (mut console, _) = virtio_devices::Console::new(\n        \"fuzzer_console\".to_owned(),\n        endpoint,\n        None,\n        false,\n        SeccompAction::Allow,\n        EventFd::new(EFD_NONBLOCK).unwrap(),\n        None,\n    )\n    .unwrap();\n    let console_input_bytes = &bytes[..CONSOLE_INPUT_SIZE];\n    let queue_data = &bytes[CONSOLE_INPUT_SIZE..CONSOLE_INPUT_SIZE + QUEUE_DATA_SIZE * QUEUE_NUM];\n    let queue_bytes = &bytes[CONSOLE_INPUT_SIZE + QUEUE_DATA_SIZE * QUEUE_NUM\n        ..CONSOLE_INPUT_SIZE + (QUEUE_DATA_SIZE + QUEUE_BYTES_SIZE) * QUEUE_NUM];\n    let mem_bytes = &bytes[CONSOLE_INPUT_SIZE + (QUEUE_DATA_SIZE + QUEUE_BYTES_SIZE) * QUEUE_NUM..];\n    let mut queues = setup_virt_queues(\n        &[\n            &queue_data[..QUEUE_DATA_SIZE].try_into().unwrap(),\n            &queue_data[QUEUE_DATA_SIZE..QUEUE_DATA_SIZE * 2]\n                .try_into()\n                .unwrap(),\n        ],\n        BASE_VIRT_QUEUE_ADDR,\n    );\n    let mem = GuestMemoryMmap::from_ranges(&[\n        (GuestAddress(0), MEM_SIZE),\n        (GuestAddress(BASE_VIRT_QUEUE_ADDR), queue_bytes.len()),\n    ])\n    .unwrap();\n    if mem\n        .write_slice(queue_bytes, GuestAddress(BASE_VIRT_QUEUE_ADDR))\n        .is_err()\n    {\n        return;\n    }\n    if mem.write_slice(mem_bytes, GuestAddress(0 as u64)).is_err() {\n        return;\n    }\n    let guest_memory = GuestMemoryAtomic::new(mem);\n    let input_queue = queues.remove(0);\n    let input_evt = EventFd::new(0).unwrap();\n    let input_queue_evt = unsafe { EventFd::from_raw_fd(libc::dup(input_evt.as_raw_fd())) };\n    let output_queue = queues.remove(0);\n    let output_evt = EventFd::new(0).unwrap();\n    let output_queue_evt = unsafe { EventFd::from_raw_fd(libc::dup(output_evt.as_raw_fd())) };\n    input_queue_evt.write(1).unwrap();\n    output_queue_evt.write(1).unwrap();\n    pipe_tx.write_all(console_input_bytes).unwrap();\n    console\n        .activate(\n            guest_memory,\n            Arc::new(NoopVirtioInterrupt {}),\n            vec![(0, input_queue, input_evt), (1, output_queue, output_evt)],\n        )\n        .unwrap();\n    console.wait_for_epoll_threads();\n}"}
{"test_id": "gimli-rs-gimli/gimli-rs-gimli-3947879/tests-gen/debug_info.inputs.rs::test_52", "code": "pub fn next(&mut self) -> Result<Option<RawLocListEntry<R>>> {\n        if self.input.is_empty() {\n            return Ok(None);\n        }\n\n        match RawLocListEntry::parse(&mut self.input, self.encoding, self.format) {\n            Ok(entry) => {\n                if entry.is_none() {\n                    self.input.empty();\n                }\n                Ok(entry)\n            }\n            Err(e) => {\n                self.input.empty();\n                Err(e)\n            }\n        }\n    }", "test": "fn test_52() {\n    let sections = (\n        [],\n        [224, 26, 255, 255, 255, 10, 1, 0, 0, 0, 255, 255, 17, 0, 255],\n    );\n    let (debug_abbrev, debug_info) = sections;\n    let debug_abbrev = DebugAbbrev::new(&debug_abbrev, LittleEndian);\n    let debug_info = DebugInfo::new(&debug_info, LittleEndian);\n    let mut units = debug_info.units();\n    while let Ok(Some(unit)) = units.next() {\n        if let Ok(abbrevs) = unit.abbreviations(&debug_abbrev) {\n            let mut cursor = unit.entries(&abbrevs);\n            while let Ok(Some((_delta, entry))) = cursor.next_dfs() {\n                let mut attrs = entry.attrs();\n                while let Ok(Some(_attr)) = attrs.next() {\n                    continue;\n                }\n            }\n        }\n    }\n}"}
{"test_id": "gimli-rs-gimli/gimli-rs-gimli-3947879/tests-gen/debug_abbrev.inputs.rs::test_8", "code": "pub fn get<R: Reader>(\n        &self,\n        debug_abbrev: &DebugAbbrev<R>,\n        offset: DebugAbbrevOffset<R::Offset>,\n    ) -> Result<Arc<Abbreviations>> {\n        if offset.0 != R::Offset::from_u8(0) {\n            return debug_abbrev.abbreviations(offset).map(Arc::new);\n        }\n        self.abbreviations\n            .get(|| debug_abbrev.abbreviations(offset))\n    }", "test": "fn test_8() {\n    let debug_abbrev = [35, 8, 169];\n    let len = debug_abbrev.len();\n    let debug_abbrev = DebugAbbrev::new(&debug_abbrev, LittleEndian);\n    let offset = DebugAbbrevOffset(0);\n    if let Ok(abbreviations) = debug_abbrev.abbreviations(offset) {\n        for i in 1..len {\n            let _ = abbreviations.get(i as u64);\n        }\n    }\n}"}
{"test_id": "image-rs-image/image-rs-image-e5580ec/tests-gen/fuzzer_script_tga.inputs.rs::test_32", "code": "fn decode(encoded: &[u8]) -> Vec<u8> {\n        let decoder = JpegDecoder::new(Cursor::new(encoded)).expect(\"Could not decode image\");\n\n        let mut decoded = vec![0; decoder.total_bytes() as usize];\n        decoder\n            .read_image(&mut decoded)\n            .expect(\"Could not decode image\");\n        decoded\n    }", "test": "fn test_32() {\n    let data = [62, 10, 10];\n    let _ = decode(data);\n}"}
{"test_id": "tafia-calamine/tafia-calamine-5a5804d/tests-gen/fuzz_all.inputs.rs::test_95", "code": "fn count<R: Reader<BufReader<File>>>(path: &str) -> usize {\n    let path = format!(\"{}/{}\", env!(\"CARGO_MANIFEST_DIR\"), path);\n    let mut excel: R = open_workbook(&path).expect(\"cannot open excel file\");\n\n    let sheets = excel.sheet_names().to_owned();\n    let mut count = 0;\n    for s in sheets {\n        count += excel\n            .worksheet_range(&s)\n            .unwrap()\n            .unwrap()\n            .rows()\n            .flat_map(|r| r.iter())\n            .count();\n    }\n    count\n}", "test": "fn test_95() {\n    let data = [14, 93, 12];\n    let file_name = \"fuzz.xlsx\";\n    if let Ok(mut file) = File::create(file_name) {\n        if file.write_all(data).is_err() {\n            return;\n        }\n    }\n    let mut workbook: Xlsx<_> = match open_workbook(file_name) {\n        Ok(excel) => excel,\n        Err(_) => return,\n    };\n    for worksheet in workbook.worksheets() {\n        if let Some(Ok(range)) = workbook.worksheet_range(&worksheet.0) {\n            let _ = range.get_size().0 * range.get_size().1;\n            range.used_cells().count();\n        }\n    }\n    if let Some(Ok(mut vba)) = workbook.vba_project() {\n        let vba = vba.to_mut();\n        for module_name in vba.get_module_names() {\n            if vba.get_module(module_name).is_ok() {\n                for r in vba.get_references() {\n                    r.is_missing();\n                }\n            }\n        }\n    }\n    let sheets = workbook.sheet_names().to_owned();\n    for s in sheets {\n        if let Some(Ok(formula)) = workbook.worksheet_formula(&s) {\n            formula\n                .rows()\n                .flat_map(|r| r.iter().filter(|f| !f.is_empty()))\n                .count();\n        }\n    }\n}"}
{"test_id": "rust-bio-rust-bio/rust-bio-rust-bio-319a0d8/tests-gen/banded_aligner.inputs.rs::test_27", "code": "fn validate_alignment_score(al: &Alignment, x: TextSlice, y: TextSlice, scoring: &Scoring<MatchParams>) -> bool {\n    use AlignmentOperation::*;\n    let path = al.path();\n    let mut score = 0;\n    if al.mode==AlignmentMode::Custom {\n        if al.xstart > 0 {\n            score += scoring.xclip_prefix;\n        }\n        if al.ystart > 0 {\n            score += scoring.yclip_prefix;\n        }\n        if al.xend < al.xlen {\n            score += scoring.xclip_suffix;\n        }\n        if al.yend < al.ylen {\n            score += scoring.yclip_suffix;\n        }\n    }\n    let mut last_op = None;\n    for (i, j, op) in path {\n        score += match op {\n            Match | Subst => scoring.match_fn.score(x[i-1], y[j-1]),\n            Del => if last_op==Some(Del) { scoring.gap_extend } else { scoring.gap_open + scoring.gap_extend },\n            Ins => if last_op==Some(Ins) { scoring.gap_extend } else { scoring.gap_open + scoring.gap_extend },\n            _ => 0,\n        };\n        last_op = Some(op);\n    }\n    al.score==score\n}", "test": "fn test_27() {\n    let data = [10, 26];\n    if data.len() < 50 || data.len() > 300 {\n        return;\n    }\n    let (split_byte, data) = data.split_first().unwrap();\n    let (kmer_byte, data) = data.split_first().unwrap();\n    let (window_byte, data) = data.split_first().unwrap();\n    let (match_score_byte, data) = data.split_first().unwrap();\n    let (mismatch_score_byte, data) = data.split_first().unwrap();\n    let (gap_open_byte, data) = data.split_first().unwrap();\n    let (gap_extend_byte, data) = data.split_first().unwrap();\n    let (xclip_prefix_byte, data) = data.split_first().unwrap();\n    let (xclip_suffix_byte, data) = data.split_first().unwrap();\n    let (yclip_prefix_byte, data) = data.split_first().unwrap();\n    let (yclip_suffix_byte, data) = data.split_first().unwrap();\n    let alphabets = b\"ACGT\";\n    let v: Vec<_> = data\n        .iter()\n        .map(|i| alphabets[(*i as usize) % alphabets.len()])\n        .collect();\n    let kmer_len: usize = 5 + (*kmer_byte as usize) % 10;\n    let window_size: usize = 5 + (*window_byte as usize) % 10;\n    let split_pos: usize = min(data.len() - 1, max(*split_byte as usize, 1));\n    let match_score = 1 + (*match_score_byte as i32) % 5;\n    let mismatch_score = -((*mismatch_score_byte as i32) % 10);\n    let gap_open = -((*gap_open_byte as i32) % 20);\n    let gap_extend = -((*gap_extend_byte as i32) % 10);\n    let (x, y) = v.split_at(split_pos);\n    println!(\n        \"x: {}, y: {}, k: {}, w: {}, scoring ({}, {}, {}, {})\",\n        String::from_utf8(x.to_vec()).unwrap(),\n        String::from_utf8(y.to_vec()).unwrap(),\n        kmer_len,\n        window_size,\n        gap_open,\n        gap_extend,\n        match_score,\n        mismatch_score\n    );\n    let base_score = Scoring::from_scores(gap_open, gap_extend, match_score, mismatch_score);\n    {\n        println!(\n            \"Clip scores ({}, {}, {}, {})\",\n            xclip_prefix_byte, xclip_suffix_byte, yclip_prefix_byte, yclip_suffix_byte\n        );\n        let scoring = Scoring {\n            xclip_prefix: -(*xclip_prefix_byte as i32),\n            xclip_suffix: -(*xclip_suffix_byte as i32),\n            yclip_prefix: -(*yclip_prefix_byte as i32),\n            yclip_suffix: -(*yclip_suffix_byte as i32),\n            ..base_score.clone()\n        };\n        let mut b_aligner = banded::Aligner::with_scoring(scoring.clone(), kmer_len, window_size);\n        let b_alignment = b_aligner.custom(x, y);\n        assert!(validate_alignment_score(&b_alignment, x, y, &scoring));\n        let mut f_aligner = pairwise::Aligner::with_scoring(scoring.clone());\n        let f_alignment = f_aligner.custom(x, y);\n        assert!(validate_alignment_score(&f_alignment, x, y, &scoring));\n        let band_all_alignment = b_aligner.custom_with_matches(x, y, &Vec::new());\n        assert_eq!(band_all_alignment.score, f_alignment.score);\n    }\n    {\n        let scoring = Scoring {\n            xclip_prefix: 0,\n            xclip_suffix: 0,\n            yclip_suffix: 0,\n            ..base_score.clone()\n        };\n        let mut b_aligner = banded::Aligner::with_scoring(scoring.clone(), kmer_len, window_size);\n        let b_alignment = b_aligner.custom(x, y);\n        assert_eq!(b_alignment.ystart, 0);\n        assert!(validate_alignment_score(&b_alignment, x, y, &scoring));\n        let mut f_aligner = pairwise::Aligner::with_scoring(scoring.clone());\n        let f_alignment = f_aligner.custom(x, y);\n        assert_eq!(f_alignment.ystart, 0);\n        assert!(validate_alignment_score(&f_alignment, x, y, &scoring));\n        let band_all_alignment = b_aligner.custom_with_matches(x, y, &Vec::new());\n        assert_eq!(band_all_alignment.score, f_alignment.score);\n    }\n    {\n        let scoring = Scoring {\n            xclip_prefix: 0,\n            xclip_suffix: 0,\n            yclip_prefix: 0,\n            ..base_score.clone()\n        };\n        let mut b_aligner = banded::Aligner::with_scoring(scoring.clone(), kmer_len, window_size);\n        let b_alignment = b_aligner.custom(x, y);\n        assert_eq!(b_alignment.yend, b_alignment.ylen);\n        assert!(validate_alignment_score(&b_alignment, x, y, &scoring));\n        let mut f_aligner = pairwise::Aligner::with_scoring(scoring.clone());\n        let f_alignment = f_aligner.custom(x, y);\n        assert_eq!(f_alignment.yend, f_alignment.ylen);\n        assert!(validate_alignment_score(&f_alignment, x, y, &scoring));\n        let band_all_alignment = b_aligner.custom_with_matches(x, y, &Vec::new());\n        assert_eq!(band_all_alignment.score, f_alignment.score);\n    }\n    {\n        let scoring = Scoring {\n            xclip_suffix: 0,\n            yclip_prefix: 0,\n            yclip_suffix: 0,\n            ..base_score.clone()\n        };\n        let mut b_aligner = banded::Aligner::with_scoring(scoring.clone(), kmer_len, window_size);\n        let b_alignment = b_aligner.custom(x, y);\n        assert_eq!(b_alignment.xstart, 0);\n        assert!(validate_alignment_score(&b_alignment, x, y, &scoring));\n        let mut f_aligner = pairwise::Aligner::with_scoring(scoring.clone());\n        let f_alignment = f_aligner.custom(x, y);\n        assert_eq!(f_alignment.xstart, 0);\n        assert!(validate_alignment_score(&f_alignment, x, y, &scoring));\n        let band_all_alignment = b_aligner.custom_with_matches(x, y, &Vec::new());\n        assert_eq!(band_all_alignment.score, f_alignment.score);\n    }\n    {\n        let scoring = Scoring {\n            xclip_prefix: 0,\n            yclip_prefix: 0,\n            yclip_suffix: 0,\n            ..base_score.clone()\n        };\n        let mut b_aligner = banded::Aligner::with_scoring(scoring.clone(), kmer_len, window_size);\n        let b_alignment = b_aligner.custom(x, y);\n        assert_eq!(b_alignment.xend, b_alignment.xlen);\n        assert!(validate_alignment_score(&b_alignment, x, y, &scoring));\n        let mut f_aligner = pairwise::Aligner::with_scoring(scoring.clone());\n        let f_alignment = f_aligner.custom(x, y);\n        assert_eq!(f_alignment.xend, f_alignment.xlen);\n        assert!(validate_alignment_score(&f_alignment, x, y, &scoring));\n        let band_all_alignment = b_aligner.custom_with_matches(x, y, &Vec::new());\n        assert_eq!(band_all_alignment.score, f_alignment.score);\n    }\n    {\n        let mut aligner = banded::Aligner::with_scoring(base_score.clone(), kmer_len, window_size);\n        let alignment = aligner.local(x, y);\n        assert!(alignment.score >= 0);\n        assert!(validate_alignment_score(&alignment, x, y, &base_score));\n        let alignment = aligner.semiglobal(x, y);\n        assert_eq!(alignment.xstart, 0);\n        assert_eq!(alignment.xend, alignment.xlen);\n        assert!(validate_alignment_score(&alignment, x, y, &base_score));\n        let alignment = aligner.global(x, y);\n        assert_eq!(alignment.xstart, 0);\n        assert_eq!(alignment.xend, alignment.xlen);\n        assert_eq!(alignment.ystart, 0);\n        assert_eq!(alignment.yend, alignment.ylen);\n        assert!(validate_alignment_score(&alignment, x, y, &base_score));\n    }\n    {\n        let mut aligner = pairwise::Aligner::with_scoring(base_score.clone());\n        let alignment = aligner.local(x, y);\n        assert!(alignment.score >= 0);\n        assert!(validate_alignment_score(&alignment, x, y, &base_score));\n        let alignment = aligner.semiglobal(x, y);\n        assert_eq!(alignment.xstart, 0);\n        assert_eq!(alignment.xend, alignment.xlen);\n        assert!(validate_alignment_score(&alignment, x, y, &base_score));\n        let alignment = aligner.global(x, y);\n        assert_eq!(alignment.xstart, 0);\n        assert_eq!(alignment.xend, alignment.xlen);\n        assert_eq!(alignment.ystart, 0);\n        assert_eq!(alignment.yend, alignment.ylen);\n        assert!(validate_alignment_score(&alignment, x, y, &base_score));\n    }\n}"}
{"test_id": "BurntSushi-memchr/BurntSushi-memchr-f3fde7a/tests-gen/memrmem.inputs.rs::test_45", "code": "pub fn count(&self, haystack: &[u8]) -> usize {\n        // SAFETY: All of our pointers are derived directly from a borrowed\n        // slice, which is guaranteed to be valid.\n        unsafe {\n            let start = haystack.as_ptr();\n            let end = start.add(haystack.len());\n            self.count_raw(start, end)\n        }\n    }", "test": "fn test_45() {\n    let data = [127, 144];\n    if data.len() < 2 {\n        return;\n    }\n    let split = std::cmp::max(data[0] as usize, 1) % data.len() as usize;\n    let (needle, haystack) = (&data[..split], &data[split..]);\n    memmem::rfind_iter(haystack, needle).count();\n}"}
{"test_id": "quinn-rs-quinn/quinn-rs-quinn-83e4f46/tests-gen/packet.inputs.rs::test_17", "code": "fn to_vec(params: &TransportParameters) -> Vec<u8> {\n    let mut bytes = Vec::new();\n    params.write(&mut bytes);\n    bytes\n}", "test": "fn test_17() {\n    let data = PacketParams {\n        local_cid_len: 19,\n        buf: b\"\",\n        grease_quic_bit: false,\n    };\n    let len = data.buf.len();\n    let supported_versions = DEFAULT_SUPPORTED_VERSIONS.to_vec();\n    if let Ok(decoded) = PartialDecode::new(\n        data.buf,\n        data.local_cid_len,\n        &supported_versions,\n        data.grease_quic_bit,\n    ) {\n        match decoded.1 {\n            Some(x) => assert_eq!(len, decoded.0.len() + x.len()),\n            None => assert_eq!(len, decoded.0.len()),\n        }\n    }\n}"}
{"test_id": "quinn-rs-quinn/quinn-rs-quinn-83e4f46/tests-gen/streamid.inputs.rs::test_57", "code": "pub fn initiator(self) -> Side {\n        if self.0 & 0x1 == 0 {\n            Side::Client\n        } else {\n            Side::Server\n        }\n    }", "test": "fn test_57() {\n    let data = StreamIdParams {\n        side: Server,\n        dir: Uni,\n        index: 12514849900987264429,\n    };\n    let s = StreamId::new(data.side, data.dir, data.index);\n    assert_eq!(s.initiator(), data.side);\n    assert_eq!(s.dir(), data.dir);\n}"}
{"test_id": "XAMPPRocky-tokei/XAMPPRocky-tokei-92ddc2e/tests-gen/parse_from_slice_panic.inputs.rs::test_62", "code": "pub fn parse_from_slice (input : FuzzInput , check_total : bool) { let config = & Config { treat_doc_strings_as_comments : Some (input . treat_doc_strings_as_comments) , columns : None , hidden : None , no_ignore : None , no_ignore_parent : None , no_ignore_dot : None , no_ignore_vcs : None , sort : None , types : None , for_each_fn : None , } ; let stats = input . lang . parse_from_slice (input . data , config) ; if check_total { if let Ok (s) = str :: from_utf8 (input . data) { assert ! (stats . lines () <= s . lines () . count () , \"{} got more total lines ({}) than str::lines ({}). Code: {}, Comments: {}, Blanks: {}. treat_doc_strings_as_comments: {}. File contents (as UTF-8):\\n{}\" , input . lang . name () , stats . lines () , s . lines () . count () , stats . code , stats . comments , input . treat_doc_strings_as_comments , stats . blanks , s) } ; } }", "test": "fn test_62() {\n    let data = FuzzInput {\n        lang: AWK,\n        treat_doc_strings_as_comments: false,\n        data: [0, 0, 0, 255, 255, 13, 255, 255, 89],\n    };\n    parse_from_slice(data, false);\n}"}
{"test_id": "rust-bio-rust-bio/rust-bio-rust-bio-319a0d8/tests-gen/banded_aligner.inputs.rs::test_26", "code": "fn validate_alignment_score(al: &Alignment, x: TextSlice, y: TextSlice, scoring: &Scoring<MatchParams>) -> bool {\n    use AlignmentOperation::*;\n    let path = al.path();\n    let mut score = 0;\n    if al.mode==AlignmentMode::Custom {\n        if al.xstart > 0 {\n            score += scoring.xclip_prefix;\n        }\n        if al.ystart > 0 {\n            score += scoring.yclip_prefix;\n        }\n        if al.xend < al.xlen {\n            score += scoring.xclip_suffix;\n        }\n        if al.yend < al.ylen {\n            score += scoring.yclip_suffix;\n        }\n    }\n    let mut last_op = None;\n    for (i, j, op) in path {\n        score += match op {\n            Match | Subst => scoring.match_fn.score(x[i-1], y[j-1]),\n            Del => if last_op==Some(Del) { scoring.gap_extend } else { scoring.gap_open + scoring.gap_extend },\n            Ins => if last_op==Some(Ins) { scoring.gap_extend } else { scoring.gap_open + scoring.gap_extend },\n            _ => 0,\n        };\n        last_op = Some(op);\n    }\n    al.score==score\n}", "test": "fn test_26() {\n    let data = [10, 10];\n    if data.len() < 50 || data.len() > 300 {\n        return;\n    }\n    let (split_byte, data) = data.split_first().unwrap();\n    let (kmer_byte, data) = data.split_first().unwrap();\n    let (window_byte, data) = data.split_first().unwrap();\n    let (match_score_byte, data) = data.split_first().unwrap();\n    let (mismatch_score_byte, data) = data.split_first().unwrap();\n    let (gap_open_byte, data) = data.split_first().unwrap();\n    let (gap_extend_byte, data) = data.split_first().unwrap();\n    let (xclip_prefix_byte, data) = data.split_first().unwrap();\n    let (xclip_suffix_byte, data) = data.split_first().unwrap();\n    let (yclip_prefix_byte, data) = data.split_first().unwrap();\n    let (yclip_suffix_byte, data) = data.split_first().unwrap();\n    let alphabets = b\"ACGT\";\n    let v: Vec<_> = data\n        .iter()\n        .map(|i| alphabets[(*i as usize) % alphabets.len()])\n        .collect();\n    let kmer_len: usize = 5 + (*kmer_byte as usize) % 10;\n    let window_size: usize = 5 + (*window_byte as usize) % 10;\n    let split_pos: usize = min(data.len() - 1, max(*split_byte as usize, 1));\n    let match_score = 1 + (*match_score_byte as i32) % 5;\n    let mismatch_score = -((*mismatch_score_byte as i32) % 10);\n    let gap_open = -((*gap_open_byte as i32) % 20);\n    let gap_extend = -((*gap_extend_byte as i32) % 10);\n    let (x, y) = v.split_at(split_pos);\n    println!(\n        \"x: {}, y: {}, k: {}, w: {}, scoring ({}, {}, {}, {})\",\n        String::from_utf8(x.to_vec()).unwrap(),\n        String::from_utf8(y.to_vec()).unwrap(),\n        kmer_len,\n        window_size,\n        gap_open,\n        gap_extend,\n        match_score,\n        mismatch_score\n    );\n    let base_score = Scoring::from_scores(gap_open, gap_extend, match_score, mismatch_score);\n    {\n        println!(\n            \"Clip scores ({}, {}, {}, {})\",\n            xclip_prefix_byte, xclip_suffix_byte, yclip_prefix_byte, yclip_suffix_byte\n        );\n        let scoring = Scoring {\n            xclip_prefix: -(*xclip_prefix_byte as i32),\n            xclip_suffix: -(*xclip_suffix_byte as i32),\n            yclip_prefix: -(*yclip_prefix_byte as i32),\n            yclip_suffix: -(*yclip_suffix_byte as i32),\n            ..base_score.clone()\n        };\n        let mut b_aligner = banded::Aligner::with_scoring(scoring.clone(), kmer_len, window_size);\n        let b_alignment = b_aligner.custom(x, y);\n        assert!(validate_alignment_score(&b_alignment, x, y, &scoring));\n        let mut f_aligner = pairwise::Aligner::with_scoring(scoring.clone());\n        let f_alignment = f_aligner.custom(x, y);\n        assert!(validate_alignment_score(&f_alignment, x, y, &scoring));\n        let band_all_alignment = b_aligner.custom_with_matches(x, y, &Vec::new());\n        assert_eq!(band_all_alignment.score, f_alignment.score);\n    }\n    {\n        let scoring = Scoring {\n            xclip_prefix: 0,\n            xclip_suffix: 0,\n            yclip_suffix: 0,\n            ..base_score.clone()\n        };\n        let mut b_aligner = banded::Aligner::with_scoring(scoring.clone(), kmer_len, window_size);\n        let b_alignment = b_aligner.custom(x, y);\n        assert_eq!(b_alignment.ystart, 0);\n        assert!(validate_alignment_score(&b_alignment, x, y, &scoring));\n        let mut f_aligner = pairwise::Aligner::with_scoring(scoring.clone());\n        let f_alignment = f_aligner.custom(x, y);\n        assert_eq!(f_alignment.ystart, 0);\n        assert!(validate_alignment_score(&f_alignment, x, y, &scoring));\n        let band_all_alignment = b_aligner.custom_with_matches(x, y, &Vec::new());\n        assert_eq!(band_all_alignment.score, f_alignment.score);\n    }\n    {\n        let scoring = Scoring {\n            xclip_prefix: 0,\n            xclip_suffix: 0,\n            yclip_prefix: 0,\n            ..base_score.clone()\n        };\n        let mut b_aligner = banded::Aligner::with_scoring(scoring.clone(), kmer_len, window_size);\n        let b_alignment = b_aligner.custom(x, y);\n        assert_eq!(b_alignment.yend, b_alignment.ylen);\n        assert!(validate_alignment_score(&b_alignment, x, y, &scoring));\n        let mut f_aligner = pairwise::Aligner::with_scoring(scoring.clone());\n        let f_alignment = f_aligner.custom(x, y);\n        assert_eq!(f_alignment.yend, f_alignment.ylen);\n        assert!(validate_alignment_score(&f_alignment, x, y, &scoring));\n        let band_all_alignment = b_aligner.custom_with_matches(x, y, &Vec::new());\n        assert_eq!(band_all_alignment.score, f_alignment.score);\n    }\n    {\n        let scoring = Scoring {\n            xclip_suffix: 0,\n            yclip_prefix: 0,\n            yclip_suffix: 0,\n            ..base_score.clone()\n        };\n        let mut b_aligner = banded::Aligner::with_scoring(scoring.clone(), kmer_len, window_size);\n        let b_alignment = b_aligner.custom(x, y);\n        assert_eq!(b_alignment.xstart, 0);\n        assert!(validate_alignment_score(&b_alignment, x, y, &scoring));\n        let mut f_aligner = pairwise::Aligner::with_scoring(scoring.clone());\n        let f_alignment = f_aligner.custom(x, y);\n        assert_eq!(f_alignment.xstart, 0);\n        assert!(validate_alignment_score(&f_alignment, x, y, &scoring));\n        let band_all_alignment = b_aligner.custom_with_matches(x, y, &Vec::new());\n        assert_eq!(band_all_alignment.score, f_alignment.score);\n    }\n    {\n        let scoring = Scoring {\n            xclip_prefix: 0,\n            yclip_prefix: 0,\n            yclip_suffix: 0,\n            ..base_score.clone()\n        };\n        let mut b_aligner = banded::Aligner::with_scoring(scoring.clone(), kmer_len, window_size);\n        let b_alignment = b_aligner.custom(x, y);\n        assert_eq!(b_alignment.xend, b_alignment.xlen);\n        assert!(validate_alignment_score(&b_alignment, x, y, &scoring));\n        let mut f_aligner = pairwise::Aligner::with_scoring(scoring.clone());\n        let f_alignment = f_aligner.custom(x, y);\n        assert_eq!(f_alignment.xend, f_alignment.xlen);\n        assert!(validate_alignment_score(&f_alignment, x, y, &scoring));\n        let band_all_alignment = b_aligner.custom_with_matches(x, y, &Vec::new());\n        assert_eq!(band_all_alignment.score, f_alignment.score);\n    }\n    {\n        let mut aligner = banded::Aligner::with_scoring(base_score.clone(), kmer_len, window_size);\n        let alignment = aligner.local(x, y);\n        assert!(alignment.score >= 0);\n        assert!(validate_alignment_score(&alignment, x, y, &base_score));\n        let alignment = aligner.semiglobal(x, y);\n        assert_eq!(alignment.xstart, 0);\n        assert_eq!(alignment.xend, alignment.xlen);\n        assert!(validate_alignment_score(&alignment, x, y, &base_score));\n        let alignment = aligner.global(x, y);\n        assert_eq!(alignment.xstart, 0);\n        assert_eq!(alignment.xend, alignment.xlen);\n        assert_eq!(alignment.ystart, 0);\n        assert_eq!(alignment.yend, alignment.ylen);\n        assert!(validate_alignment_score(&alignment, x, y, &base_score));\n    }\n    {\n        let mut aligner = pairwise::Aligner::with_scoring(base_score.clone());\n        let alignment = aligner.local(x, y);\n        assert!(alignment.score >= 0);\n        assert!(validate_alignment_score(&alignment, x, y, &base_score));\n        let alignment = aligner.semiglobal(x, y);\n        assert_eq!(alignment.xstart, 0);\n        assert_eq!(alignment.xend, alignment.xlen);\n        assert!(validate_alignment_score(&alignment, x, y, &base_score));\n        let alignment = aligner.global(x, y);\n        assert_eq!(alignment.xstart, 0);\n        assert_eq!(alignment.xend, alignment.xlen);\n        assert_eq!(alignment.ystart, 0);\n        assert_eq!(alignment.yend, alignment.ylen);\n        assert!(validate_alignment_score(&alignment, x, y, &base_score));\n    }\n}"}
{"test_id": "rust-bio-rust-bio/rust-bio-rust-bio-319a0d8/tests-gen/myers_matching.inputs.rs::test_97", "code": "fn validate_alignment (aln : & Alignment , x : & [u8] , y : & [u8]) { let y = & y [aln . ystart .. aln . yend] ; let mut ix = 0 ; let mut iy = 0 ; let mut calc_dist = 0 ; for op in & aln . operations { match * op { Match => { assert ! (x [ix] == y [iy] , \"Match operation, but characters are not equal\") ; ix += 1 ; iy += 1 ; } Subst => { assert ! (x [ix] != y [iy] , \"Subst operation, but characters are equal\") ; calc_dist += 1 ; ix += 1 ; iy += 1 ; } Del => { calc_dist += 1 ; iy += 1 ; } Ins => { calc_dist += 1 ; ix += 1 ; } _ => unreachable ! () } } assert_eq ! (calc_dist , aln . score as usize) ; }", "test": "fn test_97() {\n    let data = [64, 61, 246];\n    if data.len() < 3 {\n        return;\n    }\n    let (max_dist, data) = data.split_first().unwrap();\n    let (pattern_len, data) = data.split_first().unwrap();\n    let max_dist = min(64, *max_dist);\n    let pattern_len = max(1, min(64, min(data.len(), *pattern_len as usize)));\n    if data.iter().any(|&b| b < 65 || b > 122 || b > 90 && b < 97) {\n        return;\n    }\n    let (pattern, text) = data.split_at(pattern_len);\n    let max_dist = max_dist as u8;\n    let _ = MyersBuilder::new().build_64(pattern);\n    let _ = MyersBuilder::new().build_long_64(pattern);\n    let mut myers = Myers::<u64>::new(pattern);\n    let mut myers_long = long::Myers::<u8>::new(pattern);\n    let end_dist: Vec<_> = myers.find_all_end(text, max_dist).collect();\n    let end_dist_long: Vec<_> = myers_long\n        .find_all_end(text, max_dist as usize)\n        .map(|(end, dist)| (end, dist as u8))\n        .collect();\n    assert_eq!(end_dist, end_dist_long);\n    let mut aln = Alignment::default();\n    let mut aln_long = Alignment::default();\n    {\n        let mut matches = myers.find_all(text, max_dist);\n        let mut matches_long = myers_long.find_all(text, max_dist as usize);\n        matches.alignment(&mut aln);\n        matches_long.alignment(&mut aln_long);\n        let mut end_dist_iter = end_dist.iter();\n        while matches.next_alignment(&mut aln) {\n            assert!(matches_long.next_alignment(&mut aln_long));\n            assert_eq!(aln, aln_long);\n            validate_alignment(&aln, pattern, text);\n            assert!(aln.score as u8 <= max_dist);\n            let (end, dist) = end_dist_iter.next().unwrap();\n            assert_eq!(*end + 1, aln.yend);\n            assert_eq!(*dist, aln.score as u8);\n        }\n        assert!(end_dist_iter.next().is_none());\n        assert!(!matches_long.next_alignment(&mut aln_long));\n    }\n    {\n        let mut matches = myers.find_all_lazy(text, max_dist);\n        let mut matches_long = myers_long.find_all_lazy(text, max_dist as usize);\n        let mut end_dist_iter = end_dist.iter();\n        while let Some((end, dist)) = matches.next() {\n            let (end_long, dist_long) = matches_long.next().unwrap();\n            assert_eq!((end, dist), (end_long, dist_long as u8));\n            assert!(matches.alignment_at(end, &mut aln));\n            assert!(matches_long.alignment_at(end, &mut aln_long));\n            assert_eq!(aln, aln_long);\n            validate_alignment(&aln, pattern, text);\n            assert_eq!(dist, aln.score as u8);\n            assert!(aln.score as u8 <= max_dist);\n            let (end, dist) = end_dist_iter.next().unwrap();\n            assert_eq!(*end + 1, aln.yend);\n            assert_eq!(*dist, aln.score as u8);\n            assert!(!matches.alignment_at(end + 1, &mut aln));\n        }\n        assert!(end_dist_iter.next().is_none());\n    }\n    let mut matches = myers.find_all_lazy(text, u8::max_value());\n    let mut matches_long = myers_long.find_all_lazy(text, u8::max_value() as usize);\n    let mut i = 0;\n    while let Some((end, dist)) = matches.next() {\n        assert_eq!(end, i);\n        let (end_long, dist_long) = matches_long.next().unwrap();\n        assert_eq!((end, dist), (end_long, dist_long as u8));\n        assert!(matches.alignment_at(end, &mut aln));\n        assert!(matches_long.alignment_at(end, &mut aln_long));\n        assert_eq!(aln, aln_long);\n        validate_alignment(&aln, pattern, text);\n        assert_eq!(dist, aln.score as u8);\n        assert!(aln.score as u8 <= u8::max_value());\n        assert!(!matches.alignment_at(end + 1, &mut aln));\n        assert!(!matches_long.alignment_at(end + 1, &mut aln_long));\n        i += 1;\n    }\n}"}
{"test_id": "BurntSushi-memchr/BurntSushi-memchr-f3fde7a/tests-gen/memrmem.inputs.rs::test_0", "code": "pub fn count(&self, haystack: &[u8]) -> usize {\n        // SAFETY: All of our pointers are derived directly from a borrowed\n        // slice, which is guaranteed to be valid.\n        unsafe {\n            let start = haystack.as_ptr();\n            let end = start.add(haystack.len());\n            self.count_raw(start, end)\n        }\n    }", "test": "fn test_0() {\n    let data = [10];\n    if data.len() < 2 {\n        return;\n    }\n    let split = std::cmp::max(data[0] as usize, 1) % data.len() as usize;\n    let (needle, haystack) = (&data[..split], &data[split..]);\n    memmem::rfind_iter(haystack, needle).count();\n}"}
{"test_id": "rustls-rustls/rustls-rustls-ae583bd/tests-gen/client.inputs.rs::test_3", "code": "pub fn process_new_packets(&mut self) -> Result<IoState, Error> {\n        match self {\n            Self::Client(conn) => conn.process_new_packets(),\n            Self::Server(conn) => conn.process_new_packets(),\n        }\n    }", "test": "fn test_3() {\n    let data = [\n        22, 3, 3, 0, 63, 2, 0, 0, 59, 3, 3, 89, 16, 236, 200, 17, 90, 14, 121, 52, 150, 218, 66,\n        28, 227, 55, 237, 109, 95, 209, 111, 252, 56, 238, 6, 251, 154, 147, 123, 211, 206, 186,\n        114, 0, 204, 169, 0, 0, 19, 255, 1, 0, 1, 0, 0, 23, 0, 0, 0, 35, 0, 0, 0, 11, 0, 2, 1, 0,\n        22, 3, 3, 14, 229, 11, 0, 14, 225, 0, 14, 222, 0, 7, 96, 48, 130, 7, 92, 48, 130, 6, 68,\n        160, 3, 2, 1, 2, 2, 8, 83, 65, 61, 145, 120, 210, 140, 39, 48, 13, 6, 9, 42, 134, 72, 134,\n        247, 13, 1, 1, 11, 5, 0, 48, 73, 49, 11, 48, 9, 6, 3, 85, 4, 6, 19, 2, 85, 83, 49, 19, 48,\n        17, 6, 3, 85, 4, 10, 19, 10, 71, 111, 111, 103, 108, 101, 32, 73, 110, 99, 49, 37, 48, 35,\n        6, 3, 85, 4, 3, 19, 28, 71, 111, 111, 103, 108, 101, 32, 73, 110, 116, 101, 114, 110, 101,\n        116, 32, 65, 117, 116, 104, 111, 114, 105, 116, 121, 32, 71, 50, 48, 30, 23, 13, 49, 55,\n        48, 52, 50, 55, 48, 56, 51, 48, 48, 48, 90, 23, 13, 49, 55, 48, 55, 50, 48, 48, 56, 51, 48,\n        48, 48, 90, 48, 102, 49, 11, 48, 9, 6, 3, 85, 4, 6, 19, 2, 85, 83, 49, 19, 48, 17, 6, 3,\n        85, 4, 8, 12, 10, 67, 97, 108, 105, 102, 111, 114, 110, 105, 97, 49, 22, 48, 20, 6, 3, 85,\n        4, 7, 12, 13, 77, 111, 117, 110, 116, 97, 105, 110, 32, 86, 105, 101, 119, 49, 19, 48, 17,\n        6, 3, 85, 4, 10, 12, 10, 71, 111, 111, 103, 108, 101, 32, 73, 110, 99, 49, 21, 48, 19, 6,\n        3, 85, 4, 3, 12, 12, 42, 46, 103, 111, 111, 103, 108, 101, 46, 99, 111, 109, 48, 89, 48,\n        19, 6, 7, 42, 134, 72, 206, 61, 2, 1, 6, 8, 42, 134, 72, 206, 61, 3, 1, 7, 3, 66, 0, 4,\n        189, 77, 48, 133, 70, 173, 158, 211, 104, 157, 203, 90, 81, 210, 82, 202, 205, 147, 209,\n        252, 62, 33, 220, 191, 25, 45, 49, 119, 71, 86, 34, 248, 128, 116, 164, 199, 172, 91, 179,\n        223, 239, 76, 76, 63, 25, 69, 53, 53, 110, 197, 165, 220, 25, 210, 237, 147, 30, 18, 131,\n        158, 196, 86, 94, 111, 163, 130, 4, 244, 48, 130, 4, 240, 48, 29, 6, 3, 85, 29, 37, 4, 22,\n        48, 20, 6, 8, 43, 6, 1, 5, 5, 7, 3, 1, 6, 8, 43, 6, 1, 5, 5, 7, 3, 2, 48, 11, 6, 3, 85, 29,\n        15, 4, 4, 3, 2, 7, 128, 48, 130, 3, 179, 6, 3, 85, 29, 17, 4, 130, 3, 170, 48, 130, 3, 166,\n        130, 12, 42, 46, 103, 111, 111, 103, 108, 101, 46, 99, 111, 109, 130, 13, 42, 46, 97, 110,\n        100, 114, 111, 105, 100, 46, 99, 111, 109, 130, 22, 42, 46, 97, 112, 112, 101, 110, 103,\n        105, 110, 101, 46, 103, 111, 111, 103, 108, 101, 46, 99, 111, 109, 130, 18, 42, 46, 99,\n        108, 111, 117, 100, 46, 103, 111, 111, 103, 108, 101, 46, 99, 111, 109, 130, 14, 42, 46,\n        103, 99, 112, 46, 103, 118, 116, 50, 46, 99, 111, 109, 130, 22, 42, 46, 103, 111, 111, 103,\n        108, 101, 45, 97, 110, 97, 108, 121, 116, 105, 99, 115, 46, 99, 111, 109, 130, 11, 42, 46,\n        103, 111, 111, 103, 108, 101, 46, 99, 97, 130, 11, 42, 46, 103, 111, 111, 103, 108, 101,\n        46, 99, 108, 130, 14, 42, 46, 103, 111, 111, 103, 108, 101, 46, 99, 111, 46, 105, 110, 130,\n        14, 42, 46, 103, 111, 111, 103, 108, 101, 46, 99, 111, 46, 106, 112, 130, 14, 42, 46, 103,\n        111, 111, 103, 108, 101, 46, 99, 111, 46, 117, 107, 130, 15, 42, 46, 103, 111, 111, 103,\n        108, 101, 46, 99, 111, 109, 46, 97, 114, 130, 15, 42, 46, 103, 111, 111, 103, 108, 101, 46,\n        99, 111, 109, 46, 97, 117, 130, 15, 42, 46, 103, 111, 111, 103, 108, 101, 46, 99, 111, 109,\n        46, 98, 114, 130, 15, 42, 46, 103, 111, 111, 103, 108, 101, 46, 99, 111, 109, 46, 99, 111,\n        130, 15, 42, 46, 103, 111, 111, 103, 108, 101, 46, 99, 111, 109, 46, 109, 120, 130, 15, 42,\n        46, 103, 111, 111, 103, 108, 101, 46, 99, 111, 109, 46, 116, 114, 130, 15, 42, 46, 103,\n        111, 111, 103, 108, 101, 46, 99, 111, 109, 46, 118, 110, 130, 11, 42, 46, 103, 111, 111,\n        103, 108, 101, 46, 100, 101, 130, 11, 42, 46, 103, 111, 111, 103, 108, 101, 46, 101, 115,\n        130, 11, 42, 46, 103, 111, 111, 103, 108, 101, 46, 102, 114, 130, 11, 42, 46, 103, 111,\n        111, 103, 108, 101, 46, 104, 117, 130, 11, 42, 46, 103, 111, 111, 103, 108, 101, 46, 105,\n        116, 130, 11, 42, 46, 103, 111, 111, 103, 108, 101, 46, 110, 108, 130, 11, 42, 46, 103,\n        111, 111, 103, 108, 101, 46, 112, 108, 130, 11, 42, 46, 103, 111, 111, 103, 108, 101, 46,\n        112, 116, 130, 18, 42, 46, 103, 111, 111, 103, 108, 101, 97, 100, 97, 112, 105, 115, 46,\n        99, 111, 109, 130, 15, 42, 46, 103, 111, 111, 103, 108, 101, 97, 112, 105, 115, 46, 99,\n        110, 130, 20, 42, 46, 103, 111, 111, 103, 108, 101, 99, 111, 109, 109, 101, 114, 99, 101,\n        46, 99, 111, 109, 130, 17, 42, 46, 103, 111, 111, 103, 108, 101, 118, 105, 100, 101, 111,\n        46, 99, 111, 109, 130, 12, 42, 46, 103, 115, 116, 97, 116, 105, 99, 46, 99, 110, 130, 13,\n        42, 46, 103, 115, 116, 97, 116, 105, 99, 46, 99, 111, 109, 130, 10, 42, 46, 103, 118, 116,\n        49, 46, 99, 111, 109, 130, 10, 42, 46, 103, 118, 116, 50, 46, 99, 111, 109, 130, 20, 42,\n        46, 109, 101, 116, 114, 105, 99, 46, 103, 115, 116, 97, 116, 105, 99, 46, 99, 111, 109,\n        130, 12, 42, 46, 117, 114, 99, 104, 105, 110, 46, 99, 111, 109, 130, 16, 42, 46, 117, 114,\n        108, 46, 103, 111, 111, 103, 108, 101, 46, 99, 111, 109, 130, 22, 42, 46, 121, 111, 117,\n        116, 117, 98, 101, 45, 110, 111, 99, 111, 111, 107, 105, 101, 46, 99, 111, 109, 130, 13,\n        42, 46, 121, 111, 117, 116, 117, 98, 101, 46, 99, 111, 109, 130, 22, 42, 46, 121, 111, 117,\n        116, 117, 98, 100, 101, 117, 101, 99, 97, 116, 105, 111, 110, 46, 99, 111, 109, 130, 11,\n        42, 46, 121, 116, 105, 109, 103, 46, 99, 111, 109, 130, 26, 97, 110, 100, 114, 111, 105,\n        100, 46, 99, 108, 105, 101, 110, 116, 115, 46, 103, 111, 111, 103, 108, 101, 46, 99, 111,\n        109, 130, 11, 97, 110, 100, 114, 111, 105, 100, 46, 99, 111, 109, 130, 27, 100, 101, 118,\n        101, 108, 111, 112, 101, 114, 46, 97, 110, 100, 114, 111, 105, 100, 46, 103, 111, 111, 103,\n        108, 101, 46, 99, 110, 130, 28, 100, 101, 118, 101, 108, 111, 112, 101, 114, 115, 46, 97,\n        110, 100, 114, 111, 105, 100, 46, 103, 111, 111, 103, 108, 101, 46, 99, 110, 130, 4, 103,\n        46, 99, 111, 130, 6, 103, 111, 111, 46, 103, 108, 130, 20, 103, 111, 111, 103, 108, 101,\n        45, 97, 110, 97, 108, 121, 116, 105, 99, 115, 46, 99, 111, 109, 130, 10, 103, 111, 111,\n        103, 108, 101, 46, 99, 111, 109, 130, 18, 103, 111, 111, 103, 108, 101, 99, 111, 109, 109,\n        101, 114, 99, 101, 46, 99, 111, 109, 130, 24, 115, 111, 117, 114, 99, 101, 46, 97, 110,\n        100, 114, 111, 105, 100, 46, 103, 111, 111, 103, 108, 101, 46, 99, 110, 130, 10, 117, 114,\n        99, 104, 105, 110, 46, 99, 111, 109, 130, 10, 119, 119, 119, 46, 103, 111, 111, 46, 103,\n        108, 130, 8, 121, 111, 117, 116, 117, 46, 98, 101, 130, 11, 121, 111, 117, 116, 117, 98,\n        101, 46, 99, 111, 109, 130, 20, 121, 111, 117, 116, 117, 98, 101, 101, 100, 117, 99, 97,\n        116, 105, 111, 110, 46, 99, 111, 109, 48, 104, 6, 8, 43, 6, 1, 5, 5, 7, 1, 1, 4, 92, 48,\n        90, 48, 43, 6, 8, 43, 6, 1, 5, 5, 7, 48, 2, 134, 31, 104, 116, 116, 112, 58, 47, 47, 112,\n        107, 105, 46, 103, 111, 111, 103, 108, 101, 46, 99, 111, 109, 47, 71, 73, 65, 71, 50, 46,\n        99, 114, 116, 48, 43, 6, 8, 43, 6, 1, 5, 5, 7, 48, 1, 134, 31, 104, 116, 116, 112, 58, 47,\n        47, 99, 108, 105, 101, 110, 116, 115, 49, 46, 103, 111, 111, 103, 108, 101, 46, 99, 111,\n        109, 47, 111, 99, 115, 112, 48, 29, 6, 3, 85, 29, 14, 4, 22, 4, 20, 253, 90, 18, 128, 11,\n        205, 4, 95, 242, 77, 89, 40, 3, 112, 35, 87, 25, 64, 248, 55, 48, 12, 6, 3, 85, 29, 19, 1,\n        1, 255, 4, 2, 48, 0, 48, 31, 6, 3, 85, 29, 35, 4, 24, 48, 22, 128, 20, 74, 221, 6, 22, 27,\n        188, 246, 104, 181, 118, 245, 129, 182, 187, 98, 26, 186, 90, 129, 47, 48, 33, 6, 3, 85,\n        29, 32, 4, 26, 48, 24, 48, 12, 6, 10, 43, 6, 1, 4, 1, 214, 121, 2, 5, 1, 48, 8, 6, 6, 103,\n        129, 12, 1, 2, 2, 48, 48, 6, 3, 85, 29, 31, 4, 41, 48, 39, 48, 37, 160, 35, 160, 33, 134,\n        31, 104, 116, 116, 112, 58, 47, 47, 112, 107, 105, 46, 103, 111, 111, 103, 108, 101, 46,\n        99, 111, 109, 47, 71, 73, 65, 71, 50, 46, 99, 114, 108, 48, 13, 6, 9, 42, 134, 72, 134,\n        247, 13, 1, 1, 11, 5, 0, 3, 130, 1, 1, 0, 33, 200, 169, 105, 206, 2, 155, 120, 189, 192,\n        51, 58, 117, 81, 58, 119, 84, 168, 232, 112, 67, 74, 178, 108, 140, 239, 140, 58, 241, 118,\n        5, 87, 151, 75, 62, 228, 100, 79, 253, 168, 208, 39, 111, 248, 15, 136, 208, 240, 106, 77,\n        117, 121, 178, 58, 88, 245, 179, 162, 251, 10, 71, 202, 197, 70, 144, 133, 162, 197, 128,\n        57, 111, 180, 163, 6, 63, 152, 48, 225, 133, 207, 156, 142, 147, 155, 164, 234, 150, 95,\n        194, 204, 36, 174, 11, 81, 8, 107, 127, 181, 132, 216, 230, 232, 29, 152, 1, 46, 152, 162,\n        185, 105, 229, 136, 245, 133, 63, 134, 92, 242, 217, 7, 26, 64, 132, 248, 126, 187, 114,\n        56, 192, 240, 70, 213, 140, 90, 19, 23, 33, 155, 220, 79, 93, 249, 252, 184, 190, 60, 45,\n        123, 246, 182, 204, 232, 45, 111, 214, 187, 247, 195, 215, 60, 88, 120, 12, 241, 0, 54,\n        189, 184, 200, 138, 56, 58, 15, 211, 62, 239, 220, 24, 224, 142, 159, 199, 102, 126, 9,\n        199, 212, 60, 163, 123, 195, 235, 239, 210, 8, 24, 172, 63, 119, 216, 233, 1, 8, 101, 21,\n        150, 10, 75, 36, 243, 45, 241, 243, 191, 254, 221, 133, 11, 136, 82, 64, 50, 222, 221, 48,\n        184, 48, 183, 155, 228, 204, 32, 177, 209, 139, 86, 15, 190, 118, 233, 91, 146, 124, 132,\n        218, 50, 73, 110, 152, 63, 196, 8, 66, 19, 171, 62, 0, 3, 244, 48, 130, 3, 240, 48, 130, 2,\n        216, 160, 3, 2, 1, 2, 2, 3, 2, 58, 146, 48, 13, 6, 9, 42, 134, 72, 134, 247, 13, 1, 1, 11,\n        5, 0, 48, 66, 49, 11, 48, 9, 6, 3, 85, 4, 6, 19, 2, 85, 83, 49, 22, 48, 20, 6, 3, 85, 4,\n        10, 19, 13, 71, 101, 111, 84, 114, 117, 115, 116, 32, 73, 110, 99, 46, 49, 27, 48, 25, 6,\n        3, 85, 4, 3, 19, 18, 71, 101, 111, 84, 114, 117, 115, 116, 32, 71, 108, 111, 98, 97, 108,\n        32, 67, 65, 48, 30, 23, 13, 49, 53, 48, 52, 48, 49, 48, 48, 48, 48, 48, 48, 90, 23, 13, 49,\n        55, 49, 50, 51, 49, 50, 51, 53, 57, 53, 57, 90, 48, 73, 49, 11, 48, 9, 6, 3, 85, 4, 6, 19,\n        2, 85, 83, 49, 19, 48, 17, 6, 3, 85, 4, 10, 19, 10, 71, 111, 111, 103, 108, 101, 32, 73,\n        110, 99, 49, 37, 48, 35, 6, 3, 85, 4, 3, 19, 28, 71, 111, 111, 103, 108, 101, 32, 73, 110,\n        116, 101, 114, 110, 101, 116, 32, 65, 117, 116, 104, 111, 114, 105, 116, 121, 32, 71, 50,\n        48, 130, 1, 34, 48, 13, 6, 9, 42, 134, 72, 134, 247, 13, 1, 1, 1, 5, 0, 3, 130, 1, 15, 0,\n        48, 130, 1, 10, 2, 130, 1, 1, 0, 156, 42, 4, 119, 92, 216, 80, 145, 58, 6, 163, 130, 224,\n        216, 80, 72, 188, 137, 63, 241, 25, 112, 26, 136, 70, 126, 224, 143, 197, 241, 137, 206,\n        33, 238, 90, 254, 97, 13, 183, 50, 68, 137, 160, 116, 11, 83, 79, 85, 164, 206, 130, 98,\n        149, 238, 235, 89, 95, 198, 225, 5, 128, 18, 196, 94, 148, 63, 188, 91, 72, 56, 244, 83,\n        247, 36, 230, 251, 145, 233, 21, 196, 207, 244, 83, 13, 244, 74, 252, 159, 84, 222, 125,\n        190, 160, 107, 111, 135, 192, 208, 80, 31, 40, 48, 3, 64, 218, 8, 115, 81, 108, 127, 255,\n        58, 60, 167, 55, 6, 142, 189, 75, 17, 4, 235, 125, 36, 222, 230, 249, 252, 49, 113, 251,\n        148, 213, 96, 243, 46, 74, 175, 66, 210, 203, 234, 196, 106, 26, 178, 204, 83, 221, 21, 75,\n        139, 31, 200, 25, 97, 31, 205, 157, 168, 62, 99, 43, 132, 53, 105, 101, 132, 200, 25, 197,\n        70, 34, 248, 83, 149, 190, 227, 128, 74, 16, 198, 42, 236, 186, 151, 32, 17, 199, 57, 153,\n        16, 4, 160, 240, 97, 122, 149, 37, 140, 78, 82, 117, 226, 182, 237, 8, 202, 20, 252, 206,\n        34, 106, 179, 78, 207, 70, 3, 151, 151, 3, 126, 192, 177, 222, 123, 175, 69, 51, 207, 186,\n        62, 113, 183, 222, 244, 37, 37, 194, 13, 53, 137, 157, 157, 251, 14, 17, 121, 137, 30, 55,\n        197, 175, 142, 114, 105, 2, 3, 1, 0, 1, 163, 129, 231, 48, 129, 228, 48, 31, 6, 3, 85, 29,\n        35, 4, 24, 48, 22, 128, 20, 192, 122, 152, 104, 141, 137, 251, 171, 5, 100, 12, 17, 125,\n        170, 125, 101, 184, 202, 204, 78, 48, 29, 6, 3, 85, 29, 14, 4, 22, 4, 20, 74, 221, 6, 22,\n        27, 188, 246, 104, 181, 118, 245, 129, 182, 187, 98, 26, 186, 90, 129, 47, 48, 14, 6, 3,\n        85, 29, 15, 1, 1, 255, 4, 4, 3, 2, 1, 6, 48, 46, 6, 8, 43, 6, 1, 5, 5, 7, 1, 1, 4, 34, 48,\n        32, 48, 30, 6, 8, 43, 6, 1, 5, 5, 7, 48, 1, 134, 18, 104, 116, 116, 112, 58, 47, 47, 103,\n        46, 115, 121, 109, 99, 100, 46, 99, 111, 109, 48, 18, 6, 3, 85, 29, 19, 1, 1, 255, 4, 8,\n        48, 6, 1, 1, 255, 2, 1, 0, 48, 53, 6, 3, 85, 29, 31, 4, 46, 48, 44, 48, 42, 160, 40, 160,\n        38, 134, 36, 104, 116, 116, 112, 58, 47, 47, 103, 46, 115, 121, 109, 99, 98, 46, 99, 111,\n        109, 47, 99, 114, 108, 115, 47, 103, 116, 103, 108, 111, 98, 97, 108, 46, 99, 114, 108, 48,\n        23, 6, 3, 85, 29, 32, 4, 16, 48, 14, 48, 12, 6, 10, 43, 6, 1, 4, 1, 214, 121, 2, 5, 1, 48,\n        13, 6, 9, 42, 134, 72, 134, 247, 13, 1, 1, 11, 5, 0, 3, 130, 1, 1, 0, 8, 78, 4, 167, 128,\n        127, 16, 22, 67, 94, 2, 173, 215, 66, 128, 244, 176, 142, 210, 174, 179, 235, 17, 125, 144,\n        132, 24, 125, 231, 144, 21, 251, 73, 127, 168, 153, 5, 145, 187, 122, 201, 214, 60, 55, 24,\n        9, 154, 182, 199, 146, 32, 7, 53, 51, 9, 228, 40, 99, 114, 13, 180, 224, 50, 156, 135, 152,\n        196, 27, 118, 137, 103, 193, 80, 88, 176, 19, 170, 19, 26, 27, 50, 165, 190, 234, 17, 149,\n        76, 72, 99, 73, 233, 153, 93, 32, 55, 204, 254, 42, 105, 81, 22, 149, 75, 169, 222, 73,\n        130, 192, 16, 112, 244, 44, 243, 236, 188, 36, 36, 208, 78, 172, 165, 217, 94, 30, 109,\n        146, 193, 167, 172, 72, 53, 129, 249, 229, 228, 156, 101, 105, 205, 135, 164, 65, 80, 63,\n        46, 87, 165, 145, 81, 18, 88, 14, 140, 9, 161, 172, 122, 164, 18, 165, 39, 243, 154, 16,\n        151, 125, 85, 3, 6, 247, 102, 88, 95, 95, 100, 225, 171, 93, 109, 165, 57, 72, 117, 152,\n        76, 41, 90, 58, 141, 211, 43, 202, 156, 85, 4, 191, 244, 230, 20, 213, 128, 172, 38, 237,\n        23, 137, 166, 147, 108, 92, 164, 204, 184, 240, 102, 142, 100, 227, 125, 154, 226, 0, 179,\n        73, 199, 228, 10, 170, 221, 91, 131, 199, 112, 144, 70, 78, 190, 208, 219, 89, 150, 108,\n        46, 245, 22, 54, 222, 113, 204, 1, 194, 18, 193, 33, 198, 22, 0, 3, 129, 48, 130, 3, 125,\n        48, 130, 2, 230, 160, 3, 2, 1, 2, 2, 3, 18, 187, 230, 48, 13, 6, 9, 42, 134, 72, 134, 247,\n        13, 1, 1, 5, 5, 0, 48, 78, 49, 11, 48, 9, 6, 3, 85, 4, 6, 19, 2, 85, 83, 49, 16, 48, 14, 6,\n        3, 85, 4, 10, 19, 7, 69, 113, 117, 105, 102, 97, 120, 49, 45, 48, 43, 6, 3, 85, 4, 11, 19,\n        36, 69, 113, 117, 105, 102, 97, 120, 32, 83, 101, 99, 117, 114, 101, 32, 67, 101, 114, 116,\n        105, 102, 105, 99, 97, 116, 101, 32, 65, 117, 116, 104, 111, 114, 105, 116, 121, 48, 30,\n        23, 13, 48, 50, 48, 53, 50, 49, 48, 52, 48, 48, 48, 48, 90, 23, 13, 49, 56, 48, 56, 50, 49,\n        48, 52, 48, 48, 48, 48, 90, 48, 66, 49, 11, 48, 9, 6, 3, 85, 4, 6, 19, 2, 85, 83, 49, 22,\n        48, 20, 6, 3, 85, 4, 10, 19, 13, 71, 101, 111, 84, 114, 117, 115, 116, 32, 73, 110, 99, 46,\n        49, 27, 48, 25, 6, 3, 85, 4, 3, 19, 18, 71, 101, 111, 84, 114, 117, 115, 116, 32, 71, 108,\n        111, 98, 97, 108, 32, 67, 65, 48, 130, 1, 34, 48, 13, 6, 9, 42, 134, 72, 134, 247, 13, 1,\n        1, 1, 5, 0, 3, 130, 1, 15, 0, 48, 130, 1, 10, 2, 130, 1, 1, 0, 218, 204, 24, 99, 48, 253,\n        244, 23, 35, 26, 86, 126, 91, 223, 60, 108, 56, 228, 113, 183, 120, 145, 212, 188, 161,\n        216, 76, 248, 168, 67, 182, 3, 233, 77, 33, 7, 8, 136, 218, 88, 47, 102, 57, 41, 189, 5,\n        120, 139, 157, 56, 232, 5, 183, 106, 126, 113, 164, 230, 196, 96, 166, 176, 239, 128, 228,\n        137, 40, 15, 158, 37, 214, 237, 131, 243, 173, 166, 145, 199, 152, 201, 66, 24, 53, 20,\n        157, 173, 152, 70, 146, 46, 79, 202, 241, 135, 67, 193, 22, 149, 87, 45, 80, 239, 137, 45,\n        128, 122, 87, 173, 242, 238, 95, 107, 210, 0, 141, 185, 20, 248, 20, 21, 53, 217, 192, 70,\n        163, 123, 114, 200, 145, 191, 201, 85, 43, 205, 208, 151, 62, 156, 38, 100, 204, 223, 206,\n        131, 25, 113, 202, 78, 230, 212, 213, 123, 169, 25, 205, 85, 222, 200, 236, 210, 94, 56,\n        83, 229, 92, 79, 140, 45, 254, 80, 35, 54, 252, 102, 230, 203, 142, 164, 57, 25, 0, 183,\n        149, 2, 57, 145, 11, 14, 254, 56, 46, 209, 29, 5, 154, 246, 77, 62, 111, 15, 7, 29, 175,\n        44, 30, 143, 96, 57, 226, 250, 54, 83, 19, 57, 212, 94, 38, 43, 219, 61, 168, 20, 189, 50,\n        235, 24, 3, 40, 82, 4, 113, 229, 171, 51, 61, 225, 56, 187, 7, 54, 132, 98, 156, 121, 234,\n        22, 48, 244, 95, 192, 43, 232, 113, 107, 228, 249, 2, 3, 1, 0, 1, 163, 129, 240, 48, 129,\n        237, 48, 31, 6, 3, 85, 29, 35, 4, 24, 48, 22, 128, 20, 72, 230, 104, 249, 43, 210, 178,\n        149, 215, 71, 216, 35, 32, 16, 79, 51, 152, 144, 159, 212, 48, 29, 6, 3, 85, 29, 14, 4, 22,\n        4, 20, 192, 122, 152, 104, 141, 137, 251, 171, 5, 100, 12, 17, 125, 170, 125, 101, 184,\n        202, 204, 78, 48, 15, 6, 3, 85, 29, 19, 1, 1, 255, 4, 5, 48, 3, 1, 1, 255, 48, 14, 6, 3,\n        85, 29, 15, 1, 1, 255, 4, 4, 3, 2, 1, 6, 48, 58, 6, 3, 85, 29, 31, 4, 51, 48, 49, 48, 47,\n        160, 45, 160, 43, 134, 41, 104, 116, 116, 112, 58, 47, 47, 99, 114, 108, 46, 103, 101, 111,\n        116, 114, 117, 115, 116, 46, 99, 111, 109, 47, 99, 114, 108, 115, 47, 115, 101, 99, 117,\n        114, 101, 99, 97, 46, 99, 114, 108, 48, 78, 6, 3, 85, 29, 32, 4, 71, 48, 69, 48, 67, 6, 4,\n        85, 29, 32, 0, 48, 59, 48, 57, 6, 8, 43, 6, 1, 5, 5, 7, 2, 1, 22, 45, 104, 116, 116, 112,\n        115, 58, 47, 47, 119, 119, 119, 46, 103, 101, 111, 116, 114, 117, 115, 116, 46, 99, 111,\n        109, 47, 114, 101, 115, 111, 117, 114, 99, 101, 115, 47, 114, 101, 112, 111, 115, 105, 116,\n        111, 114, 121, 48, 13, 6, 9, 42, 134, 72, 134, 247, 13, 1, 1, 5, 5, 0, 3, 129, 129, 0, 118,\n        225, 18, 110, 78, 75, 22, 18, 134, 48, 6, 178, 129, 8, 207, 240, 8, 199, 199, 113, 126,\n        102, 238, 194, 237, 212, 59, 31, 255, 240, 240, 200, 78, 214, 67, 56, 176, 185, 48, 125,\n        24, 208, 85, 131, 162, 106, 203, 54, 17, 156, 232, 72, 102, 163, 109, 127, 184, 19, 212,\n        71, 254, 139, 90, 92, 115, 252, 174, 217, 27, 50, 25, 56, 171, 151, 52, 20, 170, 150, 210,\n        235, 163, 28, 20, 8, 73, 182, 187, 229, 145, 239, 131, 54, 235, 29, 86, 111, 202, 218, 188,\n        115, 99, 144, 228, 127, 123, 62, 34, 203, 61, 7, 237, 95, 56, 116, 156, 227, 3, 80, 78,\n        161, 175, 152, 238, 97, 242, 132, 63, 18, 22, 3, 3, 0, 114, 12, 0, 0, 110, 3, 0, 29, 32,\n        75, 217, 44, 1, 117, 219, 122, 48, 71, 161, 89, 28, 185, 211, 203, 104, 197, 72, 172, 58,\n        227, 76, 100, 140, 23, 97, 211, 83, 70, 10, 176, 5, 4, 3, 0, 70, 48, 68, 2, 32, 118, 77,\n        25, 193, 184, 245, 209, 235, 233, 73, 206, 164, 213, 214, 217, 58, 189, 77, 153, 98, 68,\n        51, 73, 61, 86, 46, 224, 166, 129, 143, 233, 99, 2, 32, 124, 140, 108, 231, 222, 178, 70,\n        254, 130, 96, 249, 202, 22, 73, 30, 105, 180, 48, 177, 254, 92, 206, 16, 218, 0, 232, 189,\n        151, 157, 245, 39, 28, 22, 3, 3, 0, 4, 14, 0, 0, 0, 22, 3, 3, 0, 190, 4, 0, 0, 186, 0, 1,\n        137, 192, 0, 180, 20, 223, 122, 124, 254, 176, 24, 87, 129, 188, 25, 248, 233, 202, 114,\n        232, 117, 171, 162, 35, 223, 70, 217, 201, 60, 235, 114, 254, 181, 102, 199, 213, 157, 219,\n        90, 42, 235, 135, 84, 255, 194, 219, 249, 247, 214, 54, 54, 229, 79, 220, 3, 190, 161, 210,\n        47, 16, 37, 64, 211, 213, 90, 152, 193, 224, 185, 50, 214, 247, 202, 43, 114, 244, 225,\n        125, 149, 103, 150, 160, 133, 107, 60, 123, 80, 172, 188, 210, 189, 252, 195, 26, 25, 7,\n        251, 196, 130, 237, 57, 195, 62, 96, 219, 233, 108, 223, 21, 183, 44, 247, 233, 117, 14,\n        205, 189, 245, 126, 108, 249, 188, 52, 226, 115, 236, 151, 168, 171, 226, 99, 204, 123, 77,\n        237, 165, 38, 196, 158, 196, 163, 39, 31, 219, 195, 16, 152, 4, 135, 131, 197, 26, 192,\n        175, 73, 208, 102, 224, 50, 80, 230, 29, 5, 207, 178, 98, 39, 107, 230, 1, 197, 170, 5, 64,\n        181, 56, 55, 178, 122, 4, 178, 114, 110, 79, 20, 3, 3, 0, 1, 1, 22, 3, 3, 0, 32, 183, 30,\n        234, 49, 21, 153, 244, 50, 141, 222, 123, 52, 1, 109, 64, 238, 29, 191, 187, 51, 222, 29,\n        236, 211, 51, 142, 115, 248, 228, 41, 223, 232, 23, 3, 3, 5, 145, 183, 198, 127, 233, 133,\n        132, 204, 255, 193, 240, 165, 168, 179, 134, 137, 28, 111, 57, 20, 103, 109, 40, 93, 116,\n        27, 183, 6, 173, 163, 53, 13, 72, 122, 43, 63, 229, 34, 239, 206, 238, 224, 219, 154, 89,\n        232, 199, 231, 76, 220, 48, 166, 150, 198, 187, 179, 212, 170, 99, 14, 86, 71, 119, 180,\n        116, 170, 223, 163, 40, 114, 100, 115, 113, 43, 44, 114, 235, 76, 52, 47, 163, 154, 106,\n        75, 206, 13, 169, 35, 146, 186, 235, 26, 215, 226, 25, 96, 82, 134, 106, 165, 127, 165,\n        151, 155, 237, 16, 83, 188, 25, 119, 139, 21, 127, 119, 176, 100, 73, 39, 111, 86, 232, 52,\n        9, 66, 93, 115, 223, 106, 228, 206, 238, 160, 132, 136, 64, 102, 43, 74, 71, 121, 174, 29,\n        24, 97, 80, 95, 52, 218, 59, 92, 197, 127, 255, 57, 181, 131, 22, 44, 103, 181, 255, 147,\n        102, 90, 15, 183, 116, 87, 9, 234, 149, 220, 97, 185, 51, 15, 48, 192, 77, 192, 92, 6, 25,\n        231, 98, 183, 247, 191, 91, 35, 232, 21, 25, 172, 40, 237, 60, 161, 137, 231, 74, 255, 83,\n        254, 183, 142, 212, 17, 244, 228, 22, 175, 11, 18, 28, 10, 13, 59, 153, 59, 167, 135, 132,\n        139, 137, 113, 140, 127, 144, 118, 200, 162, 233, 78, 190, 163, 76, 226, 254, 141, 23, 103,\n        104, 130, 9, 249, 38, 224, 186, 81, 202, 138, 93, 91, 204, 157, 215, 80, 29, 100, 172, 90,\n        238, 198, 240, 210, 187, 19, 62, 115, 118, 162, 168, 216, 71, 112, 46, 23, 133, 22, 189,\n        210, 149, 133, 48, 200, 136, 154, 38, 232, 39, 155, 118, 193, 34, 213, 153, 254, 27, 118,\n        184, 252, 128, 4, 175, 4, 84, 119, 78, 252, 154, 99, 252, 142, 108, 170, 171, 108, 4, 181,\n        42, 121, 214, 195, 219, 86, 242, 192, 126, 196, 223, 239, 42, 199, 225, 212, 234, 10, 122,\n        3, 193, 28, 84, 12, 112, 161, 253, 10, 169, 105, 164, 63, 97, 189, 164, 233, 134, 45, 115,\n        68, 28, 24, 245, 177, 156, 59, 119, 158, 169, 190, 92, 55, 25, 81, 131, 16, 97, 164, 233,\n        188, 6, 13, 197, 35, 180, 215, 5, 222, 218, 153, 211, 204, 140, 43, 16, 66, 70, 37, 188,\n        245, 142, 91, 181, 176, 50, 210, 247, 126, 210, 254, 254, 56, 58, 202, 187, 189, 198, 247,\n        74, 189, 80, 143, 231, 208, 22, 188, 255, 184, 79, 239, 101, 153, 38, 185, 223, 119, 141,\n        143, 241, 93, 236, 72, 153, 185, 119, 215, 135, 123, 202, 66, 204, 12, 243, 246, 48, 43,\n        154, 83, 0, 100, 146, 157, 230, 233, 147, 209, 45, 106, 170, 231, 113, 162, 217, 136, 142,\n        254, 179, 55, 216, 202, 171, 112, 33, 169, 211, 27, 69, 131, 131, 186, 210, 79, 186, 244,\n        223, 25, 153, 0, 204, 17, 150, 183, 82, 33, 40, 165, 178, 214, 212, 185, 215, 118, 116,\n        192, 121, 23, 111, 14, 148, 118, 17, 195, 123, 98, 96, 227, 160, 203, 98, 44, 10, 17, 73,\n        153, 8, 104, 225, 126, 28, 62, 50, 167, 146, 93, 246, 148, 222, 56, 235, 205, 189, 222,\n        186, 74, 242, 195, 91, 54, 135, 245, 245, 139, 235, 233, 43, 125, 89, 87, 250, 179, 228,\n        228, 166, 141, 238, 53, 245, 80, 235, 32, 142, 81, 180, 51, 107, 117, 28, 197, 62, 15, 107,\n        40, 167, 63, 119, 215, 239, 4, 53, 26, 254, 55, 153, 8, 89, 253, 156, 98, 25, 51, 54, 205,\n        255, 183, 37, 76, 39, 153, 92, 240, 79, 178, 157, 153, 205, 242, 91, 133, 204, 26, 107, 7,\n        105, 59, 186, 37, 217, 61, 171, 159, 165, 68, 171, 10, 91, 29, 236, 136, 188, 153, 202, 63,\n        99, 47, 38, 246, 92, 156, 111, 100, 241, 142, 19, 98, 204, 171, 188, 6, 5, 117, 91, 47, 16,\n        227, 100, 43, 77, 56, 70, 231, 10, 161, 170, 195, 142, 34, 154, 173, 32, 78, 93, 39, 56,\n        185, 38, 249, 59, 219, 48, 15, 106, 245, 187, 64, 82, 47, 144, 134, 130, 154, 54, 87, 70,\n        166, 72, 234, 147, 121, 227, 24, 77, 204, 246, 109, 49, 57, 104, 114, 128, 35, 40, 34, 113,\n        75, 116, 91, 6, 43, 28, 123, 123, 43, 180, 82, 237, 1, 250, 108, 126, 244, 40, 186, 108,\n        59, 59, 1, 232, 50, 14, 248, 26, 158, 112, 110, 245, 133, 40, 44, 38, 130, 187, 34, 190,\n        179, 134, 98, 54, 71, 52, 151, 64, 70, 253, 247, 48, 201, 189, 117, 28, 18, 6, 111, 239,\n        64, 248, 250, 231, 85, 20, 133, 210, 238, 207, 121, 136, 37, 127, 16, 135, 191, 150, 42,\n        174, 107, 239, 142, 40, 108, 34, 66, 36, 233, 104, 52, 137, 12, 49, 17, 219, 213, 165, 132,\n        160, 153, 6, 175, 133, 172, 78, 183, 236, 228, 81, 164, 11, 152, 93, 194, 212, 117, 179,\n        84, 175, 251, 73, 172, 77, 252, 207, 166, 218, 20, 168, 183, 0, 205, 40, 203, 120, 130, 87,\n        123, 61, 140, 237, 224, 132, 178, 103, 208, 78, 140, 40, 13, 123, 9, 47, 68, 171, 162, 116,\n        160, 87, 84, 2, 14, 84, 180, 242, 73, 38, 223, 191, 114, 45, 232, 208, 252, 180, 95, 17,\n        205, 199, 106, 169, 123, 181, 212, 225, 41, 91, 38, 81, 23, 176, 105, 40, 194, 246, 174,\n        78, 30, 205, 204, 147, 9, 172, 98, 65, 188, 225, 83, 245, 167, 203, 99, 201, 207, 126, 192,\n        173, 250, 25, 28, 101, 164, 88, 191, 186, 203, 199, 243, 35, 13, 187, 204, 61, 180, 2, 24,\n        198, 83, 6, 147, 212, 139, 186, 164, 180, 193, 193, 241, 96, 217, 160, 58, 117, 133, 132,\n        97, 135, 174, 24, 49, 123, 161, 202, 191, 10, 20, 238, 223, 213, 107, 139, 69, 58, 239, 56,\n        147, 15, 71, 130, 244, 112, 179, 219, 45, 136, 223, 145, 5, 100, 70, 194, 104, 130, 39, 47,\n        144, 40, 179, 162, 166, 177, 238, 10, 122, 181, 88, 128, 242, 228, 211, 145, 239, 231, 38,\n        58, 56, 75, 175, 203, 162, 198, 220, 58, 152, 213, 24, 223, 20, 41, 227, 102, 59, 122, 94,\n        95, 197, 33, 196, 28, 96, 184, 228, 76, 194, 197, 105, 5, 26, 90, 174, 79, 27, 218, 172,\n        92, 44, 155, 33, 236, 30, 190, 13, 110, 13, 60, 176, 93, 14, 91, 214, 255, 254, 88, 103,\n        178, 198, 121, 186, 64, 227, 162, 168, 215, 191, 237, 199, 111, 169, 20, 159, 6, 182, 229,\n        25, 157, 45, 54, 158, 121, 226, 199, 147, 48, 82, 174, 41, 55, 185, 164, 65, 101, 174, 22,\n        69, 163, 141, 174, 103, 99, 196, 91, 121, 197, 219, 197, 90, 242, 150, 42, 209, 60, 97, 55,\n        242, 58, 126, 231, 22, 127, 91, 166, 44, 228, 231, 29, 236, 61, 35, 12, 152, 48, 104, 183,\n        24, 213, 102, 189, 214, 101, 136, 11, 226, 31, 83, 243, 242, 206, 101, 180, 179, 14, 35,\n        13, 104, 249, 151, 118, 148, 180, 205, 245, 29, 35, 253, 113, 62, 102, 109, 228, 28, 120,\n        68, 76, 243, 62, 250, 159, 100, 137, 94, 216, 30, 90, 10, 230, 54, 242, 196, 232, 13, 12,\n        177, 50, 32, 91, 126, 103, 88, 54, 57, 13, 172, 80, 167, 15, 51, 109, 159, 237, 164, 251,\n        229, 16, 134, 132, 56, 93, 60, 51, 230, 25, 105, 230, 1, 54, 204, 248, 53, 80, 16, 54, 168,\n        4, 173, 246, 198, 106, 252, 153, 5, 227, 23, 169, 9, 2, 162, 237, 46, 114, 238, 203, 103,\n        62, 66, 43, 119, 56, 209, 97, 60, 189, 54, 25, 228, 137, 19, 198, 68, 137, 40, 197, 159,\n        152, 220, 149, 128, 201, 201, 138, 46, 70, 97, 140, 146, 244, 106, 103, 120, 211, 231, 150,\n        37, 41, 30, 87, 208, 191, 66, 142, 55, 222, 11, 102, 197, 30, 213, 6, 144, 18, 123, 235,\n        145, 73, 249, 60, 240, 251, 161, 240, 147, 201, 165, 206, 167, 115, 79, 225, 189, 27, 95,\n        168, 239, 189, 46, 13, 198, 47, 228, 179, 156, 53, 40, 209, 116, 191, 177, 143, 60, 157,\n        172, 193, 123, 252, 146, 28, 6, 20, 225, 237, 80, 166, 97, 59, 162, 189, 172, 91, 121, 248,\n        134, 72, 36, 23, 3, 3, 1, 134, 184, 233, 245, 63, 202, 189, 95, 218, 14, 44, 104, 150, 88,\n        57, 147, 139, 108, 12, 24, 244, 48, 244, 12, 105, 140, 245, 216, 203, 98, 220, 166, 61,\n        248, 29, 21, 205, 163, 217, 131, 222, 142, 243, 231, 56, 251, 8, 91, 104, 142, 192, 167,\n        237, 78, 125, 38, 215, 152, 134, 128, 126, 89, 102, 207, 188, 230, 246, 14, 24, 126, 138,\n        114, 180, 118, 107, 248, 123, 189, 108, 188, 51, 72, 43, 11, 120, 144, 125, 151, 128, 70,\n        175, 208, 157, 21, 23, 181, 116, 24, 151, 213, 169, 71, 137, 211, 133, 66, 217, 94, 56,\n        172, 53, 200, 76, 212, 201, 64, 165, 40, 211, 58, 41, 133, 5, 180, 151, 59, 17, 112, 75,\n        19, 186, 172, 50, 36, 184, 98, 225, 103, 3, 192, 196, 234, 34, 58, 122, 13, 145, 186, 175,\n        250, 68, 14, 113, 209, 83, 212, 155, 61, 162, 156, 108, 103, 139, 224, 128, 191, 58, 168,\n        228, 223, 63, 16, 216, 161, 129, 103, 100, 126, 196, 98, 10, 77, 40, 217, 195, 19, 205,\n        202, 220, 96, 17, 175, 95, 25, 22, 158, 125, 215, 107, 136, 1, 124, 91, 213, 38, 226, 229,\n        171, 102, 229, 43, 21, 96, 18, 64, 250, 121, 28, 196, 204, 232, 170, 196, 217, 241, 72, 52,\n        204, 213, 15, 38, 22, 211, 23, 30, 200, 130, 144, 162, 241, 75, 131, 109, 216, 53, 176,\n        129, 181, 234, 255, 221, 66, 0, 103, 20, 218, 25, 242, 178, 29, 66, 74, 132, 102, 65, 47,\n        113, 156, 220, 240, 218, 205, 242, 139, 64, 190, 177, 79, 163, 13, 245, 95, 144, 138, 214,\n        18, 105, 157, 143, 227, 178, 156, 38, 215, 106, 254, 245, 153, 14, 188, 52, 101, 188, 238,\n        86, 47, 120, 37, 100, 136, 93, 124, 217, 73, 77, 154, 46, 244, 106, 178, 10, 189, 146, 171,\n        135, 220, 144, 201, 229, 61, 61, 135, 192, 76, 64, 222, 138, 66, 197, 214, 166, 41, 39,\n        147, 245, 35, 15, 191, 134, 204, 64, 72, 168, 114, 232, 179, 225, 117, 94, 47, 184, 219,\n        143, 107, 210, 56, 223, 248, 86, 107, 154, 214, 43, 23, 71, 130, 241, 25, 50, 204, 144,\n        244, 19, 51, 33, 180, 0, 17, 184, 61, 147,\n    ];\n    let root_store = RootCertStore::empty();\n    let config = Arc::new(\n        ClientConfig::builder()\n            .with_safe_defaults()\n            .with_root_certificates(root_store)\n            .with_no_client_auth(),\n    );\n    let example_com = \"example.com\".try_into().unwrap();\n    let mut client = ClientConnection::new(config, example_com).unwrap();\n    let _ = client.read_tls(&mut io::Cursor::new(data));\n    let _ = client.process_new_packets();\n}"}
{"test_id": "image-rs-image-gif/image-rs-image-gif-80fd8c0/tests-gen/decode.inputs.rs::test_54", "code": "fn try_decode (data : & [u8]) -> Result < () , gif :: DecodingError > { let mut reader = gif :: Decoder :: new (data) ? ; while let Some (_) = reader . read_next_frame () ? { } Ok (()) }", "test": "fn test_54() {\n    let data = [1, 0, 0, 0];\n    let _ = try_decode(data);\n}"}
{"test_id": "image-rs-image/image-rs-image-e5580ec/tests-gen/fuzzer_script_exr.inputs.rs::test_26", "code": "fn roundtrip (bytes : & [u8]) -> ImageResult < () > { # [doc = \" Read the file from the specified path into an `Rgba32FImage`.\"] fn read_as_rgba_byte_image (read : impl Read + Seek) -> ImageResult < (u32 , u32 , Vec < u8 >) > { let mut decoder = OpenExrDecoder :: with_alpha_preference (read , Some (true)) ? ; match usize :: try_from (decoder . total_bytes ()) { Ok (decoded_size) if decoded_size <= 256 * 1024 * 1024 => { decoder . set_limits (Limits :: default ()) ? ; let (width , height) = decoder . dimensions () ; let mut buffer = vec ! [0 ; decoded_size] ; decoder . read_image (buffer . as_mut_slice ()) ? ; Ok ((width , height , buffer)) } _ => Err (image :: ImageError :: Limits (image :: error :: LimitError :: from_kind (image :: error :: LimitErrorKind :: InsufficientMemory ,) ,)) , } } # [doc = \" Write an `Rgba32FImage`.\"] # [doc = \" Assumes the writer is buffered. In most cases,\"] # [doc = \" you should wrap your writer in a `BufWriter` for best performance.\"] fn write_rgba_image (write : impl Write + Seek , (width , height , data) : & (u32 , u32 , Vec < u8 >) ,) -> ImageResult < () > { OpenExrEncoder :: new (write) . write_image (data . as_slice () , * width , * height , ColorType :: Rgba32F) } let decoded_image = read_as_rgba_byte_image (Cursor :: new (bytes)) ? ; let mut bytes = Vec :: with_capacity (bytes . len () + 20) ; write_rgba_image (Cursor :: new (& mut bytes) , & decoded_image) ? ; let redecoded_image = read_as_rgba_byte_image (Cursor :: new (bytes)) ? ; assert_eq ! (decoded_image , redecoded_image , \"image was valid but was not reproducible\") ; Ok (()) }", "test": "fn test_26() {\n    let data = [58, 61, 59];\n    let _img = roundtrip(data);\n}"}
{"test_id": "XAMPPRocky-tokei/XAMPPRocky-tokei-92ddc2e/tests-gen/parse_from_slice_panic.inputs.rs::test_61", "code": "pub fn parse_from_slice (input : FuzzInput , check_total : bool) { let config = & Config { treat_doc_strings_as_comments : Some (input . treat_doc_strings_as_comments) , columns : None , hidden : None , no_ignore : None , no_ignore_parent : None , no_ignore_dot : None , no_ignore_vcs : None , sort : None , types : None , for_each_fn : None , } ; let stats = input . lang . parse_from_slice (input . data , config) ; if check_total { if let Ok (s) = str :: from_utf8 (input . data) { assert ! (stats . lines () <= s . lines () . count () , \"{} got more total lines ({}) than str::lines ({}). Code: {}, Comments: {}, Blanks: {}. treat_doc_strings_as_comments: {}. File contents (as UTF-8):\\n{}\" , input . lang . name () , stats . lines () , s . lines () . count () , stats . code , stats . comments , input . treat_doc_strings_as_comments , stats . blanks , s) } ; } }", "test": "fn test_61() {\n    let data = FuzzInput {\n        lang: AWK,\n        treat_doc_strings_as_comments: false,\n        data: [0, 0, 0, 255, 13, 255, 255, 255, 89],\n    };\n    parse_from_slice(data, false);\n}"}
{"test_id": "cloud-hypervisor-cloud-hypervisor/cloud-hypervisor-cloud-hypervisor-db3a5f3/tests-gen/block.inputs.rs::test_94", "code": "pub fn wait_for_epoll_threads(&mut self) {\n        self.common.wait_for_epoll_threads();\n    }", "test": "fn test_94() {\n    let bytes = [179];\n    if bytes.len() < QUEUE_DATA_SIZE || bytes.len() > (QUEUE_DATA_SIZE + MEM_SIZE) {\n        return;\n    }\n    let queue_data = &bytes[..QUEUE_DATA_SIZE];\n    let mem_bytes = &bytes[QUEUE_DATA_SIZE..];\n    let shm = memfd_create(&ffi::CString::new(\"fuzz\").unwrap(), 0).unwrap();\n    let disk_file: File = unsafe { File::from_raw_fd(shm) };\n    let qcow_disk = Box::new(RawFileDiskSync::new(disk_file)) as Box<dyn DiskFile>;\n    let mut block = Block::new(\n        \"tmp\".to_owned(),\n        qcow_disk,\n        PathBuf::from(\"\"),\n        false,\n        false,\n        2,\n        256,\n        None,\n        SeccompAction::Allow,\n        None,\n        EventFd::new(EFD_NONBLOCK).unwrap(),\n        None,\n    )\n    .unwrap();\n    let q = setup_virt_queue(queue_data.try_into().unwrap());\n    let mem = GuestMemoryMmap::from_ranges(&[(GuestAddress(0), MEM_SIZE)]).unwrap();\n    if mem.write_slice(mem_bytes, GuestAddress(0 as u64)).is_err() {\n        return;\n    }\n    let guest_memory = GuestMemoryAtomic::new(mem);\n    let evt = EventFd::new(0).unwrap();\n    let queue_evt = unsafe { EventFd::from_raw_fd(libc::dup(evt.as_raw_fd())) };\n    queue_evt.write(1).unwrap();\n    block\n        .activate(\n            guest_memory,\n            Arc::new(NoopVirtioInterrupt {}),\n            vec![(0, q, evt)],\n        )\n        .ok();\n    block.wait_for_epoll_threads();\n}"}
{"test_id": "BurntSushi-memchr/BurntSushi-memchr-f3fde7a/tests-gen/memchr3.inputs.rs::test_40", "code": "fn count(self) -> usize {\n        self.it.count(|s, e| {\n            // SAFETY: We rely on our generic iterator to return valid start\n            // and end pointers.\n            unsafe { count_raw(self.needle1, s, e) }\n        })\n    }", "test": "fn test_40() {\n    let data = [118, 10];\n    if data.len() < 3 {\n        return;\n    }\n    memchr3_iter(data[0], data[1], data[2], &data[3..]).count();\n}"}
{"test_id": "image-rs-image-png/image-rs-image-png-e113d76/tests-gen/buf_independent.inputs.rs::test_48", "code": "fn new (inner : R , cap : usize) -> Self { SmalBuf { inner , cap } }", "test": "fn test_48() {\n    let data = [201, 1, 46, 46];\n    let limits = png::Limits { bytes: 1 << 16 };\n    let reference = png::Decoder::new_with_limits(data, limits);\n    let smal = png::Decoder::new_with_limits(SmalBuf::new(data, 1), limits);\n    let _ = png_compare(reference, smal);\n}"}
{"test_id": "BurntSushi-memchr/BurntSushi-memchr-f3fde7a/tests-gen/memrmem.inputs.rs::test_12", "code": "pub fn count(&self, haystack: &[u8]) -> usize {\n        // SAFETY: All of our pointers are derived directly from a borrowed\n        // slice, which is guaranteed to be valid.\n        unsafe {\n            let start = haystack.as_ptr();\n            let end = start.add(haystack.len());\n            self.count_raw(start, end)\n        }\n    }", "test": "fn test_12() {\n    let data = [10];\n    if data.len() < 2 {\n        return;\n    }\n    let split = std::cmp::max(data[0] as usize, 1) % data.len() as usize;\n    let (needle, haystack) = (&data[..split], &data[split..]);\n    memmem::rfind_iter(haystack, needle).count();\n}"}
{"test_id": "seanmonstar-httparse/seanmonstar-httparse-638848e/tests-gen/parse_request.inputs.rs::test_40", "code": "pub fn parse(&mut self, buf: &'b [u8]) -> Result<usize> {\n        self.parse_with_config(buf, &Default::default())\n    }", "test": "fn test_40() {\n    let data = [8];\n    let mut headers = [httparse::EMPTY_HEADER; 16];\n    let mut req = httparse::Request::new(&mut headers);\n    req.parse(data);\n}"}
{"test_id": "image-rs-image/image-rs-image-e5580ec/tests-gen/fuzzer_script_tga.inputs.rs::test_56", "code": "fn decode(encoded: &[u8]) -> Vec<u8> {\n        let decoder = JpegDecoder::new(Cursor::new(encoded)).expect(\"Could not decode image\");\n\n        let mut decoded = vec![0; decoder.total_bytes() as usize];\n        decoder\n            .read_image(&mut decoded)\n            .expect(\"Could not decode image\");\n        decoded\n    }", "test": "fn test_56() {\n    let data = [10, 3, 10];\n    let _ = decode(data);\n}"}
{"test_id": "image-rs-image/image-rs-image-e5580ec/tests-gen/fuzzer_script_exr.inputs.rs::test_52", "code": "fn roundtrip (bytes : & [u8]) -> ImageResult < () > { # [doc = \" Read the file from the specified path into an `Rgba32FImage`.\"] fn read_as_rgba_byte_image (read : impl Read + Seek) -> ImageResult < (u32 , u32 , Vec < u8 >) > { let mut decoder = OpenExrDecoder :: with_alpha_preference (read , Some (true)) ? ; match usize :: try_from (decoder . total_bytes ()) { Ok (decoded_size) if decoded_size <= 256 * 1024 * 1024 => { decoder . set_limits (Limits :: default ()) ? ; let (width , height) = decoder . dimensions () ; let mut buffer = vec ! [0 ; decoded_size] ; decoder . read_image (buffer . as_mut_slice ()) ? ; Ok ((width , height , buffer)) } _ => Err (image :: ImageError :: Limits (image :: error :: LimitError :: from_kind (image :: error :: LimitErrorKind :: InsufficientMemory ,) ,)) , } } # [doc = \" Write an `Rgba32FImage`.\"] # [doc = \" Assumes the writer is buffered. In most cases,\"] # [doc = \" you should wrap your writer in a `BufWriter` for best performance.\"] fn write_rgba_image (write : impl Write + Seek , (width , height , data) : & (u32 , u32 , Vec < u8 >) ,) -> ImageResult < () > { OpenExrEncoder :: new (write) . write_image (data . as_slice () , * width , * height , ColorType :: Rgba32F) } let decoded_image = read_as_rgba_byte_image (Cursor :: new (bytes)) ? ; let mut bytes = Vec :: with_capacity (bytes . len () + 20) ; write_rgba_image (Cursor :: new (& mut bytes) , & decoded_image) ? ; let redecoded_image = read_as_rgba_byte_image (Cursor :: new (bytes)) ? ; assert_eq ! (decoded_image , redecoded_image , \"image was valid but was not reproducible\") ; Ok (()) }", "test": "fn test_52() {\n    let data = [26, 186];\n    let _img = roundtrip(data);\n}"}
{"test_id": "gimli-rs-gimli/gimli-rs-gimli-3947879/tests-gen/debug_aranges.inputs.rs::test_96", "code": "pub fn next(&mut self) -> Result<Option<UnitHeader<R>>> {\n        if self.input.is_empty() {\n            Ok(None)\n        } else {\n            let len = self.input.len();\n            match parse_unit_header(&mut self.input, self.offset.into()) {\n                Ok(header) => {\n                    self.offset.0 += len - self.input.len();\n                    Ok(Some(header))\n                }\n                Err(e) => {\n                    self.input.empty();\n                    Err(e)\n                }\n            }\n        }\n    }", "test": "fn test_96() {\n    let debug_aranges = [74, 44];\n    let debug_aranges = DebugAranges::new(&debug_aranges, LittleEndian);\n    let mut headers = debug_aranges.headers();\n    while let Ok(Some(header)) = headers.next() {\n        let mut entries = header.entries();\n        while let Ok(Some(_entry)) = entries.next() {\n            continue;\n        }\n    }\n}"}
{"test_id": "gimli-rs-gimli/gimli-rs-gimli-3947879/tests-gen/debug_aranges.inputs.rs::test_94", "code": "pub fn next(&mut self) -> Result<Option<UnitHeader<R>>> {\n        if self.input.is_empty() {\n            Ok(None)\n        } else {\n            let len = self.input.len();\n            match parse_unit_header(&mut self.input, self.offset.into()) {\n                Ok(header) => {\n                    self.offset.0 += len - self.input.len();\n                    Ok(Some(header))\n                }\n                Err(e) => {\n                    self.input.empty();\n                    Err(e)\n                }\n            }\n        }\n    }", "test": "fn test_94() {\n    let debug_aranges = [10, 10];\n    let debug_aranges = DebugAranges::new(&debug_aranges, LittleEndian);\n    let mut headers = debug_aranges.headers();\n    while let Ok(Some(header)) = headers.next() {\n        let mut entries = header.entries();\n        while let Ok(Some(_entry)) = entries.next() {\n            continue;\n        }\n    }\n}"}
{"test_id": "cloud-hypervisor-cloud-hypervisor/cloud-hypervisor-cloud-hypervisor-db3a5f3/tests-gen/mem.inputs.rs::test_96", "code": "pub fn wait_for_epoll_threads(&mut self) {\n        self.common.wait_for_epoll_threads();\n    }", "test": "fn test_96() {\n    let bytes = [2, 54, 10];\n    if bytes.len() < VIRTIO_MEM_DATA_SIZE + QUEUE_DATA_SIZE + QUEUE_BYTES_SIZE\n        || bytes.len() > (VIRTIO_MEM_DATA_SIZE + QUEUE_DATA_SIZE + QUEUE_BYTES_SIZE + MEM_SIZE)\n    {\n        return;\n    }\n    let virtio_mem_data = &bytes[..VIRTIO_MEM_DATA_SIZE];\n    let queue_data = &bytes[VIRTIO_MEM_DATA_SIZE..VIRTIO_MEM_DATA_SIZE + QUEUE_DATA_SIZE];\n    let queue_bytes = &bytes[VIRTIO_MEM_DATA_SIZE + QUEUE_DATA_SIZE\n        ..VIRTIO_MEM_DATA_SIZE + QUEUE_DATA_SIZE + QUEUE_BYTES_SIZE];\n    let mem_bytes = &bytes[VIRTIO_MEM_DATA_SIZE + QUEUE_DATA_SIZE + QUEUE_BYTES_SIZE..];\n    let (mut virtio_mem, virtio_mem_region) =\n        create_dummy_virtio_mem(virtio_mem_data.try_into().unwrap());\n    let q = setup_virt_queue(queue_data.try_into().unwrap());\n    let mem =\n        GuestMemoryMmap::from_ranges(&[(GuestAddress(DESC_TABLE_ADDR), QUEUE_BYTES_SIZE)]).unwrap();\n    if mem\n        .write_slice(queue_bytes, GuestAddress(DESC_TABLE_ADDR))\n        .is_err()\n    {\n        return;\n    }\n    let mem = mem.insert_region(virtio_mem_region).unwrap();\n    if mem\n        .write_slice(mem_bytes, GuestAddress(VIRTIO_MEM_REGION_ADDRESS))\n        .is_err()\n    {\n        return;\n    }\n    let guest_memory = GuestMemoryAtomic::new(mem);\n    let evt = EventFd::new(0).unwrap();\n    let queue_evt = unsafe { EventFd::from_raw_fd(libc::dup(evt.as_raw_fd())) };\n    queue_evt.write(1).unwrap();\n    virtio_mem\n        .activate(\n            guest_memory,\n            Arc::new(NoopVirtioInterrupt {}),\n            vec![(0, q, evt)],\n        )\n        .ok();\n    virtio_mem.wait_for_epoll_threads();\n}"}
{"test_id": "image-rs-image/image-rs-image-e5580ec/tests-gen/fuzzer_script_exr.inputs.rs::test_79", "code": "fn roundtrip (bytes : & [u8]) -> ImageResult < () > { # [doc = \" Read the file from the specified path into an `Rgba32FImage`.\"] fn read_as_rgba_byte_image (read : impl Read + Seek) -> ImageResult < (u32 , u32 , Vec < u8 >) > { let mut decoder = OpenExrDecoder :: with_alpha_preference (read , Some (true)) ? ; match usize :: try_from (decoder . total_bytes ()) { Ok (decoded_size) if decoded_size <= 256 * 1024 * 1024 => { decoder . set_limits (Limits :: default ()) ? ; let (width , height) = decoder . dimensions () ; let mut buffer = vec ! [0 ; decoded_size] ; decoder . read_image (buffer . as_mut_slice ()) ? ; Ok ((width , height , buffer)) } _ => Err (image :: ImageError :: Limits (image :: error :: LimitError :: from_kind (image :: error :: LimitErrorKind :: InsufficientMemory ,) ,)) , } } # [doc = \" Write an `Rgba32FImage`.\"] # [doc = \" Assumes the writer is buffered. In most cases,\"] # [doc = \" you should wrap your writer in a `BufWriter` for best performance.\"] fn write_rgba_image (write : impl Write + Seek , (width , height , data) : & (u32 , u32 , Vec < u8 >) ,) -> ImageResult < () > { OpenExrEncoder :: new (write) . write_image (data . as_slice () , * width , * height , ColorType :: Rgba32F) } let decoded_image = read_as_rgba_byte_image (Cursor :: new (bytes)) ? ; let mut bytes = Vec :: with_capacity (bytes . len () + 20) ; write_rgba_image (Cursor :: new (& mut bytes) , & decoded_image) ? ; let redecoded_image = read_as_rgba_byte_image (Cursor :: new (bytes)) ? ; assert_eq ! (decoded_image , redecoded_image , \"image was valid but was not reproducible\") ; Ok (()) }", "test": "fn test_79() {\n    let data = [1, 39, 10];\n    let _img = roundtrip(data);\n}"}
{"test_id": "XAMPPRocky-tokei/XAMPPRocky-tokei-92ddc2e/tests-gen/parse_from_slice_panic.inputs.rs::test_83", "code": "pub fn parse_from_slice (input : FuzzInput , check_total : bool) { let config = & Config { treat_doc_strings_as_comments : Some (input . treat_doc_strings_as_comments) , columns : None , hidden : None , no_ignore : None , no_ignore_parent : None , no_ignore_dot : None , no_ignore_vcs : None , sort : None , types : None , for_each_fn : None , } ; let stats = input . lang . parse_from_slice (input . data , config) ; if check_total { if let Ok (s) = str :: from_utf8 (input . data) { assert ! (stats . lines () <= s . lines () . count () , \"{} got more total lines ({}) than str::lines ({}). Code: {}, Comments: {}, Blanks: {}. treat_doc_strings_as_comments: {}. File contents (as UTF-8):\\n{}\" , input . lang . name () , stats . lines () , s . lines () . count () , stats . code , stats . comments , input . treat_doc_strings_as_comments , stats . blanks , s) } ; } }", "test": "fn test_83() {\n    let data = FuzzInput {\n        lang: Zsh,\n        treat_doc_strings_as_comments: false,\n        data: [30, 154, 30, 30, 30, 255, 255, 255, 46],\n    };\n    parse_from_slice(data, false);\n}"}
{"test_id": "cloud-hypervisor-cloud-hypervisor/cloud-hypervisor-cloud-hypervisor-db3a5f3/tests-gen/console.inputs.rs::test_64", "code": "pub fn wait_for_epoll_threads(&mut self) {\n        self.common.wait_for_epoll_threads();\n    }", "test": "fn test_64() {\n    let bytes = [15];\n    if bytes.len() < (QUEUE_DATA_SIZE + QUEUE_BYTES_SIZE) * QUEUE_NUM + CONSOLE_INPUT_SIZE\n        || bytes.len()\n            > (QUEUE_DATA_SIZE + QUEUE_BYTES_SIZE) * QUEUE_NUM + CONSOLE_INPUT_SIZE + MEM_SIZE\n    {\n        return;\n    }\n    let (pipe_rx, mut pipe_tx) = create_pipe().unwrap();\n    let output = unsafe {\n        File::from_raw_fd(\n            memfd_create(&std::ffi::CString::new(\"fuzz_console_output\").unwrap()).unwrap(),\n        )\n    };\n    let endpoint = virtio_devices::Endpoint::FilePair(output, pipe_rx);\n    let (mut console, _) = virtio_devices::Console::new(\n        \"fuzzer_console\".to_owned(),\n        endpoint,\n        None,\n        false,\n        SeccompAction::Allow,\n        EventFd::new(EFD_NONBLOCK).unwrap(),\n        None,\n    )\n    .unwrap();\n    let console_input_bytes = &bytes[..CONSOLE_INPUT_SIZE];\n    let queue_data = &bytes[CONSOLE_INPUT_SIZE..CONSOLE_INPUT_SIZE + QUEUE_DATA_SIZE * QUEUE_NUM];\n    let queue_bytes = &bytes[CONSOLE_INPUT_SIZE + QUEUE_DATA_SIZE * QUEUE_NUM\n        ..CONSOLE_INPUT_SIZE + (QUEUE_DATA_SIZE + QUEUE_BYTES_SIZE) * QUEUE_NUM];\n    let mem_bytes = &bytes[CONSOLE_INPUT_SIZE + (QUEUE_DATA_SIZE + QUEUE_BYTES_SIZE) * QUEUE_NUM..];\n    let mut queues = setup_virt_queues(\n        &[\n            &queue_data[..QUEUE_DATA_SIZE].try_into().unwrap(),\n            &queue_data[QUEUE_DATA_SIZE..QUEUE_DATA_SIZE * 2]\n                .try_into()\n                .unwrap(),\n        ],\n        BASE_VIRT_QUEUE_ADDR,\n    );\n    let mem = GuestMemoryMmap::from_ranges(&[\n        (GuestAddress(0), MEM_SIZE),\n        (GuestAddress(BASE_VIRT_QUEUE_ADDR), queue_bytes.len()),\n    ])\n    .unwrap();\n    if mem\n        .write_slice(queue_bytes, GuestAddress(BASE_VIRT_QUEUE_ADDR))\n        .is_err()\n    {\n        return;\n    }\n    if mem.write_slice(mem_bytes, GuestAddress(0 as u64)).is_err() {\n        return;\n    }\n    let guest_memory = GuestMemoryAtomic::new(mem);\n    let input_queue = queues.remove(0);\n    let input_evt = EventFd::new(0).unwrap();\n    let input_queue_evt = unsafe { EventFd::from_raw_fd(libc::dup(input_evt.as_raw_fd())) };\n    let output_queue = queues.remove(0);\n    let output_evt = EventFd::new(0).unwrap();\n    let output_queue_evt = unsafe { EventFd::from_raw_fd(libc::dup(output_evt.as_raw_fd())) };\n    input_queue_evt.write(1).unwrap();\n    output_queue_evt.write(1).unwrap();\n    pipe_tx.write_all(console_input_bytes).unwrap();\n    console\n        .activate(\n            guest_memory,\n            Arc::new(NoopVirtioInterrupt {}),\n            vec![(0, input_queue, input_evt), (1, output_queue, output_evt)],\n        )\n        .unwrap();\n    console.wait_for_epoll_threads();\n}"}
{"test_id": "rust-bio-rust-bio/rust-bio-rust-bio-319a0d8/tests-gen/banded_aligner.inputs.rs::test_58", "code": "fn validate_alignment_score(al: &Alignment, x: TextSlice, y: TextSlice, scoring: &Scoring<MatchParams>) -> bool {\n    use AlignmentOperation::*;\n    let path = al.path();\n    let mut score = 0;\n    if al.mode==AlignmentMode::Custom {\n        if al.xstart > 0 {\n            score += scoring.xclip_prefix;\n        }\n        if al.ystart > 0 {\n            score += scoring.yclip_prefix;\n        }\n        if al.xend < al.xlen {\n            score += scoring.xclip_suffix;\n        }\n        if al.yend < al.ylen {\n            score += scoring.yclip_suffix;\n        }\n    }\n    let mut last_op = None;\n    for (i, j, op) in path {\n        score += match op {\n            Match | Subst => scoring.match_fn.score(x[i-1], y[j-1]),\n            Del => if last_op==Some(Del) { scoring.gap_extend } else { scoring.gap_open + scoring.gap_extend },\n            Ins => if last_op==Some(Ins) { scoring.gap_extend } else { scoring.gap_open + scoring.gap_extend },\n            _ => 0,\n        };\n        last_op = Some(op);\n    }\n    al.score==score\n}", "test": "fn test_58() {\n    let data = [0, 254, 0, 10];\n    if data.len() < 50 || data.len() > 300 {\n        return;\n    }\n    let (split_byte, data) = data.split_first().unwrap();\n    let (kmer_byte, data) = data.split_first().unwrap();\n    let (window_byte, data) = data.split_first().unwrap();\n    let (match_score_byte, data) = data.split_first().unwrap();\n    let (mismatch_score_byte, data) = data.split_first().unwrap();\n    let (gap_open_byte, data) = data.split_first().unwrap();\n    let (gap_extend_byte, data) = data.split_first().unwrap();\n    let (xclip_prefix_byte, data) = data.split_first().unwrap();\n    let (xclip_suffix_byte, data) = data.split_first().unwrap();\n    let (yclip_prefix_byte, data) = data.split_first().unwrap();\n    let (yclip_suffix_byte, data) = data.split_first().unwrap();\n    let alphabets = b\"ACGT\";\n    let v: Vec<_> = data\n        .iter()\n        .map(|i| alphabets[(*i as usize) % alphabets.len()])\n        .collect();\n    let kmer_len: usize = 5 + (*kmer_byte as usize) % 10;\n    let window_size: usize = 5 + (*window_byte as usize) % 10;\n    let split_pos: usize = min(data.len() - 1, max(*split_byte as usize, 1));\n    let match_score = 1 + (*match_score_byte as i32) % 5;\n    let mismatch_score = -((*mismatch_score_byte as i32) % 10);\n    let gap_open = -((*gap_open_byte as i32) % 20);\n    let gap_extend = -((*gap_extend_byte as i32) % 10);\n    let (x, y) = v.split_at(split_pos);\n    println!(\n        \"x: {}, y: {}, k: {}, w: {}, scoring ({}, {}, {}, {})\",\n        String::from_utf8(x.to_vec()).unwrap(),\n        String::from_utf8(y.to_vec()).unwrap(),\n        kmer_len,\n        window_size,\n        gap_open,\n        gap_extend,\n        match_score,\n        mismatch_score\n    );\n    let base_score = Scoring::from_scores(gap_open, gap_extend, match_score, mismatch_score);\n    {\n        println!(\n            \"Clip scores ({}, {}, {}, {})\",\n            xclip_prefix_byte, xclip_suffix_byte, yclip_prefix_byte, yclip_suffix_byte\n        );\n        let scoring = Scoring {\n            xclip_prefix: -(*xclip_prefix_byte as i32),\n            xclip_suffix: -(*xclip_suffix_byte as i32),\n            yclip_prefix: -(*yclip_prefix_byte as i32),\n            yclip_suffix: -(*yclip_suffix_byte as i32),\n            ..base_score.clone()\n        };\n        let mut b_aligner = banded::Aligner::with_scoring(scoring.clone(), kmer_len, window_size);\n        let b_alignment = b_aligner.custom(x, y);\n        assert!(validate_alignment_score(&b_alignment, x, y, &scoring));\n        let mut f_aligner = pairwise::Aligner::with_scoring(scoring.clone());\n        let f_alignment = f_aligner.custom(x, y);\n        assert!(validate_alignment_score(&f_alignment, x, y, &scoring));\n        let band_all_alignment = b_aligner.custom_with_matches(x, y, &Vec::new());\n        assert_eq!(band_all_alignment.score, f_alignment.score);\n    }\n    {\n        let scoring = Scoring {\n            xclip_prefix: 0,\n            xclip_suffix: 0,\n            yclip_suffix: 0,\n            ..base_score.clone()\n        };\n        let mut b_aligner = banded::Aligner::with_scoring(scoring.clone(), kmer_len, window_size);\n        let b_alignment = b_aligner.custom(x, y);\n        assert_eq!(b_alignment.ystart, 0);\n        assert!(validate_alignment_score(&b_alignment, x, y, &scoring));\n        let mut f_aligner = pairwise::Aligner::with_scoring(scoring.clone());\n        let f_alignment = f_aligner.custom(x, y);\n        assert_eq!(f_alignment.ystart, 0);\n        assert!(validate_alignment_score(&f_alignment, x, y, &scoring));\n        let band_all_alignment = b_aligner.custom_with_matches(x, y, &Vec::new());\n        assert_eq!(band_all_alignment.score, f_alignment.score);\n    }\n    {\n        let scoring = Scoring {\n            xclip_prefix: 0,\n            xclip_suffix: 0,\n            yclip_prefix: 0,\n            ..base_score.clone()\n        };\n        let mut b_aligner = banded::Aligner::with_scoring(scoring.clone(), kmer_len, window_size);\n        let b_alignment = b_aligner.custom(x, y);\n        assert_eq!(b_alignment.yend, b_alignment.ylen);\n        assert!(validate_alignment_score(&b_alignment, x, y, &scoring));\n        let mut f_aligner = pairwise::Aligner::with_scoring(scoring.clone());\n        let f_alignment = f_aligner.custom(x, y);\n        assert_eq!(f_alignment.yend, f_alignment.ylen);\n        assert!(validate_alignment_score(&f_alignment, x, y, &scoring));\n        let band_all_alignment = b_aligner.custom_with_matches(x, y, &Vec::new());\n        assert_eq!(band_all_alignment.score, f_alignment.score);\n    }\n    {\n        let scoring = Scoring {\n            xclip_suffix: 0,\n            yclip_prefix: 0,\n            yclip_suffix: 0,\n            ..base_score.clone()\n        };\n        let mut b_aligner = banded::Aligner::with_scoring(scoring.clone(), kmer_len, window_size);\n        let b_alignment = b_aligner.custom(x, y);\n        assert_eq!(b_alignment.xstart, 0);\n        assert!(validate_alignment_score(&b_alignment, x, y, &scoring));\n        let mut f_aligner = pairwise::Aligner::with_scoring(scoring.clone());\n        let f_alignment = f_aligner.custom(x, y);\n        assert_eq!(f_alignment.xstart, 0);\n        assert!(validate_alignment_score(&f_alignment, x, y, &scoring));\n        let band_all_alignment = b_aligner.custom_with_matches(x, y, &Vec::new());\n        assert_eq!(band_all_alignment.score, f_alignment.score);\n    }\n    {\n        let scoring = Scoring {\n            xclip_prefix: 0,\n            yclip_prefix: 0,\n            yclip_suffix: 0,\n            ..base_score.clone()\n        };\n        let mut b_aligner = banded::Aligner::with_scoring(scoring.clone(), kmer_len, window_size);\n        let b_alignment = b_aligner.custom(x, y);\n        assert_eq!(b_alignment.xend, b_alignment.xlen);\n        assert!(validate_alignment_score(&b_alignment, x, y, &scoring));\n        let mut f_aligner = pairwise::Aligner::with_scoring(scoring.clone());\n        let f_alignment = f_aligner.custom(x, y);\n        assert_eq!(f_alignment.xend, f_alignment.xlen);\n        assert!(validate_alignment_score(&f_alignment, x, y, &scoring));\n        let band_all_alignment = b_aligner.custom_with_matches(x, y, &Vec::new());\n        assert_eq!(band_all_alignment.score, f_alignment.score);\n    }\n    {\n        let mut aligner = banded::Aligner::with_scoring(base_score.clone(), kmer_len, window_size);\n        let alignment = aligner.local(x, y);\n        assert!(alignment.score >= 0);\n        assert!(validate_alignment_score(&alignment, x, y, &base_score));\n        let alignment = aligner.semiglobal(x, y);\n        assert_eq!(alignment.xstart, 0);\n        assert_eq!(alignment.xend, alignment.xlen);\n        assert!(validate_alignment_score(&alignment, x, y, &base_score));\n        let alignment = aligner.global(x, y);\n        assert_eq!(alignment.xstart, 0);\n        assert_eq!(alignment.xend, alignment.xlen);\n        assert_eq!(alignment.ystart, 0);\n        assert_eq!(alignment.yend, alignment.ylen);\n        assert!(validate_alignment_score(&alignment, x, y, &base_score));\n    }\n    {\n        let mut aligner = pairwise::Aligner::with_scoring(base_score.clone());\n        let alignment = aligner.local(x, y);\n        assert!(alignment.score >= 0);\n        assert!(validate_alignment_score(&alignment, x, y, &base_score));\n        let alignment = aligner.semiglobal(x, y);\n        assert_eq!(alignment.xstart, 0);\n        assert_eq!(alignment.xend, alignment.xlen);\n        assert!(validate_alignment_score(&alignment, x, y, &base_score));\n        let alignment = aligner.global(x, y);\n        assert_eq!(alignment.xstart, 0);\n        assert_eq!(alignment.xend, alignment.xlen);\n        assert_eq!(alignment.ystart, 0);\n        assert_eq!(alignment.yend, alignment.ylen);\n        assert!(validate_alignment_score(&alignment, x, y, &base_score));\n    }\n}"}
{"test_id": "marshallpierce-rust-base64/marshallpierce-rust-base64-4ef33cc/tests-gen/decode_random.inputs.rs::test_52", "code": "fn decode<T: AsRef<[u8]>>(&self, input: T) -> Result<Vec<u8>, DecodeError> {\n        fn inner<E>(engine: &E, input_bytes: &[u8]) -> Result<Vec<u8>, DecodeError>\n        where\n            E: Engine + ?Sized,\n        {\n            let estimate = engine.internal_decoded_len_estimate(input_bytes.len());\n            let mut buffer = vec![0; estimate.decoded_len_estimate()];\n\n            let bytes_written = engine\n                .internal_decode(input_bytes, &mut buffer, estimate)?\n                .decoded_len;\n\n            buffer.truncate(bytes_written);\n\n            Ok(buffer)\n        }\n\n        inner(self, input.as_ref())\n    }", "test": "fn test_52() {\n    let data = [208, 187, 223];\n    let engine = utils::random_engine(data);\n    let _ = engine.decode(data);\n}"}
{"test_id": "cloud-hypervisor-cloud-hypervisor/cloud-hypervisor-cloud-hypervisor-db3a5f3/tests-gen/watchdog.inputs.rs::test_63", "code": "pub fn wait_for_epoll_threads(&mut self) {\n        self.common.wait_for_epoll_threads();\n    }", "test": "fn test_63() {\n    let bytes = [39, 0, 0, 0];\n    if bytes.len() < QUEUE_DATA_SIZE || bytes.len() > (QUEUE_DATA_SIZE + MEM_SIZE) {\n        return;\n    }\n    let mut watchdog = virtio_devices::Watchdog::new(\n        \"fuzzer_watchdog\".to_owned(),\n        EventFd::new(EFD_NONBLOCK).unwrap(),\n        SeccompAction::Allow,\n        EventFd::new(EFD_NONBLOCK).unwrap(),\n        None,\n    )\n    .unwrap();\n    let queue_data = &bytes[..QUEUE_DATA_SIZE];\n    let mem_bytes = &bytes[QUEUE_DATA_SIZE..];\n    let q = setup_virt_queue(queue_data.try_into().unwrap());\n    let mem = GuestMemoryMmap::from_ranges(&[(GuestAddress(0), MEM_SIZE)]).unwrap();\n    if mem.write_slice(mem_bytes, GuestAddress(0 as u64)).is_err() {\n        return;\n    }\n    let guest_memory = GuestMemoryAtomic::new(mem);\n    let evt = EventFd::new(0).unwrap();\n    let queue_evt = unsafe { EventFd::from_raw_fd(libc::dup(evt.as_raw_fd())) };\n    queue_evt.write(1).unwrap();\n    watchdog\n        .activate(\n            guest_memory,\n            Arc::new(NoopVirtioInterrupt {}),\n            vec![(0, q, evt)],\n        )\n        .ok();\n    watchdog.wait_for_epoll_threads();\n}"}
{"test_id": "gimli-rs-gimli/gimli-rs-gimli-3947879/tests-gen/debug_info.inputs.rs::test_76", "code": "pub fn next(&mut self) -> Result<Option<RawLocListEntry<R>>> {\n        if self.input.is_empty() {\n            return Ok(None);\n        }\n\n        match RawLocListEntry::parse(&mut self.input, self.encoding, self.format) {\n            Ok(entry) => {\n                if entry.is_none() {\n                    self.input.empty();\n                }\n                Ok(entry)\n            }\n            Err(e) => {\n                self.input.empty();\n                Err(e)\n            }\n        }\n    }", "test": "fn test_76() {\n    let sections = (\n        [10],\n        [\n            26, 255, 255, 255, 255, 10, 160, 160, 255, 255, 255, 255, 255, 26,\n        ],\n    );\n    let (debug_abbrev, debug_info) = sections;\n    let debug_abbrev = DebugAbbrev::new(&debug_abbrev, LittleEndian);\n    let debug_info = DebugInfo::new(&debug_info, LittleEndian);\n    let mut units = debug_info.units();\n    while let Ok(Some(unit)) = units.next() {\n        if let Ok(abbrevs) = unit.abbreviations(&debug_abbrev) {\n            let mut cursor = unit.entries(&abbrevs);\n            while let Ok(Some((_delta, entry))) = cursor.next_dfs() {\n                let mut attrs = entry.attrs();\n                while let Ok(Some(_attr)) = attrs.next() {\n                    continue;\n                }\n            }\n        }\n    }\n}"}
{"test_id": "dtolnay-syn/dtolnay-syn-b1a038c/tests-gen/create_token_buffer.inputs.rs::test_98", "code": "fn parse_str(self, s: &str) -> Result<Self::Output> {\n        self.parse2(proc_macro2::TokenStream::from_str(s)?)\n    }", "test": "fn test_98() {\n    let data = [1];\n    if data.len() < 300 {\n        if let Ok(string) = str::from_utf8(data) {\n            let _ = immediate_fail.parse_str(string);\n        }\n    }\n}"}
{"test_id": "image-rs-image-gif/image-rs-image-gif-80fd8c0/tests-gen/decode.inputs.rs::test_32", "code": "fn try_decode (data : & [u8]) -> Result < () , gif :: DecodingError > { let mut reader = gif :: Decoder :: new (data) ? ; while let Some (_) = reader . read_next_frame () ? { } Ok (()) }", "test": "fn test_32() {\n    let data = [2, 48, 2, 48];\n    let _ = try_decode(data);\n}"}
{"test_id": "rust-bio-rust-bio/rust-bio-rust-bio-319a0d8/tests-gen/myers_matching.inputs.rs::test_5", "code": "fn validate_alignment (aln : & Alignment , x : & [u8] , y : & [u8]) { let y = & y [aln . ystart .. aln . yend] ; let mut ix = 0 ; let mut iy = 0 ; let mut calc_dist = 0 ; for op in & aln . operations { match * op { Match => { assert ! (x [ix] == y [iy] , \"Match operation, but characters are not equal\") ; ix += 1 ; iy += 1 ; } Subst => { assert ! (x [ix] != y [iy] , \"Subst operation, but characters are equal\") ; calc_dist += 1 ; ix += 1 ; iy += 1 ; } Del => { calc_dist += 1 ; iy += 1 ; } Ins => { calc_dist += 1 ; ix += 1 ; } _ => unreachable ! () } } assert_eq ! (calc_dist , aln . score as usize) ; }", "test": "fn test_5() {\n    let data = [1, 0, 0, 10];\n    if data.len() < 3 {\n        return;\n    }\n    let (max_dist, data) = data.split_first().unwrap();\n    let (pattern_len, data) = data.split_first().unwrap();\n    let max_dist = min(64, *max_dist);\n    let pattern_len = max(1, min(64, min(data.len(), *pattern_len as usize)));\n    if data.iter().any(|&b| b < 65 || b > 122 || b > 90 && b < 97) {\n        return;\n    }\n    let (pattern, text) = data.split_at(pattern_len);\n    let max_dist = max_dist as u8;\n    let _ = MyersBuilder::new().build_64(pattern);\n    let _ = MyersBuilder::new().build_long_64(pattern);\n    let mut myers = Myers::<u64>::new(pattern);\n    let mut myers_long = long::Myers::<u8>::new(pattern);\n    let end_dist: Vec<_> = myers.find_all_end(text, max_dist).collect();\n    let end_dist_long: Vec<_> = myers_long\n        .find_all_end(text, max_dist as usize)\n        .map(|(end, dist)| (end, dist as u8))\n        .collect();\n    assert_eq!(end_dist, end_dist_long);\n    let mut aln = Alignment::default();\n    let mut aln_long = Alignment::default();\n    {\n        let mut matches = myers.find_all(text, max_dist);\n        let mut matches_long = myers_long.find_all(text, max_dist as usize);\n        matches.alignment(&mut aln);\n        matches_long.alignment(&mut aln_long);\n        let mut end_dist_iter = end_dist.iter();\n        while matches.next_alignment(&mut aln) {\n            assert!(matches_long.next_alignment(&mut aln_long));\n            assert_eq!(aln, aln_long);\n            validate_alignment(&aln, pattern, text);\n            assert!(aln.score as u8 <= max_dist);\n            let (end, dist) = end_dist_iter.next().unwrap();\n            assert_eq!(*end + 1, aln.yend);\n            assert_eq!(*dist, aln.score as u8);\n        }\n        assert!(end_dist_iter.next().is_none());\n        assert!(!matches_long.next_alignment(&mut aln_long));\n    }\n    {\n        let mut matches = myers.find_all_lazy(text, max_dist);\n        let mut matches_long = myers_long.find_all_lazy(text, max_dist as usize);\n        let mut end_dist_iter = end_dist.iter();\n        while let Some((end, dist)) = matches.next() {\n            let (end_long, dist_long) = matches_long.next().unwrap();\n            assert_eq!((end, dist), (end_long, dist_long as u8));\n            assert!(matches.alignment_at(end, &mut aln));\n            assert!(matches_long.alignment_at(end, &mut aln_long));\n            assert_eq!(aln, aln_long);\n            validate_alignment(&aln, pattern, text);\n            assert_eq!(dist, aln.score as u8);\n            assert!(aln.score as u8 <= max_dist);\n            let (end, dist) = end_dist_iter.next().unwrap();\n            assert_eq!(*end + 1, aln.yend);\n            assert_eq!(*dist, aln.score as u8);\n            assert!(!matches.alignment_at(end + 1, &mut aln));\n        }\n        assert!(end_dist_iter.next().is_none());\n    }\n    let mut matches = myers.find_all_lazy(text, u8::max_value());\n    let mut matches_long = myers_long.find_all_lazy(text, u8::max_value() as usize);\n    let mut i = 0;\n    while let Some((end, dist)) = matches.next() {\n        assert_eq!(end, i);\n        let (end_long, dist_long) = matches_long.next().unwrap();\n        assert_eq!((end, dist), (end_long, dist_long as u8));\n        assert!(matches.alignment_at(end, &mut aln));\n        assert!(matches_long.alignment_at(end, &mut aln_long));\n        assert_eq!(aln, aln_long);\n        validate_alignment(&aln, pattern, text);\n        assert_eq!(dist, aln.score as u8);\n        assert!(aln.score as u8 <= u8::max_value());\n        assert!(!matches.alignment_at(end + 1, &mut aln));\n        assert!(!matches_long.alignment_at(end + 1, &mut aln_long));\n        i += 1;\n    }\n}"}
{"test_id": "cloud-hypervisor-cloud-hypervisor/cloud-hypervisor-cloud-hypervisor-db3a5f3/tests-gen/block.inputs.rs::test_29", "code": "pub fn wait_for_epoll_threads(&mut self) {\n        self.common.wait_for_epoll_threads();\n    }", "test": "fn test_29() {\n    let bytes = [130, 59];\n    if bytes.len() < QUEUE_DATA_SIZE || bytes.len() > (QUEUE_DATA_SIZE + MEM_SIZE) {\n        return;\n    }\n    let queue_data = &bytes[..QUEUE_DATA_SIZE];\n    let mem_bytes = &bytes[QUEUE_DATA_SIZE..];\n    let shm = memfd_create(&ffi::CString::new(\"fuzz\").unwrap(), 0).unwrap();\n    let disk_file: File = unsafe { File::from_raw_fd(shm) };\n    let qcow_disk = Box::new(RawFileDiskSync::new(disk_file)) as Box<dyn DiskFile>;\n    let mut block = Block::new(\n        \"tmp\".to_owned(),\n        qcow_disk,\n        PathBuf::from(\"\"),\n        false,\n        false,\n        2,\n        256,\n        None,\n        SeccompAction::Allow,\n        None,\n        EventFd::new(EFD_NONBLOCK).unwrap(),\n        None,\n    )\n    .unwrap();\n    let q = setup_virt_queue(queue_data.try_into().unwrap());\n    let mem = GuestMemoryMmap::from_ranges(&[(GuestAddress(0), MEM_SIZE)]).unwrap();\n    if mem.write_slice(mem_bytes, GuestAddress(0 as u64)).is_err() {\n        return;\n    }\n    let guest_memory = GuestMemoryAtomic::new(mem);\n    let evt = EventFd::new(0).unwrap();\n    let queue_evt = unsafe { EventFd::from_raw_fd(libc::dup(evt.as_raw_fd())) };\n    queue_evt.write(1).unwrap();\n    block\n        .activate(\n            guest_memory,\n            Arc::new(NoopVirtioInterrupt {}),\n            vec![(0, q, evt)],\n        )\n        .ok();\n    block.wait_for_epoll_threads();\n}"}
{"test_id": "BurntSushi-memchr/BurntSushi-memchr-f3fde7a/tests-gen/memrchr3.inputs.rs::test_96", "code": "fn count(self) -> usize {\n        self.it.count(|s, e| {\n            // SAFETY: We rely on our generic iterator to return valid start\n            // and end pointers.\n            unsafe { count_raw(self.needle1, s, e) }\n        })\n    }", "test": "fn test_96() {\n    let data = [10, 61];\n    if data.len() < 3 {\n        return;\n    }\n    memchr3_iter(data[0], data[1], data[2], &data[3..]).rev().count();\n}"}
{"test_id": "marshallpierce-rust-base64/marshallpierce-rust-base64-4ef33cc/tests-gen/roundtrip_no_pad.inputs.rs::test_11", "code": "fn decode<T: AsRef<[u8]>>(&self, input: T) -> Result<Vec<u8>, DecodeError> {\n        fn inner<E>(engine: &E, input_bytes: &[u8]) -> Result<Vec<u8>, DecodeError>\n        where\n            E: Engine + ?Sized,\n        {\n            let estimate = engine.internal_decoded_len_estimate(input_bytes.len());\n            let mut buffer = vec![0; estimate.decoded_len_estimate()];\n\n            let bytes_written = engine\n                .internal_decode(input_bytes, &mut buffer, estimate)?\n                .decoded_len;\n\n            buffer.truncate(bytes_written);\n\n            Ok(buffer)\n        }\n\n        inner(self, input.as_ref())\n    }", "test": "fn test_11() {\n    let data = [10];\n    let config = general_purpose::GeneralPurposeConfig::new()\n        .with_encode_padding(false)\n        .with_decode_padding_mode(engine::DecodePaddingMode::RequireNone);\n    let engine = general_purpose::GeneralPurpose::new(&base64::alphabet::STANDARD, config);\n    let encoded = engine.encode(data);\n    let decoded = engine.decode(&encoded).unwrap();\n    assert_eq!(data, decoded.as_slice());\n}"}
{"test_id": "rust-bio-rust-bio/rust-bio-rust-bio-319a0d8/tests-gen/banded_aligner.inputs.rs::test_77", "code": "fn validate_alignment_score(al: &Alignment, x: TextSlice, y: TextSlice, scoring: &Scoring<MatchParams>) -> bool {\n    use AlignmentOperation::*;\n    let path = al.path();\n    let mut score = 0;\n    if al.mode==AlignmentMode::Custom {\n        if al.xstart > 0 {\n            score += scoring.xclip_prefix;\n        }\n        if al.ystart > 0 {\n            score += scoring.yclip_prefix;\n        }\n        if al.xend < al.xlen {\n            score += scoring.xclip_suffix;\n        }\n        if al.yend < al.ylen {\n            score += scoring.yclip_suffix;\n        }\n    }\n    let mut last_op = None;\n    for (i, j, op) in path {\n        score += match op {\n            Match | Subst => scoring.match_fn.score(x[i-1], y[j-1]),\n            Del => if last_op==Some(Del) { scoring.gap_extend } else { scoring.gap_open + scoring.gap_extend },\n            Ins => if last_op==Some(Ins) { scoring.gap_extend } else { scoring.gap_open + scoring.gap_extend },\n            _ => 0,\n        };\n        last_op = Some(op);\n    }\n    al.score==score\n}", "test": "fn test_77() {\n    let data = [1, 38, 40, 0];\n    if data.len() < 50 || data.len() > 300 {\n        return;\n    }\n    let (split_byte, data) = data.split_first().unwrap();\n    let (kmer_byte, data) = data.split_first().unwrap();\n    let (window_byte, data) = data.split_first().unwrap();\n    let (match_score_byte, data) = data.split_first().unwrap();\n    let (mismatch_score_byte, data) = data.split_first().unwrap();\n    let (gap_open_byte, data) = data.split_first().unwrap();\n    let (gap_extend_byte, data) = data.split_first().unwrap();\n    let (xclip_prefix_byte, data) = data.split_first().unwrap();\n    let (xclip_suffix_byte, data) = data.split_first().unwrap();\n    let (yclip_prefix_byte, data) = data.split_first().unwrap();\n    let (yclip_suffix_byte, data) = data.split_first().unwrap();\n    let alphabets = b\"ACGT\";\n    let v: Vec<_> = data\n        .iter()\n        .map(|i| alphabets[(*i as usize) % alphabets.len()])\n        .collect();\n    let kmer_len: usize = 5 + (*kmer_byte as usize) % 10;\n    let window_size: usize = 5 + (*window_byte as usize) % 10;\n    let split_pos: usize = min(data.len() - 1, max(*split_byte as usize, 1));\n    let match_score = 1 + (*match_score_byte as i32) % 5;\n    let mismatch_score = -((*mismatch_score_byte as i32) % 10);\n    let gap_open = -((*gap_open_byte as i32) % 20);\n    let gap_extend = -((*gap_extend_byte as i32) % 10);\n    let (x, y) = v.split_at(split_pos);\n    println!(\n        \"x: {}, y: {}, k: {}, w: {}, scoring ({}, {}, {}, {})\",\n        String::from_utf8(x.to_vec()).unwrap(),\n        String::from_utf8(y.to_vec()).unwrap(),\n        kmer_len,\n        window_size,\n        gap_open,\n        gap_extend,\n        match_score,\n        mismatch_score\n    );\n    let base_score = Scoring::from_scores(gap_open, gap_extend, match_score, mismatch_score);\n    {\n        println!(\n            \"Clip scores ({}, {}, {}, {})\",\n            xclip_prefix_byte, xclip_suffix_byte, yclip_prefix_byte, yclip_suffix_byte\n        );\n        let scoring = Scoring {\n            xclip_prefix: -(*xclip_prefix_byte as i32),\n            xclip_suffix: -(*xclip_suffix_byte as i32),\n            yclip_prefix: -(*yclip_prefix_byte as i32),\n            yclip_suffix: -(*yclip_suffix_byte as i32),\n            ..base_score.clone()\n        };\n        let mut b_aligner = banded::Aligner::with_scoring(scoring.clone(), kmer_len, window_size);\n        let b_alignment = b_aligner.custom(x, y);\n        assert!(validate_alignment_score(&b_alignment, x, y, &scoring));\n        let mut f_aligner = pairwise::Aligner::with_scoring(scoring.clone());\n        let f_alignment = f_aligner.custom(x, y);\n        assert!(validate_alignment_score(&f_alignment, x, y, &scoring));\n        let band_all_alignment = b_aligner.custom_with_matches(x, y, &Vec::new());\n        assert_eq!(band_all_alignment.score, f_alignment.score);\n    }\n    {\n        let scoring = Scoring {\n            xclip_prefix: 0,\n            xclip_suffix: 0,\n            yclip_suffix: 0,\n            ..base_score.clone()\n        };\n        let mut b_aligner = banded::Aligner::with_scoring(scoring.clone(), kmer_len, window_size);\n        let b_alignment = b_aligner.custom(x, y);\n        assert_eq!(b_alignment.ystart, 0);\n        assert!(validate_alignment_score(&b_alignment, x, y, &scoring));\n        let mut f_aligner = pairwise::Aligner::with_scoring(scoring.clone());\n        let f_alignment = f_aligner.custom(x, y);\n        assert_eq!(f_alignment.ystart, 0);\n        assert!(validate_alignment_score(&f_alignment, x, y, &scoring));\n        let band_all_alignment = b_aligner.custom_with_matches(x, y, &Vec::new());\n        assert_eq!(band_all_alignment.score, f_alignment.score);\n    }\n    {\n        let scoring = Scoring {\n            xclip_prefix: 0,\n            xclip_suffix: 0,\n            yclip_prefix: 0,\n            ..base_score.clone()\n        };\n        let mut b_aligner = banded::Aligner::with_scoring(scoring.clone(), kmer_len, window_size);\n        let b_alignment = b_aligner.custom(x, y);\n        assert_eq!(b_alignment.yend, b_alignment.ylen);\n        assert!(validate_alignment_score(&b_alignment, x, y, &scoring));\n        let mut f_aligner = pairwise::Aligner::with_scoring(scoring.clone());\n        let f_alignment = f_aligner.custom(x, y);\n        assert_eq!(f_alignment.yend, f_alignment.ylen);\n        assert!(validate_alignment_score(&f_alignment, x, y, &scoring));\n        let band_all_alignment = b_aligner.custom_with_matches(x, y, &Vec::new());\n        assert_eq!(band_all_alignment.score, f_alignment.score);\n    }\n    {\n        let scoring = Scoring {\n            xclip_suffix: 0,\n            yclip_prefix: 0,\n            yclip_suffix: 0,\n            ..base_score.clone()\n        };\n        let mut b_aligner = banded::Aligner::with_scoring(scoring.clone(), kmer_len, window_size);\n        let b_alignment = b_aligner.custom(x, y);\n        assert_eq!(b_alignment.xstart, 0);\n        assert!(validate_alignment_score(&b_alignment, x, y, &scoring));\n        let mut f_aligner = pairwise::Aligner::with_scoring(scoring.clone());\n        let f_alignment = f_aligner.custom(x, y);\n        assert_eq!(f_alignment.xstart, 0);\n        assert!(validate_alignment_score(&f_alignment, x, y, &scoring));\n        let band_all_alignment = b_aligner.custom_with_matches(x, y, &Vec::new());\n        assert_eq!(band_all_alignment.score, f_alignment.score);\n    }\n    {\n        let scoring = Scoring {\n            xclip_prefix: 0,\n            yclip_prefix: 0,\n            yclip_suffix: 0,\n            ..base_score.clone()\n        };\n        let mut b_aligner = banded::Aligner::with_scoring(scoring.clone(), kmer_len, window_size);\n        let b_alignment = b_aligner.custom(x, y);\n        assert_eq!(b_alignment.xend, b_alignment.xlen);\n        assert!(validate_alignment_score(&b_alignment, x, y, &scoring));\n        let mut f_aligner = pairwise::Aligner::with_scoring(scoring.clone());\n        let f_alignment = f_aligner.custom(x, y);\n        assert_eq!(f_alignment.xend, f_alignment.xlen);\n        assert!(validate_alignment_score(&f_alignment, x, y, &scoring));\n        let band_all_alignment = b_aligner.custom_with_matches(x, y, &Vec::new());\n        assert_eq!(band_all_alignment.score, f_alignment.score);\n    }\n    {\n        let mut aligner = banded::Aligner::with_scoring(base_score.clone(), kmer_len, window_size);\n        let alignment = aligner.local(x, y);\n        assert!(alignment.score >= 0);\n        assert!(validate_alignment_score(&alignment, x, y, &base_score));\n        let alignment = aligner.semiglobal(x, y);\n        assert_eq!(alignment.xstart, 0);\n        assert_eq!(alignment.xend, alignment.xlen);\n        assert!(validate_alignment_score(&alignment, x, y, &base_score));\n        let alignment = aligner.global(x, y);\n        assert_eq!(alignment.xstart, 0);\n        assert_eq!(alignment.xend, alignment.xlen);\n        assert_eq!(alignment.ystart, 0);\n        assert_eq!(alignment.yend, alignment.ylen);\n        assert!(validate_alignment_score(&alignment, x, y, &base_score));\n    }\n    {\n        let mut aligner = pairwise::Aligner::with_scoring(base_score.clone());\n        let alignment = aligner.local(x, y);\n        assert!(alignment.score >= 0);\n        assert!(validate_alignment_score(&alignment, x, y, &base_score));\n        let alignment = aligner.semiglobal(x, y);\n        assert_eq!(alignment.xstart, 0);\n        assert_eq!(alignment.xend, alignment.xlen);\n        assert!(validate_alignment_score(&alignment, x, y, &base_score));\n        let alignment = aligner.global(x, y);\n        assert_eq!(alignment.xstart, 0);\n        assert_eq!(alignment.xend, alignment.xlen);\n        assert_eq!(alignment.ystart, 0);\n        assert_eq!(alignment.yend, alignment.ylen);\n        assert!(validate_alignment_score(&alignment, x, y, &base_score));\n    }\n}"}
{"test_id": "rustls-rustls/rustls-rustls-ae583bd/tests-gen/message.inputs.rs::test_83", "code": "pub fn used(&self) -> usize {\n        self.cursor\n    }", "test": "fn test_83() {\n    let data = [\n        22, 3, 3, 0, 16, 20, 0, 0, 12, 71, 173, 140, 125, 203, 26, 93, 34, 98, 50, 184, 37,\n    ];\n    let mut rdr = Reader::init(data);\n    if let Ok(m) = OpaqueMessage::read(&mut rdr) {\n        let msg = match Message::try_from(m.into_plain_message()) {\n            Ok(msg) => msg,\n            Err(_) => return,\n        };\n        let enc = PlainMessage::from(msg)\n            .into_unencrypted_opaque()\n            .encode();\n        assert_eq!(enc, data[..rdr.used()]);\n    }\n}"}
{"test_id": "rustls-rustls/rustls-rustls-ae583bd/tests-gen/server.inputs.rs::test_99", "code": "pub fn process_new_packets(&mut self) -> Result<IoState, Error> {\n        match self {\n            Self::Client(conn) => conn.process_new_packets(),\n            Self::Server(conn) => conn.process_new_packets(),\n        }\n    }", "test": "fn test_99() {\n    let data = [\n        1, 0, 0, 1, 0, 0, 183, 3, 3, 220, 22, 51, 160, 177, 163, 9, 68, 53, 77, 77, 35, 28, 3, 125,\n        157, 176, 186, 53, 22, 211, 5, 127, 250, 92, 65, 172, 68, 161, 77, 114, 224, 59, 98, 153,\n        198, 0, 56, 96, 244, 241, 2, 236, 14, 79, 17, 174, 249, 51, 180, 155, 27, 0, 0, 20, 19, 3,\n        19, 2, 19, 1, 204, 169, 204, 168, 192, 44, 192, 43, 192, 48, 192, 47, 0, 255, 1, 0, 0, 126,\n        0, 43, 0, 5, 4, 127, 18, 3, 3, 0, 0, 0, 15, 0, 13, 249, 0, 10, 103, 111, 111, 103, 108,\n        101, 46, 99, 111, 109, 0, 11, 0, 2, 1, 0, 0, 10, 0, 8, 0, 6, 0, 13, 0, 24, 0, 23, 0, 13, 0,\n        20, 0, 18, 5, 3, 4, 3, 8, 6, 8, 5, 8, 4, 6, 1, 5, 1, 4, 1, 2, 1, 0, 23, 0, 0, 0, 40, 0, 38,\n        0, 36, 0, 29, 0, 32, 54, 50, 250, 159, 54, 152, 227, 159, 53, 55, 94, 176, 131, 156, 2,\n        150, 252, 203, 146, 242, 91, 198, 7, 168, 50, 15, 199, 10, 239, 16, 176, 28, 0, 45, 0, 2,\n        1, 1, 0, 35, 0, 0, 22, 3, 3, 0, 37, 16, 0, 0, 91, 32, 174, 238, 64, 160, 89, 49, 176, 161,\n        116, 71, 119, 131, 117, 30, 29, 184, 254, 193, 66, 215, 34, 226, 85, 150, 137, 157, 149,\n        108, 207, 252, 23, 86, 20, 3, 3, 0, 1, 1, 22, 3, 3, 0, 32, 95, 72, 179, 244, 73, 139, 102,\n        175, 65, 93, 186, 57, 105, 115, 213, 0, 29, 0, 32, 54, 50, 250, 159, 54, 152, 227, 159, 53,\n        55, 94, 176, 131, 156, 2, 150, 252, 203, 146, 242, 91, 198, 7, 168, 50, 15, 199, 10, 239,\n        16, 176, 28, 0, 45, 0, 2, 1, 1, 0, 35, 0, 0, 22, 3, 3, 0, 37, 16, 0, 0, 33, 32, 174, 238,\n        64, 160, 89, 49, 176, 161, 165, 86, 84, 15, 231, 50, 21, 63, 51, 29, 245, 52, 162, 204,\n        116, 31, 170, 96, 116, 142, 202, 95, 61, 225, 162, 123, 121, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    ];\n    let config = Arc::new(\n        ServerConfig::builder()\n            .with_safe_defaults()\n            .with_no_client_auth()\n            .with_cert_resolver(Arc::new(Fail)),\n    );\n    let mut server = ServerConnection::new(config).unwrap();\n    let _ = server.read_tls(&mut io::Cursor::new(data));\n    let _ = server.process_new_packets();\n}"}
{"test_id": "BurntSushi-memchr/BurntSushi-memchr-f3fde7a/tests-gen/memrmem.inputs.rs::test_61", "code": "pub fn count(&self, haystack: &[u8]) -> usize {\n        // SAFETY: All of our pointers are derived directly from a borrowed\n        // slice, which is guaranteed to be valid.\n        unsafe {\n            let start = haystack.as_ptr();\n            let end = start.add(haystack.len());\n            self.count_raw(start, end)\n        }\n    }", "test": "fn test_61() {\n    let data = [10, 172];\n    if data.len() < 2 {\n        return;\n    }\n    let split = std::cmp::max(data[0] as usize, 1) % data.len() as usize;\n    let (needle, haystack) = (&data[..split], &data[split..]);\n    memmem::rfind_iter(haystack, needle).count();\n}"}
{"test_id": "rust-bakery-nom/rust-bakery-nom-869f897/tests-gen/fuzz_arithmetic.inputs.rs::test_50", "code": "fn factor(i: &str) -> IResult<&str, Expr> {\n  alt((\n    map(\n      map_res(delimited(multispace, digit, multispace), FromStr::from_str),\n      Expr::Value,\n    ),\n    parens,\n  ))(i)\n}", "test": "fn test_50() {\n  let data = [8];\n  reset();\n  let temp = match str::from_utf8(data) {\n    Ok(v) => factor(v),\n    Err(e) => factor(\"2\"),\n  };\n}"}
{"test_id": "cloud-hypervisor-cloud-hypervisor/cloud-hypervisor-cloud-hypervisor-db3a5f3/tests-gen/watchdog.inputs.rs::test_16", "code": "pub fn wait_for_epoll_threads(&mut self) {\n        self.common.wait_for_epoll_threads();\n    }", "test": "fn test_16() {\n    let bytes = [211];\n    if bytes.len() < QUEUE_DATA_SIZE || bytes.len() > (QUEUE_DATA_SIZE + MEM_SIZE) {\n        return;\n    }\n    let mut watchdog = virtio_devices::Watchdog::new(\n        \"fuzzer_watchdog\".to_owned(),\n        EventFd::new(EFD_NONBLOCK).unwrap(),\n        SeccompAction::Allow,\n        EventFd::new(EFD_NONBLOCK).unwrap(),\n        None,\n    )\n    .unwrap();\n    let queue_data = &bytes[..QUEUE_DATA_SIZE];\n    let mem_bytes = &bytes[QUEUE_DATA_SIZE..];\n    let q = setup_virt_queue(queue_data.try_into().unwrap());\n    let mem = GuestMemoryMmap::from_ranges(&[(GuestAddress(0), MEM_SIZE)]).unwrap();\n    if mem.write_slice(mem_bytes, GuestAddress(0 as u64)).is_err() {\n        return;\n    }\n    let guest_memory = GuestMemoryAtomic::new(mem);\n    let evt = EventFd::new(0).unwrap();\n    let queue_evt = unsafe { EventFd::from_raw_fd(libc::dup(evt.as_raw_fd())) };\n    queue_evt.write(1).unwrap();\n    watchdog\n        .activate(\n            guest_memory,\n            Arc::new(NoopVirtioInterrupt {}),\n            vec![(0, q, evt)],\n        )\n        .ok();\n    watchdog.wait_for_epoll_threads();\n}"}
{"test_id": "image-rs-image-png/image-rs-image-png-e113d76/tests-gen/buf_independent.inputs.rs::test_0", "code": "fn new (inner : R , cap : usize) -> Self { SmalBuf { inner , cap } }", "test": "fn test_0() {\n    let data = [10];\n    let limits = png::Limits { bytes: 1 << 16 };\n    let reference = png::Decoder::new_with_limits(data, limits);\n    let smal = png::Decoder::new_with_limits(SmalBuf::new(data, 1), limits);\n    let _ = png_compare(reference, smal);\n}"}
{"test_id": "rustls-rustls/rustls-rustls-ae583bd/tests-gen/server.inputs.rs::test_17", "code": "pub fn process_new_packets(&mut self) -> Result<IoState, Error> {\n        match self {\n            Self::Client(conn) => conn.process_new_packets(),\n            Self::Server(conn) => conn.process_new_packets(),\n        }\n    }", "test": "fn test_17() {\n    let data = [\n        22, 3, 1, 0, 196, 1, 0, 0, 183, 3, 3, 220, 22, 51, 168, 177, 163, 9, 68, 53, 77, 77, 35,\n        28, 3, 125, 157, 176, 186, 53, 22, 211, 5, 127, 250, 92, 65, 31, 143, 93, 97, 146, 138, 0,\n        0, 20, 19, 3, 19, 2, 19, 1, 204, 169, 204, 168, 192, 44, 192, 43, 3, 1, 0, 53, 219, 184,\n        117, 77, 19, 58, 216, 56, 206, 189, 136, 130, 200, 75, 166, 179, 221, 205, 76, 177, 233,\n        190, 144, 63, 232, 169, 106, 107, 196, 128, 137, 238, 184, 112, 79, 244, 78, 254, 64, 128,\n        90, 16, 155, 32, 243, 35, 34, 228, 249, 131, 79, 5, 236, 23, 3, 1, 0, 98, 232, 125, 164,\n        163, 59, 255, 99, 156, 191, 129, 130, 16, 57, 31, 56, 64, 0, 192, 24, 151, 61, 57, 10, 81,\n        47, 192, 94, 212, 116, 62, 40, 209, 146, 147, 24, 216, 46, 208, 33, 113, 212, 48, 157, 238,\n        157, 45, 120, 98, 10, 232, 255, 210, 173, 123, 200, 152, 59, 10, 57, 0, 154, 207, 11, 90,\n        130, 199, 181, 127, 192, 247, 83, 193, 104, 19, 154, 127, 6, 156, 172, 21, 121, 252, 87,\n        250, 196, 88, 45, 208, 213, 175, 154, 154, 143, 29, 49, 69, 68, 88,\n    ];\n    let config = Arc::new(\n        ServerConfig::builder()\n            .with_safe_defaults()\n            .with_no_client_auth()\n            .with_cert_resolver(Arc::new(Fail)),\n    );\n    let mut server = ServerConnection::new(config).unwrap();\n    let _ = server.read_tls(&mut io::Cursor::new(data));\n    let _ = server.process_new_packets();\n}"}
{"test_id": "cloud-hypervisor-cloud-hypervisor/cloud-hypervisor-cloud-hypervisor-db3a5f3/tests-gen/iommu.inputs.rs::test_52", "code": "pub fn wait_for_epoll_threads(&mut self) {\n        self.common.wait_for_epoll_threads();\n    }", "test": "fn test_52() {\n    let bytes = [58, 58, 4, 26];\n    if bytes.len() < (QUEUE_DATA_SIZE + QUEUE_BYTES_SIZE)\n        || bytes.len() > (QUEUE_DATA_SIZE + QUEUE_BYTES_SIZE + MEM_SIZE)\n    {\n        return;\n    }\n    let (mut iommu, _) = virtio_devices::Iommu::new(\n        \"fuzzer_iommu\".to_owned(),\n        SeccompAction::Allow,\n        EventFd::new(EFD_NONBLOCK).unwrap(),\n        ((MEM_SIZE - IOVA_SPACE_SIZE) as u64, (MEM_SIZE - 1) as u64),\n        None,\n    )\n    .unwrap();\n    let queue_data = &bytes[..QUEUE_DATA_SIZE];\n    let queue_bytes = &bytes[QUEUE_DATA_SIZE..QUEUE_DATA_SIZE + QUEUE_BYTES_SIZE];\n    let mem_bytes = &bytes[QUEUE_DATA_SIZE + QUEUE_BYTES_SIZE..];\n    let request_queue = setup_virt_queue(queue_data.try_into().unwrap());\n    let _event_queue = setup_virt_queue(queue_data.try_into().unwrap());\n    let mem = GuestMemoryMmap::from_ranges(&[\n        (GuestAddress(0), MEM_SIZE),\n        (GuestAddress(DESC_TABLE_ADDR), QUEUE_BYTES_SIZE),\n    ])\n    .unwrap();\n    if mem\n        .write_slice(queue_bytes, GuestAddress(DESC_TABLE_ADDR))\n        .is_err()\n    {\n        return;\n    }\n    if mem.write_slice(mem_bytes, GuestAddress(0 as u64)).is_err() {\n        return;\n    }\n    let guest_memory = GuestMemoryAtomic::new(mem);\n    let request_evt = EventFd::new(0).unwrap();\n    let request_queue_evt = unsafe { EventFd::from_raw_fd(libc::dup(request_evt.as_raw_fd())) };\n    let _event_evt = EventFd::new(0).unwrap();\n    request_queue_evt.write(1).unwrap();\n    iommu\n        .activate(\n            guest_memory,\n            Arc::new(NoopVirtioInterrupt {}),\n            vec![\n                (0, request_queue, request_evt),\n                (0, _event_queue, _event_evt),\n            ],\n        )\n        .ok();\n    iommu.wait_for_epoll_threads();\n}"}
{"test_id": "gimli-rs-gimli/gimli-rs-gimli-3947879/tests-gen/debug_line.inputs.rs::test_21", "code": "pub fn next_row(&mut self) -> Result<Option<(&LineProgramHeader<R, Offset>, &LineRow)>> {\n        // Perform any reset that was required after copying the previous row.\n        self.row.reset(self.program.header());\n\n        loop {\n            // Split the borrow here, rather than calling `self.header()`.\n            match self.instructions.next_instruction(self.program.header()) {\n                Err(err) => return Err(err),\n                Ok(None) => return Ok(None),\n                Ok(Some(instruction)) => {\n                    if self.row.execute(instruction, &mut self.program) {\n                        if self.row.tombstone {\n                            // Perform any reset that was required for the tombstone row.\n                            // Normally this is done when `next_row` is called again, but for\n                            // tombstones we loop immediately.\n                            self.row.reset(self.program.header());\n                        } else {\n                            return Ok(Some((self.header(), &self.row)));\n                        }\n                    }\n                    // Fall through, parse the next instruction, and see if that\n                    // yields a row.\n                }\n            }\n        }\n    }", "test": "fn test_21() {\n    let debug_line = [178, 91, 26];\n    let debug_line = DebugLine::new(&debug_line, LittleEndian);\n    let offset = DebugLineOffset(0);\n    let address_size = 8;\n    if let Ok(program) = debug_line.program(offset, address_size, None, None) {\n        let mut rows = program.rows();\n        while let Ok(Some(row)) = rows.next_row() {\n            let _ = row;\n        }\n    }\n}"}
{"test_id": "XAMPPRocky-tokei/XAMPPRocky-tokei-92ddc2e/tests-gen/parse_from_slice_total.inputs.rs::test_2", "code": "pub fn parse_from_slice (input : FuzzInput , check_total : bool) { let config = & Config { treat_doc_strings_as_comments : Some (input . treat_doc_strings_as_comments) , columns : None , hidden : None , no_ignore : None , no_ignore_parent : None , no_ignore_dot : None , no_ignore_vcs : None , sort : None , types : None , for_each_fn : None , } ; let stats = input . lang . parse_from_slice (input . data , config) ; if check_total { if let Ok (s) = str :: from_utf8 (input . data) { assert ! (stats . lines () <= s . lines () . count () , \"{} got more total lines ({}) than str::lines ({}). Code: {}, Comments: {}, Blanks: {}. treat_doc_strings_as_comments: {}. File contents (as UTF-8):\\n{}\" , input . lang . name () , stats . lines () , s . lines () . count () , stats . code , stats . comments , input . treat_doc_strings_as_comments , stats . blanks , s) } ; } }", "test": "fn test_2() {\n    let data = FuzzInput {\n        lang: Zsh,\n        treat_doc_strings_as_comments: true,\n        data: [255, 255, 10, 255, 255, 255, 255, 255, 255],\n    };\n    parse_from_slice(data, true);\n}"}
{"test_id": "gimli-rs-gimli/gimli-rs-gimli-3947879/tests-gen/debug_abbrev.inputs.rs::test_91", "code": "pub fn get<R: Reader>(\n        &self,\n        debug_abbrev: &DebugAbbrev<R>,\n        offset: DebugAbbrevOffset<R::Offset>,\n    ) -> Result<Arc<Abbreviations>> {\n        if offset.0 != R::Offset::from_u8(0) {\n            return debug_abbrev.abbreviations(offset).map(Arc::new);\n        }\n        self.abbreviations\n            .get(|| debug_abbrev.abbreviations(offset))\n    }", "test": "fn test_91() {\n    let debug_abbrev = [45, 186];\n    let len = debug_abbrev.len();\n    let debug_abbrev = DebugAbbrev::new(&debug_abbrev, LittleEndian);\n    let offset = DebugAbbrevOffset(0);\n    if let Ok(abbreviations) = debug_abbrev.abbreviations(offset) {\n        for i in 1..len {\n            let _ = abbreviations.get(i as u64);\n        }\n    }\n}"}
{"test_id": "image-rs-image/image-rs-image-e5580ec/tests-gen/fuzzer_script_tga.inputs.rs::test_22", "code": "fn decode(encoded: &[u8]) -> Vec<u8> {\n        let decoder = JpegDecoder::new(Cursor::new(encoded)).expect(\"Could not decode image\");\n\n        let mut decoded = vec![0; decoder.total_bytes() as usize];\n        decoder\n            .read_image(&mut decoded)\n            .expect(\"Could not decode image\");\n        decoded\n    }", "test": "fn test_22() {\n    let data = [10, 42];\n    let _ = decode(data);\n}"}
{"test_id": "dtolnay-syn/dtolnay-syn-b1a038c/tests-gen/create_token_buffer.inputs.rs::test_42", "code": "fn parse_str(self, s: &str) -> Result<Self::Output> {\n        self.parse2(proc_macro2::TokenStream::from_str(s)?)\n    }", "test": "fn test_42() {\n    let data = [74, 74, 1, 1];\n    if data.len() < 300 {\n        if let Ok(string) = str::from_utf8(data) {\n            let _ = immediate_fail.parse_str(string);\n        }\n    }\n}"}
{"test_id": "bodil-im-rs/bodil-im-rs-2afaf54/tests-gen/ordset.inputs.rs::test_65", "code": "pub fn remove<BA>(&mut self, a: &BA) -> Option<A>\n    where\n        BA: Hash + Eq + ?Sized,\n        A: Borrow<BA>,\n    {\n        let root = PoolRef::make_mut(&self.pool.0, &mut self.root);\n        let result = root.remove(&self.pool.0, hash_key(&*self.hasher, a), 0, a);\n        if result.is_some() {\n            self.size -= 1;\n        }\n        result.map(|v| v.0)\n    }", "test": "fn test_65() {\n    let actions = [Insert(4991471628406095871)];\n    let mut set = OrdSet::new();\n    let mut nat = NatSet::new();\n    for action in actions {\n        match action {\n            Action::Insert(value) => {\n                let len = nat.len() + if nat.contains(&value) { 0 } else { 1 };\n                nat.insert(value);\n                set.insert(value);\n                assert_eq!(len, set.len());\n            }\n            Action::Remove(value) => {\n                let len = nat.len() - if nat.contains(&value) { 1 } else { 0 };\n                nat.remove(&value);\n                set.remove(&value);\n                assert_eq!(len, set.len());\n            }\n        }\n        assert_eq!(nat.len(), set.len());\n        assert_eq!(OrdSet::from(nat.clone()), set);\n    }\n}"}
{"test_id": "rust-bakery-nom/rust-bakery-nom-869f897/tests-gen/fuzz_arithmetic.inputs.rs::test_79", "code": "fn factor(i: &str) -> IResult<&str, Expr> {\n  alt((\n    map(\n      map_res(delimited(multispace, digit, multispace), FromStr::from_str),\n      Expr::Value,\n    ),\n    parens,\n  ))(i)\n}", "test": "fn test_79() {\n  let data = [254, 53, 10, 77];\n  reset();\n  let temp = match str::from_utf8(data) {\n    Ok(v) => factor(v),\n    Err(e) => factor(\"2\"),\n  };\n}"}
{"test_id": "cloud-hypervisor-cloud-hypervisor/cloud-hypervisor-cloud-hypervisor-db3a5f3/tests-gen/pmem.inputs.rs::test_36", "code": "pub fn wait_for_epoll_threads(&mut self) {\n        self.common.wait_for_epoll_threads();\n    }", "test": "fn test_36() {\n    let bytes = [26, 26, 14, 41];\n    if bytes.len() < QUEUE_DATA_SIZE || bytes.len() > (QUEUE_DATA_SIZE + MEM_SIZE) {\n        return;\n    }\n    let mut pmem = create_dummy_pmem();\n    let queue_data = &bytes[..QUEUE_DATA_SIZE];\n    let mem_bytes = &bytes[QUEUE_DATA_SIZE..];\n    let q = setup_virt_queue(queue_data.try_into().unwrap());\n    let mem = GuestMemoryMmap::from_ranges(&[(GuestAddress(0), MEM_SIZE)]).unwrap();\n    if mem.write_slice(mem_bytes, GuestAddress(0 as u64)).is_err() {\n        return;\n    }\n    let guest_memory = GuestMemoryAtomic::new(mem);\n    let evt = EventFd::new(0).unwrap();\n    let queue_evt = unsafe { EventFd::from_raw_fd(libc::dup(evt.as_raw_fd())) };\n    queue_evt.write(1).unwrap();\n    pmem.activate(\n        guest_memory,\n        Arc::new(NoopVirtioInterrupt {}),\n        vec![(0, q, evt)],\n    )\n    .ok();\n    pmem.wait_for_epoll_threads();\n}"}
{"test_id": "cloud-hypervisor-cloud-hypervisor/cloud-hypervisor-cloud-hypervisor-db3a5f3/tests-gen/rng.inputs.rs::test_6", "code": "pub fn wait_for_epoll_threads(&mut self) {\n        self.common.wait_for_epoll_threads();\n    }", "test": "fn test_6() {\n    let bytes = [10, 33];\n    if bytes.len() < (QUEUE_DATA_SIZE + QUEUE_BYTES_SIZE)\n        || bytes.len() > (QUEUE_DATA_SIZE + QUEUE_BYTES_SIZE + MEM_SIZE)\n    {\n        return;\n    }\n    let mut rng = virtio_devices::Rng::new(\n        \"fuzzer_rng\".to_owned(),\n        \"/dev/urandom\",\n        false,\n        SeccompAction::Allow,\n        EventFd::new(EFD_NONBLOCK).unwrap(),\n        None,\n    )\n    .unwrap();\n    let queue_data = &bytes[..QUEUE_DATA_SIZE];\n    let queue_bytes = &bytes[QUEUE_DATA_SIZE..QUEUE_DATA_SIZE + QUEUE_BYTES_SIZE];\n    let mem_bytes = &bytes[QUEUE_DATA_SIZE + QUEUE_BYTES_SIZE..];\n    let q = setup_virt_queue(queue_data.try_into().unwrap());\n    let mem = GuestMemoryMmap::from_ranges(&[\n        (GuestAddress(0), MEM_SIZE),\n        (GuestAddress(DESC_TABLE_ADDR), QUEUE_BYTES_SIZE),\n    ])\n    .unwrap();\n    if mem\n        .write_slice(queue_bytes, GuestAddress(DESC_TABLE_ADDR))\n        .is_err()\n    {\n        return;\n    }\n    if mem.write_slice(mem_bytes, GuestAddress(0 as u64)).is_err() {\n        return;\n    }\n    let guest_memory = GuestMemoryAtomic::new(mem);\n    let evt = EventFd::new(0).unwrap();\n    let queue_evt = unsafe { EventFd::from_raw_fd(libc::dup(evt.as_raw_fd())) };\n    queue_evt.write(1).unwrap();\n    rng.activate(\n        guest_memory,\n        Arc::new(NoopVirtioInterrupt {}),\n        vec![(0, q, evt)],\n    )\n    .ok();\n    rng.wait_for_epoll_threads();\n}"}
{"test_id": "gimli-rs-gimli/gimli-rs-gimli-3947879/tests-gen/eh_frame.inputs.rs::test_98", "code": "pub fn next_row(&mut self) -> Result<Option<(&LineProgramHeader<R, Offset>, &LineRow)>> {\n        // Perform any reset that was required after copying the previous row.\n        self.row.reset(self.program.header());\n\n        loop {\n            // Split the borrow here, rather than calling `self.header()`.\n            match self.instructions.next_instruction(self.program.header()) {\n                Err(err) => return Err(err),\n                Ok(None) => return Ok(None),\n                Ok(Some(instruction)) => {\n                    if self.row.execute(instruction, &mut self.program) {\n                        if self.row.tombstone {\n                            // Perform any reset that was required for the tombstone row.\n                            // Normally this is done when `next_row` is called again, but for\n                            // tombstones we loop immediately.\n                            self.row.reset(self.program.header());\n                        } else {\n                            return Ok(Some((self.header(), &self.row)));\n                        }\n                    }\n                    // Fall through, parse the next instruction, and see if that\n                    // yields a row.\n                }\n            }\n        }\n    }", "test": "fn test_98() {\n    let eh_frame = [117, 96, 206, 96];\n    let eh_frame = EhFrame::new(&eh_frame, LittleEndian);\n    let mut ctx = Box::new(UnwindContext::new());\n    let bases = BaseAddresses::default()\n        .set_eh_frame(0)\n        .set_eh_frame_hdr(0)\n        .set_text(0)\n        .set_got(0);\n    let mut entries = eh_frame.entries(&bases);\n    while let Ok(Some(entry)) = entries.next() {\n        match entry {\n            CieOrFde::Cie(_) => continue,\n            CieOrFde::Fde(partial) => {\n                if let Ok(fde) = partial.parse(EhFrame::cie_from_offset) {\n                    if let Ok(mut table) = fde.rows(&eh_frame, &bases, &mut ctx) {\n                        while let Ok(Some(_row)) = table.next_row() {\n                            continue;\n                        }\n                    }\n                }\n            }\n        };\n    }\n}"}
{"test_id": "rustls-rustls/rustls-rustls-ae583bd/tests-gen/message.inputs.rs::test_11", "code": "pub fn used(&self) -> usize {\n        self.cursor\n    }", "test": "fn test_11() {\n    let data = [22, 3, 3, 0, 6, 1, 0, 0, 2, 255, 255];\n    let mut rdr = Reader::init(data);\n    if let Ok(m) = OpaqueMessage::read(&mut rdr) {\n        let msg = match Message::try_from(m.into_plain_message()) {\n            Ok(msg) => msg,\n            Err(_) => return,\n        };\n        let enc = PlainMessage::from(msg)\n            .into_unencrypted_opaque()\n            .encode();\n        assert_eq!(enc, data[..rdr.used()]);\n    }\n}"}
{"test_id": "XAMPPRocky-tokei/XAMPPRocky-tokei-92ddc2e/tests-gen/parse_from_slice_total.inputs.rs::test_80", "code": "pub fn parse_from_slice (input : FuzzInput , check_total : bool) { let config = & Config { treat_doc_strings_as_comments : Some (input . treat_doc_strings_as_comments) , columns : None , hidden : None , no_ignore : None , no_ignore_parent : None , no_ignore_dot : None , no_ignore_vcs : None , sort : None , types : None , for_each_fn : None , } ; let stats = input . lang . parse_from_slice (input . data , config) ; if check_total { if let Ok (s) = str :: from_utf8 (input . data) { assert ! (stats . lines () <= s . lines () . count () , \"{} got more total lines ({}) than str::lines ({}). Code: {}, Comments: {}, Blanks: {}. treat_doc_strings_as_comments: {}. File contents (as UTF-8):\\n{}\" , input . lang . name () , stats . lines () , s . lines () . count () , stats . code , stats . comments , input . treat_doc_strings_as_comments , stats . blanks , s) } ; } }", "test": "fn test_80() {\n    let data = FuzzInput {\n        lang: ABNF,\n        treat_doc_strings_as_comments: false,\n        data: [80, 10, 255, 255, 255, 255, 255, 255],\n    };\n    parse_from_slice(data, true);\n}"}
{"test_id": "BurntSushi-memchr/BurntSushi-memchr-f3fde7a/tests-gen/memchr.inputs.rs::test_71", "code": "fn count(self) -> usize {\n        self.it.count(|s, e| {\n            // SAFETY: We rely on our generic iterator to return valid start\n            // and end pointers.\n            unsafe { count_raw(self.needle1, s, e) }\n        })\n    }", "test": "fn test_71() {\n    let data = [0, 4, 0, 0];\n    if data.is_empty() {\n        return;\n    }\n    memchr_iter(data[0], &data[1..]).count();\n}"}
{"test_id": "marshallpierce-rust-base64/marshallpierce-rust-base64-4ef33cc/tests-gen/roundtrip_no_pad.inputs.rs::test_92", "code": "fn decode<T: AsRef<[u8]>>(&self, input: T) -> Result<Vec<u8>, DecodeError> {\n        fn inner<E>(engine: &E, input_bytes: &[u8]) -> Result<Vec<u8>, DecodeError>\n        where\n            E: Engine + ?Sized,\n        {\n            let estimate = engine.internal_decoded_len_estimate(input_bytes.len());\n            let mut buffer = vec![0; estimate.decoded_len_estimate()];\n\n            let bytes_written = engine\n                .internal_decode(input_bytes, &mut buffer, estimate)?\n                .decoded_len;\n\n            buffer.truncate(bytes_written);\n\n            Ok(buffer)\n        }\n\n        inner(self, input.as_ref())\n    }", "test": "fn test_92() {\n    let data = [138, 0, 10, 35];\n    let config = general_purpose::GeneralPurposeConfig::new()\n        .with_encode_padding(false)\n        .with_decode_padding_mode(engine::DecodePaddingMode::RequireNone);\n    let engine = general_purpose::GeneralPurpose::new(&base64::alphabet::STANDARD, config);\n    let encoded = engine.encode(data);\n    let decoded = engine.decode(&encoded).unwrap();\n    assert_eq!(data, decoded.as_slice());\n}"}
{"test_id": "BurntSushi-memchr/BurntSushi-memchr-f3fde7a/tests-gen/memchr.inputs.rs::test_17", "code": "fn count(self) -> usize {\n        self.it.count(|s, e| {\n            // SAFETY: We rely on our generic iterator to return valid start\n            // and end pointers.\n            unsafe { count_raw(self.needle1, s, e) }\n        })\n    }", "test": "fn test_17() {\n    let data = [10];\n    if data.is_empty() {\n        return;\n    }\n    memchr_iter(data[0], &data[1..]).count();\n}"}
{"test_id": "cloud-hypervisor-cloud-hypervisor/cloud-hypervisor-cloud-hypervisor-db3a5f3/tests-gen/pmem.inputs.rs::test_39", "code": "pub fn wait_for_epoll_threads(&mut self) {\n        self.common.wait_for_epoll_threads();\n    }", "test": "fn test_39() {\n    let bytes = [14, 39, 226];\n    if bytes.len() < QUEUE_DATA_SIZE || bytes.len() > (QUEUE_DATA_SIZE + MEM_SIZE) {\n        return;\n    }\n    let mut pmem = create_dummy_pmem();\n    let queue_data = &bytes[..QUEUE_DATA_SIZE];\n    let mem_bytes = &bytes[QUEUE_DATA_SIZE..];\n    let q = setup_virt_queue(queue_data.try_into().unwrap());\n    let mem = GuestMemoryMmap::from_ranges(&[(GuestAddress(0), MEM_SIZE)]).unwrap();\n    if mem.write_slice(mem_bytes, GuestAddress(0 as u64)).is_err() {\n        return;\n    }\n    let guest_memory = GuestMemoryAtomic::new(mem);\n    let evt = EventFd::new(0).unwrap();\n    let queue_evt = unsafe { EventFd::from_raw_fd(libc::dup(evt.as_raw_fd())) };\n    queue_evt.write(1).unwrap();\n    pmem.activate(\n        guest_memory,\n        Arc::new(NoopVirtioInterrupt {}),\n        vec![(0, q, evt)],\n    )\n    .ok();\n    pmem.wait_for_epoll_threads();\n}"}
{"test_id": "rust-bakery-nom/rust-bakery-nom-869f897/tests-gen/fuzz_arithmetic.inputs.rs::test_38", "code": "fn factor(i: &str) -> IResult<&str, Expr> {\n  alt((\n    map(\n      map_res(delimited(multispace, digit, multispace), FromStr::from_str),\n      Expr::Value,\n    ),\n    parens,\n  ))(i)\n}", "test": "fn test_38() {\n  let data = [2, 0, 0];\n  reset();\n  let temp = match str::from_utf8(data) {\n    Ok(v) => factor(v),\n    Err(e) => factor(\"2\"),\n  };\n}"}
{"test_id": "bodil-im-rs/bodil-im-rs-2afaf54/tests-gen/hashset.inputs.rs::test_91", "code": "pub fn remove<BA>(&mut self, a: &BA) -> Option<A>\n    where\n        BA: Hash + Eq + ?Sized,\n        A: Borrow<BA>,\n    {\n        let root = PoolRef::make_mut(&self.pool.0, &mut self.root);\n        let result = root.remove(&self.pool.0, hash_key(&*self.hasher, a), 0, a);\n        if result.is_some() {\n            self.size -= 1;\n        }\n        result.map(|v| v.0)\n    }", "test": "fn test_91() {\n    let actions = [Remove(723391742429436442)];\n    let mut set = HashSet::new();\n    let mut nat = NatSet::new();\n    for action in actions {\n        match action {\n            Action::Insert(value) => {\n                let len = nat.len() + if nat.contains(&value) { 0 } else { 1 };\n                nat.insert(value);\n                set.insert(value);\n                assert_eq!(len, set.len());\n            }\n            Action::Remove(value) => {\n                let len = nat.len() - if nat.contains(&value) { 1 } else { 0 };\n                nat.remove(&value);\n                set.remove(&value);\n                assert_eq!(len, set.len());\n            }\n        }\n        assert_eq!(nat.len(), set.len());\n        assert_eq!(HashSet::from(nat.clone()), set);\n    }\n}"}
{"test_id": "marshallpierce-rust-base64/marshallpierce-rust-base64-4ef33cc/tests-gen/roundtrip.inputs.rs::test_44", "code": "pub fn decode<T: AsRef<[u8]>>(input: T) -> Result<Vec<u8>, DecodeError> {\n    STANDARD.decode(input)\n}", "test": "fn test_44() {\n    let data = [0, 10];\n    let encoded = STANDARD.encode(data);\n    let decoded = STANDARD.decode(&encoded).unwrap();\n    assert_eq!(data, decoded.as_slice());\n}"}
{"test_id": "gimli-rs-gimli/gimli-rs-gimli-3947879/tests-gen/debug_aranges.inputs.rs::test_57", "code": "pub fn next(&mut self) -> Result<Option<UnitHeader<R>>> {\n        if self.input.is_empty() {\n            Ok(None)\n        } else {\n            let len = self.input.len();\n            match parse_unit_header(&mut self.input, self.offset.into()) {\n                Ok(header) => {\n                    self.offset.0 += len - self.input.len();\n                    Ok(Some(header))\n                }\n                Err(e) => {\n                    self.input.empty();\n                    Err(e)\n                }\n            }\n        }\n    }", "test": "fn test_57() {\n    let debug_aranges = [250, 65];\n    let debug_aranges = DebugAranges::new(&debug_aranges, LittleEndian);\n    let mut headers = debug_aranges.headers();\n    while let Ok(Some(header)) = headers.next() {\n        let mut entries = header.entries();\n        while let Ok(Some(_entry)) = entries.next() {\n            continue;\n        }\n    }\n}"}
{"test_id": "seanmonstar-httparse/seanmonstar-httparse-638848e/tests-gen/parse_request.inputs.rs::test_91", "code": "pub fn parse(&mut self, buf: &'b [u8]) -> Result<usize> {\n        self.parse_with_config(buf, &Default::default())\n    }", "test": "fn test_91() {\n    let data = [130, 192, 10];\n    let mut headers = [httparse::EMPTY_HEADER; 16];\n    let mut req = httparse::Request::new(&mut headers);\n    req.parse(data);\n}"}
{"test_id": "BurntSushi-memchr/BurntSushi-memchr-f3fde7a/tests-gen/memchr3.inputs.rs::test_29", "code": "fn count(self) -> usize {\n        self.it.count(|s, e| {\n            // SAFETY: We rely on our generic iterator to return valid start\n            // and end pointers.\n            unsafe { count_raw(self.needle1, s, e) }\n        })\n    }", "test": "fn test_29() {\n    let data = [47, 47, 10, 47];\n    if data.len() < 3 {\n        return;\n    }\n    memchr3_iter(data[0], data[1], data[2], &data[3..]).count();\n}"}
{"test_id": "winnow-rs-winnow/winnow-rs-winnow-9e88734/tests-gen/fuzz_arithmetic.inputs.rs::test_7", "code": "fn factor(i: &mut &str) -> PResult<Expr> {\n    delimited(\n        multispaces,\n        alt((digits.try_map(FromStr::from_str).map(Expr::Value), parens)),\n        multispaces,\n    )\n    .parse_next(i)\n}", "test": "fn test_7() {\n    let data = [10, 0, 0];\n    reset();\n    let _ = match str::from_utf8(data) {\n        Ok(mut v) => factor(&mut v),\n        Err(_) => factor(&mut \"2\"),\n    };\n}"}
{"test_id": "image-rs-image-png/image-rs-image-png-e113d76/tests-gen/buf_independent.inputs.rs::test_20", "code": "fn new (inner : R , cap : usize) -> Self { SmalBuf { inner , cap } }", "test": "fn test_20() {\n    let data = [0, 0, 0];\n    let limits = png::Limits { bytes: 1 << 16 };\n    let reference = png::Decoder::new_with_limits(data, limits);\n    let smal = png::Decoder::new_with_limits(SmalBuf::new(data, 1), limits);\n    let _ = png_compare(reference, smal);\n}"}
{"test_id": "dtolnay-semver/dtolnay-semver-750f0ac/tests-gen/sort_version.inputs.rs::test_66", "code": "fn three_versions(bytes: &[u8]) -> Option<[Version; 3]> {\n    let mut inputs = str::from_utf8(bytes).ok()?.split(' ');\n    Some([\n        Version {\n            major: 0,\n            minor: 0,\n            patch: 0,\n            pre: inputs.next().map(Prerelease::new)?.ok()?,\n            build: inputs.next().map(BuildMetadata::new)?.ok()?,\n        },\n        Version {\n            major: 0,\n            minor: 0,\n            patch: 0,\n            pre: inputs.next().map(Prerelease::new)?.ok()?,\n            build: inputs.next().map(BuildMetadata::new)?.ok()?,\n        },\n        Version {\n            major: 0,\n            minor: 0,\n            patch: 0,\n            pre: inputs.next().map(Prerelease::new)?.ok()?,\n            build: inputs.next().map(BuildMetadata::new)?.ok()?,\n        },\n    ])\n}", "test": "fn test_66() {\n    let bytes = [146];\n    if let Some([a, b, c]) = three_versions(bytes) {\n        if a < b && b < c && c < a {\n            panic!(\"{0} < {1} < {2} < {0}\", a, b, c);\n        }\n    }\n}"}
{"test_id": "cloud-hypervisor-cloud-hypervisor/cloud-hypervisor-cloud-hypervisor-db3a5f3/tests-gen/balloon.inputs.rs::test_26", "code": "pub fn wait_for_epoll_threads(&mut self) {\n        self.common.wait_for_epoll_threads();\n    }", "test": "fn test_26() {\n    let bytes = [5];\n    if bytes.len() < QUEUE_DATA_SIZE * QUEUE_NUM\n        || bytes.len() > (QUEUE_DATA_SIZE * QUEUE_NUM + MEM_SIZE)\n    {\n        return;\n    }\n    let mut balloon = virtio_devices::Balloon::new(\n        \"fuzzer_balloon\".to_owned(),\n        BALLOON_SIZE,\n        true,\n        true,\n        SeccompAction::Allow,\n        EventFd::new(EFD_NONBLOCK).unwrap(),\n        None,\n    )\n    .unwrap();\n    let queue_data = &bytes[..QUEUE_DATA_SIZE * QUEUE_NUM];\n    let mem_bytes = &bytes[QUEUE_DATA_SIZE * QUEUE_NUM..];\n    let mem = GuestMemoryMmap::from_ranges(&[(GuestAddress(0), MEM_SIZE)]).unwrap();\n    if mem.write_slice(mem_bytes, GuestAddress(0 as u64)).is_err() {\n        return;\n    }\n    let guest_memory = GuestMemoryAtomic::new(mem);\n    let mut queues = setup_virt_queues(\n        &[\n            &queue_data[..QUEUE_DATA_SIZE].try_into().unwrap(),\n            &queue_data[QUEUE_DATA_SIZE..QUEUE_DATA_SIZE * 2]\n                .try_into()\n                .unwrap(),\n            &queue_data[QUEUE_DATA_SIZE * 2..QUEUE_DATA_SIZE * 3]\n                .try_into()\n                .unwrap(),\n        ],\n        0,\n    );\n    let inflate_q = queues.remove(0);\n    let inflate_evt = EventFd::new(0).unwrap();\n    let inflate_queue_evt = unsafe { EventFd::from_raw_fd(libc::dup(inflate_evt.as_raw_fd())) };\n    let deflate_q = queues.remove(0);\n    let deflate_evt = EventFd::new(0).unwrap();\n    let deflate_queue_evt = unsafe { EventFd::from_raw_fd(libc::dup(deflate_evt.as_raw_fd())) };\n    let reporting_q = queues.remove(0);\n    let reporting_evt = EventFd::new(0).unwrap();\n    let reporting_queue_evt = unsafe { EventFd::from_raw_fd(libc::dup(reporting_evt.as_raw_fd())) };\n    inflate_queue_evt.write(1).unwrap();\n    deflate_queue_evt.write(1).unwrap();\n    reporting_queue_evt.write(1).unwrap();\n    balloon\n        .activate(\n            guest_memory,\n            Arc::new(NoopVirtioInterrupt {}),\n            vec![\n                (0, inflate_q, inflate_evt),\n                (1, deflate_q, deflate_evt),\n                (2, reporting_q, reporting_evt),\n            ],\n        )\n        .ok();\n    balloon.wait_for_epoll_threads();\n}"}
{"test_id": "rust-bakery-nom/rust-bakery-nom-869f897/tests-gen/fuzz_arithmetic.inputs.rs::test_33", "code": "fn factor(i: &str) -> IResult<&str, Expr> {\n  alt((\n    map(\n      map_res(delimited(multispace, digit, multispace), FromStr::from_str),\n      Expr::Value,\n    ),\n    parens,\n  ))(i)\n}", "test": "fn test_33() {\n  let data = [10, 113, 178];\n  reset();\n  let temp = match str::from_utf8(data) {\n    Ok(v) => factor(v),\n    Err(e) => factor(\"2\"),\n  };\n}"}
{"test_id": "image-rs-image-gif/image-rs-image-gif-80fd8c0/tests-gen/decode.inputs.rs::test_26", "code": "fn try_decode (data : & [u8]) -> Result < () , gif :: DecodingError > { let mut reader = gif :: Decoder :: new (data) ? ; while let Some (_) = reader . read_next_frame () ? { } Ok (()) }", "test": "fn test_26() {\n    let data = [72];\n    let _ = try_decode(data);\n}"}
{"test_id": "BurntSushi-memchr/BurntSushi-memchr-f3fde7a/tests-gen/memrmem.inputs.rs::test_54", "code": "pub fn count(&self, haystack: &[u8]) -> usize {\n        // SAFETY: All of our pointers are derived directly from a borrowed\n        // slice, which is guaranteed to be valid.\n        unsafe {\n            let start = haystack.as_ptr();\n            let end = start.add(haystack.len());\n            self.count_raw(start, end)\n        }\n    }", "test": "fn test_54() {\n    let data = [144, 83, 144, 83];\n    if data.len() < 2 {\n        return;\n    }\n    let split = std::cmp::max(data[0] as usize, 1) % data.len() as usize;\n    let (needle, haystack) = (&data[..split], &data[split..]);\n    memmem::rfind_iter(haystack, needle).count();\n}"}
{"test_id": "image-rs-image/image-rs-image-e5580ec/tests-gen/fuzzer_script_tga.inputs.rs::test_35", "code": "fn decode(encoded: &[u8]) -> Vec<u8> {\n        let decoder = JpegDecoder::new(Cursor::new(encoded)).expect(\"Could not decode image\");\n\n        let mut decoded = vec![0; decoder.total_bytes() as usize];\n        decoder\n            .read_image(&mut decoded)\n            .expect(\"Could not decode image\");\n        decoded\n    }", "test": "fn test_35() {\n    let data = [0, 0];\n    let _ = decode(data);\n}"}
{"test_id": "BurntSushi-memchr/BurntSushi-memchr-f3fde7a/tests-gen/memrchr3.inputs.rs::test_11", "code": "fn count(self) -> usize {\n        self.it.count(|s, e| {\n            // SAFETY: We rely on our generic iterator to return valid start\n            // and end pointers.\n            unsafe { count_raw(self.needle1, s, e) }\n        })\n    }", "test": "fn test_11() {\n    let data = [95, 10, 32];\n    if data.len() < 3 {\n        return;\n    }\n    memchr3_iter(data[0], data[1], data[2], &data[3..]).rev().count();\n}"}
{"test_id": "image-rs-image-png/image-rs-image-png-e113d76/tests-gen/roundtrip.inputs.rs::test_96", "code": "fn encode_png < 'a > (width : u8 , filter : u8 , compression : u8 , color_type : u8 , raw_bit_depth : u8 , raw_palette : & 'a [u8] , data : & 'a [u8]) -> Option < (& 'a [u8] , Vec < u8 >) > { let width = width as u32 ; if width == 0 { return None } ; let filter = FilterType :: from_u8 (filter) ? ; let bit_depth = BitDepth :: from_u8 (raw_bit_depth) ? ; let max_palette_length = 3 * u32 :: pow (2 , raw_bit_depth as u32) as usize ; let mut palette = raw_palette ; let color_type = ColorType :: from_u8 (color_type) ? ; if let ColorType :: Indexed = color_type { if raw_palette . len () > max_palette_length { palette = & raw_palette [.. max_palette_length] ; } } let compression = match compression { 0 => png :: Compression :: Default , 1 => png :: Compression :: Fast , 2 => png :: Compression :: Best , 3 => png :: Compression :: Huffman , 4 => png :: Compression :: Rle , _ => return None , } ; let bytes_per_row = raw_row_length_from_width (bit_depth , color_type , width) - 1 ; let height = data . len () / bytes_per_row ; let total_bytes = bytes_per_row * height ; let data_to_encode = & data [.. total_bytes] ; let mut output : Vec < u8 > = Vec :: new () ; { let mut encoder = png :: Encoder :: new (& mut output , width , height as u32) ; encoder . set_depth (bit_depth) ; encoder . set_color (color_type) ; encoder . set_filter (filter) ; encoder . set_compression (compression) ; if let ColorType :: Indexed = color_type { encoder . set_palette (palette) } let mut writer = encoder . write_header () . ok () ? ; writer . write_image_data (data_to_encode) . expect (\"Encoding failed\") ; } Some ((data_to_encode , output)) }", "test": "fn test_96() {\n    let data = (10, 32, 80, 0, 10, [], []);\n    if let Some((raw, encoded)) =\n        encode_png(data.0, data.1, data.2, data.3, data.4, &data.5, &data.6)\n    {\n        let (_info, raw_decoded) = decode_png(&encoded);\n        let raw_decoded = &raw_decoded[..raw.len()];\n        assert_eq!(raw, raw_decoded);\n    }\n}"}
{"test_id": "quinn-rs-quinn/quinn-rs-quinn-83e4f46/tests-gen/packet.inputs.rs::test_99", "code": "fn to_vec(params: &TransportParameters) -> Vec<u8> {\n    let mut bytes = Vec::new();\n    params.write(&mut bytes);\n    bytes\n}", "test": "fn test_99() {\n    let data = PacketParams {\n        local_cid_len: 3,\n        buf: b\"\\x1a\\0\",\n        grease_quic_bit: false,\n    };\n    let len = data.buf.len();\n    let supported_versions = DEFAULT_SUPPORTED_VERSIONS.to_vec();\n    if let Ok(decoded) = PartialDecode::new(\n        data.buf,\n        data.local_cid_len,\n        &supported_versions,\n        data.grease_quic_bit,\n    ) {\n        match decoded.1 {\n            Some(x) => assert_eq!(len, decoded.0.len() + x.len()),\n            None => assert_eq!(len, decoded.0.len()),\n        }\n    }\n}"}
{"test_id": "BurntSushi-memchr/BurntSushi-memchr-f3fde7a/tests-gen/memchr.inputs.rs::test_78", "code": "fn count(self) -> usize {\n        self.it.count(|s, e| {\n            // SAFETY: We rely on our generic iterator to return valid start\n            // and end pointers.\n            unsafe { count_raw(self.needle1, s, e) }\n        })\n    }", "test": "fn test_78() {\n    let data = [3];\n    if data.is_empty() {\n        return;\n    }\n    memchr_iter(data[0], &data[1..]).count();\n}"}
{"test_id": "BurntSushi-memchr/BurntSushi-memchr-f3fde7a/tests-gen/memrchr.inputs.rs::test_7", "code": "fn count(self) -> usize {\n        self.it.count(|s, e| {\n            // SAFETY: We rely on our generic iterator to return valid start\n            // and end pointers.\n            unsafe { count_raw(self.needle1, s, e) }\n        })\n    }", "test": "fn test_7() {\n    let data = [24];\n    if data.is_empty() {\n        return;\n    }\n    memchr_iter(data[0], &data[1..]).rev().count();\n}"}
{"test_id": "dtolnay-semver/dtolnay-semver-750f0ac/tests-gen/sort_version.inputs.rs::test_21", "code": "fn three_versions(bytes: &[u8]) -> Option<[Version; 3]> {\n    let mut inputs = str::from_utf8(bytes).ok()?.split(' ');\n    Some([\n        Version {\n            major: 0,\n            minor: 0,\n            patch: 0,\n            pre: inputs.next().map(Prerelease::new)?.ok()?,\n            build: inputs.next().map(BuildMetadata::new)?.ok()?,\n        },\n        Version {\n            major: 0,\n            minor: 0,\n            patch: 0,\n            pre: inputs.next().map(Prerelease::new)?.ok()?,\n            build: inputs.next().map(BuildMetadata::new)?.ok()?,\n        },\n        Version {\n            major: 0,\n            minor: 0,\n            patch: 0,\n            pre: inputs.next().map(Prerelease::new)?.ok()?,\n            build: inputs.next().map(BuildMetadata::new)?.ok()?,\n        },\n    ])\n}", "test": "fn test_21() {\n    let bytes = [35, 199, 10, 58];\n    if let Some([a, b, c]) = three_versions(bytes) {\n        if a < b && b < c && c < a {\n            panic!(\"{0} < {1} < {2} < {0}\", a, b, c);\n        }\n    }\n}"}
{"test_id": "BurntSushi-memchr/BurntSushi-memchr-f3fde7a/tests-gen/memchr2.inputs.rs::test_59", "code": "fn count(self) -> usize {\n        self.it.count(|s, e| {\n            // SAFETY: We rely on our generic iterator to return valid start\n            // and end pointers.\n            unsafe { count_raw(self.needle1, s, e) }\n        })\n    }", "test": "fn test_59() {\n    let data = [10, 148, 10, 175];\n    if data.len() < 2 {\n        return;\n    }\n    memchr2_iter(data[0], data[1], &data[2..]).count();\n}"}
{"test_id": "image-rs-image/image-rs-image-e5580ec/tests-gen/fuzzer_script_exr.inputs.rs::test_14", "code": "fn roundtrip (bytes : & [u8]) -> ImageResult < () > { # [doc = \" Read the file from the specified path into an `Rgba32FImage`.\"] fn read_as_rgba_byte_image (read : impl Read + Seek) -> ImageResult < (u32 , u32 , Vec < u8 >) > { let mut decoder = OpenExrDecoder :: with_alpha_preference (read , Some (true)) ? ; match usize :: try_from (decoder . total_bytes ()) { Ok (decoded_size) if decoded_size <= 256 * 1024 * 1024 => { decoder . set_limits (Limits :: default ()) ? ; let (width , height) = decoder . dimensions () ; let mut buffer = vec ! [0 ; decoded_size] ; decoder . read_image (buffer . as_mut_slice ()) ? ; Ok ((width , height , buffer)) } _ => Err (image :: ImageError :: Limits (image :: error :: LimitError :: from_kind (image :: error :: LimitErrorKind :: InsufficientMemory ,) ,)) , } } # [doc = \" Write an `Rgba32FImage`.\"] # [doc = \" Assumes the writer is buffered. In most cases,\"] # [doc = \" you should wrap your writer in a `BufWriter` for best performance.\"] fn write_rgba_image (write : impl Write + Seek , (width , height , data) : & (u32 , u32 , Vec < u8 >) ,) -> ImageResult < () > { OpenExrEncoder :: new (write) . write_image (data . as_slice () , * width , * height , ColorType :: Rgba32F) } let decoded_image = read_as_rgba_byte_image (Cursor :: new (bytes)) ? ; let mut bytes = Vec :: with_capacity (bytes . len () + 20) ; write_rgba_image (Cursor :: new (& mut bytes) , & decoded_image) ? ; let redecoded_image = read_as_rgba_byte_image (Cursor :: new (bytes)) ? ; assert_eq ! (decoded_image , redecoded_image , \"image was valid but was not reproducible\") ; Ok (()) }", "test": "fn test_14() {\n    let data = [235, 10];\n    let _img = roundtrip(data);\n}"}
{"test_id": "cloud-hypervisor-cloud-hypervisor/cloud-hypervisor-cloud-hypervisor-db3a5f3/tests-gen/mem.inputs.rs::test_56", "code": "pub fn wait_for_epoll_threads(&mut self) {\n        self.common.wait_for_epoll_threads();\n    }", "test": "fn test_56() {\n    let bytes = [10];\n    if bytes.len() < VIRTIO_MEM_DATA_SIZE + QUEUE_DATA_SIZE + QUEUE_BYTES_SIZE\n        || bytes.len() > (VIRTIO_MEM_DATA_SIZE + QUEUE_DATA_SIZE + QUEUE_BYTES_SIZE + MEM_SIZE)\n    {\n        return;\n    }\n    let virtio_mem_data = &bytes[..VIRTIO_MEM_DATA_SIZE];\n    let queue_data = &bytes[VIRTIO_MEM_DATA_SIZE..VIRTIO_MEM_DATA_SIZE + QUEUE_DATA_SIZE];\n    let queue_bytes = &bytes[VIRTIO_MEM_DATA_SIZE + QUEUE_DATA_SIZE\n        ..VIRTIO_MEM_DATA_SIZE + QUEUE_DATA_SIZE + QUEUE_BYTES_SIZE];\n    let mem_bytes = &bytes[VIRTIO_MEM_DATA_SIZE + QUEUE_DATA_SIZE + QUEUE_BYTES_SIZE..];\n    let (mut virtio_mem, virtio_mem_region) =\n        create_dummy_virtio_mem(virtio_mem_data.try_into().unwrap());\n    let q = setup_virt_queue(queue_data.try_into().unwrap());\n    let mem =\n        GuestMemoryMmap::from_ranges(&[(GuestAddress(DESC_TABLE_ADDR), QUEUE_BYTES_SIZE)]).unwrap();\n    if mem\n        .write_slice(queue_bytes, GuestAddress(DESC_TABLE_ADDR))\n        .is_err()\n    {\n        return;\n    }\n    let mem = mem.insert_region(virtio_mem_region).unwrap();\n    if mem\n        .write_slice(mem_bytes, GuestAddress(VIRTIO_MEM_REGION_ADDRESS))\n        .is_err()\n    {\n        return;\n    }\n    let guest_memory = GuestMemoryAtomic::new(mem);\n    let evt = EventFd::new(0).unwrap();\n    let queue_evt = unsafe { EventFd::from_raw_fd(libc::dup(evt.as_raw_fd())) };\n    queue_evt.write(1).unwrap();\n    virtio_mem\n        .activate(\n            guest_memory,\n            Arc::new(NoopVirtioInterrupt {}),\n            vec![(0, q, evt)],\n        )\n        .ok();\n    virtio_mem.wait_for_epoll_threads();\n}"}
{"test_id": "winnow-rs-winnow/winnow-rs-winnow-9e88734/tests-gen/fuzz_arithmetic.inputs.rs::test_27", "code": "fn factor(i: &mut &str) -> PResult<Expr> {\n    delimited(\n        multispaces,\n        alt((digits.try_map(FromStr::from_str).map(Expr::Value), parens)),\n        multispaces,\n    )\n    .parse_next(i)\n}", "test": "fn test_27() {\n    let data = [0, 0, 0, 0];\n    reset();\n    let _ = match str::from_utf8(data) {\n        Ok(mut v) => factor(&mut v),\n        Err(_) => factor(&mut \"2\"),\n    };\n}"}
{"test_id": "cloud-hypervisor-cloud-hypervisor/cloud-hypervisor-cloud-hypervisor-db3a5f3/tests-gen/mem.inputs.rs::test_88", "code": "pub fn wait_for_epoll_threads(&mut self) {\n        self.common.wait_for_epoll_threads();\n    }", "test": "fn test_88() {\n    let bytes = [0, 0, 254, 251];\n    if bytes.len() < VIRTIO_MEM_DATA_SIZE + QUEUE_DATA_SIZE + QUEUE_BYTES_SIZE\n        || bytes.len() > (VIRTIO_MEM_DATA_SIZE + QUEUE_DATA_SIZE + QUEUE_BYTES_SIZE + MEM_SIZE)\n    {\n        return;\n    }\n    let virtio_mem_data = &bytes[..VIRTIO_MEM_DATA_SIZE];\n    let queue_data = &bytes[VIRTIO_MEM_DATA_SIZE..VIRTIO_MEM_DATA_SIZE + QUEUE_DATA_SIZE];\n    let queue_bytes = &bytes[VIRTIO_MEM_DATA_SIZE + QUEUE_DATA_SIZE\n        ..VIRTIO_MEM_DATA_SIZE + QUEUE_DATA_SIZE + QUEUE_BYTES_SIZE];\n    let mem_bytes = &bytes[VIRTIO_MEM_DATA_SIZE + QUEUE_DATA_SIZE + QUEUE_BYTES_SIZE..];\n    let (mut virtio_mem, virtio_mem_region) =\n        create_dummy_virtio_mem(virtio_mem_data.try_into().unwrap());\n    let q = setup_virt_queue(queue_data.try_into().unwrap());\n    let mem =\n        GuestMemoryMmap::from_ranges(&[(GuestAddress(DESC_TABLE_ADDR), QUEUE_BYTES_SIZE)]).unwrap();\n    if mem\n        .write_slice(queue_bytes, GuestAddress(DESC_TABLE_ADDR))\n        .is_err()\n    {\n        return;\n    }\n    let mem = mem.insert_region(virtio_mem_region).unwrap();\n    if mem\n        .write_slice(mem_bytes, GuestAddress(VIRTIO_MEM_REGION_ADDRESS))\n        .is_err()\n    {\n        return;\n    }\n    let guest_memory = GuestMemoryAtomic::new(mem);\n    let evt = EventFd::new(0).unwrap();\n    let queue_evt = unsafe { EventFd::from_raw_fd(libc::dup(evt.as_raw_fd())) };\n    queue_evt.write(1).unwrap();\n    virtio_mem\n        .activate(\n            guest_memory,\n            Arc::new(NoopVirtioInterrupt {}),\n            vec![(0, q, evt)],\n        )\n        .ok();\n    virtio_mem.wait_for_epoll_threads();\n}"}
{"test_id": "cloud-hypervisor-cloud-hypervisor/cloud-hypervisor-cloud-hypervisor-db3a5f3/tests-gen/cmos.inputs.rs::test_52", "code": "fn write(&mut self, _base: u64, offset: u64, data: &[u8]) -> Option<Arc<Barrier>> {\n        if data.len() != 1 {\n            warn!(\"Invalid write size on CMOS device: {}\", data.len());\n            return None;\n        }\n\n        match offset {\n            INDEX_OFFSET => self.index = data[0],\n            DATA_OFFSET => {\n                if self.index == 0x8f && data[0] == 0 {\n                    info!(\"CMOS reset\");\n                    self.reset_evt.write(1).unwrap();\n                    if let Some(vcpus_kill_signalled) = self.vcpus_kill_signalled.take() {\n                        // Spin until we are sure the reset_evt has been handled and that when\n                        // we return from the KVM_RUN we will exit rather than re-enter the guest.\n                        while !vcpus_kill_signalled.load(Ordering::SeqCst) {\n                            // This is more effective than thread::yield_now() at\n                            // avoiding a priority inversion with the VMM thread\n                            thread::sleep(std::time::Duration::from_millis(1));\n                        }\n                    }\n                } else {\n                    self.data[(self.index & INDEX_MASK) as usize] = data[0]\n                }\n            }\n            o => warn!(\"bad write offset on CMOS device: {}\", o),\n        };\n        None\n    }", "test": "fn test_52() {\n    let bytes = [2, 10];\n    if bytes.len() < 16 {\n        return;\n    }\n    let mut below_4g = [0u8; 8];\n    let mut above_4g = [0u8; 8];\n    below_4g.copy_from_slice(&bytes[0..8]);\n    above_4g.copy_from_slice(&bytes[8..16]);\n    let mut cmos = Cmos::new(\n        u64::from_le_bytes(below_4g),\n        u64::from_le_bytes(above_4g),\n        EventFd::new(EFD_NONBLOCK).unwrap(),\n        None,\n    );\n    let mut i = 16;\n    while i < bytes.len() {\n        let read = bytes.get(i).unwrap_or(&0) % 2 == 0;\n        i += 1;\n        if read {\n            let offset = (bytes.get(i).unwrap_or(&0) % 2) as u64;\n            i += 1;\n            let mut out_bytes = vec![0];\n            cmos.read(0, offset, &mut out_bytes);\n        } else {\n            let offset = (bytes.get(i).unwrap_or(&0) % 2) as u64;\n            i += 1;\n            let data = vec![*bytes.get(i).unwrap_or(&0)];\n            i += 1;\n            cmos.write(0, offset, &data);\n        }\n    }\n}"}
{"test_id": "rust-bio-rust-bio/rust-bio-rust-bio-319a0d8/tests-gen/banded_aligner.inputs.rs::test_86", "code": "fn validate_alignment_score(al: &Alignment, x: TextSlice, y: TextSlice, scoring: &Scoring<MatchParams>) -> bool {\n    use AlignmentOperation::*;\n    let path = al.path();\n    let mut score = 0;\n    if al.mode==AlignmentMode::Custom {\n        if al.xstart > 0 {\n            score += scoring.xclip_prefix;\n        }\n        if al.ystart > 0 {\n            score += scoring.yclip_prefix;\n        }\n        if al.xend < al.xlen {\n            score += scoring.xclip_suffix;\n        }\n        if al.yend < al.ylen {\n            score += scoring.yclip_suffix;\n        }\n    }\n    let mut last_op = None;\n    for (i, j, op) in path {\n        score += match op {\n            Match | Subst => scoring.match_fn.score(x[i-1], y[j-1]),\n            Del => if last_op==Some(Del) { scoring.gap_extend } else { scoring.gap_open + scoring.gap_extend },\n            Ins => if last_op==Some(Ins) { scoring.gap_extend } else { scoring.gap_open + scoring.gap_extend },\n            _ => 0,\n        };\n        last_op = Some(op);\n    }\n    al.score==score\n}", "test": "fn test_86() {\n    let data = [146];\n    if data.len() < 50 || data.len() > 300 {\n        return;\n    }\n    let (split_byte, data) = data.split_first().unwrap();\n    let (kmer_byte, data) = data.split_first().unwrap();\n    let (window_byte, data) = data.split_first().unwrap();\n    let (match_score_byte, data) = data.split_first().unwrap();\n    let (mismatch_score_byte, data) = data.split_first().unwrap();\n    let (gap_open_byte, data) = data.split_first().unwrap();\n    let (gap_extend_byte, data) = data.split_first().unwrap();\n    let (xclip_prefix_byte, data) = data.split_first().unwrap();\n    let (xclip_suffix_byte, data) = data.split_first().unwrap();\n    let (yclip_prefix_byte, data) = data.split_first().unwrap();\n    let (yclip_suffix_byte, data) = data.split_first().unwrap();\n    let alphabets = b\"ACGT\";\n    let v: Vec<_> = data\n        .iter()\n        .map(|i| alphabets[(*i as usize) % alphabets.len()])\n        .collect();\n    let kmer_len: usize = 5 + (*kmer_byte as usize) % 10;\n    let window_size: usize = 5 + (*window_byte as usize) % 10;\n    let split_pos: usize = min(data.len() - 1, max(*split_byte as usize, 1));\n    let match_score = 1 + (*match_score_byte as i32) % 5;\n    let mismatch_score = -((*mismatch_score_byte as i32) % 10);\n    let gap_open = -((*gap_open_byte as i32) % 20);\n    let gap_extend = -((*gap_extend_byte as i32) % 10);\n    let (x, y) = v.split_at(split_pos);\n    println!(\n        \"x: {}, y: {}, k: {}, w: {}, scoring ({}, {}, {}, {})\",\n        String::from_utf8(x.to_vec()).unwrap(),\n        String::from_utf8(y.to_vec()).unwrap(),\n        kmer_len,\n        window_size,\n        gap_open,\n        gap_extend,\n        match_score,\n        mismatch_score\n    );\n    let base_score = Scoring::from_scores(gap_open, gap_extend, match_score, mismatch_score);\n    {\n        println!(\n            \"Clip scores ({}, {}, {}, {})\",\n            xclip_prefix_byte, xclip_suffix_byte, yclip_prefix_byte, yclip_suffix_byte\n        );\n        let scoring = Scoring {\n            xclip_prefix: -(*xclip_prefix_byte as i32),\n            xclip_suffix: -(*xclip_suffix_byte as i32),\n            yclip_prefix: -(*yclip_prefix_byte as i32),\n            yclip_suffix: -(*yclip_suffix_byte as i32),\n            ..base_score.clone()\n        };\n        let mut b_aligner = banded::Aligner::with_scoring(scoring.clone(), kmer_len, window_size);\n        let b_alignment = b_aligner.custom(x, y);\n        assert!(validate_alignment_score(&b_alignment, x, y, &scoring));\n        let mut f_aligner = pairwise::Aligner::with_scoring(scoring.clone());\n        let f_alignment = f_aligner.custom(x, y);\n        assert!(validate_alignment_score(&f_alignment, x, y, &scoring));\n        let band_all_alignment = b_aligner.custom_with_matches(x, y, &Vec::new());\n        assert_eq!(band_all_alignment.score, f_alignment.score);\n    }\n    {\n        let scoring = Scoring {\n            xclip_prefix: 0,\n            xclip_suffix: 0,\n            yclip_suffix: 0,\n            ..base_score.clone()\n        };\n        let mut b_aligner = banded::Aligner::with_scoring(scoring.clone(), kmer_len, window_size);\n        let b_alignment = b_aligner.custom(x, y);\n        assert_eq!(b_alignment.ystart, 0);\n        assert!(validate_alignment_score(&b_alignment, x, y, &scoring));\n        let mut f_aligner = pairwise::Aligner::with_scoring(scoring.clone());\n        let f_alignment = f_aligner.custom(x, y);\n        assert_eq!(f_alignment.ystart, 0);\n        assert!(validate_alignment_score(&f_alignment, x, y, &scoring));\n        let band_all_alignment = b_aligner.custom_with_matches(x, y, &Vec::new());\n        assert_eq!(band_all_alignment.score, f_alignment.score);\n    }\n    {\n        let scoring = Scoring {\n            xclip_prefix: 0,\n            xclip_suffix: 0,\n            yclip_prefix: 0,\n            ..base_score.clone()\n        };\n        let mut b_aligner = banded::Aligner::with_scoring(scoring.clone(), kmer_len, window_size);\n        let b_alignment = b_aligner.custom(x, y);\n        assert_eq!(b_alignment.yend, b_alignment.ylen);\n        assert!(validate_alignment_score(&b_alignment, x, y, &scoring));\n        let mut f_aligner = pairwise::Aligner::with_scoring(scoring.clone());\n        let f_alignment = f_aligner.custom(x, y);\n        assert_eq!(f_alignment.yend, f_alignment.ylen);\n        assert!(validate_alignment_score(&f_alignment, x, y, &scoring));\n        let band_all_alignment = b_aligner.custom_with_matches(x, y, &Vec::new());\n        assert_eq!(band_all_alignment.score, f_alignment.score);\n    }\n    {\n        let scoring = Scoring {\n            xclip_suffix: 0,\n            yclip_prefix: 0,\n            yclip_suffix: 0,\n            ..base_score.clone()\n        };\n        let mut b_aligner = banded::Aligner::with_scoring(scoring.clone(), kmer_len, window_size);\n        let b_alignment = b_aligner.custom(x, y);\n        assert_eq!(b_alignment.xstart, 0);\n        assert!(validate_alignment_score(&b_alignment, x, y, &scoring));\n        let mut f_aligner = pairwise::Aligner::with_scoring(scoring.clone());\n        let f_alignment = f_aligner.custom(x, y);\n        assert_eq!(f_alignment.xstart, 0);\n        assert!(validate_alignment_score(&f_alignment, x, y, &scoring));\n        let band_all_alignment = b_aligner.custom_with_matches(x, y, &Vec::new());\n        assert_eq!(band_all_alignment.score, f_alignment.score);\n    }\n    {\n        let scoring = Scoring {\n            xclip_prefix: 0,\n            yclip_prefix: 0,\n            yclip_suffix: 0,\n            ..base_score.clone()\n        };\n        let mut b_aligner = banded::Aligner::with_scoring(scoring.clone(), kmer_len, window_size);\n        let b_alignment = b_aligner.custom(x, y);\n        assert_eq!(b_alignment.xend, b_alignment.xlen);\n        assert!(validate_alignment_score(&b_alignment, x, y, &scoring));\n        let mut f_aligner = pairwise::Aligner::with_scoring(scoring.clone());\n        let f_alignment = f_aligner.custom(x, y);\n        assert_eq!(f_alignment.xend, f_alignment.xlen);\n        assert!(validate_alignment_score(&f_alignment, x, y, &scoring));\n        let band_all_alignment = b_aligner.custom_with_matches(x, y, &Vec::new());\n        assert_eq!(band_all_alignment.score, f_alignment.score);\n    }\n    {\n        let mut aligner = banded::Aligner::with_scoring(base_score.clone(), kmer_len, window_size);\n        let alignment = aligner.local(x, y);\n        assert!(alignment.score >= 0);\n        assert!(validate_alignment_score(&alignment, x, y, &base_score));\n        let alignment = aligner.semiglobal(x, y);\n        assert_eq!(alignment.xstart, 0);\n        assert_eq!(alignment.xend, alignment.xlen);\n        assert!(validate_alignment_score(&alignment, x, y, &base_score));\n        let alignment = aligner.global(x, y);\n        assert_eq!(alignment.xstart, 0);\n        assert_eq!(alignment.xend, alignment.xlen);\n        assert_eq!(alignment.ystart, 0);\n        assert_eq!(alignment.yend, alignment.ylen);\n        assert!(validate_alignment_score(&alignment, x, y, &base_score));\n    }\n    {\n        let mut aligner = pairwise::Aligner::with_scoring(base_score.clone());\n        let alignment = aligner.local(x, y);\n        assert!(alignment.score >= 0);\n        assert!(validate_alignment_score(&alignment, x, y, &base_score));\n        let alignment = aligner.semiglobal(x, y);\n        assert_eq!(alignment.xstart, 0);\n        assert_eq!(alignment.xend, alignment.xlen);\n        assert!(validate_alignment_score(&alignment, x, y, &base_score));\n        let alignment = aligner.global(x, y);\n        assert_eq!(alignment.xstart, 0);\n        assert_eq!(alignment.xend, alignment.xlen);\n        assert_eq!(alignment.ystart, 0);\n        assert_eq!(alignment.yend, alignment.ylen);\n        assert!(validate_alignment_score(&alignment, x, y, &base_score));\n    }\n}"}
{"test_id": "zip-rs-zip/zip-rs-zip-ed187d6/tests-gen/fuzz_read.inputs.rs::test_28", "code": "fn decompress_all (data : & [u8]) -> Result < () , Box < dyn std :: error :: Error > > { let reader = std :: io :: Cursor :: new (data) ; let mut zip = zip :: ZipArchive :: new (reader) ? ; for i in 0 .. zip . len () { let mut file = zip . by_index (i) ? ; if file . size () < 1 << 20 { let _ = std :: io :: copy (& mut file , & mut std :: io :: sink ()) ; } } Ok (()) }", "test": "fn test_28() {\n    let data = [136, 10];\n    let _ = decompress_all(data);\n}"}
{"test_id": "BurntSushi-memchr/BurntSushi-memchr-f3fde7a/tests-gen/memrmem.inputs.rs::test_25", "code": "pub fn count(&self, haystack: &[u8]) -> usize {\n        // SAFETY: All of our pointers are derived directly from a borrowed\n        // slice, which is guaranteed to be valid.\n        unsafe {\n            let start = haystack.as_ptr();\n            let end = start.add(haystack.len());\n            self.count_raw(start, end)\n        }\n    }", "test": "fn test_25() {\n    let data = [8, 10];\n    if data.len() < 2 {\n        return;\n    }\n    let split = std::cmp::max(data[0] as usize, 1) % data.len() as usize;\n    let (needle, haystack) = (&data[..split], &data[split..]);\n    memmem::rfind_iter(haystack, needle).count();\n}"}
{"test_id": "gimli-rs-gimli/gimli-rs-gimli-3947879/tests-gen/eh_frame.inputs.rs::test_28", "code": "pub fn next_row(&mut self) -> Result<Option<(&LineProgramHeader<R, Offset>, &LineRow)>> {\n        // Perform any reset that was required after copying the previous row.\n        self.row.reset(self.program.header());\n\n        loop {\n            // Split the borrow here, rather than calling `self.header()`.\n            match self.instructions.next_instruction(self.program.header()) {\n                Err(err) => return Err(err),\n                Ok(None) => return Ok(None),\n                Ok(Some(instruction)) => {\n                    if self.row.execute(instruction, &mut self.program) {\n                        if self.row.tombstone {\n                            // Perform any reset that was required for the tombstone row.\n                            // Normally this is done when `next_row` is called again, but for\n                            // tombstones we loop immediately.\n                            self.row.reset(self.program.header());\n                        } else {\n                            return Ok(Some((self.header(), &self.row)));\n                        }\n                    }\n                    // Fall through, parse the next instruction, and see if that\n                    // yields a row.\n                }\n            }\n        }\n    }", "test": "fn test_28() {\n    let eh_frame = [41];\n    let eh_frame = EhFrame::new(&eh_frame, LittleEndian);\n    let mut ctx = Box::new(UnwindContext::new());\n    let bases = BaseAddresses::default()\n        .set_eh_frame(0)\n        .set_eh_frame_hdr(0)\n        .set_text(0)\n        .set_got(0);\n    let mut entries = eh_frame.entries(&bases);\n    while let Ok(Some(entry)) = entries.next() {\n        match entry {\n            CieOrFde::Cie(_) => continue,\n            CieOrFde::Fde(partial) => {\n                if let Ok(fde) = partial.parse(EhFrame::cie_from_offset) {\n                    if let Ok(mut table) = fde.rows(&eh_frame, &bases, &mut ctx) {\n                        while let Ok(Some(_row)) = table.next_row() {\n                            continue;\n                        }\n                    }\n                }\n            }\n        };\n    }\n}"}
{"test_id": "BurntSushi-memchr/BurntSushi-memchr-f3fde7a/tests-gen/memrmem.inputs.rs::test_81", "code": "pub fn count(&self, haystack: &[u8]) -> usize {\n        // SAFETY: All of our pointers are derived directly from a borrowed\n        // slice, which is guaranteed to be valid.\n        unsafe {\n            let start = haystack.as_ptr();\n            let end = start.add(haystack.len());\n            self.count_raw(start, end)\n        }\n    }", "test": "fn test_81() {\n    let data = [238, 0, 144];\n    if data.len() < 2 {\n        return;\n    }\n    let split = std::cmp::max(data[0] as usize, 1) % data.len() as usize;\n    let (needle, haystack) = (&data[..split], &data[split..]);\n    memmem::rfind_iter(haystack, needle).count();\n}"}
{"test_id": "uutils-coreutils/uutils-coreutils-73b7c46/tests-gen/fuzz_parse_size.inputs.rs::test_66", "code": "pub fn parse_size(size: &str) -> Result<u64, ParseSizeError> {\n    Parser::default().parse(size)\n}", "test": "fn test_66() {\n    let data = [10, 0];\n    if let Ok(s) = std::str::from_utf8(data) {\n        _ = parse_size(s);\n    }\n}"}
{"test_id": "quinn-rs-quinn/quinn-rs-quinn-83e4f46/tests-gen/packet.inputs.rs::test_32", "code": "fn to_vec(params: &TransportParameters) -> Vec<u8> {\n    let mut bytes = Vec::new();\n    params.write(&mut bytes);\n    bytes\n}", "test": "fn test_32() {\n    let data = PacketParams {\n        local_cid_len: 11,\n        buf: b\"\\x12\",\n        grease_quic_bit: false,\n    };\n    let len = data.buf.len();\n    let supported_versions = DEFAULT_SUPPORTED_VERSIONS.to_vec();\n    if let Ok(decoded) = PartialDecode::new(\n        data.buf,\n        data.local_cid_len,\n        &supported_versions,\n        data.grease_quic_bit,\n    ) {\n        match decoded.1 {\n            Some(x) => assert_eq!(len, decoded.0.len() + x.len()),\n            None => assert_eq!(len, decoded.0.len()),\n        }\n    }\n}"}
{"test_id": "cloud-hypervisor-cloud-hypervisor/cloud-hypervisor-cloud-hypervisor-db3a5f3/tests-gen/balloon.inputs.rs::test_64", "code": "pub fn wait_for_epoll_threads(&mut self) {\n        self.common.wait_for_epoll_threads();\n    }", "test": "fn test_64() {\n    let bytes = [79];\n    if bytes.len() < QUEUE_DATA_SIZE * QUEUE_NUM\n        || bytes.len() > (QUEUE_DATA_SIZE * QUEUE_NUM + MEM_SIZE)\n    {\n        return;\n    }\n    let mut balloon = virtio_devices::Balloon::new(\n        \"fuzzer_balloon\".to_owned(),\n        BALLOON_SIZE,\n        true,\n        true,\n        SeccompAction::Allow,\n        EventFd::new(EFD_NONBLOCK).unwrap(),\n        None,\n    )\n    .unwrap();\n    let queue_data = &bytes[..QUEUE_DATA_SIZE * QUEUE_NUM];\n    let mem_bytes = &bytes[QUEUE_DATA_SIZE * QUEUE_NUM..];\n    let mem = GuestMemoryMmap::from_ranges(&[(GuestAddress(0), MEM_SIZE)]).unwrap();\n    if mem.write_slice(mem_bytes, GuestAddress(0 as u64)).is_err() {\n        return;\n    }\n    let guest_memory = GuestMemoryAtomic::new(mem);\n    let mut queues = setup_virt_queues(\n        &[\n            &queue_data[..QUEUE_DATA_SIZE].try_into().unwrap(),\n            &queue_data[QUEUE_DATA_SIZE..QUEUE_DATA_SIZE * 2]\n                .try_into()\n                .unwrap(),\n            &queue_data[QUEUE_DATA_SIZE * 2..QUEUE_DATA_SIZE * 3]\n                .try_into()\n                .unwrap(),\n        ],\n        0,\n    );\n    let inflate_q = queues.remove(0);\n    let inflate_evt = EventFd::new(0).unwrap();\n    let inflate_queue_evt = unsafe { EventFd::from_raw_fd(libc::dup(inflate_evt.as_raw_fd())) };\n    let deflate_q = queues.remove(0);\n    let deflate_evt = EventFd::new(0).unwrap();\n    let deflate_queue_evt = unsafe { EventFd::from_raw_fd(libc::dup(deflate_evt.as_raw_fd())) };\n    let reporting_q = queues.remove(0);\n    let reporting_evt = EventFd::new(0).unwrap();\n    let reporting_queue_evt = unsafe { EventFd::from_raw_fd(libc::dup(reporting_evt.as_raw_fd())) };\n    inflate_queue_evt.write(1).unwrap();\n    deflate_queue_evt.write(1).unwrap();\n    reporting_queue_evt.write(1).unwrap();\n    balloon\n        .activate(\n            guest_memory,\n            Arc::new(NoopVirtioInterrupt {}),\n            vec![\n                (0, inflate_q, inflate_evt),\n                (1, deflate_q, deflate_evt),\n                (2, reporting_q, reporting_evt),\n            ],\n        )\n        .ok();\n    balloon.wait_for_epoll_threads();\n}"}
{"test_id": "image-rs-image-gif/image-rs-image-gif-80fd8c0/tests-gen/decode.inputs.rs::test_28", "code": "fn try_decode (data : & [u8]) -> Result < () , gif :: DecodingError > { let mut reader = gif :: Decoder :: new (data) ? ; while let Some (_) = reader . read_next_frame () ? { } Ok (()) }", "test": "fn test_28() {\n    let data = [72, 42];\n    let _ = try_decode(data);\n}"}
{"test_id": "rustls-rustls/rustls-rustls-ae583bd/tests-gen/client.inputs.rs::test_43", "code": "pub fn process_new_packets(&mut self) -> Result<IoState, Error> {\n        match self {\n            Self::Client(conn) => conn.process_new_packets(),\n            Self::Server(conn) => conn.process_new_packets(),\n        }\n    }", "test": "fn test_43() {\n    let data = [\n        60, 163, 123, 195, 235, 239, 210, 8, 24, 172, 63, 119, 216, 233, 1, 8, 101, 21, 150, 10,\n        75, 36, 243, 45, 241, 243, 191, 254, 221, 133, 11, 136, 82, 64, 50, 222, 221, 48, 184, 48,\n        183, 155, 228, 204, 32, 177, 209, 139, 86, 15, 190, 118, 233, 91, 146, 124, 132, 218, 50,\n        73, 110, 3, 2, 1, 2, 2, 3, 2, 58, 146, 48, 13, 6, 9, 42, 134, 72, 134, 247, 13, 1, 1, 11,\n        5, 0, 48, 66, 49, 11, 48, 9, 6, 3, 85, 4, 6, 19, 2, 85, 83, 49, 22, 48, 20, 6, 3, 85, 4,\n        10, 19, 13, 71, 101, 111, 84, 114, 117, 115, 116, 32, 73, 110, 99, 46, 49, 27, 48, 25, 6,\n        3, 85, 4, 3, 19, 18, 71, 101, 111, 84, 114, 117, 115, 116, 32, 71, 108, 111, 98, 97, 108,\n        32, 67, 65, 48, 30, 23, 13, 49, 53, 48, 52, 48, 49, 48, 48, 48, 48, 48, 48, 90, 23, 13, 49,\n        55, 49, 50, 51, 49, 50, 51, 53, 57, 53, 57, 90, 48, 73, 49, 11, 48, 9, 6, 3, 85, 4, 6, 19,\n        2, 85, 83, 49, 19, 48, 17, 6, 3, 85, 4, 10, 19, 10, 71, 111, 111, 103, 108, 101, 32, 73,\n        110, 99, 49, 37, 48, 35, 6, 3, 85, 4, 3, 19, 28, 71, 111, 111, 103, 108, 101, 32, 73, 110,\n        116, 101, 114, 110, 101, 116, 32, 65, 117, 116, 104, 111, 114, 105, 116, 121, 32, 71, 50,\n        48, 130, 1, 34, 48, 13, 6, 9, 42, 134, 72, 134, 247, 13, 1, 1, 1, 5, 0, 3, 130, 1, 15, 0,\n        48, 130, 1, 10, 2, 130, 1, 1, 0, 156, 42, 4, 119, 92, 216, 80, 145, 58, 6, 163, 130, 224,\n        216, 80, 72, 188, 137, 63, 241, 25, 112, 26, 136, 70, 126, 224, 143, 197, 241, 137, 206,\n        33, 238, 90, 254, 97, 13, 183, 50, 68, 137, 160, 116, 11, 83, 79, 85, 164, 206, 130, 98,\n        149, 238, 235, 89, 95, 198, 225, 5, 128, 18, 196, 94, 148, 63, 188, 91, 72, 56, 244, 83,\n        247, 36, 230, 251, 145, 233, 21, 196, 207, 244, 83, 13, 244, 74, 252, 159, 84, 222, 125,\n        190, 160, 107, 111, 135, 192, 208, 80, 31, 40, 48, 3, 64, 218, 8, 115, 81, 108, 127, 255,\n        58, 60, 167, 55, 6, 142, 189, 75, 17, 4, 235, 125, 36, 222, 230, 249, 252, 49, 113, 251,\n        148, 213, 96, 243, 46, 74, 175, 66, 210, 203, 234, 196, 106, 26, 178, 204, 83, 221, 21, 75,\n        139, 31, 200, 25, 97, 31, 205, 157, 168, 62, 99, 43, 132, 53, 105, 101, 132, 200, 25, 197,\n        70, 34, 248, 83, 149, 190, 227, 128, 74, 16, 198, 42, 236, 186, 151, 32, 17, 199, 57, 153,\n        16, 4, 160, 240, 97, 122, 149, 37, 140, 78, 82, 117, 226, 182, 237, 8, 202, 20, 252, 206,\n        34, 106, 179, 78, 207, 70, 3, 151, 151, 3, 126, 192, 177, 222, 123, 175, 69, 51, 207, 186,\n        62, 113, 183, 222, 244, 37, 37, 194, 13, 53, 137, 157, 157, 251, 14, 17, 121, 137, 30, 55,\n        197, 175, 142, 114, 105, 2, 3, 1, 0, 1, 163, 129, 231, 48, 129, 228, 48, 31, 6, 3, 85, 29,\n        35, 4, 24, 48, 22, 128, 20, 192, 122, 152, 104, 141, 137, 251, 171, 5, 100, 12, 17, 125,\n        170, 125, 101, 184, 202, 204, 78, 48, 29, 6, 3, 85, 29, 14, 4, 22, 4, 20, 74, 221, 6, 22,\n        27, 188, 246, 104, 181, 118, 245, 129, 182, 187, 98, 26, 186, 90, 129, 47, 48, 14, 6, 3,\n        85, 29, 15, 1, 1, 255, 4, 4, 3, 2, 1, 6, 48, 46, 6, 8, 43, 6, 1, 5, 5, 7, 1, 1, 4, 34, 48,\n        32, 48, 30, 6, 8, 43, 6, 1, 5, 5, 7, 48, 1, 134, 18, 104, 116, 116, 112, 58, 47, 47, 103,\n        46, 115, 121, 109, 99, 100, 46, 99, 111, 109, 48, 18, 6, 3, 85, 29, 19, 1, 1, 255, 4, 8,\n        48, 6, 1, 1, 255, 2, 1, 0, 48, 53, 6, 3, 85, 29, 31, 4, 46, 48, 44, 48, 42, 160, 40, 160,\n        38, 134, 36, 104, 116, 116, 112, 58, 47, 47, 103, 46, 115, 121, 109, 99, 98, 46, 99, 111,\n        109, 47, 99, 114, 108, 115, 47, 103, 116, 103, 108, 111, 98, 97, 108, 46, 99, 114, 108, 48,\n        23, 6, 3, 85, 29, 32, 4, 16, 48, 14, 48, 12, 6, 10, 43, 6, 1, 4, 1, 214, 121, 2, 5, 1, 48,\n        13, 6, 9, 42, 134, 72, 134, 247, 13, 1, 1, 11, 5, 0, 3, 130, 1, 1, 0, 8, 78, 4, 167, 128,\n        127, 16, 22, 67, 94, 2, 173, 215, 66, 128, 244, 176, 142, 210, 174, 179, 235, 17, 125, 144,\n        132, 24, 125, 231, 144, 21, 251, 73, 127, 168, 153, 5, 145, 187, 122, 201, 214, 60, 55, 24,\n        9, 154, 182, 199, 146, 32, 7, 53, 51, 9, 228, 40, 99, 114, 13, 180, 224, 50, 156, 135, 152,\n        196, 27, 118, 137, 103, 193, 80, 88, 176, 19, 170, 19, 26, 27, 50, 165, 190, 234, 17, 149,\n        76, 72, 99, 73, 233, 153, 93, 32, 55, 204, 254, 42, 105, 81, 22, 149, 75, 169, 222, 73,\n        130, 192, 16, 112, 244, 44, 243, 55, 25, 81, 131, 16, 97, 164, 233, 188, 6, 13, 197, 35,\n        180, 215, 5, 222, 218, 153, 211, 204, 140, 43, 16, 66, 70, 37, 188, 245, 142, 91, 181, 176,\n        50, 210, 247, 126, 210, 254, 254, 56, 58, 202, 187, 189, 198, 247, 74, 189, 80, 143, 231,\n        208, 22, 188, 255, 184, 79, 239, 101, 153, 38, 185, 223, 119, 141, 143, 241, 93, 236, 72,\n        153, 185, 119, 215, 135, 123, 202, 66, 204, 12, 243, 246, 48, 43, 154, 83, 0, 100, 146,\n        157, 230, 233, 147, 209, 45, 106, 170, 231, 113, 162, 217, 136, 142, 254, 179, 55, 216,\n        202, 171, 112, 33, 169, 211, 27, 69, 131, 131, 186, 210, 79, 186, 244, 223, 25, 153, 0,\n        204, 17, 150, 183, 82, 33, 40, 165, 178, 214, 212, 185, 215, 118, 116, 192, 121, 23, 111,\n        14, 148, 118, 17, 195, 123, 98, 96, 227, 160, 203, 98, 44, 10, 17, 73, 153, 8, 104, 225,\n        126, 28, 62, 50, 167, 146, 93, 246, 148, 222, 56, 235, 205, 189, 222, 186, 74, 242, 195,\n        91, 54, 135, 245, 245, 139, 235, 233, 43, 125, 89, 87, 250, 179, 228, 228, 166, 141, 238,\n        53, 245, 80, 235, 32, 142, 81, 180, 51, 107, 117, 28, 197, 62, 15, 107, 40, 167, 63, 119,\n        215, 239, 4, 53, 26, 254, 55, 153, 8, 89, 253, 156, 98, 25, 51, 54, 205, 255, 183, 37, 76,\n        39, 153, 92, 240, 79, 178, 157, 153, 205, 242, 91, 133, 204, 26, 107, 7, 105, 59, 186, 37,\n        217, 61, 171, 159, 165, 68, 171, 10, 91, 29, 236, 136, 188, 153, 202, 63, 99, 47, 38, 246,\n        92, 156, 111, 100, 241, 142, 19, 98, 204, 171, 188, 6, 5, 117, 91, 47, 16, 227, 100, 43,\n        77, 56, 70, 231, 10, 161, 170, 195, 142, 34, 154, 173, 32, 78, 93, 39, 56, 185, 38, 249,\n        59, 219, 48, 15, 106, 245, 187, 64, 82, 47, 144, 134, 130, 154, 54, 87, 70, 166, 72, 234,\n        147, 121, 227, 24, 77, 204, 246, 109, 49, 57, 104, 114, 128, 35, 40, 34, 113, 75, 116, 91,\n        6, 43, 28, 123, 123, 43, 180, 82, 237, 1, 250, 108, 126, 244, 40, 186, 108, 59, 59, 1, 232,\n        50, 14, 248, 26, 158, 112, 110, 245, 133, 40, 44, 38, 130, 187, 34, 190, 179, 134, 98, 54,\n        71, 52, 151, 64, 70, 253, 247, 48, 201, 189, 117, 28, 18, 6, 111, 239, 64, 248, 250, 231,\n        85, 20, 133, 210, 238, 207, 121, 136, 37, 127, 16, 135, 191, 150, 42, 174, 107, 239, 142,\n        40, 108, 34, 66, 36, 233, 104, 52, 137, 12, 49, 17, 219, 213, 165, 132, 160, 153, 6, 175,\n        133, 172, 78, 183, 236, 228, 81, 164, 11, 152, 93, 194, 212, 117, 179, 84, 175, 251, 73,\n        172, 77, 252, 207, 166, 218, 20, 168, 183, 0, 205, 40, 203, 120, 130, 87, 123, 61, 140,\n        237, 224, 132, 178, 103, 208, 78, 140, 40, 13, 123, 9, 47, 68, 171, 162, 116, 160, 87, 84,\n        2, 14, 84, 180, 242, 73, 38, 223, 191, 114, 45, 232, 208, 252, 180, 95, 17, 205, 199, 106,\n        169, 123, 181, 212, 225, 41, 91, 38, 81, 23, 176, 105, 40, 194, 246, 174, 78, 30, 205, 204,\n        147, 9, 172, 98, 65, 188, 225, 83, 245, 167, 203, 99, 201, 207, 126, 192, 173, 250, 25, 28,\n        101, 164, 135, 191, 186, 203, 199, 243, 35, 13, 187, 204, 61, 180, 2, 24, 198, 83, 6, 147,\n        212, 139, 186, 164, 180, 193, 193, 241, 96, 217, 160, 58, 117, 133, 132, 97, 135, 174, 24,\n        49, 123, 161, 202, 191, 10, 20, 238, 223, 213, 107, 139, 69, 58, 239, 56, 147, 15, 71, 130,\n        244, 112, 179, 219, 45, 136, 223, 145, 5, 100, 70, 194, 104, 130, 39, 47, 144, 40, 179,\n        162, 166, 177, 238, 10, 122, 181, 88, 128, 242, 228, 211, 145, 239, 231, 38, 58, 56, 75,\n        175, 203, 162, 198, 220, 58, 152, 213, 24, 223, 20, 41, 227, 102, 59, 122, 94, 95, 197, 33,\n        196, 28, 96, 184, 228, 76, 194, 197, 105, 5, 26, 90, 174, 79, 27, 218, 172, 92, 44, 155,\n        33, 236, 30, 190, 13, 110, 13, 60, 176, 93, 14, 91, 214, 255, 254, 88, 103, 178, 198, 121,\n        186, 64, 227, 162, 168, 215, 191, 237, 199, 111, 169, 109, 130, 15, 42, 46, 103, 111, 111,\n        103, 108, 101, 97, 112, 105, 115, 46, 99, 110, 130, 20, 42, 46, 103, 111, 111, 103, 108,\n        101, 99, 111, 109, 109, 101, 114, 99, 101, 46, 99, 111, 109, 130, 17, 42, 46, 103, 111,\n        111, 103, 108, 101, 118, 105, 100, 101, 111, 46, 99, 111, 109, 130, 12, 42, 46, 103, 115,\n        116, 97, 116, 105, 99, 46, 99, 110, 130, 13, 42, 46, 103, 115, 116, 97, 116, 105, 99, 46,\n        99, 111, 109, 130, 10, 42, 46, 103, 118, 116, 49, 46, 99, 111, 109, 130, 10, 42, 46, 103,\n        118, 116, 50, 46, 99, 111, 109, 130, 20, 42, 46, 109, 101, 116, 114, 105, 99, 46, 103, 115,\n        116, 97, 116, 105, 99, 46, 99, 111, 109, 130, 12, 42, 46, 117, 114, 99, 104, 105, 110, 46,\n        99, 111, 109, 130, 16, 42, 46, 117, 114, 108, 46, 103, 111, 111, 103, 108, 101, 46, 99,\n        111, 109, 130, 22, 42, 46, 121, 111, 117, 116, 117, 98, 101, 45, 110, 111, 99, 111, 111,\n        107, 105, 101, 46, 99, 111, 109, 130, 13, 42, 46, 121, 111, 117, 116, 117, 98, 101, 46, 99,\n        111, 109, 130, 22, 42, 46, 121, 111, 117, 116, 117, 98, 101, 101, 100, 117, 99, 97, 116,\n        105, 111, 110, 46, 99, 111, 109, 130, 11, 42, 46, 121, 116, 105, 109, 103, 46, 99, 111,\n        109, 130, 26, 97, 110, 100, 114, 111, 105, 100, 46, 99, 108, 105, 101, 110, 116, 115, 46,\n        103, 111, 111, 103, 108, 101, 46, 99, 111, 109, 130, 11, 97, 110, 100, 114, 111, 105, 100,\n        46, 99, 111, 109, 130, 27, 100, 101, 118, 101, 108, 111, 112, 101, 114, 46, 97, 110, 100,\n        114, 111, 105, 100, 46, 103, 111, 111, 103, 108, 101, 46, 99, 110, 130, 28, 100, 101, 118,\n        101, 108, 111, 112, 101, 114, 115, 46, 97, 110, 100, 114, 111, 105, 100, 46, 103, 111, 111,\n        103, 108, 101, 46, 99, 110, 130, 4, 103, 46, 99, 111, 130, 6, 103, 111, 111, 46, 103, 108,\n        130, 20, 103, 111, 111, 103, 108, 101, 45, 97, 110, 97, 108, 121, 116, 105, 99, 115, 46,\n        99, 111, 109, 130, 10, 103, 111, 111, 103, 108, 101, 46, 99, 111, 109, 130, 18, 103, 111,\n        111, 103, 108, 101, 99, 111, 109, 109, 101, 114, 99, 101, 46, 99, 111, 109, 130, 24, 115,\n        111, 117, 114, 99, 101, 46, 97, 110, 100, 114, 111, 105, 100, 46, 103, 111, 111, 103, 108,\n        101, 46, 99, 110, 130, 10, 117, 114, 99, 104, 105, 110, 46, 99, 111, 109, 130, 10, 119,\n        119, 119, 46, 103, 111, 111, 46, 103, 108, 130, 8, 121, 111, 117, 116, 117, 46, 98, 101,\n        130, 11, 121, 111, 117, 116, 117, 98, 101, 46, 99, 111, 109, 130, 20, 121, 111, 117, 116,\n        117, 98, 101, 101, 100, 117, 99, 97, 116, 105, 111, 110, 46, 99, 111, 109, 48, 104, 6, 8,\n        43, 6, 1, 5, 5, 7, 1, 1, 4, 92, 48, 90, 48, 43, 6, 8, 43, 6, 1, 5, 5, 7, 48, 2, 134, 31,\n        104, 116, 116, 112, 58, 47, 47, 112, 107, 105, 46, 103, 111, 111, 103, 108, 101, 46, 99,\n        111, 109, 47, 71, 73, 65, 71, 50, 46, 99, 114, 116, 48, 43, 6, 8, 43, 6, 1, 5, 5, 7, 48, 1,\n        134, 31, 104, 116, 116, 112, 58, 47, 47, 99, 108, 105, 101, 110, 116, 115, 49, 46, 103,\n        111, 111, 103, 108, 101, 46, 99, 111, 109, 47, 111, 99, 115, 112, 48, 29, 6, 3, 85, 29, 14,\n        4, 22, 4, 20, 253, 90, 18, 128, 11, 205, 4, 95, 242, 77, 89, 40, 3, 112, 35, 87, 25, 64,\n        248, 55, 48, 12, 6, 3, 85, 29, 19, 1, 1, 255, 4, 2, 48, 0, 48, 31, 6, 3, 85, 29, 35, 4, 24,\n        48, 22, 128, 20, 74, 221, 6, 22, 27, 188, 246, 104, 181, 118, 245, 129, 182, 187, 98, 26,\n        186, 90, 129, 47, 48, 33, 6, 3, 85, 29, 32, 4, 26, 48, 24, 48, 12, 6, 10, 43, 6, 1, 4, 1,\n        214, 121, 2, 5, 1, 48, 8, 6, 6, 103, 129, 12, 1, 2, 2, 48, 48, 6, 3, 85, 29, 31, 4, 41, 48,\n        39, 48, 37, 160, 35, 160, 33, 134, 31, 104, 116, 116, 112, 58, 47, 47, 112, 107, 105, 46,\n        103, 111, 111, 103, 108, 101, 46, 99, 111, 109, 47, 71, 73, 65, 71, 50, 46, 99, 114, 108,\n        48, 13, 6, 9, 42, 134, 72, 134, 247, 13, 1, 1, 11, 5, 0, 3, 130, 1, 1, 0, 33, 200, 169,\n        105, 206, 2, 155, 120, 189, 192, 51, 58, 117, 81, 58, 119, 84, 168, 232, 112, 67, 74, 178,\n        108, 140, 239, 140, 58, 241, 118, 5, 87, 151, 75, 62, 228, 100, 79, 253, 168, 208, 39, 111,\n        248, 15, 136, 208, 240, 106, 77, 117, 121, 178, 58, 88, 245, 179, 162, 251, 10, 71, 202,\n        197, 70, 144, 133, 162, 197, 128, 57, 111, 180, 163, 6, 63, 152, 48, 225, 133, 207, 156,\n        142, 147, 155, 164, 234, 150, 95, 194, 204, 36, 174, 11, 81, 8, 107, 127, 181, 132, 216,\n        230, 232, 29, 152, 1, 46, 152, 162, 185, 105, 229, 136, 245, 133, 63, 134, 92, 242, 217, 7,\n        26, 64, 132, 248, 126, 187, 114, 56, 192, 240, 70, 213, 140, 90, 19, 23, 33, 155, 220, 79,\n        93, 249, 252, 184, 190, 60, 45, 123, 246, 182, 204, 232, 45, 111, 214, 187, 247, 195, 215,\n        60, 88, 120, 12, 241, 0, 54, 189, 184, 200, 138, 56, 58, 15, 211, 62, 239, 220, 24, 224,\n        142, 159, 199, 102, 126, 9, 199, 212, 60, 163, 123, 195, 235, 239, 210, 8, 24, 172, 63,\n        119, 216, 233, 1, 8, 101, 21, 150, 10, 75, 36, 243, 45, 241, 243, 191, 254, 221, 133, 11,\n        136, 82, 64, 50, 222, 221, 48, 184, 48, 183, 155, 228, 204, 32, 177, 209, 139, 86, 15, 190,\n        118, 233, 91, 146, 124, 132, 218, 50, 73, 110, 152, 63, 196, 8, 66, 19, 171, 62, 0, 3, 244,\n        48, 130, 3, 240, 48, 130, 2, 216, 160, 3, 2, 1, 2, 2, 3, 2, 58, 146, 48, 13, 6, 9, 42, 134,\n        72, 134, 247, 13, 1, 1, 11, 5, 0, 48, 66, 49, 11, 48, 9, 6, 3, 85, 4, 6, 19, 2, 85, 83, 49,\n        22, 48, 20, 6, 3, 85, 4, 10, 19, 13, 71, 101, 111, 84, 114, 117, 115, 116, 32, 73, 110, 99,\n        46, 49, 27, 48, 25, 6, 3, 85, 4, 3, 19, 18, 71, 101, 111, 84, 114, 117, 115, 116, 32, 71,\n        108, 111, 98, 97, 108, 32, 67, 65, 48, 30, 23, 13, 49, 53, 48, 52, 48, 49, 48, 48, 48, 48,\n        48, 48, 90, 23, 13, 49, 55, 49, 50, 51, 49, 50, 51, 53, 57, 53, 57, 90, 48, 73, 49, 11, 48,\n        9, 6, 3, 85, 4, 6, 19, 2, 85, 83, 49, 19, 48, 17, 6, 3, 85, 4, 10, 19, 10, 71, 111, 111,\n        103, 108, 101, 32, 73, 110, 99, 49, 37, 48, 35, 6, 3, 85, 4, 3, 19, 28, 71, 111, 111, 103,\n        108, 101, 32, 73, 110, 116, 101, 114, 110, 101, 116, 32, 65, 117, 116, 104, 111, 114, 105,\n        116, 121, 32, 71, 50, 48, 130, 1, 34, 48, 13, 6, 9, 42, 134, 72, 134, 247, 13, 1, 1, 1, 5,\n        0, 3, 130, 1, 15, 0, 48, 130, 1, 10, 2, 130, 1, 1, 0, 156, 42, 4, 119, 92, 216, 80, 145,\n        58, 6, 163, 130, 224, 216, 80, 72, 188, 137, 63, 241, 25, 112, 26, 136, 70, 126, 224, 143,\n        197, 241, 137, 206, 33, 238, 90, 254, 97, 13, 183, 50, 68, 137, 160, 116, 11, 83, 79, 85,\n        164, 206, 130, 98, 149, 238, 235, 89, 95, 198, 225, 5, 128, 18, 196, 94, 148, 63, 188, 91,\n        72, 56, 244, 83, 247, 36, 230, 251, 145, 233, 21, 196, 207, 244, 83, 13, 244, 74, 252, 159,\n        84, 222, 125, 190, 160, 107, 111, 135, 192, 208, 80, 31, 40, 48, 3, 64, 218, 8, 115, 81,\n        108, 127, 255, 58, 60, 167, 55, 6, 142, 189, 75, 17, 4, 235, 125, 36, 222, 230, 249, 252,\n        49, 113, 251, 148, 213, 96, 243, 46, 74, 175, 66, 210, 203, 234, 196, 106, 26, 178, 204,\n        83, 221, 21, 75, 139, 31, 200, 25, 97, 31, 205, 157, 168, 62, 99, 43, 132, 53, 105, 101,\n        132, 200, 25, 197, 70, 34, 248, 83, 149, 190, 227, 128, 74, 16, 198, 42, 236, 186, 151, 32,\n        17, 199, 57, 153, 16, 4, 160, 240, 97, 122, 149, 37, 140, 78, 82, 117, 226, 182, 237, 8,\n        202, 20, 252, 206, 34, 106, 179, 78, 207, 70, 3, 151, 151, 3, 126, 192, 177, 222, 123, 175,\n        69, 51, 207, 186, 62, 113, 183, 222, 244, 37, 37, 194, 13, 53, 137, 157, 157, 251, 14, 17,\n        121, 137, 30, 55, 197, 175, 142, 114, 105, 2, 3, 1, 0, 1, 163, 129, 231, 48, 129, 228, 48,\n        31, 6, 3, 85, 29, 35, 4, 24, 48, 22, 128, 20, 192, 122, 152, 104, 141, 137, 251, 171, 5,\n        100, 12, 17, 125, 170, 125, 101, 184, 202, 204, 78, 48, 29, 6, 3, 85, 29, 14, 4, 22, 4, 20,\n        74, 221, 6, 22, 27, 188, 246, 104, 181, 118, 245, 129, 182, 187, 98, 26, 186, 90, 129, 47,\n        48, 14, 6, 3, 85, 29, 15, 1, 1, 255, 4, 4, 3, 2, 1, 6, 48, 46, 6, 8, 43, 6, 1, 5, 5, 7, 1,\n        1, 4, 34, 48, 32, 48, 30, 6, 8, 43, 6, 1, 5, 5, 7, 48, 1, 134, 18, 104, 116, 116, 112, 58,\n        47, 47, 103, 46, 115, 121, 109, 99, 100, 46, 99, 111, 109, 48, 18, 6, 3, 85, 29, 19, 1, 1,\n        255, 4, 8, 48, 6, 1, 1, 255, 2, 1, 0, 48, 53, 6, 3, 85, 29, 31, 4, 46, 48, 44, 48, 42, 160,\n        40, 160, 38, 134, 36, 104, 116, 116, 112, 58, 47, 47, 103, 46, 115, 121, 109, 99, 98, 46,\n        99, 111, 109, 47, 99, 114, 108, 115, 47, 103, 116, 103, 108, 111, 98, 97, 108, 46, 99, 114,\n        108, 48, 23, 6, 3, 85, 29, 32, 4, 16, 48, 14, 48, 12, 6, 10, 43, 6, 1, 4, 1, 214, 121, 2,\n        5, 1, 48, 13, 6, 9, 42, 134, 72, 134, 247, 13, 1, 1, 11, 5, 0, 3, 130, 1, 1, 0, 8, 78, 4,\n        167, 128, 127, 16, 22, 67, 94, 2, 173, 215, 66, 128, 244, 176, 142, 210, 174, 179, 235, 17,\n        125, 144, 132, 24, 125, 231, 144, 21, 251, 73, 127, 168, 153, 5, 145, 187, 122, 201, 214,\n        60, 55, 24, 9, 154, 182, 199, 146, 32, 7, 53, 51, 9, 228, 40, 99, 114, 13, 180, 224, 50,\n        156, 135, 152, 196, 27, 118, 137, 103, 193, 80, 88, 176, 19, 170, 19, 26, 27, 50, 165, 190,\n        234, 17, 149, 76, 72, 99, 73, 233, 153, 93, 32, 55, 204, 254, 42, 105, 81, 22, 149, 75,\n        169, 222, 73, 130, 192, 16, 112, 244, 44, 243, 236, 188, 36, 36, 208, 78, 172, 165, 217,\n        94, 30, 109, 146, 193, 167, 172, 72, 53, 129, 249, 229, 228, 156, 101, 105, 205, 135, 164,\n        65, 80, 63, 46, 87, 165, 145, 81, 18, 88, 14, 140, 9, 161, 172, 122, 164, 18, 165, 39, 243,\n        154, 16, 151, 125, 85, 3, 6, 247, 102, 88, 95, 95, 100, 225, 171, 93, 109, 165, 57, 72,\n        117, 152, 76, 41, 90, 58, 141, 211, 43, 202, 156, 85, 4, 191, 244, 230, 20, 213, 128, 172,\n        38, 237, 23, 137, 166, 147, 108, 92, 164, 204, 184, 240, 102, 142, 100, 227, 125, 154, 226,\n        0, 179, 73, 199, 228, 10, 170, 221, 91, 131, 199, 112, 144, 70, 78, 190, 208, 219, 89, 150,\n        108, 46, 245, 22, 54, 222, 113, 204, 1, 194, 18, 193, 33, 198, 22, 0, 3, 129, 48, 130, 3,\n        125, 48, 130, 2, 230, 160, 3, 2, 1, 2, 2, 3, 18, 187, 230, 48, 13, 6, 9, 42, 134, 72, 134,\n        247, 13, 1, 1, 5, 5, 0, 48, 78, 49, 11, 48, 9, 6, 3, 85, 4, 6, 19, 2, 85, 83, 49, 16, 48,\n        14, 6, 3, 85, 4, 10, 19, 7, 69, 113, 117, 105, 102, 97, 120, 49, 45, 48, 43, 6, 3, 85, 4,\n        11, 19, 36, 69, 113, 117, 105, 102, 97, 120, 32, 83, 101, 99, 117, 114, 101, 32, 67, 101,\n        114, 116, 105, 102, 105, 99, 97, 116, 101, 32, 65, 117, 116, 104, 111, 114, 105, 116, 121,\n        48, 30, 23, 13, 48, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 6, 3, 85, 4, 10, 19, 10, 71, 111, 111, 103, 108,\n        101, 32, 73, 110, 99, 49, 37, 48, 35, 6, 3, 85, 4, 3, 19, 28, 71, 111, 111, 103, 108, 101,\n        32, 73, 110, 116, 101, 114, 110, 101, 116, 32, 65, 117, 116, 104, 111, 114, 105, 116, 121,\n        32, 71, 50, 48, 130, 1, 34, 48, 13, 6, 9, 42, 134, 72, 134, 247, 13, 1, 1, 1, 5, 0, 3, 130,\n        1, 15, 0, 48, 130, 1, 10, 2, 130, 1, 1, 0, 156, 42, 4, 119, 92, 216, 80, 145, 58, 6, 163,\n        130, 224, 216, 80, 72, 188, 137, 63, 241, 25, 112, 26, 136, 70, 126, 224, 143, 197, 241,\n        137, 206, 33, 238, 90, 254, 97, 13, 183, 50, 68, 137, 160, 116, 11, 83, 79, 85, 164, 206,\n        130, 98, 149, 238, 235, 89, 95, 198, 225, 5, 128, 18, 196, 94, 148, 63, 188, 91, 72, 56,\n        244, 83, 247, 36, 230, 251, 145, 233, 21, 196, 207, 244, 83, 13, 244, 74, 252, 159, 84,\n        222, 125, 190, 160, 107, 111, 135, 192, 208, 80, 31, 40, 48, 3, 64, 218, 8, 115, 81, 108,\n        127, 255, 58, 60, 167, 55, 6, 142, 189, 75, 17, 4, 235, 125, 36, 222, 230, 249, 252, 49,\n        113, 251, 148, 213, 96, 243, 46, 74, 175, 66, 210, 203, 234, 196, 106, 26, 178, 204, 83,\n        221, 21, 75, 139, 31, 200, 25, 97, 31, 205, 157, 168, 62, 99, 43, 132, 53, 105, 101, 132,\n        200, 25, 197, 70, 34, 248, 83, 149, 190, 227, 128, 74, 16, 198, 42, 236, 186, 151, 32, 17,\n        199, 57, 153, 16, 4, 160, 240, 97, 122, 149, 37, 140, 78, 82, 117, 226, 182, 237, 8, 202,\n        20, 252, 206, 34, 106, 179, 78, 207, 70, 3, 151, 151, 3, 126, 192, 177, 222, 123, 175, 69,\n        51, 207, 186, 62, 113, 183, 222, 244, 37, 37, 194, 13, 53, 137, 157, 157, 251, 14, 17, 121,\n        137, 30, 55, 197, 175, 142, 114, 105, 2, 3, 1, 0, 1, 163, 129, 231, 48, 129, 228, 48, 31,\n        6, 3, 85, 29, 35, 4, 24, 48, 22, 128, 20, 192, 122, 152, 104, 141, 137, 251, 171, 5, 100,\n        12, 17, 125, 170, 125, 101, 184, 202, 204, 78, 48, 29, 6, 3, 85, 29, 14, 4, 22, 4, 20, 74,\n        221, 6, 22, 27, 188, 246, 104, 181, 118, 245, 129, 182, 187, 98, 26, 186, 90, 129, 47, 48,\n        14, 6, 3, 85, 29, 15, 1, 1, 255, 4, 4, 3, 2, 1, 6, 48, 46, 6, 8, 43, 6, 1, 5, 5, 7, 1, 1,\n        4, 34, 48, 32, 48, 30, 6, 8, 43, 6, 1, 5, 5, 7, 48, 1, 134, 18, 104, 116, 116, 112, 58, 47,\n        47, 103, 46, 115, 121, 109, 99, 100, 46, 99, 111, 109, 48, 18, 6, 3, 85, 29, 19, 1, 1, 255,\n        4, 8, 48, 6, 1, 1, 255, 2, 1, 0, 48, 53, 6, 3, 85, 29, 31, 4, 46, 48, 44, 48, 42, 160, 40,\n        160, 38, 134, 36, 104, 116, 116, 112, 58, 47, 47, 103, 46, 115, 121, 109, 99, 98, 46, 99,\n        111, 109, 47, 99, 114, 108, 115, 47, 103, 116, 103, 108, 111, 98, 97, 108, 46, 99, 114,\n        108, 48, 23, 6, 3, 85, 29, 32, 4, 16, 48, 14, 48, 12, 6, 10, 43, 6, 1, 4, 1, 214, 121, 2,\n        5, 1, 48, 13, 6, 9, 42, 134, 72, 134, 247, 13, 1, 1, 11, 5, 0, 3, 130, 1, 1, 0, 8, 78, 4,\n        167, 128, 127, 16, 22, 67, 94, 2, 173, 215, 66, 128, 244, 176, 142, 210, 174, 179, 235, 17,\n        125, 144, 132, 24, 125, 231, 144, 21, 251, 73, 127, 168, 153, 5, 145, 187, 122, 201, 214,\n        60, 55, 24, 9, 154, 182, 199, 146, 32, 7, 53, 51, 9, 228, 40, 99, 114, 13, 180, 224, 50,\n        156, 135, 152, 196, 27, 118, 137, 103, 193, 80, 88, 176, 19, 170, 19, 26, 27, 50, 165, 190,\n        234, 17, 149, 76, 72, 99, 73, 233, 153, 93, 32, 55, 204, 254, 42, 105, 81, 22, 149, 75,\n        169, 222, 73, 130, 192, 16, 112, 244, 44, 243, 236, 188, 36, 36, 208, 78, 172, 165, 217,\n        94, 30, 109, 146, 193, 167, 172, 72, 53, 129, 249, 229, 228, 156, 101, 105, 205, 135, 164,\n        65, 80, 63, 46, 87, 165, 145, 81, 18, 88, 14, 140, 9, 161, 172, 122, 164, 18, 165, 39, 243,\n        154, 16, 151, 125, 85, 3, 6, 247, 102, 88, 95, 95, 100, 225, 171, 93, 109, 165, 57, 72,\n        117, 152, 76, 41, 90, 58, 141, 211, 43, 202, 156, 85, 4, 191, 244, 230, 20, 213, 128, 172,\n        38, 237, 23, 137, 166, 147, 108, 92, 164, 204, 184, 240, 102, 142, 100, 227, 125, 154, 226,\n        0, 179, 73, 199, 228, 10, 170, 221, 91, 131, 199, 112, 144, 70, 78, 190, 208, 219, 89, 150,\n        108, 46, 245, 22, 54, 222, 113, 204, 1, 194, 18, 193, 33, 198, 22, 0, 3, 129, 48, 130, 3,\n        125, 48, 130, 2, 230, 160, 3, 2, 1, 2, 2, 3, 18, 187, 230, 48, 13, 6, 9, 42, 134, 72, 134,\n        247, 13, 1, 1, 5, 5, 0, 48, 78, 49, 11, 48, 9, 6, 3, 85, 4, 6, 19, 2, 85, 83, 49, 16, 48,\n        14, 6, 3, 85, 4, 10, 19, 7, 69, 113, 117, 105, 102, 97, 120, 49, 45, 48, 43, 6, 3, 85, 4,\n        11, 19, 36, 69, 113, 117, 105, 102, 97, 120, 32, 83, 101, 99, 117, 114, 101, 32, 67, 101,\n        114, 116, 105, 102, 105, 99, 97, 116, 101, 32, 65, 117, 116, 104, 111, 114, 105, 116, 121,\n        48, 30, 23, 13, 48, 50, 48, 53, 50, 49, 48, 52, 48, 48, 48, 48, 90, 23, 13, 49, 56, 48, 56,\n        50, 49, 48, 52, 48, 48, 48, 48, 90, 48, 66, 49, 11, 48, 9, 6, 3, 85, 4, 6, 19, 2, 85, 83,\n        49, 22, 48, 20, 6, 3, 85, 4, 10, 19, 13, 71, 101, 111, 84, 114, 117, 115, 116, 32, 73, 110,\n        99, 46, 49, 27, 48, 25, 6, 3, 85, 4, 3, 19, 18, 71, 101, 111, 84, 114, 117, 115, 116, 32,\n        71, 108, 111, 98, 97, 108, 32, 67, 65, 48, 130, 1, 34, 48, 13, 6, 9, 42, 134, 72, 134, 247,\n        13, 1, 1, 1, 5, 0, 3, 130, 1, 15, 0, 48, 130, 1, 10, 2, 130, 1, 1, 0, 218, 204, 24, 99, 48,\n        253, 244, 23, 35, 26, 86, 126, 91, 223, 60, 108, 56, 228, 113, 183, 120, 145, 212, 188,\n        161, 216, 76, 248, 168, 67, 182, 3, 233, 77, 33, 7, 8, 136, 218, 88, 47, 102, 57, 41, 189,\n        5, 120, 139, 157, 56, 232, 5, 183, 106, 126, 113, 164, 230, 196, 96, 166, 176, 239, 128,\n        228, 137, 40, 15, 158, 37, 214, 237, 131, 243, 173, 166, 145, 199, 152, 201, 66, 24, 53,\n        20, 157, 173, 152, 70, 146, 46, 79, 202, 241, 135, 67, 193, 22, 149, 87, 45, 80, 239, 137,\n        45, 128, 122, 87, 173, 242, 238, 95, 107, 210, 0, 141, 185, 20, 248, 20, 21, 53, 217, 192,\n        70, 163, 123, 114, 200, 145, 191, 201, 85, 43, 205, 208, 151, 62, 156, 38, 100, 204, 223,\n        206, 131, 25, 113, 202, 78, 230, 212, 213, 123, 169, 25, 205, 85, 222, 200, 236, 210, 94,\n        56, 83, 229, 92, 79, 140, 45, 254, 80, 35, 54, 252, 102, 230, 203, 142, 164, 57, 25, 0,\n        183, 149, 2, 57, 145, 11, 14, 254, 56, 46, 209, 29, 5, 154, 246, 77, 62, 111, 15, 7, 29,\n        175, 44, 30, 143, 96, 57, 226, 250, 54, 83, 19, 57, 212, 94, 38, 43, 219, 61, 168, 20, 189,\n        50, 235, 24, 3, 40, 82, 4, 113, 229, 171, 51, 61, 225, 56, 187, 7, 54, 132, 98, 156, 121,\n        234, 22, 48, 244, 95, 192, 43, 232, 113, 107, 228, 249, 2, 3, 1, 0, 1, 163, 129, 240, 48,\n        129, 237, 48, 31, 6, 3, 85, 29, 35, 4, 24, 48, 22, 128, 20, 72, 230, 104, 249, 43, 210,\n        178, 149, 215, 71, 216, 35, 32, 16, 79, 51, 152, 144, 159, 212, 48, 29, 6, 3, 85, 29, 14,\n        4, 22, 4, 20, 192, 122, 152, 104, 141, 137, 251, 171, 5, 100, 12, 17, 125, 170, 125, 101,\n        184, 202, 204, 78, 48, 15, 6, 3, 85, 29, 19, 1, 1, 255, 4, 5, 48, 3, 1, 1, 255, 48, 14, 6,\n        3, 85, 29, 15, 1, 1, 255, 4, 4, 3, 2, 1, 6, 48, 58, 6, 3, 85, 29, 31, 4, 51, 48, 49, 48,\n        47, 160, 45, 160, 43, 134, 41, 104, 116, 116, 112, 58, 47, 47, 99, 114, 108, 46, 103, 101,\n        111, 116, 114, 117, 115, 116, 46, 99, 111, 109, 47, 99, 114, 108, 115, 47, 115, 101, 99,\n        117, 114, 101, 99, 97, 46, 99, 114, 108, 48, 78, 6, 3, 0, 0, 0, 255, 0, 0, 0, 0, 0, 0, 0,\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 85, 4, 10, 19, 10, 71, 111, 111, 103, 108, 101, 32, 73, 110,\n        99, 49, 37, 48, 35, 6, 3, 85, 4, 3, 19, 28, 71, 111, 111, 103, 108, 101, 32, 73, 110, 116,\n        101, 114, 110, 101, 116, 32, 65, 117, 116, 104, 111, 114, 105, 116, 121, 32, 71, 50, 48,\n        130, 1, 34, 48, 13, 6, 9, 42, 134, 72, 134, 247, 13, 1, 1, 1, 5, 0, 3, 130, 1, 15, 0, 48,\n        130, 1, 10, 2, 130, 1, 1, 0, 156, 42, 4, 119, 92, 216, 80, 145, 58, 6, 163, 130, 224, 216,\n        80, 72, 188, 137, 63, 241, 25, 112, 26, 136, 70, 126, 224, 143, 197, 241, 137, 206, 33,\n        238, 90, 254, 97, 13, 183, 50, 68, 137, 160, 116, 11, 83, 79, 85, 164, 206, 130, 98, 149,\n        238, 235, 89, 95, 198, 225, 5, 128, 18, 196, 94, 148, 63, 188, 91, 72, 56, 244, 83, 247,\n        36, 230, 251, 145, 233, 21, 196, 207, 244, 83, 13, 244, 74, 252, 159, 84, 222, 125, 190,\n        160, 107, 111, 135, 192, 208, 80, 31, 40, 48, 3, 64, 218, 8, 115, 81, 108, 127, 255, 58,\n        60, 167, 55, 6, 142, 189, 75, 17, 4, 235, 125, 36, 222, 230, 249, 252, 49, 113, 251, 148,\n        213, 96, 243, 46, 74, 175, 66, 210, 203, 234, 196, 106, 26, 178, 204, 83, 221, 21, 75, 139,\n        31, 200, 25, 97, 31, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    ];\n    let root_store = RootCertStore::empty();\n    let config = Arc::new(\n        ClientConfig::builder()\n            .with_safe_defaults()\n            .with_root_certificates(root_store)\n            .with_no_client_auth(),\n    );\n    let example_com = \"example.com\".try_into().unwrap();\n    let mut client = ClientConnection::new(config, example_com).unwrap();\n    let _ = client.read_tls(&mut io::Cursor::new(data));\n    let _ = client.process_new_packets();\n}"}
{"test_id": "cloud-hypervisor-cloud-hypervisor/cloud-hypervisor-cloud-hypervisor-db3a5f3/tests-gen/rng.inputs.rs::test_40", "code": "pub fn wait_for_epoll_threads(&mut self) {\n        self.common.wait_for_epoll_threads();\n    }", "test": "fn test_40() {\n    let bytes = [8];\n    if bytes.len() < (QUEUE_DATA_SIZE + QUEUE_BYTES_SIZE)\n        || bytes.len() > (QUEUE_DATA_SIZE + QUEUE_BYTES_SIZE + MEM_SIZE)\n    {\n        return;\n    }\n    let mut rng = virtio_devices::Rng::new(\n        \"fuzzer_rng\".to_owned(),\n        \"/dev/urandom\",\n        false,\n        SeccompAction::Allow,\n        EventFd::new(EFD_NONBLOCK).unwrap(),\n        None,\n    )\n    .unwrap();\n    let queue_data = &bytes[..QUEUE_DATA_SIZE];\n    let queue_bytes = &bytes[QUEUE_DATA_SIZE..QUEUE_DATA_SIZE + QUEUE_BYTES_SIZE];\n    let mem_bytes = &bytes[QUEUE_DATA_SIZE + QUEUE_BYTES_SIZE..];\n    let q = setup_virt_queue(queue_data.try_into().unwrap());\n    let mem = GuestMemoryMmap::from_ranges(&[\n        (GuestAddress(0), MEM_SIZE),\n        (GuestAddress(DESC_TABLE_ADDR), QUEUE_BYTES_SIZE),\n    ])\n    .unwrap();\n    if mem\n        .write_slice(queue_bytes, GuestAddress(DESC_TABLE_ADDR))\n        .is_err()\n    {\n        return;\n    }\n    if mem.write_slice(mem_bytes, GuestAddress(0 as u64)).is_err() {\n        return;\n    }\n    let guest_memory = GuestMemoryAtomic::new(mem);\n    let evt = EventFd::new(0).unwrap();\n    let queue_evt = unsafe { EventFd::from_raw_fd(libc::dup(evt.as_raw_fd())) };\n    queue_evt.write(1).unwrap();\n    rng.activate(\n        guest_memory,\n        Arc::new(NoopVirtioInterrupt {}),\n        vec![(0, q, evt)],\n    )\n    .ok();\n    rng.wait_for_epoll_threads();\n}"}
{"test_id": "BurntSushi-memchr/BurntSushi-memchr-f3fde7a/tests-gen/memchr2.inputs.rs::test_3", "code": "fn count(self) -> usize {\n        self.it.count(|s, e| {\n            // SAFETY: We rely on our generic iterator to return valid start\n            // and end pointers.\n            unsafe { count_raw(self.needle1, s, e) }\n        })\n    }", "test": "fn test_3() {\n    let data = [10];\n    if data.len() < 2 {\n        return;\n    }\n    memchr2_iter(data[0], data[1], &data[2..]).count();\n}"}
{"test_id": "bodil-im-rs/bodil-im-rs-2afaf54/tests-gen/ordset.inputs.rs::test_55", "code": "pub fn remove<BA>(&mut self, a: &BA) -> Option<A>\n    where\n        BA: Hash + Eq + ?Sized,\n        A: Borrow<BA>,\n    {\n        let root = PoolRef::make_mut(&self.pool.0, &mut self.root);\n        let result = root.remove(&self.pool.0, hash_key(&*self.hasher, a), 0, a);\n        if result.is_some() {\n            self.size -= 1;\n        }\n        result.map(|v| v.0)\n    }", "test": "fn test_55() {\n    let actions = [Insert(47244640255)];\n    let mut set = OrdSet::new();\n    let mut nat = NatSet::new();\n    for action in actions {\n        match action {\n            Action::Insert(value) => {\n                let len = nat.len() + if nat.contains(&value) { 0 } else { 1 };\n                nat.insert(value);\n                set.insert(value);\n                assert_eq!(len, set.len());\n            }\n            Action::Remove(value) => {\n                let len = nat.len() - if nat.contains(&value) { 1 } else { 0 };\n                nat.remove(&value);\n                set.remove(&value);\n                assert_eq!(len, set.len());\n            }\n        }\n        assert_eq!(nat.len(), set.len());\n        assert_eq!(OrdSet::from(nat.clone()), set);\n    }\n}"}
{"test_id": "zip-rs-zip/zip-rs-zip-ed187d6/tests-gen/fuzz_read.inputs.rs::test_11", "code": "fn decompress_all (data : & [u8]) -> Result < () , Box < dyn std :: error :: Error > > { let reader = std :: io :: Cursor :: new (data) ; let mut zip = zip :: ZipArchive :: new (reader) ? ; for i in 0 .. zip . len () { let mut file = zip . by_index (i) ? ; if file . size () < 1 << 20 { let _ = std :: io :: copy (& mut file , & mut std :: io :: sink ()) ; } } Ok (()) }", "test": "fn test_11() {\n    let data = [10];\n    let _ = decompress_all(data);\n}"}
{"test_id": "BurntSushi-memchr/BurntSushi-memchr-f3fde7a/tests-gen/memrchr3.inputs.rs::test_70", "code": "fn count(self) -> usize {\n        self.it.count(|s, e| {\n            // SAFETY: We rely on our generic iterator to return valid start\n            // and end pointers.\n            unsafe { count_raw(self.needle1, s, e) }\n        })\n    }", "test": "fn test_70() {\n    let data = [96, 96, 10];\n    if data.len() < 3 {\n        return;\n    }\n    memchr3_iter(data[0], data[1], data[2], &data[3..]).rev().count();\n}"}
{"test_id": "gimli-rs-gimli/gimli-rs-gimli-3947879/tests-gen/debug_line.inputs.rs::test_51", "code": "pub fn next_row(&mut self) -> Result<Option<(&LineProgramHeader<R, Offset>, &LineRow)>> {\n        // Perform any reset that was required after copying the previous row.\n        self.row.reset(self.program.header());\n\n        loop {\n            // Split the borrow here, rather than calling `self.header()`.\n            match self.instructions.next_instruction(self.program.header()) {\n                Err(err) => return Err(err),\n                Ok(None) => return Ok(None),\n                Ok(Some(instruction)) => {\n                    if self.row.execute(instruction, &mut self.program) {\n                        if self.row.tombstone {\n                            // Perform any reset that was required for the tombstone row.\n                            // Normally this is done when `next_row` is called again, but for\n                            // tombstones we loop immediately.\n                            self.row.reset(self.program.header());\n                        } else {\n                            return Ok(Some((self.header(), &self.row)));\n                        }\n                    }\n                    // Fall through, parse the next instruction, and see if that\n                    // yields a row.\n                }\n            }\n        }\n    }", "test": "fn test_51() {\n    let debug_line = [178, 39, 26, 91];\n    let debug_line = DebugLine::new(&debug_line, LittleEndian);\n    let offset = DebugLineOffset(0);\n    let address_size = 8;\n    if let Ok(program) = debug_line.program(offset, address_size, None, None) {\n        let mut rows = program.rows();\n        while let Ok(Some(row)) = rows.next_row() {\n            let _ = row;\n        }\n    }\n}"}
{"test_id": "zip-rs-zip/zip-rs-zip-ed187d6/tests-gen/fuzz_read.inputs.rs::test_96", "code": "fn decompress_all (data : & [u8]) -> Result < () , Box < dyn std :: error :: Error > > { let reader = std :: io :: Cursor :: new (data) ; let mut zip = zip :: ZipArchive :: new (reader) ? ; for i in 0 .. zip . len () { let mut file = zip . by_index (i) ? ; if file . size () < 1 << 20 { let _ = std :: io :: copy (& mut file , & mut std :: io :: sink ()) ; } } Ok (()) }", "test": "fn test_96() {\n    let data = [152, 49];\n    let _ = decompress_all(data);\n}"}
{"test_id": "image-rs-image-gif/image-rs-image-gif-80fd8c0/tests-gen/decode.inputs.rs::test_18", "code": "fn try_decode (data : & [u8]) -> Result < () , gif :: DecodingError > { let mut reader = gif :: Decoder :: new (data) ? ; while let Some (_) = reader . read_next_frame () ? { } Ok (()) }", "test": "fn test_18() {\n    let data = [31, 15, 10, 10];\n    let _ = try_decode(data);\n}"}
{"test_id": "quinn-rs-quinn/quinn-rs-quinn-83e4f46/tests-gen/streamid.inputs.rs::test_80", "code": "pub fn initiator(self) -> Side {\n        if self.0 & 0x1 == 0 {\n            Side::Client\n        } else {\n            Side::Server\n        }\n    }", "test": "fn test_80() {\n    let data = StreamIdParams {\n        side: Client,\n        dir: Uni,\n        index: 12514878488289586605,\n    };\n    let s = StreamId::new(data.side, data.dir, data.index);\n    assert_eq!(s.initiator(), data.side);\n    assert_eq!(s.dir(), data.dir);\n}"}
{"test_id": "bodil-im-rs/bodil-im-rs-2afaf54/tests-gen/hashset.inputs.rs::test_18", "code": "pub fn remove<BA>(&mut self, a: &BA) -> Option<A>\n    where\n        BA: Hash + Eq + ?Sized,\n        A: Borrow<BA>,\n    {\n        let root = PoolRef::make_mut(&self.pool.0, &mut self.root);\n        let result = root.remove(&self.pool.0, hash_key(&*self.hasher, a), 0, a);\n        if result.is_some() {\n            self.size -= 1;\n        }\n        result.map(|v| v.0)\n    }", "test": "fn test_18() {\n    let actions = [Insert(1881096169845686272)];\n    let mut set = HashSet::new();\n    let mut nat = NatSet::new();\n    for action in actions {\n        match action {\n            Action::Insert(value) => {\n                let len = nat.len() + if nat.contains(&value) { 0 } else { 1 };\n                nat.insert(value);\n                set.insert(value);\n                assert_eq!(len, set.len());\n            }\n            Action::Remove(value) => {\n                let len = nat.len() - if nat.contains(&value) { 1 } else { 0 };\n                nat.remove(&value);\n                set.remove(&value);\n                assert_eq!(len, set.len());\n            }\n        }\n        assert_eq!(nat.len(), set.len());\n        assert_eq!(HashSet::from(nat.clone()), set);\n    }\n}"}
{"test_id": "BurntSushi-memchr/BurntSushi-memchr-f3fde7a/tests-gen/memchr.inputs.rs::test_80", "code": "fn count(self) -> usize {\n        self.it.count(|s, e| {\n            // SAFETY: We rely on our generic iterator to return valid start\n            // and end pointers.\n            unsafe { count_raw(self.needle1, s, e) }\n        })\n    }", "test": "fn test_80() {\n    let data = [48, 48, 48, 48];\n    if data.is_empty() {\n        return;\n    }\n    memchr_iter(data[0], &data[1..]).count();\n}"}
{"test_id": "cloud-hypervisor-cloud-hypervisor/cloud-hypervisor-cloud-hypervisor-db3a5f3/tests-gen/block.inputs.rs::test_18", "code": "pub fn wait_for_epoll_threads(&mut self) {\n        self.common.wait_for_epoll_threads();\n    }", "test": "fn test_18() {\n    let bytes = [1];\n    if bytes.len() < QUEUE_DATA_SIZE || bytes.len() > (QUEUE_DATA_SIZE + MEM_SIZE) {\n        return;\n    }\n    let queue_data = &bytes[..QUEUE_DATA_SIZE];\n    let mem_bytes = &bytes[QUEUE_DATA_SIZE..];\n    let shm = memfd_create(&ffi::CString::new(\"fuzz\").unwrap(), 0).unwrap();\n    let disk_file: File = unsafe { File::from_raw_fd(shm) };\n    let qcow_disk = Box::new(RawFileDiskSync::new(disk_file)) as Box<dyn DiskFile>;\n    let mut block = Block::new(\n        \"tmp\".to_owned(),\n        qcow_disk,\n        PathBuf::from(\"\"),\n        false,\n        false,\n        2,\n        256,\n        None,\n        SeccompAction::Allow,\n        None,\n        EventFd::new(EFD_NONBLOCK).unwrap(),\n        None,\n    )\n    .unwrap();\n    let q = setup_virt_queue(queue_data.try_into().unwrap());\n    let mem = GuestMemoryMmap::from_ranges(&[(GuestAddress(0), MEM_SIZE)]).unwrap();\n    if mem.write_slice(mem_bytes, GuestAddress(0 as u64)).is_err() {\n        return;\n    }\n    let guest_memory = GuestMemoryAtomic::new(mem);\n    let evt = EventFd::new(0).unwrap();\n    let queue_evt = unsafe { EventFd::from_raw_fd(libc::dup(evt.as_raw_fd())) };\n    queue_evt.write(1).unwrap();\n    block\n        .activate(\n            guest_memory,\n            Arc::new(NoopVirtioInterrupt {}),\n            vec![(0, q, evt)],\n        )\n        .ok();\n    block.wait_for_epoll_threads();\n}"}
{"test_id": "BurntSushi-memchr/BurntSushi-memchr-f3fde7a/tests-gen/memchr3.inputs.rs::test_98", "code": "fn count(self) -> usize {\n        self.it.count(|s, e| {\n            // SAFETY: We rely on our generic iterator to return valid start\n            // and end pointers.\n            unsafe { count_raw(self.needle1, s, e) }\n        })\n    }", "test": "fn test_98() {\n    let data = [201, 0, 0];\n    if data.len() < 3 {\n        return;\n    }\n    memchr3_iter(data[0], data[1], data[2], &data[3..]).count();\n}"}
{"test_id": "BurntSushi-memchr/BurntSushi-memchr-f3fde7a/tests-gen/memrmem.inputs.rs::test_39", "code": "pub fn count(&self, haystack: &[u8]) -> usize {\n        // SAFETY: All of our pointers are derived directly from a borrowed\n        // slice, which is guaranteed to be valid.\n        unsafe {\n            let start = haystack.as_ptr();\n            let end = start.add(haystack.len());\n            self.count_raw(start, end)\n        }\n    }", "test": "fn test_39() {\n    let data = [255, 141, 10];\n    if data.len() < 2 {\n        return;\n    }\n    let split = std::cmp::max(data[0] as usize, 1) % data.len() as usize;\n    let (needle, haystack) = (&data[..split], &data[split..]);\n    memmem::rfind_iter(haystack, needle).count();\n}"}
{"test_id": "BurntSushi-memchr/BurntSushi-memchr-f3fde7a/tests-gen/memchr2.inputs.rs::test_19", "code": "fn count(self) -> usize {\n        self.it.count(|s, e| {\n            // SAFETY: We rely on our generic iterator to return valid start\n            // and end pointers.\n            unsafe { count_raw(self.needle1, s, e) }\n        })\n    }", "test": "fn test_19() {\n    let data = [74, 38, 10];\n    if data.len() < 2 {\n        return;\n    }\n    memchr2_iter(data[0], data[1], &data[2..]).count();\n}"}
{"test_id": "seanmonstar-httparse/seanmonstar-httparse-638848e/tests-gen/parse_request.inputs.rs::test_15", "code": "pub fn parse(&mut self, buf: &'b [u8]) -> Result<usize> {\n        self.parse_with_config(buf, &Default::default())\n    }", "test": "fn test_15() {\n    let data = [120];\n    let mut headers = [httparse::EMPTY_HEADER; 16];\n    let mut req = httparse::Request::new(&mut headers);\n    req.parse(data);\n}"}
{"test_id": "gfx-rs-naga/gfx-rs-naga-92e41b4/tests-gen/wgsl_parser.inputs.rs::test_15", "code": "pub fn parse(mut self) -> Result<crate::Module, Error> {\n        let mut module = {\n            if self.next()? != spirv::MAGIC_NUMBER {\n                return Err(Error::InvalidHeader);\n            }\n            let version_raw = self.next()?;\n            let generator = self.next()?;\n            let _bound = self.next()?;\n            let _schema = self.next()?;\n            log::info!(\"Generated by {} version {:x}\", generator, version_raw);\n            crate::Module::default()\n        };\n\n        self.layouter.clear();\n        self.dummy_functions = Arena::new();\n        self.lookup_function.clear();\n        self.function_call_graph.clear();\n\n        loop {\n            use spirv::Op;\n\n            let inst = match self.next_inst() {\n                Ok(inst) => inst,\n                Err(Error::IncompleteData) => break,\n                Err(other) => return Err(other),\n            };\n            log::debug!(\"\\t{:?} [{}]\", inst.op, inst.wc);\n\n            match inst.op {\n                Op::Capability => self.parse_capability(inst),\n                Op::Extension => self.parse_extension(inst),\n                Op::ExtInstImport => self.parse_ext_inst_import(inst),\n                Op::MemoryModel => self.parse_memory_model(inst),\n                Op::EntryPoint => self.parse_entry_point(inst),\n                Op::ExecutionMode => self.parse_execution_mode(inst),\n                Op::String => self.parse_string(inst),\n                Op::Source => self.parse_source(inst),\n                Op::SourceExtension => self.parse_source_extension(inst),\n                Op::Name => self.parse_name(inst),\n                Op::MemberName => self.parse_member_name(inst),\n                Op::ModuleProcessed => self.parse_module_processed(inst),\n                Op::Decorate => self.parse_decorate(inst),\n                Op::MemberDecorate => self.parse_member_decorate(inst),\n                Op::TypeVoid => self.parse_type_void(inst),\n                Op::TypeBool => self.parse_type_bool(inst, &mut module),\n                Op::TypeInt => self.parse_type_int(inst, &mut module),\n                Op::TypeFloat => self.parse_type_float(inst, &mut module),\n                Op::TypeVector => self.parse_type_vector(inst, &mut module),\n                Op::TypeMatrix => self.parse_type_matrix(inst, &mut module),\n                Op::TypeFunction => self.parse_type_function(inst),\n                Op::TypePointer => self.parse_type_pointer(inst, &mut module),\n                Op::TypeArray => self.parse_type_array(inst, &mut module),\n                Op::TypeRuntimeArray => self.parse_type_runtime_array(inst, &mut module),\n                Op::TypeStruct => self.parse_type_struct(inst, &mut module),\n                Op::TypeImage => self.parse_type_image(inst, &mut module),\n                Op::TypeSampledImage => self.parse_type_sampled_image(inst),\n                Op::TypeSampler => self.parse_type_sampler(inst, &mut module),\n                Op::Constant | Op::SpecConstant => self.parse_constant(inst, &mut module),\n                Op::ConstantComposite => self.parse_composite_constant(inst, &mut module),\n                Op::ConstantNull | Op::Undef => self.parse_null_constant(inst, &mut module),\n                Op::ConstantTrue => self.parse_bool_constant(inst, true, &mut module),\n                Op::ConstantFalse => self.parse_bool_constant(inst, false, &mut module),\n                Op::Variable => self.parse_global_variable(inst, &mut module),\n                Op::Function => {\n                    self.switch(ModuleState::Function, inst.op)?;\n                    inst.expect(5)?;\n                    self.parse_function(&mut module)\n                }\n                _ => Err(Error::UnsupportedInstruction(self.state, inst.op)), //TODO\n            }?;\n        }\n\n        log::info!(\"Patching...\");\n        {\n            let mut nodes = petgraph::algo::toposort(&self.function_call_graph, None)\n                .map_err(|cycle| Error::FunctionCallCycle(cycle.node_id()))?;\n            nodes.reverse(); // we need dominated first\n            let mut functions = mem::take(&mut module.functions);\n            for fun_id in nodes {\n                if fun_id > !(functions.len() as u32) {\n                    // skip all the fake IDs registered for the entry points\n                    continue;\n                }\n                let lookup = self.lookup_function.get_mut(&fun_id).unwrap();\n                // take out the function from the old array\n                let fun = mem::take(&mut functions[lookup.handle]);\n                // add it to the newly formed arena, and adjust the lookup\n                lookup.handle = module\n                    .functions\n                    .append(fun, functions.get_span(lookup.handle));\n            }\n        }\n        // patch all the functions\n        for (handle, fun) in module.functions.iter_mut() {\n            self.patch_function(Some(handle), fun)?;\n        }\n        for ep in module.entry_points.iter_mut() {\n            self.patch_function(None, &mut ep.function)?;\n        }\n\n        // Check all the images and samplers to have consistent comparison property.\n        for (handle, flags) in self.handle_sampling.drain() {\n            if !image::patch_comparison_type(\n                flags,\n                module.global_variables.get_mut(handle),\n                &mut module.types,\n            ) {\n                return Err(Error::InconsistentComparisonSampling(handle));\n            }\n        }\n\n        if !self.future_decor.is_empty() {\n            log::warn!(\"Unused item decorations: {:?}\", self.future_decor);\n            self.future_decor.clear();\n        }\n        if !self.future_member_decor.is_empty() {\n            log::warn!(\"Unused member decorations: {:?}\", self.future_member_decor);\n            self.future_member_decor.clear();\n        }\n\n        Ok(module)\n    }", "test": "fn test_15() {\n    let data = \"!\";\n    let _result = Frontend::new().parse(&data);\n}"}
{"test_id": "uutils-coreutils/uutils-coreutils-73b7c46/tests-gen/fuzz_parse_size.inputs.rs::test_60", "code": "pub fn parse_size(size: &str) -> Result<u64, ParseSizeError> {\n    Parser::default().parse(size)\n}", "test": "fn test_60() {\n    let data = [10, 10];\n    if let Ok(s) = std::str::from_utf8(data) {\n        _ = parse_size(s);\n    }\n}"}
{"test_id": "bodil-im-rs/bodil-im-rs-2afaf54/tests-gen/ordset.inputs.rs::test_70", "code": "pub fn remove<BA>(&mut self, a: &BA) -> Option<A>\n    where\n        BA: Hash + Eq + ?Sized,\n        A: Borrow<BA>,\n    {\n        let root = PoolRef::make_mut(&self.pool.0, &mut self.root);\n        let result = root.remove(&self.pool.0, hash_key(&*self.hasher, a), 0, a);\n        if result.is_some() {\n            self.size -= 1;\n        }\n        result.map(|v| v.0)\n    }", "test": "fn test_70() {\n    let actions = [Insert(5692549976240882688)];\n    let mut set = OrdSet::new();\n    let mut nat = NatSet::new();\n    for action in actions {\n        match action {\n            Action::Insert(value) => {\n                let len = nat.len() + if nat.contains(&value) { 0 } else { 1 };\n                nat.insert(value);\n                set.insert(value);\n                assert_eq!(len, set.len());\n            }\n            Action::Remove(value) => {\n                let len = nat.len() - if nat.contains(&value) { 1 } else { 0 };\n                nat.remove(&value);\n                set.remove(&value);\n                assert_eq!(len, set.len());\n            }\n        }\n        assert_eq!(nat.len(), set.len());\n        assert_eq!(OrdSet::from(nat.clone()), set);\n    }\n}"}
{"test_id": "marshallpierce-rust-base64/marshallpierce-rust-base64-4ef33cc/tests-gen/roundtrip_no_pad.inputs.rs::test_55", "code": "fn decode<T: AsRef<[u8]>>(&self, input: T) -> Result<Vec<u8>, DecodeError> {\n        fn inner<E>(engine: &E, input_bytes: &[u8]) -> Result<Vec<u8>, DecodeError>\n        where\n            E: Engine + ?Sized,\n        {\n            let estimate = engine.internal_decoded_len_estimate(input_bytes.len());\n            let mut buffer = vec![0; estimate.decoded_len_estimate()];\n\n            let bytes_written = engine\n                .internal_decode(input_bytes, &mut buffer, estimate)?\n                .decoded_len;\n\n            buffer.truncate(bytes_written);\n\n            Ok(buffer)\n        }\n\n        inner(self, input.as_ref())\n    }", "test": "fn test_55() {\n    let data = [45];\n    let config = general_purpose::GeneralPurposeConfig::new()\n        .with_encode_padding(false)\n        .with_decode_padding_mode(engine::DecodePaddingMode::RequireNone);\n    let engine = general_purpose::GeneralPurpose::new(&base64::alphabet::STANDARD, config);\n    let encoded = engine.encode(data);\n    let decoded = engine.decode(&encoded).unwrap();\n    assert_eq!(data, decoded.as_slice());\n}"}
{"test_id": "XAMPPRocky-tokei/XAMPPRocky-tokei-92ddc2e/tests-gen/parse_from_slice_total.inputs.rs::test_5", "code": "pub fn parse_from_slice (input : FuzzInput , check_total : bool) { let config = & Config { treat_doc_strings_as_comments : Some (input . treat_doc_strings_as_comments) , columns : None , hidden : None , no_ignore : None , no_ignore_parent : None , no_ignore_dot : None , no_ignore_vcs : None , sort : None , types : None , for_each_fn : None , } ; let stats = input . lang . parse_from_slice (input . data , config) ; if check_total { if let Ok (s) = str :: from_utf8 (input . data) { assert ! (stats . lines () <= s . lines () . count () , \"{} got more total lines ({}) than str::lines ({}). Code: {}, Comments: {}, Blanks: {}. treat_doc_strings_as_comments: {}. File contents (as UTF-8):\\n{}\" , input . lang . name () , stats . lines () , s . lines () . count () , stats . code , stats . comments , input . treat_doc_strings_as_comments , stats . blanks , s) } ; } }", "test": "fn test_5() {\n    let data = FuzzInput {\n        lang: Zsh,\n        treat_doc_strings_as_comments: true,\n        data: [255, 255, 255, 255, 255, 255, 255, 10, 255],\n    };\n    parse_from_slice(data, true);\n}"}
{"test_id": "zip-rs-zip/zip-rs-zip-ed187d6/tests-gen/fuzz_read.inputs.rs::test_51", "code": "fn decompress_all (data : & [u8]) -> Result < () , Box < dyn std :: error :: Error > > { let reader = std :: io :: Cursor :: new (data) ; let mut zip = zip :: ZipArchive :: new (reader) ? ; for i in 0 .. zip . len () { let mut file = zip . by_index (i) ? ; if file . size () < 1 << 20 { let _ = std :: io :: copy (& mut file , & mut std :: io :: sink ()) ; } } Ok (()) }", "test": "fn test_51() {\n    let data = [241, 136, 10, 56];\n    let _ = decompress_all(data);\n}"}
{"test_id": "rustls-rustls/rustls-rustls-ae583bd/tests-gen/message.inputs.rs::test_3", "code": "pub fn used(&self) -> usize {\n        self.cursor\n    }", "test": "fn test_3() {\n    let data = [21, 3, 3, 0, 2, 1, 0];\n    let mut rdr = Reader::init(data);\n    if let Ok(m) = OpaqueMessage::read(&mut rdr) {\n        let msg = match Message::try_from(m.into_plain_message()) {\n            Ok(msg) => msg,\n            Err(_) => return,\n        };\n        let enc = PlainMessage::from(msg)\n            .into_unencrypted_opaque()\n            .encode();\n        assert_eq!(enc, data[..rdr.used()]);\n    }\n}"}
{"test_id": "quinn-rs-quinn/quinn-rs-quinn-83e4f46/tests-gen/packet.inputs.rs::test_2", "code": "fn to_vec(params: &TransportParameters) -> Vec<u8> {\n    let mut bytes = Vec::new();\n    params.write(&mut bytes);\n    bytes\n}", "test": "fn test_2() {\n    let data = PacketParams {\n        local_cid_len: 10,\n        buf: b\"\",\n        grease_quic_bit: false,\n    };\n    let len = data.buf.len();\n    let supported_versions = DEFAULT_SUPPORTED_VERSIONS.to_vec();\n    if let Ok(decoded) = PartialDecode::new(\n        data.buf,\n        data.local_cid_len,\n        &supported_versions,\n        data.grease_quic_bit,\n    ) {\n        match decoded.1 {\n            Some(x) => assert_eq!(len, decoded.0.len() + x.len()),\n            None => assert_eq!(len, decoded.0.len()),\n        }\n    }\n}"}
{"test_id": "BurntSushi-memchr/BurntSushi-memchr-f3fde7a/tests-gen/memchr.inputs.rs::test_57", "code": "fn count(self) -> usize {\n        self.it.count(|s, e| {\n            // SAFETY: We rely on our generic iterator to return valid start\n            // and end pointers.\n            unsafe { count_raw(self.needle1, s, e) }\n        })\n    }", "test": "fn test_57() {\n    let data = [96, 49];\n    if data.is_empty() {\n        return;\n    }\n    memchr_iter(data[0], &data[1..]).count();\n}"}
{"test_id": "cloud-hypervisor-cloud-hypervisor/cloud-hypervisor-cloud-hypervisor-db3a5f3/tests-gen/pmem.inputs.rs::test_98", "code": "pub fn wait_for_epoll_threads(&mut self) {\n        self.common.wait_for_epoll_threads();\n    }", "test": "fn test_98() {\n    let bytes = [26, 14];\n    if bytes.len() < QUEUE_DATA_SIZE || bytes.len() > (QUEUE_DATA_SIZE + MEM_SIZE) {\n        return;\n    }\n    let mut pmem = create_dummy_pmem();\n    let queue_data = &bytes[..QUEUE_DATA_SIZE];\n    let mem_bytes = &bytes[QUEUE_DATA_SIZE..];\n    let q = setup_virt_queue(queue_data.try_into().unwrap());\n    let mem = GuestMemoryMmap::from_ranges(&[(GuestAddress(0), MEM_SIZE)]).unwrap();\n    if mem.write_slice(mem_bytes, GuestAddress(0 as u64)).is_err() {\n        return;\n    }\n    let guest_memory = GuestMemoryAtomic::new(mem);\n    let evt = EventFd::new(0).unwrap();\n    let queue_evt = unsafe { EventFd::from_raw_fd(libc::dup(evt.as_raw_fd())) };\n    queue_evt.write(1).unwrap();\n    pmem.activate(\n        guest_memory,\n        Arc::new(NoopVirtioInterrupt {}),\n        vec![(0, q, evt)],\n    )\n    .ok();\n    pmem.wait_for_epoll_threads();\n}"}
{"test_id": "marshallpierce-rust-base64/marshallpierce-rust-base64-4ef33cc/tests-gen/roundtrip.inputs.rs::test_87", "code": "pub fn decode<T: AsRef<[u8]>>(input: T) -> Result<Vec<u8>, DecodeError> {\n    STANDARD.decode(input)\n}", "test": "fn test_87() {\n    let data = [48, 10];\n    let encoded = STANDARD.encode(data);\n    let decoded = STANDARD.decode(&encoded).unwrap();\n    assert_eq!(data, decoded.as_slice());\n}"}
{"test_id": "BurntSushi-memchr/BurntSushi-memchr-f3fde7a/tests-gen/memchr2.inputs.rs::test_54", "code": "fn count(self) -> usize {\n        self.it.count(|s, e| {\n            // SAFETY: We rely on our generic iterator to return valid start\n            // and end pointers.\n            unsafe { count_raw(self.needle1, s, e) }\n        })\n    }", "test": "fn test_54() {\n    let data = [148, 74];\n    if data.len() < 2 {\n        return;\n    }\n    memchr2_iter(data[0], data[1], &data[2..]).count();\n}"}
{"test_id": "gimli-rs-gimli/gimli-rs-gimli-3947879/tests-gen/debug_info.inputs.rs::test_70", "code": "pub fn next(&mut self) -> Result<Option<RawLocListEntry<R>>> {\n        if self.input.is_empty() {\n            return Ok(None);\n        }\n\n        match RawLocListEntry::parse(&mut self.input, self.encoding, self.format) {\n            Ok(entry) => {\n                if entry.is_none() {\n                    self.input.empty();\n                }\n                Ok(entry)\n            }\n            Err(e) => {\n                self.input.empty();\n                Err(e)\n            }\n        }\n    }", "test": "fn test_70() {\n    let sections = (\n        [],\n        [\n            1, 0, 0, 0, 143, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,\n        ],\n    );\n    let (debug_abbrev, debug_info) = sections;\n    let debug_abbrev = DebugAbbrev::new(&debug_abbrev, LittleEndian);\n    let debug_info = DebugInfo::new(&debug_info, LittleEndian);\n    let mut units = debug_info.units();\n    while let Ok(Some(unit)) = units.next() {\n        if let Ok(abbrevs) = unit.abbreviations(&debug_abbrev) {\n            let mut cursor = unit.entries(&abbrevs);\n            while let Ok(Some((_delta, entry))) = cursor.next_dfs() {\n                let mut attrs = entry.attrs();\n                while let Ok(Some(_attr)) = attrs.next() {\n                    continue;\n                }\n            }\n        }\n    }\n}"}
{"test_id": "marshallpierce-rust-base64/marshallpierce-rust-base64-4ef33cc/tests-gen/decode_random.inputs.rs::test_17", "code": "fn decode<T: AsRef<[u8]>>(&self, input: T) -> Result<Vec<u8>, DecodeError> {\n        fn inner<E>(engine: &E, input_bytes: &[u8]) -> Result<Vec<u8>, DecodeError>\n        where\n            E: Engine + ?Sized,\n        {\n            let estimate = engine.internal_decoded_len_estimate(input_bytes.len());\n            let mut buffer = vec![0; estimate.decoded_len_estimate()];\n\n            let bytes_written = engine\n                .internal_decode(input_bytes, &mut buffer, estimate)?\n                .decoded_len;\n\n            buffer.truncate(bytes_written);\n\n            Ok(buffer)\n        }\n\n        inner(self, input.as_ref())\n    }", "test": "fn test_17() {\n    let data = [255, 251, 255, 251];\n    let engine = utils::random_engine(data);\n    let _ = engine.decode(data);\n}"}
{"test_id": "BurntSushi-memchr/BurntSushi-memchr-f3fde7a/tests-gen/memchr2.inputs.rs::test_98", "code": "fn count(self) -> usize {\n        self.it.count(|s, e| {\n            // SAFETY: We rely on our generic iterator to return valid start\n            // and end pointers.\n            unsafe { count_raw(self.needle1, s, e) }\n        })\n    }", "test": "fn test_98() {\n    let data = [91, 145];\n    if data.len() < 2 {\n        return;\n    }\n    memchr2_iter(data[0], data[1], &data[2..]).count();\n}"}
{"test_id": "image-rs-image-gif/image-rs-image-gif-80fd8c0/tests-gen/decode.inputs.rs::test_68", "code": "fn try_decode (data : & [u8]) -> Result < () , gif :: DecodingError > { let mut reader = gif :: Decoder :: new (data) ? ; while let Some (_) = reader . read_next_frame () ? { } Ok (()) }", "test": "fn test_68() {\n    let data = [91, 75, 38, 38];\n    let _ = try_decode(data);\n}"}
{"test_id": "cloud-hypervisor-cloud-hypervisor/cloud-hypervisor-cloud-hypervisor-db3a5f3/tests-gen/rng.inputs.rs::test_15", "code": "pub fn wait_for_epoll_threads(&mut self) {\n        self.common.wait_for_epoll_threads();\n    }", "test": "fn test_15() {\n    let bytes = [42, 91];\n    if bytes.len() < (QUEUE_DATA_SIZE + QUEUE_BYTES_SIZE)\n        || bytes.len() > (QUEUE_DATA_SIZE + QUEUE_BYTES_SIZE + MEM_SIZE)\n    {\n        return;\n    }\n    let mut rng = virtio_devices::Rng::new(\n        \"fuzzer_rng\".to_owned(),\n        \"/dev/urandom\",\n        false,\n        SeccompAction::Allow,\n        EventFd::new(EFD_NONBLOCK).unwrap(),\n        None,\n    )\n    .unwrap();\n    let queue_data = &bytes[..QUEUE_DATA_SIZE];\n    let queue_bytes = &bytes[QUEUE_DATA_SIZE..QUEUE_DATA_SIZE + QUEUE_BYTES_SIZE];\n    let mem_bytes = &bytes[QUEUE_DATA_SIZE + QUEUE_BYTES_SIZE..];\n    let q = setup_virt_queue(queue_data.try_into().unwrap());\n    let mem = GuestMemoryMmap::from_ranges(&[\n        (GuestAddress(0), MEM_SIZE),\n        (GuestAddress(DESC_TABLE_ADDR), QUEUE_BYTES_SIZE),\n    ])\n    .unwrap();\n    if mem\n        .write_slice(queue_bytes, GuestAddress(DESC_TABLE_ADDR))\n        .is_err()\n    {\n        return;\n    }\n    if mem.write_slice(mem_bytes, GuestAddress(0 as u64)).is_err() {\n        return;\n    }\n    let guest_memory = GuestMemoryAtomic::new(mem);\n    let evt = EventFd::new(0).unwrap();\n    let queue_evt = unsafe { EventFd::from_raw_fd(libc::dup(evt.as_raw_fd())) };\n    queue_evt.write(1).unwrap();\n    rng.activate(\n        guest_memory,\n        Arc::new(NoopVirtioInterrupt {}),\n        vec![(0, q, evt)],\n    )\n    .ok();\n    rng.wait_for_epoll_threads();\n}"}
{"test_id": "zip-rs-zip/zip-rs-zip-ed187d6/tests-gen/fuzz_read.inputs.rs::test_29", "code": "fn decompress_all (data : & [u8]) -> Result < () , Box < dyn std :: error :: Error > > { let reader = std :: io :: Cursor :: new (data) ; let mut zip = zip :: ZipArchive :: new (reader) ? ; for i in 0 .. zip . len () { let mut file = zip . by_index (i) ? ; if file . size () < 1 << 20 { let _ = std :: io :: copy (& mut file , & mut std :: io :: sink ()) ; } } Ok (()) }", "test": "fn test_29() {\n    let data = [130, 10];\n    let _ = decompress_all(data);\n}"}
{"test_id": "rustls-rustls/rustls-rustls-ae583bd/tests-gen/client.inputs.rs::test_56", "code": "pub fn process_new_packets(&mut self) -> Result<IoState, Error> {\n        match self {\n            Self::Client(conn) => conn.process_new_packets(),\n            Self::Server(conn) => conn.process_new_packets(),\n        }\n    }", "test": "fn test_56() {\n    let data = [\n        22, 3, 3, 0, 63, 2, 0, 0, 59, 3, 3, 89, 16, 236, 200, 17, 90, 14, 121, 52, 150, 218, 66,\n        28, 227, 55, 237, 109, 95, 209, 111, 252, 56, 238, 6, 251, 154, 147, 123, 211, 206, 186,\n        114, 0, 204, 169, 0, 0, 19, 255, 1, 0, 1, 0, 0, 23, 0, 0, 0, 35, 0, 0, 0, 11, 0, 2, 1, 0,\n        22, 3, 3, 14, 229, 11, 0, 14, 225, 0, 14, 222, 0, 7, 96, 48, 130, 7, 92, 48, 130, 6, 68,\n        160, 3, 2, 1, 2, 2, 8, 83, 65, 61, 145, 120, 210, 140, 39, 48, 13, 6, 9, 42, 134, 72, 134,\n        247, 13, 1, 1, 11, 5, 0, 48, 73, 49, 11, 48, 9, 6, 3, 85, 4, 6, 19, 2, 85, 83, 49, 19, 48,\n        17, 6, 3, 85, 4, 10, 19, 10, 71, 111, 111, 103, 108, 101, 32, 73, 110, 99, 49, 37, 48, 35,\n        6, 3, 85, 4, 3, 19, 28, 71, 111, 111, 103, 108, 101, 32, 73, 110, 116, 101, 114, 110, 101,\n        116, 32, 65, 117, 116, 104, 111, 114, 105, 116, 121, 32, 71, 50, 48, 30, 23, 13, 49, 55,\n        48, 52, 50, 55, 48, 56, 51, 48, 48, 48, 90, 23, 13, 49, 55, 48, 55, 50, 48, 48, 56, 51, 48,\n        48, 48, 90, 48, 102, 49, 11, 48, 9, 6, 3, 85, 4, 6, 19, 2, 85, 83, 49, 19, 48, 17, 6, 3,\n        85, 4, 8, 12, 10, 67, 97, 108, 105, 102, 111, 114, 110, 105, 97, 49, 22, 48, 20, 6, 3, 85,\n        4, 7, 12, 13, 77, 111, 117, 110, 116, 97, 105, 110, 32, 86, 105, 101, 119, 49, 19, 48, 17,\n        6, 3, 85, 4, 10, 12, 10, 71, 111, 111, 103, 108, 101, 32, 73, 110, 99, 49, 21, 48, 19, 6,\n        3, 85, 4, 3, 12, 12, 42, 46, 103, 111, 111, 103, 108, 101, 46, 99, 111, 109, 48, 89, 48,\n        19, 6, 7, 42, 134, 72, 206, 61, 2, 1, 6, 8, 42, 134, 72, 206, 61, 3, 1, 7, 3, 66, 0, 4,\n        189, 77, 48, 133, 70, 173, 158, 211, 104, 157, 203, 90, 81, 210, 82, 202, 205, 147, 209,\n        252, 62, 33, 220, 191, 25, 45, 49, 119, 71, 86, 34, 248, 128, 116, 164, 199, 172, 91, 179,\n        223, 239, 76, 76, 63, 25, 69, 53, 53, 110, 197, 165, 220, 25, 210, 237, 147, 30, 18, 131,\n        158, 196, 86, 94, 111, 163, 130, 4, 244, 48, 130, 4, 240, 48, 29, 6, 3, 85, 29, 37, 4, 22,\n        48, 20, 6, 8, 43, 6, 1, 5, 5, 7, 3, 1, 6, 8, 43, 6, 1, 5, 5, 7, 3, 2, 48, 11, 6, 3, 85, 29,\n        15, 4, 4, 3, 2, 7, 128, 48, 130, 3, 179, 6, 3, 85, 29, 17, 4, 130, 3, 170, 48, 130, 3, 166,\n        130, 12, 42, 46, 103, 111, 111, 103, 108, 101, 46, 99, 111, 109, 130, 13, 42, 46, 97, 110,\n        100, 114, 111, 105, 100, 46, 99, 111, 109, 130, 22, 42, 46, 97, 112, 112, 101, 110, 103,\n        105, 110, 101, 46, 103, 111, 111, 103, 108, 101, 46, 99, 111, 109, 130, 18, 42, 46, 99,\n        108, 111, 117, 100, 46, 103, 111, 111, 103, 108, 101, 46, 99, 111, 109, 130, 14, 42, 46,\n        103, 99, 112, 46, 103, 118, 116, 50, 46, 99, 111, 109, 130, 22, 42, 46, 103, 111, 111, 103,\n        108, 101, 45, 97, 110, 97, 108, 121, 116, 105, 99, 115, 46, 99, 111, 109, 130, 11, 42, 46,\n        103, 111, 111, 103, 108, 101, 46, 99, 97, 130, 11, 42, 46, 103, 111, 111, 103, 108, 101,\n        46, 99, 108, 130, 14, 42, 46, 103, 111, 111, 103, 108, 101, 46, 99, 111, 46, 105, 110, 130,\n        14, 42, 46, 103, 111, 111, 103, 108, 101, 46, 99, 111, 46, 106, 112, 130, 14, 42, 46, 103,\n        111, 111, 103, 108, 101, 46, 99, 111, 46, 117, 107, 130, 15, 42, 46, 103, 111, 111, 103,\n        108, 101, 46, 99, 111, 109, 46, 97, 114, 130, 15, 42, 46, 103, 111, 111, 103, 108, 101, 46,\n        99, 111, 109, 46, 97, 117, 130, 15, 42, 46, 103, 111, 111, 103, 108, 101, 46, 99, 111, 109,\n        46, 98, 114, 130, 15, 42, 46, 103, 111, 111, 103, 108, 101, 46, 99, 111, 109, 46, 99, 111,\n        130, 15, 42, 46, 103, 111, 111, 103, 108, 101, 46, 99, 111, 109, 46, 109, 120, 130, 15, 42,\n        46, 103, 111, 111, 103, 108, 101, 46, 99, 111, 109, 46, 116, 114, 130, 15, 42, 46, 103,\n        111, 111, 103, 108, 101, 46, 99, 111, 109, 46, 118, 110, 130, 11, 42, 46, 103, 111, 111,\n        103, 108, 101, 46, 100, 101, 130, 11, 42, 46, 103, 111, 111, 103, 108, 101, 46, 101, 115,\n        130, 11, 42, 46, 103, 111, 111, 103, 108, 101, 46, 102, 114, 130, 11, 42, 46, 103, 111,\n        111, 103, 108, 101, 46, 104, 117, 130, 11, 42, 46, 103, 111, 111, 103, 108, 101, 46, 105,\n        116, 130, 11, 42, 46, 103, 111, 111, 103, 108, 101, 46, 110, 108, 130, 11, 42, 46, 103,\n        111, 111, 103, 108, 101, 46, 112, 108, 130, 11, 42, 46, 103, 111, 111, 103, 108, 101, 46,\n        112, 116, 130, 18, 42, 46, 103, 111, 111, 103, 108, 101, 97, 100, 97, 112, 105, 115, 46,\n        99, 111, 109, 130, 15, 42, 46, 103, 111, 111, 103, 108, 101, 97, 112, 105, 115, 46, 99,\n        110, 130, 20, 42, 46, 103, 111, 111, 103, 108, 101, 99, 111, 109, 12, 6, 10, 43, 6, 1, 4,\n        1, 214, 121, 2, 5, 1, 48, 13, 6, 9, 42, 134, 72, 134, 247, 13, 1, 1, 11, 5, 0, 3, 130, 1,\n        1, 0, 8, 78, 4, 167, 128, 127, 16, 22, 67, 94, 2, 173, 215, 66, 128, 244, 176, 142, 210,\n        174, 179, 235, 17, 125, 144, 132, 24, 125, 231, 144, 21, 251, 73, 127, 168, 153, 5, 145,\n        187, 122, 201, 214, 60, 55, 24, 9, 154, 182, 199, 146, 32, 7, 53, 51, 9, 228, 40, 99, 114,\n        13, 180, 224, 50, 156, 135, 152, 196, 27, 118, 137, 103, 193, 80, 88, 176, 19, 170, 19, 26,\n        27, 50, 165, 190, 234, 17, 149, 76, 72, 99, 73, 233, 153, 93, 32, 55, 204, 254, 42, 105,\n        81, 22, 149, 75, 169, 222, 73, 130, 192, 16, 112, 244, 44, 243, 236, 188, 36, 36, 208, 78,\n        172, 165, 217, 94, 30, 109, 146, 193, 167, 172, 72, 53, 129, 249, 229, 228, 156, 101, 105,\n        205, 135, 164, 65, 80, 63, 46, 87, 165, 145, 81, 18, 88, 14, 140, 9, 161, 172, 122, 164,\n        18, 165, 39, 243, 154, 16, 151, 125, 85, 3, 6, 247, 102, 88, 95, 95, 100, 225, 171, 93,\n        109, 165, 57, 72, 117, 152, 76, 41, 90, 58, 141, 211, 43, 202, 156, 85, 4, 191, 244, 230,\n        20, 213, 128, 172, 38, 237, 23, 137, 166, 147, 108, 92, 164, 204, 184, 240, 102, 142, 100,\n        227, 125, 154, 226, 0, 179, 73, 199, 228, 10, 170, 221, 91, 131, 199, 112, 144, 70, 78,\n        190, 208, 219, 89, 150, 108, 46, 245, 22, 54, 222, 113, 204, 1, 194, 18, 193, 33, 198, 22,\n        0, 3, 129, 48, 130, 3, 125, 48, 130, 2, 230, 160, 3, 2, 1, 2, 2, 3, 18, 187, 230, 48, 13,\n        6, 9, 42, 134, 72, 134, 247, 13, 1, 1, 5, 5, 0, 48, 78, 49, 11, 48, 9, 6, 3, 85, 4, 6, 19,\n        2, 85, 83, 49, 16, 48, 14, 6, 3, 85, 4, 10, 19, 7, 69, 113, 117, 105, 102, 97, 120, 49, 45,\n        48, 43, 6, 3, 85, 4, 11, 19, 36, 69, 113, 117, 105, 102, 97, 120, 32, 83, 101, 99, 117,\n        114, 101, 32, 67, 101, 114, 116, 105, 102, 105, 99, 97, 116, 101, 32, 65, 117, 116, 104,\n        111, 114, 105, 116, 121, 48, 30, 23, 13, 48, 50, 48, 53, 50, 49, 48, 52, 48, 48, 48, 48,\n        90, 23, 13, 49, 56, 48, 56, 50, 49, 48, 52, 48, 48, 48, 48, 90, 48, 66, 49, 11, 48, 9, 6,\n        3, 85, 4, 6, 19, 2, 85, 83, 49, 22, 48, 20, 6, 3, 85, 4, 10, 19, 13, 71, 101, 111, 84, 114,\n        117, 115, 116, 32, 73, 110, 99, 46, 49, 27, 48, 25, 6, 3, 85, 4, 3, 19, 18, 71, 101, 111,\n        84, 114, 117, 115, 116, 32, 71, 108, 111, 98, 97, 108, 32, 67, 65, 48, 130, 1, 34, 48, 13,\n        6, 9, 42, 134, 72, 134, 247, 13, 1, 1, 1, 5, 0, 3, 130, 1, 15, 0, 48, 130, 1, 10, 2, 130,\n        1, 1, 0, 218, 204, 24, 99, 48, 253, 244, 23, 35, 26, 86, 126, 91, 223, 60, 108, 56, 228,\n        113, 183, 120, 145, 212, 188, 161, 216, 76, 248, 168, 67, 182, 3, 233, 77, 33, 7, 8, 136,\n        218, 88, 47, 102, 57, 41, 189, 5, 120, 139, 157, 56, 232, 5, 183, 106, 126, 113, 164, 230,\n        196, 96, 166, 176, 239, 128, 228, 137, 40, 15, 158, 37, 214, 237, 131, 243, 173, 166, 145,\n        199, 152, 201, 66, 24, 53, 20, 157, 173, 152, 70, 146, 46, 79, 202, 241, 135, 67, 193, 22,\n        149, 87, 45, 80, 239, 137, 45, 128, 122, 87, 173, 242, 238, 95, 107, 210, 0, 141, 185, 20,\n        248, 20, 21, 53, 217, 192, 70, 163, 123, 114, 200, 145, 191, 201, 85, 43, 205, 208, 151,\n        62, 156, 38, 100, 204, 223, 206, 131, 25, 113, 202, 78, 230, 212, 213, 123, 169, 25, 205,\n        85, 222, 200, 236, 210, 94, 56, 83, 229, 92, 79, 140, 45, 254, 80, 35, 54, 252, 102, 230,\n        203, 142, 164, 57, 25, 0, 183, 149, 2, 57, 145, 11, 14, 254, 56, 46, 209, 29, 5, 154, 246,\n        77, 62, 111, 15, 7, 29, 175, 44, 30, 143, 96, 57, 226, 250, 54, 83, 19, 57, 212, 94, 38,\n        43, 219, 61, 168, 20, 189, 50, 235, 24, 3, 40, 82, 4, 113, 229, 171, 51, 61, 225, 56, 187,\n        7, 54, 132, 98, 156, 121, 234, 22, 48, 244, 95, 192, 43, 232, 113, 107, 228, 249, 2, 3, 1,\n        0, 1, 163, 129, 240, 48, 129, 237, 48, 31, 6, 3, 85, 29, 35, 4, 24, 48, 22, 128, 20, 72,\n        230, 104, 249, 43, 210, 178, 149, 215, 71, 216, 35, 32, 16, 79, 51, 152, 144, 159, 212, 48,\n        29, 6, 3, 85, 29, 14, 4, 22, 4, 20, 192, 122, 152, 104, 141, 137, 251, 171, 5, 100, 12, 17,\n        125, 170, 125, 101, 184, 202, 204, 78, 48, 15, 6, 3, 85, 29, 19, 1, 1, 255, 4, 5, 48, 3, 1,\n        1, 255, 48, 14, 6, 3, 85, 29, 15, 1, 1, 255, 4, 4, 3, 2, 1, 6, 48, 58, 6, 3, 85, 29, 31, 4,\n        51, 48, 49, 48, 47, 160, 45, 160, 43, 134, 41, 104, 116, 116, 112, 58, 47, 47, 99, 114,\n        108, 46, 103, 101, 111, 116, 114, 117, 115, 116, 46, 99, 111, 109, 47, 99, 114, 108, 115,\n        47, 115, 101, 99, 117, 114, 101, 99, 97, 46, 99, 114, 108, 48, 78, 6, 3, 85, 29, 32, 4, 71,\n        48, 69, 48, 67, 6, 4, 85, 29, 32, 0, 48, 59, 48, 57, 6, 8, 43, 6, 1, 5, 5, 7, 2, 1, 22, 45,\n        104, 116, 116, 112, 115, 58, 47, 47, 119, 119, 119, 46, 103, 101, 111, 116, 114, 117, 115,\n        116, 46, 99, 111, 109, 47, 114, 101, 115, 111, 117, 114, 99, 101, 115, 47, 114, 101, 112,\n        111, 115, 105, 116, 111, 114, 121, 48, 13, 6, 9, 42, 134, 72, 134, 247, 13, 1, 1, 5, 5, 0,\n        3, 129, 129, 0, 118, 225, 18, 110, 78, 75, 22, 18, 134, 48, 6, 178, 129, 8, 207, 240, 8,\n        199, 199, 113, 126, 102, 238, 194, 237, 212, 59, 31, 255, 240, 240, 200, 78, 214, 67, 56,\n        176, 185, 48, 125, 24, 208, 85, 131, 162, 106, 203, 54, 17, 156, 232, 72, 102, 163, 109,\n        127, 184, 19, 212, 71, 254, 139, 90, 92, 115, 252, 174, 217, 27, 50, 25, 56, 171, 151, 52,\n        20, 170, 150, 210, 235, 163, 28, 20, 8, 73, 182, 187, 229, 145, 239, 131, 54, 235, 29, 86,\n        111, 202, 218, 188, 115, 99, 144, 228, 127, 123, 62, 34, 203, 61, 7, 237, 95, 56, 116, 156,\n        227, 3, 80, 78, 161, 175, 152, 238, 97, 242, 132, 63, 18, 22, 3, 3, 0, 114, 12, 0, 0, 110,\n        3, 0, 29, 32, 75, 217, 44, 1, 117, 219, 122, 48, 71, 161, 89, 28, 185, 211, 203, 104, 197,\n        72, 172, 58, 227, 76, 100, 140, 23, 97, 211, 83, 70, 10, 176, 5, 4, 3, 0, 70, 48, 68, 2,\n        32, 118, 77, 25, 193, 184, 245, 209, 235, 233, 73, 206, 164, 213, 214, 217, 58, 189, 77,\n        153, 98, 68, 51, 73, 61, 86, 46, 224, 166, 129, 143, 233, 99, 2, 32, 124, 140, 108, 231,\n        222, 178, 70, 254, 130, 96, 249, 202, 22, 73, 30, 105, 180, 48, 177, 254, 92, 206, 16, 218,\n        0, 232, 189, 151, 157, 245, 39, 28, 22, 3, 3, 0, 4, 14, 0, 0, 0, 22, 3, 3, 0, 190, 4, 0, 0,\n        186, 0, 1, 137, 192, 0, 180, 20, 223, 122, 124, 254, 176, 24, 87, 129, 188, 25, 248, 233,\n        202, 114, 232, 117, 171, 162, 35, 223, 70, 217, 201, 60, 235, 114, 254, 181, 102, 199, 213,\n        157, 219, 90, 42, 235, 135, 84, 255, 194, 219, 249, 247, 214, 54, 54, 229, 79, 220, 3, 190,\n        161, 210, 47, 16, 37, 64, 211, 213, 90, 152, 193, 224, 185, 50, 214, 247, 202, 43, 114,\n        244, 225, 125, 149, 103, 150, 160, 133, 107, 60, 123, 80, 172, 188, 210, 189, 252, 195, 26,\n        25, 7, 251, 196, 130, 237, 57, 195, 62, 96, 219, 233, 108, 223, 21, 183, 44, 247, 233, 117,\n        14, 205, 189, 245, 126, 108, 249, 188, 52, 226, 115, 236, 151, 168, 171, 226, 99, 204, 123,\n        77, 237, 165, 38, 196, 158, 196, 163, 39, 31, 219, 195, 16, 152, 4, 135, 131, 197, 26, 192,\n        175, 73, 208, 102, 224, 50, 80, 230, 29, 5, 207, 178, 98, 39, 107, 230, 1, 197, 170, 5, 64,\n        181, 56, 55, 178, 122, 4, 178, 114, 110, 79, 20, 3, 3, 0, 1, 1, 22, 3, 3, 0, 32, 183, 30,\n        234, 49, 21, 153, 244, 50, 141, 222, 123, 52, 1, 109, 64, 238, 29, 191, 187, 51, 222, 29,\n        236, 211, 51, 142, 115, 248, 228, 41, 223, 232, 23, 3, 3, 5, 145, 183, 198, 127, 233, 133,\n        132, 204, 255, 193, 240, 165, 168, 179, 134, 137, 28, 111, 57, 20, 103, 109, 40, 93, 116,\n        27, 183, 6, 173, 163, 53, 13, 72, 122, 43, 63, 229, 34, 239, 206, 238, 224, 219, 154, 89,\n        232, 199, 231, 76, 220, 48, 166, 150, 198, 187, 179, 212, 170, 99, 14, 86, 71, 119, 180,\n        116, 170, 223, 163, 40, 114, 100, 115, 113, 43, 44, 114, 235, 76, 52, 47, 163, 154, 106,\n        75, 206, 13, 169, 35, 146, 186, 235, 26, 215, 226, 25, 96, 82, 134, 106, 165, 127, 165,\n        151, 155, 237, 16, 83, 188, 25, 119, 139, 21, 127, 119, 176, 100, 73, 39, 111, 86, 232, 52,\n        9, 66, 93, 115, 223, 106, 49, 206, 238, 160, 132, 136, 64, 102, 43, 74, 71, 121, 174, 29,\n        24, 97, 80, 95, 52, 218, 59, 92, 197, 127, 255, 57, 181, 131, 22, 44, 103, 181, 255, 147,\n        102, 90, 15, 183, 116, 87, 9, 234, 149, 220, 97, 185, 51, 15, 48, 192, 77, 192, 92, 6, 25,\n        231, 98, 183, 247, 191, 91, 35, 232, 21, 25, 172, 40, 237, 60, 161, 137, 231, 74, 255, 83,\n        254, 36, 142, 212, 17, 244, 228, 22, 175, 11, 18, 28, 10, 13, 59, 153, 59, 167, 135, 132,\n        139, 137, 113, 140, 127, 144, 118, 200, 162, 233, 78, 190, 163, 76, 226, 254, 141, 23, 103,\n        104, 130, 9, 249, 38, 224, 186, 81, 202, 138, 93, 91, 204, 157, 215, 80, 29, 100, 172, 90,\n        238, 198, 240, 210, 187, 19, 62, 115, 118, 162, 168, 216, 71, 112, 46, 23, 133, 22, 189,\n        210, 149, 133, 48, 200, 136, 154, 38, 232, 39, 155, 118, 193, 34, 213, 153, 254, 27, 118,\n        184, 252, 128, 4, 175, 4, 84, 119, 78, 252, 154, 99, 252, 142, 108, 170, 171, 108, 4, 181,\n        42, 121, 214, 195, 219, 86, 242, 192, 126, 196, 223, 239, 42, 199, 225, 212, 234, 10, 122,\n        3, 193, 28, 84, 12, 112, 161, 253, 10, 169, 105, 164, 63, 97, 189, 164, 233, 134, 45, 115,\n        68, 28, 24, 245, 177, 156, 59, 119, 158, 169, 190, 92, 55, 25, 81, 131, 16, 97, 164, 233,\n        188, 6, 13, 197, 35, 180, 215, 5, 222, 218, 153, 211, 204, 140, 43, 16, 66, 70, 37, 188,\n        245, 142, 91, 181, 176, 50, 210, 247, 126, 210, 254, 254, 56, 58, 202, 187, 189, 198, 247,\n        74, 189, 80, 143, 231, 208, 22, 188, 255, 184, 79, 239, 101, 153, 38, 185, 223, 119, 141,\n        143, 241, 93, 236, 72, 153, 185, 119, 215, 135, 123, 202, 66, 204, 12, 243, 246, 48, 43,\n        154, 83, 0, 100, 146, 157, 230, 233, 147, 209, 45, 106, 170, 231, 113, 162, 217, 136, 142,\n        254, 179, 55, 216, 202, 171, 112, 33, 169, 211, 27, 69, 131, 131, 186, 210, 79, 186, 244,\n        223, 25, 153, 0, 204, 17, 150, 183, 82, 33, 40, 165, 178, 214, 212, 185, 215, 118, 116,\n        192, 121, 23, 111, 14, 148, 118, 17, 195, 123, 98, 96, 227, 160, 203, 98, 44, 10, 17, 73,\n        153, 8, 104, 225, 126, 28, 62, 50, 167, 146, 93, 246, 148, 222, 56, 235, 205, 189, 222,\n        186, 74, 242, 195, 91, 54, 135, 245, 245, 139, 235, 233, 43, 125, 89, 87, 250, 179, 228,\n        228, 166, 141, 238, 53, 245, 80, 235, 32, 142, 81, 180, 51, 107, 117, 28, 197, 62, 15, 107,\n        40, 167, 63, 119, 215, 239, 4, 53, 26, 254, 55, 153, 8, 89, 253, 156, 98, 25, 51, 54, 205,\n        255, 183, 37, 76, 39, 153, 92, 240, 79, 178, 157, 153, 205, 242, 91, 133, 204, 26, 107, 7,\n        105, 59, 186, 37, 217, 61, 171, 159, 165, 68, 171, 10, 91, 29, 236, 136, 188, 153, 202, 63,\n        99, 47, 38, 246, 92, 156, 111, 100, 241, 142, 19, 98, 204, 171, 188, 6, 5, 130, 1, 1, 0,\n        218, 204, 24, 99, 48, 253, 244, 23, 35, 26, 86, 126, 91, 223, 60, 108, 56, 228, 113, 183,\n        120, 145, 212, 188, 161, 216, 76, 248, 168, 67, 182, 3, 233, 77, 33, 7, 8, 136, 218, 88,\n        47, 102, 57, 41, 189, 5, 120, 139, 157, 56, 232, 5, 183, 106, 126, 113, 164, 230, 196, 96,\n        166, 176, 239, 128, 228, 137, 40, 15, 158, 37, 214, 237, 131, 243, 173, 166, 145, 199, 152,\n        201, 66, 24, 53, 20, 157, 173, 152, 70, 146, 46, 79, 202, 241, 135, 67, 193, 22, 149, 87,\n        45, 80, 239, 137, 45, 128, 122, 87, 173, 242, 238, 95, 107, 210, 0, 141, 185, 20, 248, 20,\n        21, 53, 217, 192, 70, 163, 123, 114, 200, 145, 191, 201, 85, 43, 205, 208, 151, 62, 156,\n        38, 100, 204, 223, 206, 131, 25, 113, 202, 78, 230, 212, 213, 123, 169, 25, 205, 85, 222,\n        200, 236, 210, 94, 56, 83, 229, 92, 79, 140, 45, 254, 80, 35, 54, 252, 102, 230, 203, 142,\n        164, 57, 25, 0, 183, 149, 2, 57, 145, 11, 14, 254, 56, 46, 209, 29, 5, 154, 246, 77, 62,\n        111, 15, 7, 29, 175, 255, 255, 255, 255, 255, 255, 255, 7, 44, 30, 143, 96, 57, 226, 250,\n        54, 83, 19, 57, 212, 94, 38, 43, 219, 61, 168, 20, 189, 50, 235, 24, 3, 40, 82, 4, 113,\n        229, 171, 51, 61, 225, 56, 187, 7, 54, 132, 98, 156, 121, 234, 22, 48, 244, 95, 192, 43,\n        232, 113, 107, 228, 249, 2, 3, 1, 0, 1, 163, 129, 240, 48, 129, 237, 48, 31, 6, 3, 85, 29,\n        35, 4, 24, 48, 22, 128, 20, 72, 230, 104, 249, 43, 210, 178, 149, 215, 71, 216, 35, 32, 16,\n        79, 51, 152, 144, 159, 212, 48, 29, 6, 3, 85, 29, 14, 4, 22, 4, 20, 192, 122, 152, 104,\n        141, 137, 251, 171, 5, 100, 12, 17, 125, 170, 125, 101, 184, 202, 204, 78, 48, 15, 6, 3,\n        85, 29, 19, 1, 1, 255, 4, 5, 48, 3, 1, 1, 255, 48, 14, 6, 3, 85, 29, 15, 1, 1, 255, 4, 4,\n        3, 2, 1, 6, 48, 58, 6, 3, 85, 29, 31, 4, 51, 48, 49, 48, 47, 160, 45, 160, 43, 134, 41,\n        104, 116, 116, 112, 58, 47, 47, 99, 114, 108, 46, 103, 101, 111, 116, 114, 117, 115, 116,\n        46, 99, 111, 109, 47, 99, 114, 108, 115, 47, 115, 101, 99, 117, 114, 101, 99, 97, 46, 99,\n        114, 108, 48, 78, 6, 3, 85, 29, 32, 4, 71, 48, 69, 48, 67, 6, 4, 85, 29, 32, 0, 48, 59, 48,\n        57, 6, 8, 43, 6, 1, 5, 5, 7, 2, 1, 22, 45, 104, 116, 116, 112, 115, 58, 47, 47, 119, 119,\n        119, 46, 103, 101, 111, 116, 114, 117, 115, 116, 46, 99, 111, 109, 47, 114, 101, 115, 111,\n        117, 114, 99, 101, 115, 47, 114, 101, 112, 111, 115, 105, 116, 111, 114, 121, 48, 13, 6, 9,\n        42, 134, 72, 134, 247, 13, 1, 1, 5, 5, 0, 3, 129, 129, 0, 118, 225, 18, 110, 78, 75, 22,\n        18, 134, 48, 6, 178, 129, 8, 207, 240, 8, 199, 199, 113, 126, 102, 238, 194, 237, 212, 59,\n        31, 255, 240, 240, 200, 78, 214, 67, 56, 176, 185, 48, 125, 24, 208, 85, 131, 162, 106,\n        203, 54, 17, 156, 232, 72, 102, 163, 109, 127, 184, 19, 212, 71, 254, 139, 90, 92, 115,\n        252, 174, 217, 27, 50, 25, 56, 171, 151, 52, 20, 170, 150, 210, 235, 163, 28, 20, 8, 73,\n        182, 187, 229, 145, 239, 131, 54, 235, 29, 86, 111, 202, 218, 188, 115, 99, 144, 228, 127,\n        123, 62, 34, 203, 61, 7, 237, 95, 56, 116, 156, 227, 3, 80, 78, 161, 175, 152, 238, 97,\n        242, 132, 63, 18, 22, 3, 3, 0, 114, 12, 0, 0, 110, 3, 0, 29, 32, 75, 217, 44, 1, 117, 219,\n        122, 48, 71, 161, 89, 28, 185, 211, 203, 104, 197, 72, 172, 58, 227, 76, 100, 140, 23, 97,\n        211, 83, 70, 10, 176, 5, 4, 3, 0, 70, 48, 68, 2, 32, 118, 77, 25, 193, 184, 245, 209, 235,\n        233, 73, 206, 164, 213, 214, 217, 58, 189, 77, 153, 98, 68, 51, 73, 61, 86, 46, 224, 166,\n        129, 143, 233, 99, 2, 32, 124, 140, 108, 231, 222, 178, 70, 254, 130, 96, 249, 202, 22, 73,\n        30, 105, 180, 48, 177, 254, 92, 206, 16, 218, 0, 232, 189, 151, 157, 245, 39, 28, 22, 3, 3,\n        0, 4, 14, 0, 0, 0, 22, 3, 3, 0, 190, 4, 0, 0, 186, 0, 1, 137, 192, 0, 180, 20, 223, 122,\n        124, 254, 176, 24, 87, 129, 188, 25, 248, 233, 202, 114, 232, 117, 171, 162, 35, 223, 70,\n        217, 201, 60, 235, 114, 254, 181, 102, 199, 213, 157, 219, 90, 42, 235, 135, 84, 255, 194,\n        219, 249, 247, 214, 54, 54, 229, 79, 220, 3, 128, 70, 175, 208, 157, 21, 23, 181, 116, 24,\n        151, 213, 169, 71, 137, 211, 133, 66, 217, 94, 57, 172, 53, 200, 76, 212, 201, 64, 165, 40,\n        211, 58, 41, 133, 5, 180, 151, 59, 17, 112, 75, 19, 186, 172, 50, 36, 184, 98, 225, 103, 3,\n        192, 196, 234, 34, 58, 122, 13, 145, 186, 175, 6, 194, 14, 113, 209, 83, 212, 155, 61, 162,\n        156, 108, 103, 139, 224, 128, 191, 58, 168, 228, 223, 63, 16, 216, 161, 129, 103, 100, 126,\n        196, 98, 10, 77, 40, 217, 195, 19, 205, 202, 220, 96, 17, 175, 95, 25, 22, 158, 125, 215,\n        107, 136, 1, 124, 91, 213, 38, 226, 229, 171, 102, 229, 43, 21, 96, 18, 64, 250, 121, 28,\n        196, 204, 232, 170, 196, 217, 241, 72, 52, 204, 213, 15, 38, 22, 211, 23, 30, 200, 130,\n        144, 162, 241, 75, 131, 109, 216, 53, 176, 129, 181, 234, 255, 221, 66, 0, 103, 20, 218,\n        25, 242, 178, 29, 66, 74, 132, 102, 65, 47, 113, 156, 220, 240, 218, 205, 242, 139, 64,\n        190, 177, 79, 163, 13, 245, 95, 144, 138, 214, 18, 105, 157, 143, 227, 178, 156, 38, 215,\n        106, 254, 245, 153, 14, 188, 52, 101, 188, 238, 86, 47, 120, 37, 100, 136, 93, 124, 217,\n        73, 77, 154, 46, 244, 106, 178, 10, 189, 146, 171, 135, 220, 144, 201, 229, 61, 61, 135,\n        192, 76, 64, 222, 138, 66, 197, 214, 166, 41, 39, 147, 245, 35, 15, 191, 134, 204, 64, 72,\n        168, 114, 232, 179, 225, 117, 94, 47, 184, 219, 143, 107, 210, 56, 223, 248, 86, 107, 154,\n        214, 43, 23, 71, 130, 241, 25, 50, 204, 144, 244, 19, 51, 33, 180, 0, 17, 184, 61, 147,\n    ];\n    let root_store = RootCertStore::empty();\n    let config = Arc::new(\n        ClientConfig::builder()\n            .with_safe_defaults()\n            .with_root_certificates(root_store)\n            .with_no_client_auth(),\n    );\n    let example_com = \"example.com\".try_into().unwrap();\n    let mut client = ClientConnection::new(config, example_com).unwrap();\n    let _ = client.read_tls(&mut io::Cursor::new(data));\n    let _ = client.process_new_packets();\n}"}
{"test_id": "image-rs-image-png/image-rs-image-png-e113d76/tests-gen/roundtrip.inputs.rs::test_65", "code": "fn encode_png < 'a > (width : u8 , filter : u8 , compression : u8 , color_type : u8 , raw_bit_depth : u8 , raw_palette : & 'a [u8] , data : & 'a [u8]) -> Option < (& 'a [u8] , Vec < u8 >) > { let width = width as u32 ; if width == 0 { return None } ; let filter = FilterType :: from_u8 (filter) ? ; let bit_depth = BitDepth :: from_u8 (raw_bit_depth) ? ; let max_palette_length = 3 * u32 :: pow (2 , raw_bit_depth as u32) as usize ; let mut palette = raw_palette ; let color_type = ColorType :: from_u8 (color_type) ? ; if let ColorType :: Indexed = color_type { if raw_palette . len () > max_palette_length { palette = & raw_palette [.. max_palette_length] ; } } let compression = match compression { 0 => png :: Compression :: Default , 1 => png :: Compression :: Fast , 2 => png :: Compression :: Best , 3 => png :: Compression :: Huffman , 4 => png :: Compression :: Rle , _ => return None , } ; let bytes_per_row = raw_row_length_from_width (bit_depth , color_type , width) - 1 ; let height = data . len () / bytes_per_row ; let total_bytes = bytes_per_row * height ; let data_to_encode = & data [.. total_bytes] ; let mut output : Vec < u8 > = Vec :: new () ; { let mut encoder = png :: Encoder :: new (& mut output , width , height as u32) ; encoder . set_depth (bit_depth) ; encoder . set_color (color_type) ; encoder . set_filter (filter) ; encoder . set_compression (compression) ; if let ColorType :: Indexed = color_type { encoder . set_palette (palette) } let mut writer = encoder . write_header () . ok () ? ; writer . write_image_data (data_to_encode) . expect (\"Encoding failed\") ; } Some ((data_to_encode , output)) }", "test": "fn test_65() {\n    let data = (1, 0, 0, 0, 1, [], []);\n    if let Some((raw, encoded)) =\n        encode_png(data.0, data.1, data.2, data.3, data.4, &data.5, &data.6)\n    {\n        let (_info, raw_decoded) = decode_png(&encoded);\n        let raw_decoded = &raw_decoded[..raw.len()];\n        assert_eq!(raw, raw_decoded);\n    }\n}"}
{"test_id": "image-rs-image/image-rs-image-e5580ec/tests-gen/fuzzer_script_tga.inputs.rs::test_67", "code": "fn decode(encoded: &[u8]) -> Vec<u8> {\n        let decoder = JpegDecoder::new(Cursor::new(encoded)).expect(\"Could not decode image\");\n\n        let mut decoded = vec![0; decoder.total_bytes() as usize];\n        decoder\n            .read_image(&mut decoded)\n            .expect(\"Could not decode image\");\n        decoded\n    }", "test": "fn test_67() {\n    let data = [26, 10];\n    let _ = decode(data);\n}"}
{"test_id": "tafia-calamine/tafia-calamine-5a5804d/tests-gen/fuzz_all.inputs.rs::test_4", "code": "fn count<R: Reader<BufReader<File>>>(path: &str) -> usize {\n    let path = format!(\"{}/{}\", env!(\"CARGO_MANIFEST_DIR\"), path);\n    let mut excel: R = open_workbook(&path).expect(\"cannot open excel file\");\n\n    let sheets = excel.sheet_names().to_owned();\n    let mut count = 0;\n    for s in sheets {\n        count += excel\n            .worksheet_range(&s)\n            .unwrap()\n            .unwrap()\n            .rows()\n            .flat_map(|r| r.iter())\n            .count();\n    }\n    count\n}", "test": "fn test_4() {\n    let data = [14];\n    let file_name = \"fuzz.xlsx\";\n    if let Ok(mut file) = File::create(file_name) {\n        if file.write_all(data).is_err() {\n            return;\n        }\n    }\n    let mut workbook: Xlsx<_> = match open_workbook(file_name) {\n        Ok(excel) => excel,\n        Err(_) => return,\n    };\n    for worksheet in workbook.worksheets() {\n        if let Some(Ok(range)) = workbook.worksheet_range(&worksheet.0) {\n            let _ = range.get_size().0 * range.get_size().1;\n            range.used_cells().count();\n        }\n    }\n    if let Some(Ok(mut vba)) = workbook.vba_project() {\n        let vba = vba.to_mut();\n        for module_name in vba.get_module_names() {\n            if vba.get_module(module_name).is_ok() {\n                for r in vba.get_references() {\n                    r.is_missing();\n                }\n            }\n        }\n    }\n    let sheets = workbook.sheet_names().to_owned();\n    for s in sheets {\n        if let Some(Ok(formula)) = workbook.worksheet_formula(&s) {\n            formula\n                .rows()\n                .flat_map(|r| r.iter().filter(|f| !f.is_empty()))\n                .count();\n        }\n    }\n}"}
{"test_id": "BurntSushi-memchr/BurntSushi-memchr-f3fde7a/tests-gen/memrchr3.inputs.rs::test_7", "code": "fn count(self) -> usize {\n        self.it.count(|s, e| {\n            // SAFETY: We rely on our generic iterator to return valid start\n            // and end pointers.\n            unsafe { count_raw(self.needle1, s, e) }\n        })\n    }", "test": "fn test_7() {\n    let data = [36, 35];\n    if data.len() < 3 {\n        return;\n    }\n    memchr3_iter(data[0], data[1], data[2], &data[3..]).rev().count();\n}"}
{"test_id": "zip-rs-zip/zip-rs-zip-ed187d6/tests-gen/fuzz_read.inputs.rs::test_5", "code": "fn decompress_all (data : & [u8]) -> Result < () , Box < dyn std :: error :: Error > > { let reader = std :: io :: Cursor :: new (data) ; let mut zip = zip :: ZipArchive :: new (reader) ? ; for i in 0 .. zip . len () { let mut file = zip . by_index (i) ? ; if file . size () < 1 << 20 { let _ = std :: io :: copy (& mut file , & mut std :: io :: sink ()) ; } } Ok (()) }", "test": "fn test_5() {\n    let data = [200];\n    let _ = decompress_all(data);\n}"}
{"test_id": "marshallpierce-rust-base64/marshallpierce-rust-base64-4ef33cc/tests-gen/roundtrip.inputs.rs::test_46", "code": "pub fn decode<T: AsRef<[u8]>>(input: T) -> Result<Vec<u8>, DecodeError> {\n    STANDARD.decode(input)\n}", "test": "fn test_46() {\n    let data = [0, 64];\n    let encoded = STANDARD.encode(data);\n    let decoded = STANDARD.decode(&encoded).unwrap();\n    assert_eq!(data, decoded.as_slice());\n}"}
{"test_id": "tafia-calamine/tafia-calamine-5a5804d/tests-gen/fuzz_all.inputs.rs::test_56", "code": "fn count<R: Reader<BufReader<File>>>(path: &str) -> usize {\n    let path = format!(\"{}/{}\", env!(\"CARGO_MANIFEST_DIR\"), path);\n    let mut excel: R = open_workbook(&path).expect(\"cannot open excel file\");\n\n    let sheets = excel.sheet_names().to_owned();\n    let mut count = 0;\n    for s in sheets {\n        count += excel\n            .worksheet_range(&s)\n            .unwrap()\n            .unwrap()\n            .rows()\n            .flat_map(|r| r.iter())\n            .count();\n    }\n    count\n}", "test": "fn test_56() {\n    let data = [69, 14];\n    let file_name = \"fuzz.xlsx\";\n    if let Ok(mut file) = File::create(file_name) {\n        if file.write_all(data).is_err() {\n            return;\n        }\n    }\n    let mut workbook: Xlsx<_> = match open_workbook(file_name) {\n        Ok(excel) => excel,\n        Err(_) => return,\n    };\n    for worksheet in workbook.worksheets() {\n        if let Some(Ok(range)) = workbook.worksheet_range(&worksheet.0) {\n            let _ = range.get_size().0 * range.get_size().1;\n            range.used_cells().count();\n        }\n    }\n    if let Some(Ok(mut vba)) = workbook.vba_project() {\n        let vba = vba.to_mut();\n        for module_name in vba.get_module_names() {\n            if vba.get_module(module_name).is_ok() {\n                for r in vba.get_references() {\n                    r.is_missing();\n                }\n            }\n        }\n    }\n    let sheets = workbook.sheet_names().to_owned();\n    for s in sheets {\n        if let Some(Ok(formula)) = workbook.worksheet_formula(&s) {\n            formula\n                .rows()\n                .flat_map(|r| r.iter().filter(|f| !f.is_empty()))\n                .count();\n        }\n    }\n}"}
{"test_id": "zip-rs-zip/zip-rs-zip-ed187d6/tests-gen/fuzz_read.inputs.rs::test_48", "code": "fn decompress_all (data : & [u8]) -> Result < () , Box < dyn std :: error :: Error > > { let reader = std :: io :: Cursor :: new (data) ; let mut zip = zip :: ZipArchive :: new (reader) ? ; for i in 0 .. zip . len () { let mut file = zip . by_index (i) ? ; if file . size () < 1 << 20 { let _ = std :: io :: copy (& mut file , & mut std :: io :: sink ()) ; } } Ok (()) }", "test": "fn test_48() {\n    let data = [136, 10];\n    let _ = decompress_all(data);\n}"}
{"test_id": "BurntSushi-memchr/BurntSushi-memchr-f3fde7a/tests-gen/memchr3.inputs.rs::test_41", "code": "fn count(self) -> usize {\n        self.it.count(|s, e| {\n            // SAFETY: We rely on our generic iterator to return valid start\n            // and end pointers.\n            unsafe { count_raw(self.needle1, s, e) }\n        })\n    }", "test": "fn test_41() {\n    let data = [47, 255, 38, 10];\n    if data.len() < 3 {\n        return;\n    }\n    memchr3_iter(data[0], data[1], data[2], &data[3..]).count();\n}"}
{"test_id": "gimli-rs-gimli/gimli-rs-gimli-3947879/tests-gen/debug_abbrev.inputs.rs::test_97", "code": "pub fn get<R: Reader>(\n        &self,\n        debug_abbrev: &DebugAbbrev<R>,\n        offset: DebugAbbrevOffset<R::Offset>,\n    ) -> Result<Arc<Abbreviations>> {\n        if offset.0 != R::Offset::from_u8(0) {\n            return debug_abbrev.abbreviations(offset).map(Arc::new);\n        }\n        self.abbreviations\n            .get(|| debug_abbrev.abbreviations(offset))\n    }", "test": "fn test_97() {\n    let debug_abbrev = [0, 65, 0];\n    let len = debug_abbrev.len();\n    let debug_abbrev = DebugAbbrev::new(&debug_abbrev, LittleEndian);\n    let offset = DebugAbbrevOffset(0);\n    if let Ok(abbreviations) = debug_abbrev.abbreviations(offset) {\n        for i in 1..len {\n            let _ = abbreviations.get(i as u64);\n        }\n    }\n}"}
{"test_id": "cloud-hypervisor-cloud-hypervisor/cloud-hypervisor-cloud-hypervisor-db3a5f3/tests-gen/rng.inputs.rs::test_54", "code": "pub fn wait_for_epoll_threads(&mut self) {\n        self.common.wait_for_epoll_threads();\n    }", "test": "fn test_54() {\n    let bytes = [5, 27, 5, 42];\n    if bytes.len() < (QUEUE_DATA_SIZE + QUEUE_BYTES_SIZE)\n        || bytes.len() > (QUEUE_DATA_SIZE + QUEUE_BYTES_SIZE + MEM_SIZE)\n    {\n        return;\n    }\n    let mut rng = virtio_devices::Rng::new(\n        \"fuzzer_rng\".to_owned(),\n        \"/dev/urandom\",\n        false,\n        SeccompAction::Allow,\n        EventFd::new(EFD_NONBLOCK).unwrap(),\n        None,\n    )\n    .unwrap();\n    let queue_data = &bytes[..QUEUE_DATA_SIZE];\n    let queue_bytes = &bytes[QUEUE_DATA_SIZE..QUEUE_DATA_SIZE + QUEUE_BYTES_SIZE];\n    let mem_bytes = &bytes[QUEUE_DATA_SIZE + QUEUE_BYTES_SIZE..];\n    let q = setup_virt_queue(queue_data.try_into().unwrap());\n    let mem = GuestMemoryMmap::from_ranges(&[\n        (GuestAddress(0), MEM_SIZE),\n        (GuestAddress(DESC_TABLE_ADDR), QUEUE_BYTES_SIZE),\n    ])\n    .unwrap();\n    if mem\n        .write_slice(queue_bytes, GuestAddress(DESC_TABLE_ADDR))\n        .is_err()\n    {\n        return;\n    }\n    if mem.write_slice(mem_bytes, GuestAddress(0 as u64)).is_err() {\n        return;\n    }\n    let guest_memory = GuestMemoryAtomic::new(mem);\n    let evt = EventFd::new(0).unwrap();\n    let queue_evt = unsafe { EventFd::from_raw_fd(libc::dup(evt.as_raw_fd())) };\n    queue_evt.write(1).unwrap();\n    rng.activate(\n        guest_memory,\n        Arc::new(NoopVirtioInterrupt {}),\n        vec![(0, q, evt)],\n    )\n    .ok();\n    rng.wait_for_epoll_threads();\n}"}
{"test_id": "gimli-rs-gimli/gimli-rs-gimli-3947879/tests-gen/eh_frame_hdr.inputs.rs::test_99", "code": "fn parse<R: Reader>(input: &mut R) -> Result<Abbreviations> {\n        let mut abbrevs = Abbreviations::empty();\n\n        while let Some(abbrev) = Abbreviation::parse(input)? {\n            if abbrevs.insert(abbrev).is_err() {\n                return Err(Error::DuplicateAbbreviationCode);\n            }\n        }\n\n        Ok(abbrevs)\n    }", "test": "fn test_99() {\n    let eh_frame_hdr = [10];\n    let eh_frame_hdr = EhFrameHdr::new(eh_frame_hdr, LittleEndian);\n    let bases = BaseAddresses::default()\n        .set_eh_frame(0)\n        .set_eh_frame_hdr(0)\n        .set_text(0)\n        .set_got(0);\n    let address_size = 8;\n    let _ = eh_frame_hdr.parse(&bases, address_size);\n}"}
{"test_id": "cloud-hypervisor-cloud-hypervisor/cloud-hypervisor-cloud-hypervisor-db3a5f3/tests-gen/console.inputs.rs::test_94", "code": "pub fn wait_for_epoll_threads(&mut self) {\n        self.common.wait_for_epoll_threads();\n    }", "test": "fn test_94() {\n    let bytes = [10, 40, 242, 40];\n    if bytes.len() < (QUEUE_DATA_SIZE + QUEUE_BYTES_SIZE) * QUEUE_NUM + CONSOLE_INPUT_SIZE\n        || bytes.len()\n            > (QUEUE_DATA_SIZE + QUEUE_BYTES_SIZE) * QUEUE_NUM + CONSOLE_INPUT_SIZE + MEM_SIZE\n    {\n        return;\n    }\n    let (pipe_rx, mut pipe_tx) = create_pipe().unwrap();\n    let output = unsafe {\n        File::from_raw_fd(\n            memfd_create(&std::ffi::CString::new(\"fuzz_console_output\").unwrap()).unwrap(),\n        )\n    };\n    let endpoint = virtio_devices::Endpoint::FilePair(output, pipe_rx);\n    let (mut console, _) = virtio_devices::Console::new(\n        \"fuzzer_console\".to_owned(),\n        endpoint,\n        None,\n        false,\n        SeccompAction::Allow,\n        EventFd::new(EFD_NONBLOCK).unwrap(),\n        None,\n    )\n    .unwrap();\n    let console_input_bytes = &bytes[..CONSOLE_INPUT_SIZE];\n    let queue_data = &bytes[CONSOLE_INPUT_SIZE..CONSOLE_INPUT_SIZE + QUEUE_DATA_SIZE * QUEUE_NUM];\n    let queue_bytes = &bytes[CONSOLE_INPUT_SIZE + QUEUE_DATA_SIZE * QUEUE_NUM\n        ..CONSOLE_INPUT_SIZE + (QUEUE_DATA_SIZE + QUEUE_BYTES_SIZE) * QUEUE_NUM];\n    let mem_bytes = &bytes[CONSOLE_INPUT_SIZE + (QUEUE_DATA_SIZE + QUEUE_BYTES_SIZE) * QUEUE_NUM..];\n    let mut queues = setup_virt_queues(\n        &[\n            &queue_data[..QUEUE_DATA_SIZE].try_into().unwrap(),\n            &queue_data[QUEUE_DATA_SIZE..QUEUE_DATA_SIZE * 2]\n                .try_into()\n                .unwrap(),\n        ],\n        BASE_VIRT_QUEUE_ADDR,\n    );\n    let mem = GuestMemoryMmap::from_ranges(&[\n        (GuestAddress(0), MEM_SIZE),\n        (GuestAddress(BASE_VIRT_QUEUE_ADDR), queue_bytes.len()),\n    ])\n    .unwrap();\n    if mem\n        .write_slice(queue_bytes, GuestAddress(BASE_VIRT_QUEUE_ADDR))\n        .is_err()\n    {\n        return;\n    }\n    if mem.write_slice(mem_bytes, GuestAddress(0 as u64)).is_err() {\n        return;\n    }\n    let guest_memory = GuestMemoryAtomic::new(mem);\n    let input_queue = queues.remove(0);\n    let input_evt = EventFd::new(0).unwrap();\n    let input_queue_evt = unsafe { EventFd::from_raw_fd(libc::dup(input_evt.as_raw_fd())) };\n    let output_queue = queues.remove(0);\n    let output_evt = EventFd::new(0).unwrap();\n    let output_queue_evt = unsafe { EventFd::from_raw_fd(libc::dup(output_evt.as_raw_fd())) };\n    input_queue_evt.write(1).unwrap();\n    output_queue_evt.write(1).unwrap();\n    pipe_tx.write_all(console_input_bytes).unwrap();\n    console\n        .activate(\n            guest_memory,\n            Arc::new(NoopVirtioInterrupt {}),\n            vec![(0, input_queue, input_evt), (1, output_queue, output_evt)],\n        )\n        .unwrap();\n    console.wait_for_epoll_threads();\n}"}
{"test_id": "cloud-hypervisor-cloud-hypervisor/cloud-hypervisor-cloud-hypervisor-db3a5f3/tests-gen/mem.inputs.rs::test_41", "code": "pub fn wait_for_epoll_threads(&mut self) {\n        self.common.wait_for_epoll_threads();\n    }", "test": "fn test_41() {\n    let bytes = [10, 18];\n    if bytes.len() < VIRTIO_MEM_DATA_SIZE + QUEUE_DATA_SIZE + QUEUE_BYTES_SIZE\n        || bytes.len() > (VIRTIO_MEM_DATA_SIZE + QUEUE_DATA_SIZE + QUEUE_BYTES_SIZE + MEM_SIZE)\n    {\n        return;\n    }\n    let virtio_mem_data = &bytes[..VIRTIO_MEM_DATA_SIZE];\n    let queue_data = &bytes[VIRTIO_MEM_DATA_SIZE..VIRTIO_MEM_DATA_SIZE + QUEUE_DATA_SIZE];\n    let queue_bytes = &bytes[VIRTIO_MEM_DATA_SIZE + QUEUE_DATA_SIZE\n        ..VIRTIO_MEM_DATA_SIZE + QUEUE_DATA_SIZE + QUEUE_BYTES_SIZE];\n    let mem_bytes = &bytes[VIRTIO_MEM_DATA_SIZE + QUEUE_DATA_SIZE + QUEUE_BYTES_SIZE..];\n    let (mut virtio_mem, virtio_mem_region) =\n        create_dummy_virtio_mem(virtio_mem_data.try_into().unwrap());\n    let q = setup_virt_queue(queue_data.try_into().unwrap());\n    let mem =\n        GuestMemoryMmap::from_ranges(&[(GuestAddress(DESC_TABLE_ADDR), QUEUE_BYTES_SIZE)]).unwrap();\n    if mem\n        .write_slice(queue_bytes, GuestAddress(DESC_TABLE_ADDR))\n        .is_err()\n    {\n        return;\n    }\n    let mem = mem.insert_region(virtio_mem_region).unwrap();\n    if mem\n        .write_slice(mem_bytes, GuestAddress(VIRTIO_MEM_REGION_ADDRESS))\n        .is_err()\n    {\n        return;\n    }\n    let guest_memory = GuestMemoryAtomic::new(mem);\n    let evt = EventFd::new(0).unwrap();\n    let queue_evt = unsafe { EventFd::from_raw_fd(libc::dup(evt.as_raw_fd())) };\n    queue_evt.write(1).unwrap();\n    virtio_mem\n        .activate(\n            guest_memory,\n            Arc::new(NoopVirtioInterrupt {}),\n            vec![(0, q, evt)],\n        )\n        .ok();\n    virtio_mem.wait_for_epoll_threads();\n}"}
{"test_id": "bodil-im-rs/bodil-im-rs-2afaf54/tests-gen/hashset.inputs.rs::test_16", "code": "pub fn remove<BA>(&mut self, a: &BA) -> Option<A>\n    where\n        BA: Hash + Eq + ?Sized,\n        A: Borrow<BA>,\n    {\n        let root = PoolRef::make_mut(&self.pool.0, &mut self.root);\n        let result = root.remove(&self.pool.0, hash_key(&*self.hasher, a), 0, a);\n        if result.is_some() {\n            self.size -= 1;\n        }\n        result.map(|v| v.0)\n    }", "test": "fn test_16() {\n    let actions = [Insert(72057594037927680)];\n    let mut set = HashSet::new();\n    let mut nat = NatSet::new();\n    for action in actions {\n        match action {\n            Action::Insert(value) => {\n                let len = nat.len() + if nat.contains(&value) { 0 } else { 1 };\n                nat.insert(value);\n                set.insert(value);\n                assert_eq!(len, set.len());\n            }\n            Action::Remove(value) => {\n                let len = nat.len() - if nat.contains(&value) { 1 } else { 0 };\n                nat.remove(&value);\n                set.remove(&value);\n                assert_eq!(len, set.len());\n            }\n        }\n        assert_eq!(nat.len(), set.len());\n        assert_eq!(HashSet::from(nat.clone()), set);\n    }\n}"}
{"test_id": "image-rs-image-png/image-rs-image-png-e113d76/tests-gen/buf_independent.inputs.rs::test_21", "code": "fn new (inner : R , cap : usize) -> Self { SmalBuf { inner , cap } }", "test": "fn test_21() {\n    let data = [33, 0, 0];\n    let limits = png::Limits { bytes: 1 << 16 };\n    let reference = png::Decoder::new_with_limits(data, limits);\n    let smal = png::Decoder::new_with_limits(SmalBuf::new(data, 1), limits);\n    let _ = png_compare(reference, smal);\n}"}
{"test_id": "cloud-hypervisor-cloud-hypervisor/cloud-hypervisor-cloud-hypervisor-db3a5f3/tests-gen/balloon.inputs.rs::test_86", "code": "pub fn wait_for_epoll_threads(&mut self) {\n        self.common.wait_for_epoll_threads();\n    }", "test": "fn test_86() {\n    let bytes = [240, 247, 10, 240];\n    if bytes.len() < QUEUE_DATA_SIZE * QUEUE_NUM\n        || bytes.len() > (QUEUE_DATA_SIZE * QUEUE_NUM + MEM_SIZE)\n    {\n        return;\n    }\n    let mut balloon = virtio_devices::Balloon::new(\n        \"fuzzer_balloon\".to_owned(),\n        BALLOON_SIZE,\n        true,\n        true,\n        SeccompAction::Allow,\n        EventFd::new(EFD_NONBLOCK).unwrap(),\n        None,\n    )\n    .unwrap();\n    let queue_data = &bytes[..QUEUE_DATA_SIZE * QUEUE_NUM];\n    let mem_bytes = &bytes[QUEUE_DATA_SIZE * QUEUE_NUM..];\n    let mem = GuestMemoryMmap::from_ranges(&[(GuestAddress(0), MEM_SIZE)]).unwrap();\n    if mem.write_slice(mem_bytes, GuestAddress(0 as u64)).is_err() {\n        return;\n    }\n    let guest_memory = GuestMemoryAtomic::new(mem);\n    let mut queues = setup_virt_queues(\n        &[\n            &queue_data[..QUEUE_DATA_SIZE].try_into().unwrap(),\n            &queue_data[QUEUE_DATA_SIZE..QUEUE_DATA_SIZE * 2]\n                .try_into()\n                .unwrap(),\n            &queue_data[QUEUE_DATA_SIZE * 2..QUEUE_DATA_SIZE * 3]\n                .try_into()\n                .unwrap(),\n        ],\n        0,\n    );\n    let inflate_q = queues.remove(0);\n    let inflate_evt = EventFd::new(0).unwrap();\n    let inflate_queue_evt = unsafe { EventFd::from_raw_fd(libc::dup(inflate_evt.as_raw_fd())) };\n    let deflate_q = queues.remove(0);\n    let deflate_evt = EventFd::new(0).unwrap();\n    let deflate_queue_evt = unsafe { EventFd::from_raw_fd(libc::dup(deflate_evt.as_raw_fd())) };\n    let reporting_q = queues.remove(0);\n    let reporting_evt = EventFd::new(0).unwrap();\n    let reporting_queue_evt = unsafe { EventFd::from_raw_fd(libc::dup(reporting_evt.as_raw_fd())) };\n    inflate_queue_evt.write(1).unwrap();\n    deflate_queue_evt.write(1).unwrap();\n    reporting_queue_evt.write(1).unwrap();\n    balloon\n        .activate(\n            guest_memory,\n            Arc::new(NoopVirtioInterrupt {}),\n            vec![\n                (0, inflate_q, inflate_evt),\n                (1, deflate_q, deflate_evt),\n                (2, reporting_q, reporting_evt),\n            ],\n        )\n        .ok();\n    balloon.wait_for_epoll_threads();\n}"}
{"test_id": "BurntSushi-memchr/BurntSushi-memchr-f3fde7a/tests-gen/memrchr2.inputs.rs::test_7", "code": "fn count(self) -> usize {\n        self.it.count(|s, e| {\n            // SAFETY: We rely on our generic iterator to return valid start\n            // and end pointers.\n            unsafe { count_raw(self.needle1, s, e) }\n        })\n    }", "test": "fn test_7() {\n    let data = [177, 10];\n    if data.len() < 2 {\n        return;\n    }\n    memchr2_iter(data[0], data[1], &data[2..]).rev().count();\n}"}
{"test_id": "gimli-rs-gimli/gimli-rs-gimli-3947879/tests-gen/eh_frame.inputs.rs::test_59", "code": "pub fn next_row(&mut self) -> Result<Option<(&LineProgramHeader<R, Offset>, &LineRow)>> {\n        // Perform any reset that was required after copying the previous row.\n        self.row.reset(self.program.header());\n\n        loop {\n            // Split the borrow here, rather than calling `self.header()`.\n            match self.instructions.next_instruction(self.program.header()) {\n                Err(err) => return Err(err),\n                Ok(None) => return Ok(None),\n                Ok(Some(instruction)) => {\n                    if self.row.execute(instruction, &mut self.program) {\n                        if self.row.tombstone {\n                            // Perform any reset that was required for the tombstone row.\n                            // Normally this is done when `next_row` is called again, but for\n                            // tombstones we loop immediately.\n                            self.row.reset(self.program.header());\n                        } else {\n                            return Ok(Some((self.header(), &self.row)));\n                        }\n                    }\n                    // Fall through, parse the next instruction, and see if that\n                    // yields a row.\n                }\n            }\n        }\n    }", "test": "fn test_59() {\n    let eh_frame = [41, 207, 96, 96];\n    let eh_frame = EhFrame::new(&eh_frame, LittleEndian);\n    let mut ctx = Box::new(UnwindContext::new());\n    let bases = BaseAddresses::default()\n        .set_eh_frame(0)\n        .set_eh_frame_hdr(0)\n        .set_text(0)\n        .set_got(0);\n    let mut entries = eh_frame.entries(&bases);\n    while let Ok(Some(entry)) = entries.next() {\n        match entry {\n            CieOrFde::Cie(_) => continue,\n            CieOrFde::Fde(partial) => {\n                if let Ok(fde) = partial.parse(EhFrame::cie_from_offset) {\n                    if let Ok(mut table) = fde.rows(&eh_frame, &bases, &mut ctx) {\n                        while let Ok(Some(_row)) = table.next_row() {\n                            continue;\n                        }\n                    }\n                }\n            }\n        };\n    }\n}"}
{"test_id": "rust-bio-rust-bio/rust-bio-rust-bio-319a0d8/tests-gen/myers_matching.inputs.rs::test_59", "code": "fn validate_alignment (aln : & Alignment , x : & [u8] , y : & [u8]) { let y = & y [aln . ystart .. aln . yend] ; let mut ix = 0 ; let mut iy = 0 ; let mut calc_dist = 0 ; for op in & aln . operations { match * op { Match => { assert ! (x [ix] == y [iy] , \"Match operation, but characters are not equal\") ; ix += 1 ; iy += 1 ; } Subst => { assert ! (x [ix] != y [iy] , \"Subst operation, but characters are equal\") ; calc_dist += 1 ; ix += 1 ; iy += 1 ; } Del => { calc_dist += 1 ; iy += 1 ; } Ins => { calc_dist += 1 ; ix += 1 ; } _ => unreachable ! () } } assert_eq ! (calc_dist , aln . score as usize) ; }", "test": "fn test_59() {\n    let data = [39, 246, 194];\n    if data.len() < 3 {\n        return;\n    }\n    let (max_dist, data) = data.split_first().unwrap();\n    let (pattern_len, data) = data.split_first().unwrap();\n    let max_dist = min(64, *max_dist);\n    let pattern_len = max(1, min(64, min(data.len(), *pattern_len as usize)));\n    if data.iter().any(|&b| b < 65 || b > 122 || b > 90 && b < 97) {\n        return;\n    }\n    let (pattern, text) = data.split_at(pattern_len);\n    let max_dist = max_dist as u8;\n    let _ = MyersBuilder::new().build_64(pattern);\n    let _ = MyersBuilder::new().build_long_64(pattern);\n    let mut myers = Myers::<u64>::new(pattern);\n    let mut myers_long = long::Myers::<u8>::new(pattern);\n    let end_dist: Vec<_> = myers.find_all_end(text, max_dist).collect();\n    let end_dist_long: Vec<_> = myers_long\n        .find_all_end(text, max_dist as usize)\n        .map(|(end, dist)| (end, dist as u8))\n        .collect();\n    assert_eq!(end_dist, end_dist_long);\n    let mut aln = Alignment::default();\n    let mut aln_long = Alignment::default();\n    {\n        let mut matches = myers.find_all(text, max_dist);\n        let mut matches_long = myers_long.find_all(text, max_dist as usize);\n        matches.alignment(&mut aln);\n        matches_long.alignment(&mut aln_long);\n        let mut end_dist_iter = end_dist.iter();\n        while matches.next_alignment(&mut aln) {\n            assert!(matches_long.next_alignment(&mut aln_long));\n            assert_eq!(aln, aln_long);\n            validate_alignment(&aln, pattern, text);\n            assert!(aln.score as u8 <= max_dist);\n            let (end, dist) = end_dist_iter.next().unwrap();\n            assert_eq!(*end + 1, aln.yend);\n            assert_eq!(*dist, aln.score as u8);\n        }\n        assert!(end_dist_iter.next().is_none());\n        assert!(!matches_long.next_alignment(&mut aln_long));\n    }\n    {\n        let mut matches = myers.find_all_lazy(text, max_dist);\n        let mut matches_long = myers_long.find_all_lazy(text, max_dist as usize);\n        let mut end_dist_iter = end_dist.iter();\n        while let Some((end, dist)) = matches.next() {\n            let (end_long, dist_long) = matches_long.next().unwrap();\n            assert_eq!((end, dist), (end_long, dist_long as u8));\n            assert!(matches.alignment_at(end, &mut aln));\n            assert!(matches_long.alignment_at(end, &mut aln_long));\n            assert_eq!(aln, aln_long);\n            validate_alignment(&aln, pattern, text);\n            assert_eq!(dist, aln.score as u8);\n            assert!(aln.score as u8 <= max_dist);\n            let (end, dist) = end_dist_iter.next().unwrap();\n            assert_eq!(*end + 1, aln.yend);\n            assert_eq!(*dist, aln.score as u8);\n            assert!(!matches.alignment_at(end + 1, &mut aln));\n        }\n        assert!(end_dist_iter.next().is_none());\n    }\n    let mut matches = myers.find_all_lazy(text, u8::max_value());\n    let mut matches_long = myers_long.find_all_lazy(text, u8::max_value() as usize);\n    let mut i = 0;\n    while let Some((end, dist)) = matches.next() {\n        assert_eq!(end, i);\n        let (end_long, dist_long) = matches_long.next().unwrap();\n        assert_eq!((end, dist), (end_long, dist_long as u8));\n        assert!(matches.alignment_at(end, &mut aln));\n        assert!(matches_long.alignment_at(end, &mut aln_long));\n        assert_eq!(aln, aln_long);\n        validate_alignment(&aln, pattern, text);\n        assert_eq!(dist, aln.score as u8);\n        assert!(aln.score as u8 <= u8::max_value());\n        assert!(!matches.alignment_at(end + 1, &mut aln));\n        assert!(!matches_long.alignment_at(end + 1, &mut aln_long));\n        i += 1;\n    }\n}"}
{"test_id": "cloud-hypervisor-cloud-hypervisor/cloud-hypervisor-cloud-hypervisor-db3a5f3/tests-gen/cmos.inputs.rs::test_16", "code": "fn write(&mut self, _base: u64, offset: u64, data: &[u8]) -> Option<Arc<Barrier>> {\n        if data.len() != 1 {\n            warn!(\"Invalid write size on CMOS device: {}\", data.len());\n            return None;\n        }\n\n        match offset {\n            INDEX_OFFSET => self.index = data[0],\n            DATA_OFFSET => {\n                if self.index == 0x8f && data[0] == 0 {\n                    info!(\"CMOS reset\");\n                    self.reset_evt.write(1).unwrap();\n                    if let Some(vcpus_kill_signalled) = self.vcpus_kill_signalled.take() {\n                        // Spin until we are sure the reset_evt has been handled and that when\n                        // we return from the KVM_RUN we will exit rather than re-enter the guest.\n                        while !vcpus_kill_signalled.load(Ordering::SeqCst) {\n                            // This is more effective than thread::yield_now() at\n                            // avoiding a priority inversion with the VMM thread\n                            thread::sleep(std::time::Duration::from_millis(1));\n                        }\n                    }\n                } else {\n                    self.data[(self.index & INDEX_MASK) as usize] = data[0]\n                }\n            }\n            o => warn!(\"bad write offset on CMOS device: {}\", o),\n        };\n        None\n    }", "test": "fn test_16() {\n    let bytes = [39, 58];\n    if bytes.len() < 16 {\n        return;\n    }\n    let mut below_4g = [0u8; 8];\n    let mut above_4g = [0u8; 8];\n    below_4g.copy_from_slice(&bytes[0..8]);\n    above_4g.copy_from_slice(&bytes[8..16]);\n    let mut cmos = Cmos::new(\n        u64::from_le_bytes(below_4g),\n        u64::from_le_bytes(above_4g),\n        EventFd::new(EFD_NONBLOCK).unwrap(),\n        None,\n    );\n    let mut i = 16;\n    while i < bytes.len() {\n        let read = bytes.get(i).unwrap_or(&0) % 2 == 0;\n        i += 1;\n        if read {\n            let offset = (bytes.get(i).unwrap_or(&0) % 2) as u64;\n            i += 1;\n            let mut out_bytes = vec![0];\n            cmos.read(0, offset, &mut out_bytes);\n        } else {\n            let offset = (bytes.get(i).unwrap_or(&0) % 2) as u64;\n            i += 1;\n            let data = vec![*bytes.get(i).unwrap_or(&0)];\n            i += 1;\n            cmos.write(0, offset, &data);\n        }\n    }\n}"}
{"test_id": "image-rs-image-png/image-rs-image-png-e113d76/tests-gen/roundtrip.inputs.rs::test_42", "code": "fn encode_png < 'a > (width : u8 , filter : u8 , compression : u8 , color_type : u8 , raw_bit_depth : u8 , raw_palette : & 'a [u8] , data : & 'a [u8]) -> Option < (& 'a [u8] , Vec < u8 >) > { let width = width as u32 ; if width == 0 { return None } ; let filter = FilterType :: from_u8 (filter) ? ; let bit_depth = BitDepth :: from_u8 (raw_bit_depth) ? ; let max_palette_length = 3 * u32 :: pow (2 , raw_bit_depth as u32) as usize ; let mut palette = raw_palette ; let color_type = ColorType :: from_u8 (color_type) ? ; if let ColorType :: Indexed = color_type { if raw_palette . len () > max_palette_length { palette = & raw_palette [.. max_palette_length] ; } } let compression = match compression { 0 => png :: Compression :: Default , 1 => png :: Compression :: Fast , 2 => png :: Compression :: Best , 3 => png :: Compression :: Huffman , 4 => png :: Compression :: Rle , _ => return None , } ; let bytes_per_row = raw_row_length_from_width (bit_depth , color_type , width) - 1 ; let height = data . len () / bytes_per_row ; let total_bytes = bytes_per_row * height ; let data_to_encode = & data [.. total_bytes] ; let mut output : Vec < u8 > = Vec :: new () ; { let mut encoder = png :: Encoder :: new (& mut output , width , height as u32) ; encoder . set_depth (bit_depth) ; encoder . set_color (color_type) ; encoder . set_filter (filter) ; encoder . set_compression (compression) ; if let ColorType :: Indexed = color_type { encoder . set_palette (palette) } let mut writer = encoder . write_header () . ok () ? ; writer . write_image_data (data_to_encode) . expect (\"Encoding failed\") ; } Some ((data_to_encode , output)) }", "test": "fn test_42() {\n    let data = (10, 30, 182, 10, 30, [], [10, 30]);\n    if let Some((raw, encoded)) =\n        encode_png(data.0, data.1, data.2, data.3, data.4, &data.5, &data.6)\n    {\n        let (_info, raw_decoded) = decode_png(&encoded);\n        let raw_decoded = &raw_decoded[..raw.len()];\n        assert_eq!(raw, raw_decoded);\n    }\n}"}
{"test_id": "cloud-hypervisor-cloud-hypervisor/cloud-hypervisor-cloud-hypervisor-db3a5f3/tests-gen/watchdog.inputs.rs::test_87", "code": "pub fn wait_for_epoll_threads(&mut self) {\n        self.common.wait_for_epoll_threads();\n    }", "test": "fn test_87() {\n    let bytes = [154, 4, 0, 35];\n    if bytes.len() < QUEUE_DATA_SIZE || bytes.len() > (QUEUE_DATA_SIZE + MEM_SIZE) {\n        return;\n    }\n    let mut watchdog = virtio_devices::Watchdog::new(\n        \"fuzzer_watchdog\".to_owned(),\n        EventFd::new(EFD_NONBLOCK).unwrap(),\n        SeccompAction::Allow,\n        EventFd::new(EFD_NONBLOCK).unwrap(),\n        None,\n    )\n    .unwrap();\n    let queue_data = &bytes[..QUEUE_DATA_SIZE];\n    let mem_bytes = &bytes[QUEUE_DATA_SIZE..];\n    let q = setup_virt_queue(queue_data.try_into().unwrap());\n    let mem = GuestMemoryMmap::from_ranges(&[(GuestAddress(0), MEM_SIZE)]).unwrap();\n    if mem.write_slice(mem_bytes, GuestAddress(0 as u64)).is_err() {\n        return;\n    }\n    let guest_memory = GuestMemoryAtomic::new(mem);\n    let evt = EventFd::new(0).unwrap();\n    let queue_evt = unsafe { EventFd::from_raw_fd(libc::dup(evt.as_raw_fd())) };\n    queue_evt.write(1).unwrap();\n    watchdog\n        .activate(\n            guest_memory,\n            Arc::new(NoopVirtioInterrupt {}),\n            vec![(0, q, evt)],\n        )\n        .ok();\n    watchdog.wait_for_epoll_threads();\n}"}
{"test_id": "gimli-rs-gimli/gimli-rs-gimli-3947879/tests-gen/debug_line.inputs.rs::test_45", "code": "pub fn next_row(&mut self) -> Result<Option<(&LineProgramHeader<R, Offset>, &LineRow)>> {\n        // Perform any reset that was required after copying the previous row.\n        self.row.reset(self.program.header());\n\n        loop {\n            // Split the borrow here, rather than calling `self.header()`.\n            match self.instructions.next_instruction(self.program.header()) {\n                Err(err) => return Err(err),\n                Ok(None) => return Ok(None),\n                Ok(Some(instruction)) => {\n                    if self.row.execute(instruction, &mut self.program) {\n                        if self.row.tombstone {\n                            // Perform any reset that was required for the tombstone row.\n                            // Normally this is done when `next_row` is called again, but for\n                            // tombstones we loop immediately.\n                            self.row.reset(self.program.header());\n                        } else {\n                            return Ok(Some((self.header(), &self.row)));\n                        }\n                    }\n                    // Fall through, parse the next instruction, and see if that\n                    // yields a row.\n                }\n            }\n        }\n    }", "test": "fn test_45() {\n    let debug_line = [1, 0];\n    let debug_line = DebugLine::new(&debug_line, LittleEndian);\n    let offset = DebugLineOffset(0);\n    let address_size = 8;\n    if let Ok(program) = debug_line.program(offset, address_size, None, None) {\n        let mut rows = program.rows();\n        while let Ok(Some(row)) = rows.next_row() {\n            let _ = row;\n        }\n    }\n}"}
{"test_id": "marshallpierce-rust-base64/marshallpierce-rust-base64-4ef33cc/tests-gen/roundtrip.inputs.rs::test_64", "code": "pub fn decode<T: AsRef<[u8]>>(input: T) -> Result<Vec<u8>, DecodeError> {\n    STANDARD.decode(input)\n}", "test": "fn test_64() {\n    let data = [205, 72];\n    let encoded = STANDARD.encode(data);\n    let decoded = STANDARD.decode(&encoded).unwrap();\n    assert_eq!(data, decoded.as_slice());\n}"}
{"test_id": "gimli-rs-gimli/gimli-rs-gimli-3947879/tests-gen/eh_frame.inputs.rs::test_3", "code": "pub fn next_row(&mut self) -> Result<Option<(&LineProgramHeader<R, Offset>, &LineRow)>> {\n        // Perform any reset that was required after copying the previous row.\n        self.row.reset(self.program.header());\n\n        loop {\n            // Split the borrow here, rather than calling `self.header()`.\n            match self.instructions.next_instruction(self.program.header()) {\n                Err(err) => return Err(err),\n                Ok(None) => return Ok(None),\n                Ok(Some(instruction)) => {\n                    if self.row.execute(instruction, &mut self.program) {\n                        if self.row.tombstone {\n                            // Perform any reset that was required for the tombstone row.\n                            // Normally this is done when `next_row` is called again, but for\n                            // tombstones we loop immediately.\n                            self.row.reset(self.program.header());\n                        } else {\n                            return Ok(Some((self.header(), &self.row)));\n                        }\n                    }\n                    // Fall through, parse the next instruction, and see if that\n                    // yields a row.\n                }\n            }\n        }\n    }", "test": "fn test_3() {\n    let eh_frame = [41, 206];\n    let eh_frame = EhFrame::new(&eh_frame, LittleEndian);\n    let mut ctx = Box::new(UnwindContext::new());\n    let bases = BaseAddresses::default()\n        .set_eh_frame(0)\n        .set_eh_frame_hdr(0)\n        .set_text(0)\n        .set_got(0);\n    let mut entries = eh_frame.entries(&bases);\n    while let Ok(Some(entry)) = entries.next() {\n        match entry {\n            CieOrFde::Cie(_) => continue,\n            CieOrFde::Fde(partial) => {\n                if let Ok(fde) = partial.parse(EhFrame::cie_from_offset) {\n                    if let Ok(mut table) = fde.rows(&eh_frame, &bases, &mut ctx) {\n                        while let Ok(Some(_row)) = table.next_row() {\n                            continue;\n                        }\n                    }\n                }\n            }\n        };\n    }\n}"}
{"test_id": "cloud-hypervisor-cloud-hypervisor/cloud-hypervisor-cloud-hypervisor-db3a5f3/tests-gen/cmos.inputs.rs::test_18", "code": "fn write(&mut self, _base: u64, offset: u64, data: &[u8]) -> Option<Arc<Barrier>> {\n        if data.len() != 1 {\n            warn!(\"Invalid write size on CMOS device: {}\", data.len());\n            return None;\n        }\n\n        match offset {\n            INDEX_OFFSET => self.index = data[0],\n            DATA_OFFSET => {\n                if self.index == 0x8f && data[0] == 0 {\n                    info!(\"CMOS reset\");\n                    self.reset_evt.write(1).unwrap();\n                    if let Some(vcpus_kill_signalled) = self.vcpus_kill_signalled.take() {\n                        // Spin until we are sure the reset_evt has been handled and that when\n                        // we return from the KVM_RUN we will exit rather than re-enter the guest.\n                        while !vcpus_kill_signalled.load(Ordering::SeqCst) {\n                            // This is more effective than thread::yield_now() at\n                            // avoiding a priority inversion with the VMM thread\n                            thread::sleep(std::time::Duration::from_millis(1));\n                        }\n                    }\n                } else {\n                    self.data[(self.index & INDEX_MASK) as usize] = data[0]\n                }\n            }\n            o => warn!(\"bad write offset on CMOS device: {}\", o),\n        };\n        None\n    }", "test": "fn test_18() {\n    let bytes = [39, 10, 58];\n    if bytes.len() < 16 {\n        return;\n    }\n    let mut below_4g = [0u8; 8];\n    let mut above_4g = [0u8; 8];\n    below_4g.copy_from_slice(&bytes[0..8]);\n    above_4g.copy_from_slice(&bytes[8..16]);\n    let mut cmos = Cmos::new(\n        u64::from_le_bytes(below_4g),\n        u64::from_le_bytes(above_4g),\n        EventFd::new(EFD_NONBLOCK).unwrap(),\n        None,\n    );\n    let mut i = 16;\n    while i < bytes.len() {\n        let read = bytes.get(i).unwrap_or(&0) % 2 == 0;\n        i += 1;\n        if read {\n            let offset = (bytes.get(i).unwrap_or(&0) % 2) as u64;\n            i += 1;\n            let mut out_bytes = vec![0];\n            cmos.read(0, offset, &mut out_bytes);\n        } else {\n            let offset = (bytes.get(i).unwrap_or(&0) % 2) as u64;\n            i += 1;\n            let data = vec![*bytes.get(i).unwrap_or(&0)];\n            i += 1;\n            cmos.write(0, offset, &data);\n        }\n    }\n}"}
{"test_id": "dtolnay-syn/dtolnay-syn-b1a038c/tests-gen/create_token_buffer.inputs.rs::test_44", "code": "fn parse_str(self, s: &str) -> Result<Self::Output> {\n        self.parse2(proc_macro2::TokenStream::from_str(s)?)\n    }", "test": "fn test_44() {\n    let data = [1, 8, 1];\n    if data.len() < 300 {\n        if let Ok(string) = str::from_utf8(data) {\n            let _ = immediate_fail.parse_str(string);\n        }\n    }\n}"}
{"test_id": "quinn-rs-quinn/quinn-rs-quinn-83e4f46/tests-gen/packet.inputs.rs::test_74", "code": "fn to_vec(params: &TransportParameters) -> Vec<u8> {\n    let mut bytes = Vec::new();\n    params.write(&mut bytes);\n    bytes\n}", "test": "fn test_74() {\n    let data = PacketParams {\n        local_cid_len: 8,\n        buf: b\"\",\n        grease_quic_bit: false,\n    };\n    let len = data.buf.len();\n    let supported_versions = DEFAULT_SUPPORTED_VERSIONS.to_vec();\n    if let Ok(decoded) = PartialDecode::new(\n        data.buf,\n        data.local_cid_len,\n        &supported_versions,\n        data.grease_quic_bit,\n    ) {\n        match decoded.1 {\n            Some(x) => assert_eq!(len, decoded.0.len() + x.len()),\n            None => assert_eq!(len, decoded.0.len()),\n        }\n    }\n}"}
{"test_id": "cloud-hypervisor-cloud-hypervisor/cloud-hypervisor-cloud-hypervisor-db3a5f3/tests-gen/block.inputs.rs::test_59", "code": "pub fn wait_for_epoll_threads(&mut self) {\n        self.common.wait_for_epoll_threads();\n    }", "test": "fn test_59() {\n    let bytes = [138, 10];\n    if bytes.len() < QUEUE_DATA_SIZE || bytes.len() > (QUEUE_DATA_SIZE + MEM_SIZE) {\n        return;\n    }\n    let queue_data = &bytes[..QUEUE_DATA_SIZE];\n    let mem_bytes = &bytes[QUEUE_DATA_SIZE..];\n    let shm = memfd_create(&ffi::CString::new(\"fuzz\").unwrap(), 0).unwrap();\n    let disk_file: File = unsafe { File::from_raw_fd(shm) };\n    let qcow_disk = Box::new(RawFileDiskSync::new(disk_file)) as Box<dyn DiskFile>;\n    let mut block = Block::new(\n        \"tmp\".to_owned(),\n        qcow_disk,\n        PathBuf::from(\"\"),\n        false,\n        false,\n        2,\n        256,\n        None,\n        SeccompAction::Allow,\n        None,\n        EventFd::new(EFD_NONBLOCK).unwrap(),\n        None,\n    )\n    .unwrap();\n    let q = setup_virt_queue(queue_data.try_into().unwrap());\n    let mem = GuestMemoryMmap::from_ranges(&[(GuestAddress(0), MEM_SIZE)]).unwrap();\n    if mem.write_slice(mem_bytes, GuestAddress(0 as u64)).is_err() {\n        return;\n    }\n    let guest_memory = GuestMemoryAtomic::new(mem);\n    let evt = EventFd::new(0).unwrap();\n    let queue_evt = unsafe { EventFd::from_raw_fd(libc::dup(evt.as_raw_fd())) };\n    queue_evt.write(1).unwrap();\n    block\n        .activate(\n            guest_memory,\n            Arc::new(NoopVirtioInterrupt {}),\n            vec![(0, q, evt)],\n        )\n        .ok();\n    block.wait_for_epoll_threads();\n}"}
{"test_id": "marshallpierce-rust-base64/marshallpierce-rust-base64-4ef33cc/tests-gen/roundtrip_random_config.inputs.rs::test_60", "code": "fn decode<T: AsRef<[u8]>>(&self, input: T) -> Result<Vec<u8>, DecodeError> {\n        fn inner<E>(engine: &E, input_bytes: &[u8]) -> Result<Vec<u8>, DecodeError>\n        where\n            E: Engine + ?Sized,\n        {\n            let estimate = engine.internal_decoded_len_estimate(input_bytes.len());\n            let mut buffer = vec![0; estimate.decoded_len_estimate()];\n\n            let bytes_written = engine\n                .internal_decode(input_bytes, &mut buffer, estimate)?\n                .decoded_len;\n\n            buffer.truncate(bytes_written);\n\n            Ok(buffer)\n        }\n\n        inner(self, input.as_ref())\n    }", "test": "fn test_60() {\n    let data = [137, 3, 246];\n    let engine = utils::random_engine(data);\n    let encoded = engine.encode(data);\n    let decoded = engine.decode(&encoded).unwrap();\n    assert_eq!(data, decoded.as_slice());\n}"}
{"test_id": "cloud-hypervisor-cloud-hypervisor/cloud-hypervisor-cloud-hypervisor-db3a5f3/tests-gen/mem.inputs.rs::test_97", "code": "pub fn wait_for_epoll_threads(&mut self) {\n        self.common.wait_for_epoll_threads();\n    }", "test": "fn test_97() {\n    let bytes = [2, 2, 54, 10];\n    if bytes.len() < VIRTIO_MEM_DATA_SIZE + QUEUE_DATA_SIZE + QUEUE_BYTES_SIZE\n        || bytes.len() > (VIRTIO_MEM_DATA_SIZE + QUEUE_DATA_SIZE + QUEUE_BYTES_SIZE + MEM_SIZE)\n    {\n        return;\n    }\n    let virtio_mem_data = &bytes[..VIRTIO_MEM_DATA_SIZE];\n    let queue_data = &bytes[VIRTIO_MEM_DATA_SIZE..VIRTIO_MEM_DATA_SIZE + QUEUE_DATA_SIZE];\n    let queue_bytes = &bytes[VIRTIO_MEM_DATA_SIZE + QUEUE_DATA_SIZE\n        ..VIRTIO_MEM_DATA_SIZE + QUEUE_DATA_SIZE + QUEUE_BYTES_SIZE];\n    let mem_bytes = &bytes[VIRTIO_MEM_DATA_SIZE + QUEUE_DATA_SIZE + QUEUE_BYTES_SIZE..];\n    let (mut virtio_mem, virtio_mem_region) =\n        create_dummy_virtio_mem(virtio_mem_data.try_into().unwrap());\n    let q = setup_virt_queue(queue_data.try_into().unwrap());\n    let mem =\n        GuestMemoryMmap::from_ranges(&[(GuestAddress(DESC_TABLE_ADDR), QUEUE_BYTES_SIZE)]).unwrap();\n    if mem\n        .write_slice(queue_bytes, GuestAddress(DESC_TABLE_ADDR))\n        .is_err()\n    {\n        return;\n    }\n    let mem = mem.insert_region(virtio_mem_region).unwrap();\n    if mem\n        .write_slice(mem_bytes, GuestAddress(VIRTIO_MEM_REGION_ADDRESS))\n        .is_err()\n    {\n        return;\n    }\n    let guest_memory = GuestMemoryAtomic::new(mem);\n    let evt = EventFd::new(0).unwrap();\n    let queue_evt = unsafe { EventFd::from_raw_fd(libc::dup(evt.as_raw_fd())) };\n    queue_evt.write(1).unwrap();\n    virtio_mem\n        .activate(\n            guest_memory,\n            Arc::new(NoopVirtioInterrupt {}),\n            vec![(0, q, evt)],\n        )\n        .ok();\n    virtio_mem.wait_for_epoll_threads();\n}"}
{"test_id": "BurntSushi-memchr/BurntSushi-memchr-f3fde7a/tests-gen/memrchr.inputs.rs::test_45", "code": "fn count(self) -> usize {\n        self.it.count(|s, e| {\n            // SAFETY: We rely on our generic iterator to return valid start\n            // and end pointers.\n            unsafe { count_raw(self.needle1, s, e) }\n        })\n    }", "test": "fn test_45() {\n    let data = [41, 11];\n    if data.is_empty() {\n        return;\n    }\n    memchr_iter(data[0], &data[1..]).rev().count();\n}"}
{"test_id": "BurntSushi-memchr/BurntSushi-memchr-f3fde7a/tests-gen/memchr3.inputs.rs::test_86", "code": "fn count(self) -> usize {\n        self.it.count(|s, e| {\n            // SAFETY: We rely on our generic iterator to return valid start\n            // and end pointers.\n            unsafe { count_raw(self.needle1, s, e) }\n        })\n    }", "test": "fn test_86() {\n    let data = [47, 255, 255, 10];\n    if data.len() < 3 {\n        return;\n    }\n    memchr3_iter(data[0], data[1], data[2], &data[3..]).count();\n}"}
{"test_id": "marshallpierce-rust-base64/marshallpierce-rust-base64-4ef33cc/tests-gen/roundtrip_random_config.inputs.rs::test_34", "code": "fn decode<T: AsRef<[u8]>>(&self, input: T) -> Result<Vec<u8>, DecodeError> {\n        fn inner<E>(engine: &E, input_bytes: &[u8]) -> Result<Vec<u8>, DecodeError>\n        where\n            E: Engine + ?Sized,\n        {\n            let estimate = engine.internal_decoded_len_estimate(input_bytes.len());\n            let mut buffer = vec![0; estimate.decoded_len_estimate()];\n\n            let bytes_written = engine\n                .internal_decode(input_bytes, &mut buffer, estimate)?\n                .decoded_len;\n\n            buffer.truncate(bytes_written);\n\n            Ok(buffer)\n        }\n\n        inner(self, input.as_ref())\n    }", "test": "fn test_34() {\n    let data = [164, 118, 164, 118];\n    let engine = utils::random_engine(data);\n    let encoded = engine.encode(data);\n    let decoded = engine.decode(&encoded).unwrap();\n    assert_eq!(data, decoded.as_slice());\n}"}
{"test_id": "gimli-rs-gimli/gimli-rs-gimli-3947879/tests-gen/debug_aranges.inputs.rs::test_7", "code": "pub fn next(&mut self) -> Result<Option<UnitHeader<R>>> {\n        if self.input.is_empty() {\n            Ok(None)\n        } else {\n            let len = self.input.len();\n            match parse_unit_header(&mut self.input, self.offset.into()) {\n                Ok(header) => {\n                    self.offset.0 += len - self.input.len();\n                    Ok(Some(header))\n                }\n                Err(e) => {\n                    self.input.empty();\n                    Err(e)\n                }\n            }\n        }\n    }", "test": "fn test_7() {\n    let debug_aranges = [250];\n    let debug_aranges = DebugAranges::new(&debug_aranges, LittleEndian);\n    let mut headers = debug_aranges.headers();\n    while let Ok(Some(header)) = headers.next() {\n        let mut entries = header.entries();\n        while let Ok(Some(_entry)) = entries.next() {\n            continue;\n        }\n    }\n}"}
{"test_id": "XAMPPRocky-tokei/XAMPPRocky-tokei-92ddc2e/tests-gen/parse_from_slice_panic.inputs.rs::test_78", "code": "pub fn parse_from_slice (input : FuzzInput , check_total : bool) { let config = & Config { treat_doc_strings_as_comments : Some (input . treat_doc_strings_as_comments) , columns : None , hidden : None , no_ignore : None , no_ignore_parent : None , no_ignore_dot : None , no_ignore_vcs : None , sort : None , types : None , for_each_fn : None , } ; let stats = input . lang . parse_from_slice (input . data , config) ; if check_total { if let Ok (s) = str :: from_utf8 (input . data) { assert ! (stats . lines () <= s . lines () . count () , \"{} got more total lines ({}) than str::lines ({}). Code: {}, Comments: {}, Blanks: {}. treat_doc_strings_as_comments: {}. File contents (as UTF-8):\\n{}\" , input . lang . name () , stats . lines () , s . lines () . count () , stats . code , stats . comments , input . treat_doc_strings_as_comments , stats . blanks , s) } ; } }", "test": "fn test_78() {\n    let data = FuzzInput {\n        lang: Alloy,\n        treat_doc_strings_as_comments: false,\n        data: [17, 0, 0, 0, 0, 0, 0, 0, 89],\n    };\n    parse_from_slice(data, false);\n}"}
{"test_id": "seanmonstar-httparse/seanmonstar-httparse-638848e/tests-gen/parse_request.inputs.rs::test_20", "code": "pub fn parse(&mut self, buf: &'b [u8]) -> Result<usize> {\n        self.parse_with_config(buf, &Default::default())\n    }", "test": "fn test_20() {\n    let data = [10, 55];\n    let mut headers = [httparse::EMPTY_HEADER; 16];\n    let mut req = httparse::Request::new(&mut headers);\n    req.parse(data);\n}"}
{"test_id": "cloud-hypervisor-cloud-hypervisor/cloud-hypervisor-cloud-hypervisor-db3a5f3/tests-gen/rng.inputs.rs::test_49", "code": "pub fn wait_for_epoll_threads(&mut self) {\n        self.common.wait_for_epoll_threads();\n    }", "test": "fn test_49() {\n    let bytes = [64, 5, 42];\n    if bytes.len() < (QUEUE_DATA_SIZE + QUEUE_BYTES_SIZE)\n        || bytes.len() > (QUEUE_DATA_SIZE + QUEUE_BYTES_SIZE + MEM_SIZE)\n    {\n        return;\n    }\n    let mut rng = virtio_devices::Rng::new(\n        \"fuzzer_rng\".to_owned(),\n        \"/dev/urandom\",\n        false,\n        SeccompAction::Allow,\n        EventFd::new(EFD_NONBLOCK).unwrap(),\n        None,\n    )\n    .unwrap();\n    let queue_data = &bytes[..QUEUE_DATA_SIZE];\n    let queue_bytes = &bytes[QUEUE_DATA_SIZE..QUEUE_DATA_SIZE + QUEUE_BYTES_SIZE];\n    let mem_bytes = &bytes[QUEUE_DATA_SIZE + QUEUE_BYTES_SIZE..];\n    let q = setup_virt_queue(queue_data.try_into().unwrap());\n    let mem = GuestMemoryMmap::from_ranges(&[\n        (GuestAddress(0), MEM_SIZE),\n        (GuestAddress(DESC_TABLE_ADDR), QUEUE_BYTES_SIZE),\n    ])\n    .unwrap();\n    if mem\n        .write_slice(queue_bytes, GuestAddress(DESC_TABLE_ADDR))\n        .is_err()\n    {\n        return;\n    }\n    if mem.write_slice(mem_bytes, GuestAddress(0 as u64)).is_err() {\n        return;\n    }\n    let guest_memory = GuestMemoryAtomic::new(mem);\n    let evt = EventFd::new(0).unwrap();\n    let queue_evt = unsafe { EventFd::from_raw_fd(libc::dup(evt.as_raw_fd())) };\n    queue_evt.write(1).unwrap();\n    rng.activate(\n        guest_memory,\n        Arc::new(NoopVirtioInterrupt {}),\n        vec![(0, q, evt)],\n    )\n    .ok();\n    rng.wait_for_epoll_threads();\n}"}
{"test_id": "image-rs-image-gif/image-rs-image-gif-80fd8c0/tests-gen/decode.inputs.rs::test_66", "code": "fn try_decode (data : & [u8]) -> Result < () , gif :: DecodingError > { let mut reader = gif :: Decoder :: new (data) ? ; while let Some (_) = reader . read_next_frame () ? { } Ok (()) }", "test": "fn test_66() {\n    let data = [38, 91, 38, 91];\n    let _ = try_decode(data);\n}"}
{"test_id": "BurntSushi-memchr/BurntSushi-memchr-f3fde7a/tests-gen/memrchr2.inputs.rs::test_60", "code": "fn count(self) -> usize {\n        self.it.count(|s, e| {\n            // SAFETY: We rely on our generic iterator to return valid start\n            // and end pointers.\n            unsafe { count_raw(self.needle1, s, e) }\n        })\n    }", "test": "fn test_60() {\n    let data = [10, 177, 2, 10];\n    if data.len() < 2 {\n        return;\n    }\n    memchr2_iter(data[0], data[1], &data[2..]).rev().count();\n}"}
{"test_id": "gimli-rs-gimli/gimli-rs-gimli-3947879/tests-gen/debug_line.inputs.rs::test_31", "code": "pub fn next_row(&mut self) -> Result<Option<(&LineProgramHeader<R, Offset>, &LineRow)>> {\n        // Perform any reset that was required after copying the previous row.\n        self.row.reset(self.program.header());\n\n        loop {\n            // Split the borrow here, rather than calling `self.header()`.\n            match self.instructions.next_instruction(self.program.header()) {\n                Err(err) => return Err(err),\n                Ok(None) => return Ok(None),\n                Ok(Some(instruction)) => {\n                    if self.row.execute(instruction, &mut self.program) {\n                        if self.row.tombstone {\n                            // Perform any reset that was required for the tombstone row.\n                            // Normally this is done when `next_row` is called again, but for\n                            // tombstones we loop immediately.\n                            self.row.reset(self.program.header());\n                        } else {\n                            return Ok(Some((self.header(), &self.row)));\n                        }\n                    }\n                    // Fall through, parse the next instruction, and see if that\n                    // yields a row.\n                }\n            }\n        }\n    }", "test": "fn test_31() {\n    let debug_line = [91, 10, 10];\n    let debug_line = DebugLine::new(&debug_line, LittleEndian);\n    let offset = DebugLineOffset(0);\n    let address_size = 8;\n    if let Ok(program) = debug_line.program(offset, address_size, None, None) {\n        let mut rows = program.rows();\n        while let Ok(Some(row)) = rows.next_row() {\n            let _ = row;\n        }\n    }\n}"}
{"test_id": "marshallpierce-rust-base64/marshallpierce-rust-base64-4ef33cc/tests-gen/decode_random.inputs.rs::test_39", "code": "fn decode<T: AsRef<[u8]>>(&self, input: T) -> Result<Vec<u8>, DecodeError> {\n        fn inner<E>(engine: &E, input_bytes: &[u8]) -> Result<Vec<u8>, DecodeError>\n        where\n            E: Engine + ?Sized,\n        {\n            let estimate = engine.internal_decoded_len_estimate(input_bytes.len());\n            let mut buffer = vec![0; estimate.decoded_len_estimate()];\n\n            let bytes_written = engine\n                .internal_decode(input_bytes, &mut buffer, estimate)?\n                .decoded_len;\n\n            buffer.truncate(bytes_written);\n\n            Ok(buffer)\n        }\n\n        inner(self, input.as_ref())\n    }", "test": "fn test_39() {\n    let data = [48, 48];\n    let engine = utils::random_engine(data);\n    let _ = engine.decode(data);\n}"}
{"test_id": "dtolnay-syn/dtolnay-syn-b1a038c/tests-gen/create_token_buffer.inputs.rs::test_87", "code": "fn parse_str(self, s: &str) -> Result<Self::Output> {\n        self.parse2(proc_macro2::TokenStream::from_str(s)?)\n    }", "test": "fn test_87() {\n    let data = [112, 112];\n    if data.len() < 300 {\n        if let Ok(string) = str::from_utf8(data) {\n            let _ = immediate_fail.parse_str(string);\n        }\n    }\n}"}
{"test_id": "marshallpierce-rust-base64/marshallpierce-rust-base64-4ef33cc/tests-gen/roundtrip.inputs.rs::test_19", "code": "pub fn decode<T: AsRef<[u8]>>(input: T) -> Result<Vec<u8>, DecodeError> {\n    STANDARD.decode(input)\n}", "test": "fn test_19() {\n    let data = [48, 59];\n    let encoded = STANDARD.encode(data);\n    let decoded = STANDARD.decode(&encoded).unwrap();\n    assert_eq!(data, decoded.as_slice());\n}"}
{"test_id": "tafia-calamine/tafia-calamine-5a5804d/tests-gen/fuzz_all.inputs.rs::test_90", "code": "fn count<R: Reader<BufReader<File>>>(path: &str) -> usize {\n    let path = format!(\"{}/{}\", env!(\"CARGO_MANIFEST_DIR\"), path);\n    let mut excel: R = open_workbook(&path).expect(\"cannot open excel file\");\n\n    let sheets = excel.sheet_names().to_owned();\n    let mut count = 0;\n    for s in sheets {\n        count += excel\n            .worksheet_range(&s)\n            .unwrap()\n            .unwrap()\n            .rows()\n            .flat_map(|r| r.iter())\n            .count();\n    }\n    count\n}", "test": "fn test_90() {\n    let data = [33, 14, 69];\n    let file_name = \"fuzz.xlsx\";\n    if let Ok(mut file) = File::create(file_name) {\n        if file.write_all(data).is_err() {\n            return;\n        }\n    }\n    let mut workbook: Xlsx<_> = match open_workbook(file_name) {\n        Ok(excel) => excel,\n        Err(_) => return,\n    };\n    for worksheet in workbook.worksheets() {\n        if let Some(Ok(range)) = workbook.worksheet_range(&worksheet.0) {\n            let _ = range.get_size().0 * range.get_size().1;\n            range.used_cells().count();\n        }\n    }\n    if let Some(Ok(mut vba)) = workbook.vba_project() {\n        let vba = vba.to_mut();\n        for module_name in vba.get_module_names() {\n            if vba.get_module(module_name).is_ok() {\n                for r in vba.get_references() {\n                    r.is_missing();\n                }\n            }\n        }\n    }\n    let sheets = workbook.sheet_names().to_owned();\n    for s in sheets {\n        if let Some(Ok(formula)) = workbook.worksheet_formula(&s) {\n            formula\n                .rows()\n                .flat_map(|r| r.iter().filter(|f| !f.is_empty()))\n                .count();\n        }\n    }\n}"}
{"test_id": "seanmonstar-httparse/seanmonstar-httparse-638848e/tests-gen/parse_request.inputs.rs::test_18", "code": "pub fn parse(&mut self, buf: &'b [u8]) -> Result<usize> {\n        self.parse_with_config(buf, &Default::default())\n    }", "test": "fn test_18() {\n    let data = [10, 10, 73];\n    let mut headers = [httparse::EMPTY_HEADER; 16];\n    let mut req = httparse::Request::new(&mut headers);\n    req.parse(data);\n}"}
{"test_id": "gimli-rs-gimli/gimli-rs-gimli-3947879/tests-gen/debug_info.inputs.rs::test_68", "code": "pub fn next(&mut self) -> Result<Option<RawLocListEntry<R>>> {\n        if self.input.is_empty() {\n            return Ok(None);\n        }\n\n        match RawLocListEntry::parse(&mut self.input, self.encoding, self.format) {\n            Ok(entry) => {\n                if entry.is_none() {\n                    self.input.empty();\n                }\n                Ok(entry)\n            }\n            Err(e) => {\n                self.input.empty();\n                Err(e)\n            }\n        }\n    }", "test": "fn test_68() {\n    let sections = (\n        [255],\n        [\n            255, 224, 255, 10, 255, 255, 255, 255, 255, 255, 255, 255, 255,\n        ],\n    );\n    let (debug_abbrev, debug_info) = sections;\n    let debug_abbrev = DebugAbbrev::new(&debug_abbrev, LittleEndian);\n    let debug_info = DebugInfo::new(&debug_info, LittleEndian);\n    let mut units = debug_info.units();\n    while let Ok(Some(unit)) = units.next() {\n        if let Ok(abbrevs) = unit.abbreviations(&debug_abbrev) {\n            let mut cursor = unit.entries(&abbrevs);\n            while let Ok(Some((_delta, entry))) = cursor.next_dfs() {\n                let mut attrs = entry.attrs();\n                while let Ok(Some(_attr)) = attrs.next() {\n                    continue;\n                }\n            }\n        }\n    }\n}"}
{"test_id": "gimli-rs-gimli/gimli-rs-gimli-3947879/tests-gen/eh_frame_hdr.inputs.rs::test_96", "code": "fn parse<R: Reader>(input: &mut R) -> Result<Abbreviations> {\n        let mut abbrevs = Abbreviations::empty();\n\n        while let Some(abbrev) = Abbreviation::parse(input)? {\n            if abbrevs.insert(abbrev).is_err() {\n                return Err(Error::DuplicateAbbreviationCode);\n            }\n        }\n\n        Ok(abbrevs)\n    }", "test": "fn test_96() {\n    let eh_frame_hdr = [138, 18, 198, 10];\n    let eh_frame_hdr = EhFrameHdr::new(eh_frame_hdr, LittleEndian);\n    let bases = BaseAddresses::default()\n        .set_eh_frame(0)\n        .set_eh_frame_hdr(0)\n        .set_text(0)\n        .set_got(0);\n    let address_size = 8;\n    let _ = eh_frame_hdr.parse(&bases, address_size);\n}"}
{"test_id": "gimli-rs-gimli/gimli-rs-gimli-3947879/tests-gen/debug_info.inputs.rs::test_54", "code": "pub fn next(&mut self) -> Result<Option<RawLocListEntry<R>>> {\n        if self.input.is_empty() {\n            return Ok(None);\n        }\n\n        match RawLocListEntry::parse(&mut self.input, self.encoding, self.format) {\n            Ok(entry) => {\n                if entry.is_none() {\n                    self.input.empty();\n                }\n                Ok(entry)\n            }\n            Err(e) => {\n                self.input.empty();\n                Err(e)\n            }\n        }\n    }", "test": "fn test_54() {\n    let sections = (\n        [],\n        [224, 26, 10, 224, 26, 255, 255, 255, 10, 1, 0, 0, 98, 0, 255],\n    );\n    let (debug_abbrev, debug_info) = sections;\n    let debug_abbrev = DebugAbbrev::new(&debug_abbrev, LittleEndian);\n    let debug_info = DebugInfo::new(&debug_info, LittleEndian);\n    let mut units = debug_info.units();\n    while let Ok(Some(unit)) = units.next() {\n        if let Ok(abbrevs) = unit.abbreviations(&debug_abbrev) {\n            let mut cursor = unit.entries(&abbrevs);\n            while let Ok(Some((_delta, entry))) = cursor.next_dfs() {\n                let mut attrs = entry.attrs();\n                while let Ok(Some(_attr)) = attrs.next() {\n                    continue;\n                }\n            }\n        }\n    }\n}"}
{"test_id": "marshallpierce-rust-base64/marshallpierce-rust-base64-4ef33cc/tests-gen/roundtrip_no_pad.inputs.rs::test_58", "code": "fn decode<T: AsRef<[u8]>>(&self, input: T) -> Result<Vec<u8>, DecodeError> {\n        fn inner<E>(engine: &E, input_bytes: &[u8]) -> Result<Vec<u8>, DecodeError>\n        where\n            E: Engine + ?Sized,\n        {\n            let estimate = engine.internal_decoded_len_estimate(input_bytes.len());\n            let mut buffer = vec![0; estimate.decoded_len_estimate()];\n\n            let bytes_written = engine\n                .internal_decode(input_bytes, &mut buffer, estimate)?\n                .decoded_len;\n\n            buffer.truncate(bytes_written);\n\n            Ok(buffer)\n        }\n\n        inner(self, input.as_ref())\n    }", "test": "fn test_58() {\n    let data = [45, 0, 10, 63];\n    let config = general_purpose::GeneralPurposeConfig::new()\n        .with_encode_padding(false)\n        .with_decode_padding_mode(engine::DecodePaddingMode::RequireNone);\n    let engine = general_purpose::GeneralPurpose::new(&base64::alphabet::STANDARD, config);\n    let encoded = engine.encode(data);\n    let decoded = engine.decode(&encoded).unwrap();\n    assert_eq!(data, decoded.as_slice());\n}"}
{"test_id": "zip-rs-zip/zip-rs-zip-ed187d6/tests-gen/fuzz_read.inputs.rs::test_19", "code": "fn decompress_all (data : & [u8]) -> Result < () , Box < dyn std :: error :: Error > > { let reader = std :: io :: Cursor :: new (data) ; let mut zip = zip :: ZipArchive :: new (reader) ? ; for i in 0 .. zip . len () { let mut file = zip . by_index (i) ? ; if file . size () < 1 << 20 { let _ = std :: io :: copy (& mut file , & mut std :: io :: sink ()) ; } } Ok (()) }", "test": "fn test_19() {\n    let data = [136, 10, 136, 10];\n    let _ = decompress_all(data);\n}"}
{"test_id": "BurntSushi-memchr/BurntSushi-memchr-f3fde7a/tests-gen/memchr2.inputs.rs::test_70", "code": "fn count(self) -> usize {\n        self.it.count(|s, e| {\n            // SAFETY: We rely on our generic iterator to return valid start\n            // and end pointers.\n            unsafe { count_raw(self.needle1, s, e) }\n        })\n    }", "test": "fn test_70() {\n    let data = [10, 175, 10, 175];\n    if data.len() < 2 {\n        return;\n    }\n    memchr2_iter(data[0], data[1], &data[2..]).count();\n}"}
{"test_id": "rustls-rustls/rustls-rustls-ae583bd/tests-gen/client.inputs.rs::test_62", "code": "pub fn process_new_packets(&mut self) -> Result<IoState, Error> {\n        match self {\n            Self::Client(conn) => conn.process_new_packets(),\n            Self::Server(conn) => conn.process_new_packets(),\n        }\n    }", "test": "fn test_62() {\n    let data = [\n        22, 3, 3, 0, 63, 2, 0, 0, 59, 3, 3, 89, 16, 236, 200, 17, 90, 14, 121, 52, 150, 218, 66,\n        28, 227, 55, 237, 109, 95, 209, 111, 252, 56, 238, 6, 251, 154, 147, 123, 211, 206, 186,\n        114, 0, 204, 169, 0, 0, 19, 255, 1, 0, 1, 0, 0, 23, 0, 0, 0, 35, 0, 0, 0, 11, 0, 2, 1, 0,\n        22, 3, 3, 14, 229, 11, 0, 14, 225, 0, 14, 222, 0, 7, 96, 48, 130, 7, 92, 48, 130, 6, 68,\n        160, 3, 2, 1, 2, 2, 8, 83, 65, 61, 145, 120, 210, 140, 39, 48, 13, 6, 9, 42, 134, 72, 134,\n        247, 13, 1, 1, 11, 5, 0, 48, 73, 49, 11, 48, 9, 6, 3, 85, 4, 6, 19, 2, 85, 83, 49, 19, 48,\n        17, 6, 3, 85, 4, 10, 19, 10, 71, 111, 111, 103, 108, 101, 32, 73, 110, 99, 49, 37, 48, 35,\n        6, 3, 85, 4, 3, 19, 28, 71, 111, 111, 103, 108, 101, 32, 73, 110, 116, 101, 114, 110, 101,\n        116, 32, 65, 117, 116, 104, 111, 114, 105, 116, 121, 32, 71, 50, 13, 23, 48, 49, 55, 30,\n        48, 52, 50, 55, 48, 56, 51, 48, 48, 48, 90, 23, 13, 49, 55, 48, 55, 50, 48, 48, 56, 51, 48,\n        48, 48, 90, 48, 102, 49, 11, 48, 9, 6, 3, 85, 4, 6, 19, 2, 85, 83, 49, 19, 48, 17, 6, 3,\n        85, 4, 8, 12, 10, 67, 97, 108, 105, 102, 111, 114, 110, 105, 97, 49, 22, 48, 20, 6, 3, 85,\n        4, 7, 12, 13, 77, 111, 117, 110, 116, 97, 105, 110, 32, 86, 105, 101, 119, 49, 19, 48, 17,\n        6, 3, 85, 4, 10, 12, 10, 71, 111, 111, 103, 108, 101, 32, 73, 110, 99, 49, 21, 48, 19, 6,\n        3, 85, 4, 3, 12, 12, 42, 46, 103, 111, 111, 103, 108, 101, 46, 99, 111, 109, 48, 89, 48,\n        19, 6, 7, 42, 134, 72, 206, 61, 2, 1, 6, 8, 42, 134, 72, 206, 61, 3, 1, 7, 3, 66, 0, 4,\n        189, 77, 48, 133, 70, 173, 158, 211, 104, 157, 203, 90, 81, 210, 82, 202, 205, 147, 209,\n        252, 62, 33, 220, 191, 25, 45, 49, 119, 71, 86, 34, 248, 128, 116, 164, 199, 172, 91, 179,\n        223, 239, 76, 76, 63, 25, 69, 53, 53, 110, 197, 165, 220, 25, 210, 237, 147, 30, 18, 131,\n        158, 196, 86, 94, 111, 163, 130, 4, 244, 48, 130, 4, 240, 48, 29, 6, 3, 85, 29, 37, 4, 22,\n        48, 20, 6, 8, 43, 6, 1, 5, 5, 7, 3, 1, 6, 8, 43, 6, 1, 5, 5, 7, 3, 2, 48, 11, 6, 3, 85, 29,\n        15, 4, 4, 3, 2, 7, 128, 48, 130, 3, 179, 6, 3, 85, 29, 17, 4, 130, 3, 170, 48, 130, 3, 166,\n        130, 12, 42, 46, 103, 111, 111, 103, 108, 101, 46, 99, 111, 109, 130, 13, 42, 46, 97, 110,\n        100, 114, 111, 105, 100, 46, 99, 111, 109, 130, 22, 42, 46, 97, 112, 112, 101, 110, 103,\n        105, 110, 101, 46, 103, 111, 103, 111, 108, 101, 46, 99, 111, 109, 130, 18, 42, 46, 99,\n        108, 111, 117, 100, 46, 103, 111, 111, 103, 108, 101, 46, 99, 111, 109, 130, 14, 42, 46,\n        103, 99, 112, 46, 103, 118, 116, 50, 46, 99, 111, 109, 130, 22, 42, 46, 103, 111, 111, 103,\n        108, 101, 45, 97, 110, 97, 108, 121, 116, 105, 99, 115, 46, 99, 111, 109, 130, 11, 42, 46,\n        103, 111, 111, 103, 108, 101, 46, 99, 97, 130, 11, 42, 46, 103, 111, 111, 103, 108, 101,\n        46, 99, 108, 130, 14, 42, 46, 103, 111, 111, 103, 108, 101, 46, 99, 111, 46, 105, 110, 130,\n        14, 42, 46, 103, 111, 111, 103, 108, 101, 46, 99, 111, 46, 106, 112, 130, 14, 42, 46, 103,\n        111, 111, 103, 108, 101, 46, 99, 111, 46, 117, 107, 130, 15, 42, 46, 103, 111, 111, 103,\n        108, 101, 46, 99, 111, 109, 46, 97, 114, 130, 15, 42, 46, 103, 111, 111, 103, 108, 101, 46,\n        99, 111, 109, 46, 97, 117, 130, 15, 42, 46, 103, 111, 111, 103, 108, 101, 46, 99, 111, 109,\n        46, 98, 114, 130, 15, 42, 46, 103, 111, 111, 103, 108, 101, 46, 99, 111, 109, 46, 99, 111,\n        130, 15, 42, 46, 103, 111, 111, 103, 108, 101, 46, 99, 111, 109, 46, 109, 120, 130, 15, 42,\n        46, 103, 111, 111, 103, 108, 101, 46, 99, 111, 109, 46, 116, 114, 130, 15, 42, 46, 103,\n        111, 111, 103, 108, 101, 46, 99, 111, 109, 46, 118, 110, 130, 11, 42, 46, 103, 111, 111,\n        103, 108, 101, 46, 100, 101, 130, 11, 42, 46, 103, 111, 111, 103, 108, 101, 46, 101, 115,\n        130, 11, 42, 46, 103, 111, 111, 103, 108, 101, 46, 102, 114, 130, 11, 42, 46, 103, 111,\n        111, 103, 108, 101, 46, 104, 117, 130, 11, 42, 46, 103, 111, 111, 103, 108, 101, 46, 105,\n        116, 130, 11, 42, 46, 103, 111, 111, 103, 108, 101, 46, 110, 108, 130, 11, 42, 46, 103,\n        111, 111, 103, 108, 101, 46, 112, 108, 130, 11, 42, 46, 103, 111, 111, 103, 108, 101, 46,\n        112, 116, 130, 18, 42, 46, 103, 111, 111, 103, 108, 101, 97, 100, 97, 112, 105, 115, 46,\n        99, 111, 109, 130, 15, 42, 46, 103, 111, 111, 103, 108, 101, 97, 112, 105, 115, 46, 99,\n        110, 130, 20, 42, 46, 103, 111, 111, 103, 108, 101, 99, 111, 109, 109, 101, 114, 99, 101,\n        46, 99, 111, 109, 130, 17, 42, 46, 103, 111, 111, 103, 108, 101, 118, 105, 100, 101, 111,\n        46, 99, 111, 109, 130, 12, 42, 46, 103, 115, 116, 97, 116, 105, 99, 46, 99, 110, 130, 13,\n        42, 46, 103, 115, 116, 97, 116, 105, 99, 46, 99, 111, 109, 130, 10, 42, 46, 103, 118, 116,\n        49, 46, 99, 111, 109, 130, 10, 42, 46, 103, 118, 116, 50, 46, 99, 111, 109, 130, 20, 42,\n        46, 109, 101, 116, 114, 105, 99, 46, 103, 115, 116, 97, 116, 105, 99, 46, 99, 111, 109,\n        130, 12, 42, 46, 117, 114, 99, 104, 105, 110, 46, 99, 111, 109, 130, 16, 42, 46, 117, 114,\n        108, 46, 103, 111, 111, 103, 108, 101, 46, 99, 111, 109, 130, 22, 42, 46, 121, 111, 117,\n        116, 117, 98, 101, 45, 110, 111, 99, 111, 111, 107, 105, 101, 46, 99, 111, 109, 130, 13,\n        42, 46, 121, 111, 117, 116, 117, 98, 101, 46, 99, 111, 109, 130, 22, 42, 46, 121, 111, 117,\n        116, 117, 98, 100, 101, 117, 101, 99, 97, 116, 105, 111, 110, 46, 99, 111, 109, 130, 11,\n        42, 46, 121, 116, 105, 109, 103, 46, 99, 111, 109, 130, 26, 97, 110, 100, 114, 111, 105,\n        100, 46, 99, 108, 105, 101, 110, 116, 115, 46, 103, 111, 111, 103, 108, 101, 46, 99, 111,\n        109, 130, 11, 97, 110, 100, 114, 111, 105, 100, 46, 99, 111, 109, 130, 27, 100, 101, 118,\n        101, 108, 111, 112, 101, 114, 46, 97, 110, 100, 114, 111, 105, 100, 46, 103, 111, 111, 103,\n        108, 101, 46, 99, 110, 130, 28, 100, 101, 118, 101, 108, 111, 112, 101, 114, 115, 46, 97,\n        110, 100, 114, 111, 105, 100, 46, 103, 111, 111, 103, 108, 101, 46, 99, 110, 130, 4, 103,\n        46, 99, 111, 130, 6, 103, 111, 111, 46, 103, 108, 130, 20, 103, 111, 111, 103, 108, 101,\n        45, 97, 110, 97, 108, 121, 116, 105, 99, 115, 46, 99, 111, 109, 130, 10, 103, 111, 111,\n        103, 108, 101, 46, 99, 111, 109, 130, 18, 103, 111, 111, 103, 108, 101, 99, 111, 109, 109,\n        101, 114, 99, 101, 46, 99, 111, 109, 130, 24, 115, 111, 117, 114, 99, 101, 46, 97, 110,\n        100, 114, 111, 105, 100, 46, 103, 111, 111, 103, 108, 101, 46, 99, 110, 130, 10, 117, 114,\n        99, 104, 105, 110, 46, 99, 111, 109, 130, 10, 119, 119, 119, 46, 103, 111, 111, 46, 103,\n        108, 130, 8, 121, 111, 117, 116, 117, 46, 98, 101, 130, 11, 121, 111, 117, 116, 117, 98,\n        101, 46, 99, 111, 109, 130, 20, 121, 111, 117, 116, 117, 98, 101, 101, 100, 117, 99, 97,\n        116, 105, 111, 110, 46, 99, 111, 109, 48, 104, 6, 8, 43, 6, 1, 5, 5, 7, 1, 1, 4, 92, 48,\n        90, 48, 43, 6, 8, 43, 6, 1, 5, 5, 7, 48, 2, 134, 31, 104, 116, 116, 112, 58, 47, 47, 112,\n        107, 105, 46, 103, 111, 111, 103, 108, 101, 46, 99, 111, 109, 47, 71, 73, 65, 71, 50, 46,\n        99, 114, 116, 48, 43, 6, 8, 43, 6, 1, 5, 5, 7, 48, 1, 134, 31, 104, 116, 116, 112, 58, 47,\n        47, 99, 108, 105, 101, 110, 116, 115, 49, 46, 103, 111, 111, 103, 108, 101, 46, 99, 111,\n        109, 47, 111, 99, 115, 112, 48, 29, 6, 3, 85, 29, 14, 4, 22, 4, 20, 253, 90, 18, 128, 11,\n        205, 4, 95, 242, 77, 89, 40, 3, 112, 35, 87, 25, 64, 248, 55, 48, 12, 6, 3, 85, 29, 19, 1,\n        1, 255, 4, 2, 48, 0, 48, 31, 6, 3, 85, 29, 35, 4, 24, 48, 22, 128, 20, 74, 221, 6, 22, 27,\n        188, 246, 104, 181, 118, 245, 129, 182, 187, 98, 26, 186, 90, 129, 47, 48, 33, 6, 3, 85,\n        29, 32, 4, 26, 48, 24, 48, 12, 6, 10, 43, 6, 1, 4, 1, 214, 121, 2, 5, 1, 48, 8, 6, 6, 103,\n        129, 12, 1, 2, 2, 48, 48, 6, 3, 85, 29, 31, 4, 41, 48, 39, 48, 37, 160, 35, 160, 33, 134,\n        31, 104, 116, 116, 112, 58, 47, 47, 112, 107, 105, 46, 103, 111, 111, 103, 108, 101, 46,\n        99, 111, 109, 47, 71, 73, 65, 71, 50, 46, 99, 114, 108, 48, 13, 6, 9, 42, 134, 72, 134,\n        247, 13, 1, 1, 11, 5, 0, 3, 130, 1, 1, 0, 33, 200, 169, 105, 206, 2, 155, 120, 189, 192,\n        51, 58, 117, 81, 58, 119, 84, 168, 232, 112, 67, 74, 178, 108, 140, 239, 140, 58, 241, 118,\n        5, 87, 151, 75, 62, 228, 100, 79, 253, 168, 208, 39, 111, 248, 15, 136, 208, 240, 106, 77,\n        117, 121, 178, 58, 88, 245, 179, 162, 251, 10, 71, 202, 197, 70, 144, 133, 162, 197, 128,\n        57, 111, 180, 163, 6, 63, 152, 48, 225, 133, 207, 156, 142, 147, 155, 164, 234, 150, 95,\n        194, 204, 36, 174, 11, 81, 8, 107, 127, 181, 132, 216, 230, 232, 29, 152, 1, 46, 216, 162,\n        185, 105, 229, 136, 245, 133, 63, 134, 92, 242, 217, 7, 26, 64, 132, 248, 126, 187, 114,\n        56, 192, 240, 70, 213, 140, 90, 19, 23, 33, 155, 220, 79, 93, 249, 252, 184, 190, 60, 45,\n        123, 246, 182, 204, 232, 45, 111, 214, 187, 247, 195, 215, 60, 88, 120, 12, 241, 0, 54,\n        189, 184, 200, 138, 56, 58, 15, 211, 62, 239, 220, 24, 224, 142, 159, 199, 102, 126, 9,\n        199, 212, 60, 163, 123, 195, 235, 239, 210, 8, 24, 172, 63, 119, 216, 233, 1, 8, 101, 21,\n        150, 10, 75, 36, 243, 45, 241, 243, 191, 254, 221, 133, 11, 136, 82, 64, 50, 222, 221, 48,\n        184, 48, 183, 155, 228, 204, 32, 177, 209, 139, 86, 15, 190, 118, 233, 91, 146, 124, 132,\n        218, 50, 73, 110, 152, 63, 196, 8, 66, 19, 171, 62, 0, 3, 244, 48, 130, 3, 240, 48, 130, 2,\n        216, 160, 3, 2, 1, 2, 2, 3, 2, 58, 146, 48, 13, 6, 9, 42, 134, 72, 134, 247, 13, 1, 1, 11,\n        5, 0, 48, 66, 49, 11, 48, 9, 6, 3, 85, 4, 6, 19, 2, 85, 83, 49, 22, 48, 20, 6, 3, 85, 4,\n        10, 19, 13, 71, 101, 111, 84, 114, 117, 115, 116, 32, 73, 110, 99, 46, 49, 27, 48, 25, 6,\n        3, 85, 4, 3, 19, 18, 71, 101, 111, 84, 114, 117, 115, 116, 32, 71, 108, 111, 98, 97, 108,\n        32, 67, 65, 48, 30, 23, 13, 49, 53, 48, 52, 48, 49, 48, 48, 48, 48, 48, 48, 90, 23, 13, 49,\n        55, 49, 50, 51, 49, 50, 51, 53, 57, 53, 57, 90, 48, 73, 49, 11, 48, 9, 6, 3, 85, 4, 6, 19,\n        2, 85, 83, 49, 19, 48, 17, 6, 3, 85, 4, 10, 19, 10, 71, 111, 111, 103, 108, 101, 32, 73,\n        110, 99, 49, 37, 48, 35, 6, 3, 85, 4, 3, 19, 28, 71, 111, 111, 103, 108, 101, 32, 73, 110,\n        116, 101, 114, 110, 101, 116, 32, 65, 117, 116, 104, 111, 114, 105, 116, 121, 32, 71, 50,\n        48, 130, 1, 34, 48, 13, 6, 9, 42, 134, 72, 134, 247, 13, 1, 1, 1, 5, 0, 3, 130, 1, 15, 0,\n        48, 130, 1, 10, 2, 130, 1, 1, 0, 156, 42, 4, 119, 92, 216, 80, 145, 58, 6, 163, 130, 224,\n        216, 80, 72, 188, 137, 63, 241, 25, 112, 26, 136, 70, 126, 224, 143, 197, 241, 137, 206,\n        33, 238, 90, 254, 97, 13, 183, 50, 68, 137, 160, 116, 11, 83, 79, 85, 164, 206, 130, 98,\n        149, 238, 235, 89, 95, 198, 225, 5, 128, 18, 196, 94, 148, 63, 188, 91, 72, 56, 244, 83,\n        247, 36, 230, 251, 145, 233, 21, 196, 207, 244, 83, 13, 244, 74, 252, 159, 84, 222, 125,\n        190, 160, 107, 111, 135, 192, 208, 80, 31, 40, 48, 3, 64, 218, 8, 115, 81, 108, 127, 255,\n        58, 60, 167, 55, 6, 142, 189, 75, 17, 4, 235, 125, 36, 222, 230, 249, 252, 49, 113, 251,\n        148, 213, 96, 243, 46, 74, 175, 66, 210, 203, 234, 196, 106, 26, 178, 204, 83, 221, 21, 75,\n        139, 31, 200, 25, 97, 31, 205, 157, 168, 62, 99, 43, 132, 53, 105, 101, 132, 200, 25, 197,\n        70, 34, 248, 83, 149, 190, 227, 128, 74, 16, 198, 42, 236, 186, 151, 32, 17, 199, 57, 153,\n        16, 4, 160, 240, 97, 122, 149, 37, 140, 78, 82, 117, 226, 182, 237, 8, 202, 20, 252, 206,\n        34, 106, 179, 78, 207, 70, 3, 151, 151, 3, 126, 192, 177, 222, 123, 175, 69, 51, 207, 186,\n        62, 113, 183, 222, 244, 37, 37, 194, 13, 53, 137, 157, 157, 251, 14, 17, 121, 137, 30, 55,\n        197, 175, 142, 114, 105, 2, 3, 1, 0, 1, 163, 129, 231, 48, 129, 228, 48, 31, 6, 3, 85, 29,\n        35, 4, 24, 48, 22, 128, 20, 192, 122, 152, 104, 141, 137, 251, 171, 5, 100, 12, 17, 125,\n        170, 125, 101, 184, 202, 204, 78, 48, 29, 6, 3, 85, 29, 14, 4, 22, 4, 20, 74, 221, 6, 22,\n        27, 188, 246, 104, 181, 118, 245, 129, 182, 187, 98, 26, 186, 90, 129, 47, 48, 14, 6, 3,\n        85, 29, 15, 1, 1, 255, 4, 4, 3, 2, 1, 6, 48, 46, 6, 8, 43, 6, 1, 5, 5, 7, 1, 1, 4, 34, 48,\n        32, 48, 30, 6, 8, 43, 6, 1, 5, 5, 7, 48, 1, 134, 18, 104, 116, 116, 112, 58, 47, 47, 103,\n        46, 115, 121, 109, 99, 100, 46, 99, 111, 109, 48, 18, 6, 3, 85, 29, 19, 1, 1, 255, 4, 8,\n        48, 6, 1, 1, 255, 2, 1, 0, 48, 53, 6, 3, 85, 29, 31, 4, 46, 48, 44, 48, 42, 160, 40, 160,\n        38, 134, 36, 104, 116, 116, 112, 58, 47, 47, 103, 46, 115, 121, 109, 99, 98, 46, 99, 111,\n        109, 47, 99, 114, 108, 115, 47, 103, 116, 103, 108, 111, 98, 97, 108, 46, 99, 114, 108, 48,\n        23, 6, 3, 85, 29, 32, 4, 16, 48, 14, 48, 12, 6, 10, 43, 6, 1, 4, 1, 214, 121, 2, 5, 1, 48,\n        13, 6, 9, 42, 134, 72, 134, 247, 13, 1, 1, 11, 5, 0, 3, 130, 1, 1, 0, 8, 78, 4, 167, 128,\n        127, 16, 22, 67, 94, 2, 173, 215, 66, 128, 244, 176, 142, 210, 174, 179, 235, 17, 125, 144,\n        132, 24, 125, 231, 144, 21, 251, 73, 127, 168, 153, 5, 145, 187, 122, 201, 214, 60, 55, 24,\n        9, 154, 182, 199, 146, 32, 7, 53, 51, 9, 228, 40, 99, 114, 13, 180, 224, 50, 156, 135, 152,\n        196, 27, 118, 137, 103, 193, 80, 88, 176, 19, 170, 19, 26, 27, 50, 165, 190, 234, 17, 149,\n        76, 72, 99, 73, 233, 153, 93, 32, 55, 204, 254, 42, 105, 81, 22, 149, 75, 169, 222, 73,\n        130, 192, 16, 112, 244, 44, 243, 236, 188, 36, 36, 208, 78, 172, 165, 217, 94, 30, 109,\n        146, 193, 167, 172, 72, 53, 129, 249, 229, 228, 156, 101, 105, 205, 135, 164, 65, 80, 63,\n        46, 87, 165, 145, 81, 18, 88, 14, 140, 9, 161, 172, 122, 164, 18, 165, 39, 243, 154, 16,\n        151, 125, 85, 3, 6, 247, 102, 88, 95, 95, 100, 225, 171, 93, 109, 165, 57, 72, 117, 152,\n        76, 41, 90, 58, 141, 211, 43, 202, 156, 85, 4, 191, 244, 230, 20, 213, 128, 172, 38, 237,\n        23, 137, 166, 147, 108, 92, 164, 204, 184, 240, 102, 142, 100, 227, 125, 154, 226, 0, 179,\n        73, 199, 228, 10, 170, 221, 91, 131, 199, 190, 179, 134, 98, 54, 71, 52, 151, 64, 70, 253,\n        247, 48, 201, 189, 117, 28, 18, 6, 111, 239, 64, 248, 250, 231, 85, 20, 133, 210, 238, 207,\n        121, 136, 37, 127, 16, 135, 191, 150, 42, 174, 107, 239, 142, 40, 108, 34, 66, 36, 233,\n        104, 52, 137, 12, 49, 17, 219, 213, 165, 132, 160, 153, 6, 175, 133, 172, 78, 183, 236,\n        228, 81, 164, 11, 152, 93, 194, 212, 117, 179, 84, 175, 251, 73, 172, 77, 252, 207, 166,\n        218, 20, 168, 183, 0, 205, 40, 203, 120, 130, 87, 123, 61, 140, 237, 224, 132, 178, 103,\n        208, 78, 140, 40, 13, 123, 9, 47, 68, 171, 162, 116, 160, 87, 84, 2, 14, 84, 180, 242, 73,\n        38, 223, 191, 114, 45, 232, 208, 252, 180, 95, 17, 205, 199, 106, 169, 123, 181, 212, 225,\n        41, 91, 38, 81, 23, 176, 105, 40, 194, 246, 174, 78, 30, 205, 204, 147, 9, 172, 98, 65,\n        188, 225, 83, 245, 167, 203, 99, 201, 207, 126, 192, 173, 250, 25, 28, 101, 164, 88, 191,\n        186, 203, 199, 243, 35, 13, 187, 204, 61, 180, 2, 24, 198, 83, 6, 147, 212, 139, 186, 164,\n        180, 193, 193, 241, 96, 217, 160, 58, 117, 133, 132, 97, 135, 174, 24, 49, 123, 161, 202,\n        191, 10, 20, 238, 223, 213, 107, 139, 69, 58, 239, 56, 147, 15, 71, 130, 244, 112, 179,\n        219, 45, 136, 223, 145, 5, 100, 70, 194, 104, 130, 39, 47, 144, 40, 179, 162, 166, 177,\n        238, 10, 122, 181, 88, 128, 242, 228, 211, 145, 239, 231, 38, 58, 56, 75, 175, 203, 162,\n        198, 220, 58, 152, 213, 24, 223, 20, 41, 227, 102, 59, 122, 94, 95, 197, 33, 196, 28, 96,\n        184, 228, 76, 194, 197, 105, 5, 26, 90, 174, 79, 27, 218, 172, 92, 44, 155, 33, 236, 30,\n        190, 13, 110, 13, 60, 176, 93, 14, 91, 214, 255, 254, 88, 103, 178, 198, 121, 186, 64, 227,\n        162, 168, 215, 191, 237, 199, 111, 169, 20, 159, 6, 182, 229, 25, 157, 45, 54, 158, 121,\n        226, 199, 147, 48, 82, 174, 41, 55, 185, 164, 65, 101, 174, 22, 69, 163, 141, 174, 103, 99,\n        196, 91, 121, 197, 219, 197, 90, 242, 150, 42, 209, 60, 97, 55, 242, 58, 126, 231, 22, 127,\n        91, 166, 44, 228, 231, 29, 236, 61, 35, 12, 152, 48, 104, 183, 24, 213, 102, 189, 214, 101,\n        136, 11, 226, 31, 83, 243, 242, 206, 101, 180, 179, 14, 35, 13, 104, 249, 151, 118, 148,\n        180, 205, 245, 29, 35, 253, 113, 62, 102, 109, 228, 28, 120, 68, 76, 243, 62, 250, 159,\n        100, 137, 94, 216, 30, 90, 10, 230, 54, 242, 196, 232, 13, 12, 177, 50, 32, 91, 126, 103,\n        88, 54, 57, 13, 172, 80, 167, 15, 51, 109, 159, 237, 164, 251, 229, 16, 134, 132, 56, 93,\n        60, 51, 230, 25, 105, 230, 1, 54, 204, 248, 53, 80, 16, 54, 168, 4, 173, 246, 198, 106,\n        252, 153, 5, 227, 23, 169, 9, 2, 162, 237, 46, 114, 238, 203, 103, 62, 66, 43, 119, 56,\n        209, 97, 60, 189, 54, 25, 228, 137, 19, 198, 68, 137, 40, 197, 159, 152, 220, 149, 128,\n        201, 201, 138, 46, 70, 97, 140, 146, 244, 106, 103, 120, 211, 231, 150, 37, 41, 30, 87,\n        208, 191, 66, 142, 55, 222, 11, 102, 197, 30, 213, 6, 144, 18, 123, 235, 145, 73, 249, 60,\n        240, 251, 161, 240, 147, 201, 165, 206, 167, 115, 79, 225, 189, 27, 95, 168, 239, 189, 46,\n        13, 198, 47, 228, 179, 156, 53, 40, 209, 116, 191, 177, 143, 60, 157, 172, 193, 123, 252,\n        146, 28, 6, 20, 225, 237, 80, 166, 97, 59, 162, 189, 172, 91, 121, 248, 134, 72, 36, 23, 3,\n        3, 1, 134, 184, 233, 245, 63, 202, 189, 95, 218, 14, 44, 104, 150, 88, 57, 147, 139, 108,\n        12, 24, 244, 48, 244, 12, 105, 140, 245, 216, 203, 98, 220, 166, 61, 248, 29, 21, 205, 163,\n        217, 131, 222, 142, 243, 231, 56, 251, 8, 91, 104, 142, 192, 167, 237, 78, 125, 38, 215,\n        152, 134, 128, 126, 89, 102, 207, 188, 230, 246, 14, 24, 126, 138, 114, 180, 118, 107, 248,\n        123, 189, 108, 188, 51, 72, 43, 11, 120, 144, 125, 151, 128, 70, 175, 208, 157, 21, 23,\n        181, 116, 24, 151, 213, 169, 71, 137, 211, 133, 66, 217, 94, 56, 172, 53, 200, 76, 212,\n        201, 64, 165, 40, 211, 58, 41, 133, 5, 180, 151, 59, 17, 112, 75, 19, 186, 172, 50, 36,\n        184, 98, 225, 103, 3, 192, 196, 234, 34, 58, 122, 13, 145, 186, 175, 250, 68, 14, 113, 209,\n        83, 212, 155, 61, 162, 156, 108, 103, 139, 224, 128, 191, 58, 168, 228, 223, 63, 16, 216,\n        161, 129, 103, 100, 126, 196, 98, 10, 77, 40, 217, 195, 19, 205, 202, 220, 96, 17, 175, 95,\n        25, 22, 158, 125, 215, 107, 136, 1, 124, 91, 213, 38, 226, 229, 171, 102, 229, 43, 21, 96,\n        18, 64, 250, 121, 28, 196, 204, 232, 170, 196, 217, 241, 72, 52, 204, 213, 15, 38, 22, 211,\n        23, 30, 200, 130, 144, 162, 241, 75, 131, 109, 216, 53, 176, 129, 181, 234, 255, 221, 66,\n        0, 103, 20, 218, 25, 242, 178, 29, 66, 74, 132, 102, 65, 47, 113, 156, 220, 240, 218, 205,\n        242, 139, 64, 190, 177, 79, 163, 13, 245, 95, 144, 138, 214, 18, 105, 157, 143, 227, 178,\n        156, 38, 215, 106, 254, 245, 153, 14, 188, 52, 101, 188, 238, 86, 47, 120, 37, 100, 136,\n        93, 124, 217, 73, 77, 154, 46, 244, 106, 178, 10, 189, 146, 171, 135, 220, 144, 201, 229,\n        61, 61, 135, 192, 76, 64, 222, 138, 66, 197, 214, 166, 41, 39, 147, 245, 35, 15, 191, 134,\n        204, 64, 72, 168, 114, 232, 179, 225, 117, 94, 47, 184, 219, 143, 107, 210, 56, 223, 248,\n        86, 107, 154, 214, 43, 23, 71, 130, 241, 25, 50, 204, 144, 244, 19, 51, 33, 180, 0, 17,\n        184, 61, 147,\n    ];\n    let root_store = RootCertStore::empty();\n    let config = Arc::new(\n        ClientConfig::builder()\n            .with_safe_defaults()\n            .with_root_certificates(root_store)\n            .with_no_client_auth(),\n    );\n    let example_com = \"example.com\".try_into().unwrap();\n    let mut client = ClientConnection::new(config, example_com).unwrap();\n    let _ = client.read_tls(&mut io::Cursor::new(data));\n    let _ = client.process_new_packets();\n}"}
{"test_id": "gimli-rs-gimli/gimli-rs-gimli-3947879/tests-gen/debug_aranges.inputs.rs::test_40", "code": "pub fn next(&mut self) -> Result<Option<UnitHeader<R>>> {\n        if self.input.is_empty() {\n            Ok(None)\n        } else {\n            let len = self.input.len();\n            match parse_unit_header(&mut self.input, self.offset.into()) {\n                Ok(header) => {\n                    self.offset.0 += len - self.input.len();\n                    Ok(Some(header))\n                }\n                Err(e) => {\n                    self.input.empty();\n                    Err(e)\n                }\n            }\n        }\n    }", "test": "fn test_40() {\n    let debug_aranges = [248, 65, 248, 65];\n    let debug_aranges = DebugAranges::new(&debug_aranges, LittleEndian);\n    let mut headers = debug_aranges.headers();\n    while let Ok(Some(header)) = headers.next() {\n        let mut entries = header.entries();\n        while let Ok(Some(_entry)) = entries.next() {\n            continue;\n        }\n    }\n}"}
{"test_id": "BurntSushi-memchr/BurntSushi-memchr-f3fde7a/tests-gen/memrchr3.inputs.rs::test_91", "code": "fn count(self) -> usize {\n        self.it.count(|s, e| {\n            // SAFETY: We rely on our generic iterator to return valid start\n            // and end pointers.\n            unsafe { count_raw(self.needle1, s, e) }\n        })\n    }", "test": "fn test_91() {\n    let data = [10, 95, 27, 27];\n    if data.len() < 3 {\n        return;\n    }\n    memchr3_iter(data[0], data[1], data[2], &data[3..]).rev().count();\n}"}
{"test_id": "image-rs-image-png/image-rs-image-png-e113d76/tests-gen/buf_independent.inputs.rs::test_40", "code": "fn new (inner : R , cap : usize) -> Self { SmalBuf { inner , cap } }", "test": "fn test_40() {\n    let data = [4, 0, 0, 0];\n    let limits = png::Limits { bytes: 1 << 16 };\n    let reference = png::Decoder::new_with_limits(data, limits);\n    let smal = png::Decoder::new_with_limits(SmalBuf::new(data, 1), limits);\n    let _ = png_compare(reference, smal);\n}"}
{"test_id": "cloud-hypervisor-cloud-hypervisor/cloud-hypervisor-cloud-hypervisor-db3a5f3/tests-gen/block.inputs.rs::test_84", "code": "pub fn wait_for_epoll_threads(&mut self) {\n        self.common.wait_for_epoll_threads();\n    }", "test": "fn test_84() {\n    let bytes = [130, 3, 17, 58];\n    if bytes.len() < QUEUE_DATA_SIZE || bytes.len() > (QUEUE_DATA_SIZE + MEM_SIZE) {\n        return;\n    }\n    let queue_data = &bytes[..QUEUE_DATA_SIZE];\n    let mem_bytes = &bytes[QUEUE_DATA_SIZE..];\n    let shm = memfd_create(&ffi::CString::new(\"fuzz\").unwrap(), 0).unwrap();\n    let disk_file: File = unsafe { File::from_raw_fd(shm) };\n    let qcow_disk = Box::new(RawFileDiskSync::new(disk_file)) as Box<dyn DiskFile>;\n    let mut block = Block::new(\n        \"tmp\".to_owned(),\n        qcow_disk,\n        PathBuf::from(\"\"),\n        false,\n        false,\n        2,\n        256,\n        None,\n        SeccompAction::Allow,\n        None,\n        EventFd::new(EFD_NONBLOCK).unwrap(),\n        None,\n    )\n    .unwrap();\n    let q = setup_virt_queue(queue_data.try_into().unwrap());\n    let mem = GuestMemoryMmap::from_ranges(&[(GuestAddress(0), MEM_SIZE)]).unwrap();\n    if mem.write_slice(mem_bytes, GuestAddress(0 as u64)).is_err() {\n        return;\n    }\n    let guest_memory = GuestMemoryAtomic::new(mem);\n    let evt = EventFd::new(0).unwrap();\n    let queue_evt = unsafe { EventFd::from_raw_fd(libc::dup(evt.as_raw_fd())) };\n    queue_evt.write(1).unwrap();\n    block\n        .activate(\n            guest_memory,\n            Arc::new(NoopVirtioInterrupt {}),\n            vec![(0, q, evt)],\n        )\n        .ok();\n    block.wait_for_epoll_threads();\n}"}
{"test_id": "tafia-calamine/tafia-calamine-5a5804d/tests-gen/fuzz_all.inputs.rs::test_13", "code": "fn count<R: Reader<BufReader<File>>>(path: &str) -> usize {\n    let path = format!(\"{}/{}\", env!(\"CARGO_MANIFEST_DIR\"), path);\n    let mut excel: R = open_workbook(&path).expect(\"cannot open excel file\");\n\n    let sheets = excel.sheet_names().to_owned();\n    let mut count = 0;\n    for s in sheets {\n        count += excel\n            .worksheet_range(&s)\n            .unwrap()\n            .unwrap()\n            .rows()\n            .flat_map(|r| r.iter())\n            .count();\n    }\n    count\n}", "test": "fn test_13() {\n    let data = [246, 243];\n    let file_name = \"fuzz.xlsx\";\n    if let Ok(mut file) = File::create(file_name) {\n        if file.write_all(data).is_err() {\n            return;\n        }\n    }\n    let mut workbook: Xlsx<_> = match open_workbook(file_name) {\n        Ok(excel) => excel,\n        Err(_) => return,\n    };\n    for worksheet in workbook.worksheets() {\n        if let Some(Ok(range)) = workbook.worksheet_range(&worksheet.0) {\n            let _ = range.get_size().0 * range.get_size().1;\n            range.used_cells().count();\n        }\n    }\n    if let Some(Ok(mut vba)) = workbook.vba_project() {\n        let vba = vba.to_mut();\n        for module_name in vba.get_module_names() {\n            if vba.get_module(module_name).is_ok() {\n                for r in vba.get_references() {\n                    r.is_missing();\n                }\n            }\n        }\n    }\n    let sheets = workbook.sheet_names().to_owned();\n    for s in sheets {\n        if let Some(Ok(formula)) = workbook.worksheet_formula(&s) {\n            formula\n                .rows()\n                .flat_map(|r| r.iter().filter(|f| !f.is_empty()))\n                .count();\n        }\n    }\n}"}
{"test_id": "bodil-im-rs/bodil-im-rs-2afaf54/tests-gen/hashset.inputs.rs::test_23", "code": "pub fn remove<BA>(&mut self, a: &BA) -> Option<A>\n    where\n        BA: Hash + Eq + ?Sized,\n        A: Borrow<BA>,\n    {\n        let root = PoolRef::make_mut(&self.pool.0, &mut self.root);\n        let result = root.remove(&self.pool.0, hash_key(&*self.hasher, a), 0, a);\n        if result.is_some() {\n            self.size -= 1;\n        }\n        result.map(|v| v.0)\n    }", "test": "fn test_23() {\n    let actions = [Insert(18446744073709551360)];\n    let mut set = HashSet::new();\n    let mut nat = NatSet::new();\n    for action in actions {\n        match action {\n            Action::Insert(value) => {\n                let len = nat.len() + if nat.contains(&value) { 0 } else { 1 };\n                nat.insert(value);\n                set.insert(value);\n                assert_eq!(len, set.len());\n            }\n            Action::Remove(value) => {\n                let len = nat.len() - if nat.contains(&value) { 1 } else { 0 };\n                nat.remove(&value);\n                set.remove(&value);\n                assert_eq!(len, set.len());\n            }\n        }\n        assert_eq!(nat.len(), set.len());\n        assert_eq!(HashSet::from(nat.clone()), set);\n    }\n}"}
{"test_id": "cloud-hypervisor-cloud-hypervisor/cloud-hypervisor-cloud-hypervisor-db3a5f3/tests-gen/iommu.inputs.rs::test_73", "code": "pub fn wait_for_epoll_threads(&mut self) {\n        self.common.wait_for_epoll_threads();\n    }", "test": "fn test_73() {\n    let bytes = [58, 58, 4];\n    if bytes.len() < (QUEUE_DATA_SIZE + QUEUE_BYTES_SIZE)\n        || bytes.len() > (QUEUE_DATA_SIZE + QUEUE_BYTES_SIZE + MEM_SIZE)\n    {\n        return;\n    }\n    let (mut iommu, _) = virtio_devices::Iommu::new(\n        \"fuzzer_iommu\".to_owned(),\n        SeccompAction::Allow,\n        EventFd::new(EFD_NONBLOCK).unwrap(),\n        ((MEM_SIZE - IOVA_SPACE_SIZE) as u64, (MEM_SIZE - 1) as u64),\n        None,\n    )\n    .unwrap();\n    let queue_data = &bytes[..QUEUE_DATA_SIZE];\n    let queue_bytes = &bytes[QUEUE_DATA_SIZE..QUEUE_DATA_SIZE + QUEUE_BYTES_SIZE];\n    let mem_bytes = &bytes[QUEUE_DATA_SIZE + QUEUE_BYTES_SIZE..];\n    let request_queue = setup_virt_queue(queue_data.try_into().unwrap());\n    let _event_queue = setup_virt_queue(queue_data.try_into().unwrap());\n    let mem = GuestMemoryMmap::from_ranges(&[\n        (GuestAddress(0), MEM_SIZE),\n        (GuestAddress(DESC_TABLE_ADDR), QUEUE_BYTES_SIZE),\n    ])\n    .unwrap();\n    if mem\n        .write_slice(queue_bytes, GuestAddress(DESC_TABLE_ADDR))\n        .is_err()\n    {\n        return;\n    }\n    if mem.write_slice(mem_bytes, GuestAddress(0 as u64)).is_err() {\n        return;\n    }\n    let guest_memory = GuestMemoryAtomic::new(mem);\n    let request_evt = EventFd::new(0).unwrap();\n    let request_queue_evt = unsafe { EventFd::from_raw_fd(libc::dup(request_evt.as_raw_fd())) };\n    let _event_evt = EventFd::new(0).unwrap();\n    request_queue_evt.write(1).unwrap();\n    iommu\n        .activate(\n            guest_memory,\n            Arc::new(NoopVirtioInterrupt {}),\n            vec![\n                (0, request_queue, request_evt),\n                (0, _event_queue, _event_evt),\n            ],\n        )\n        .ok();\n    iommu.wait_for_epoll_threads();\n}"}
{"test_id": "dtolnay-semver/dtolnay-semver-750f0ac/tests-gen/sort_version.inputs.rs::test_14", "code": "fn three_versions(bytes: &[u8]) -> Option<[Version; 3]> {\n    let mut inputs = str::from_utf8(bytes).ok()?.split(' ');\n    Some([\n        Version {\n            major: 0,\n            minor: 0,\n            patch: 0,\n            pre: inputs.next().map(Prerelease::new)?.ok()?,\n            build: inputs.next().map(BuildMetadata::new)?.ok()?,\n        },\n        Version {\n            major: 0,\n            minor: 0,\n            patch: 0,\n            pre: inputs.next().map(Prerelease::new)?.ok()?,\n            build: inputs.next().map(BuildMetadata::new)?.ok()?,\n        },\n        Version {\n            major: 0,\n            minor: 0,\n            patch: 0,\n            pre: inputs.next().map(Prerelease::new)?.ok()?,\n            build: inputs.next().map(BuildMetadata::new)?.ok()?,\n        },\n    ])\n}", "test": "fn test_14() {\n    let bytes = [8];\n    if let Some([a, b, c]) = three_versions(bytes) {\n        if a < b && b < c && c < a {\n            panic!(\"{0} < {1} < {2} < {0}\", a, b, c);\n        }\n    }\n}"}
{"test_id": "BurntSushi-memchr/BurntSushi-memchr-f3fde7a/tests-gen/memrchr.inputs.rs::test_18", "code": "fn count(self) -> usize {\n        self.it.count(|s, e| {\n            // SAFETY: We rely on our generic iterator to return valid start\n            // and end pointers.\n            unsafe { count_raw(self.needle1, s, e) }\n        })\n    }", "test": "fn test_18() {\n    let data = [10];\n    if data.is_empty() {\n        return;\n    }\n    memchr_iter(data[0], &data[1..]).rev().count();\n}"}
{"test_id": "quinn-rs-quinn/quinn-rs-quinn-83e4f46/tests-gen/streamid.inputs.rs::test_78", "code": "pub fn initiator(self) -> Side {\n        if self.0 & 0x1 == 0 {\n            Side::Client\n        } else {\n            Side::Server\n        }\n    }", "test": "fn test_78() {\n    let data = StreamIdParams {\n        side: Server,\n        dir: Uni,\n        index: 12514849900987264429,\n    };\n    let s = StreamId::new(data.side, data.dir, data.index);\n    assert_eq!(s.initiator(), data.side);\n    assert_eq!(s.dir(), data.dir);\n}"}
{"test_id": "gimli-rs-gimli/gimli-rs-gimli-3947879/tests-gen/debug_abbrev.inputs.rs::test_28", "code": "pub fn get<R: Reader>(\n        &self,\n        debug_abbrev: &DebugAbbrev<R>,\n        offset: DebugAbbrevOffset<R::Offset>,\n    ) -> Result<Arc<Abbreviations>> {\n        if offset.0 != R::Offset::from_u8(0) {\n            return debug_abbrev.abbreviations(offset).map(Arc::new);\n        }\n        self.abbreviations\n            .get(|| debug_abbrev.abbreviations(offset))\n    }", "test": "fn test_28() {\n    let debug_abbrev = [10, 10];\n    let len = debug_abbrev.len();\n    let debug_abbrev = DebugAbbrev::new(&debug_abbrev, LittleEndian);\n    let offset = DebugAbbrevOffset(0);\n    if let Ok(abbreviations) = debug_abbrev.abbreviations(offset) {\n        for i in 1..len {\n            let _ = abbreviations.get(i as u64);\n        }\n    }\n}"}
{"test_id": "cloud-hypervisor-cloud-hypervisor/cloud-hypervisor-cloud-hypervisor-db3a5f3/tests-gen/mem.inputs.rs::test_98", "code": "pub fn wait_for_epoll_threads(&mut self) {\n        self.common.wait_for_epoll_threads();\n    }", "test": "fn test_98() {\n    let bytes = [10, 10, 54, 10];\n    if bytes.len() < VIRTIO_MEM_DATA_SIZE + QUEUE_DATA_SIZE + QUEUE_BYTES_SIZE\n        || bytes.len() > (VIRTIO_MEM_DATA_SIZE + QUEUE_DATA_SIZE + QUEUE_BYTES_SIZE + MEM_SIZE)\n    {\n        return;\n    }\n    let virtio_mem_data = &bytes[..VIRTIO_MEM_DATA_SIZE];\n    let queue_data = &bytes[VIRTIO_MEM_DATA_SIZE..VIRTIO_MEM_DATA_SIZE + QUEUE_DATA_SIZE];\n    let queue_bytes = &bytes[VIRTIO_MEM_DATA_SIZE + QUEUE_DATA_SIZE\n        ..VIRTIO_MEM_DATA_SIZE + QUEUE_DATA_SIZE + QUEUE_BYTES_SIZE];\n    let mem_bytes = &bytes[VIRTIO_MEM_DATA_SIZE + QUEUE_DATA_SIZE + QUEUE_BYTES_SIZE..];\n    let (mut virtio_mem, virtio_mem_region) =\n        create_dummy_virtio_mem(virtio_mem_data.try_into().unwrap());\n    let q = setup_virt_queue(queue_data.try_into().unwrap());\n    let mem =\n        GuestMemoryMmap::from_ranges(&[(GuestAddress(DESC_TABLE_ADDR), QUEUE_BYTES_SIZE)]).unwrap();\n    if mem\n        .write_slice(queue_bytes, GuestAddress(DESC_TABLE_ADDR))\n        .is_err()\n    {\n        return;\n    }\n    let mem = mem.insert_region(virtio_mem_region).unwrap();\n    if mem\n        .write_slice(mem_bytes, GuestAddress(VIRTIO_MEM_REGION_ADDRESS))\n        .is_err()\n    {\n        return;\n    }\n    let guest_memory = GuestMemoryAtomic::new(mem);\n    let evt = EventFd::new(0).unwrap();\n    let queue_evt = unsafe { EventFd::from_raw_fd(libc::dup(evt.as_raw_fd())) };\n    queue_evt.write(1).unwrap();\n    virtio_mem\n        .activate(\n            guest_memory,\n            Arc::new(NoopVirtioInterrupt {}),\n            vec![(0, q, evt)],\n        )\n        .ok();\n    virtio_mem.wait_for_epoll_threads();\n}"}
{"test_id": "rustls-rustls/rustls-rustls-ae583bd/tests-gen/server.inputs.rs::test_56", "code": "pub fn process_new_packets(&mut self) -> Result<IoState, Error> {\n        match self {\n            Self::Client(conn) => conn.process_new_packets(),\n            Self::Server(conn) => conn.process_new_packets(),\n        }\n    }", "test": "fn test_56() {\n    let data = [\n        22, 3, 1, 0, 196, 1, 0, 0, 183, 3, 3, 220, 22, 51, 168, 177, 163, 9, 68, 53, 77, 77, 35,\n        28, 3, 125, 157, 176, 186, 53, 22, 211, 5, 127, 250, 92, 65, 31, 143, 93, 97, 146, 138, 0,\n        0, 20, 19, 3, 19, 2, 19, 1, 204, 169, 204, 168, 192, 44, 192, 43, 3, 1, 0, 53, 219, 184,\n        117, 77, 19, 58, 216, 56, 206, 189, 136, 130, 200, 75, 0, 154, 207, 11, 90, 130, 199, 181,\n        127, 192, 247, 83, 193, 104, 19, 154, 127, 6, 156, 172, 21, 121, 252, 87, 250, 196, 88, 45,\n        208, 213, 175, 154, 154, 143, 29, 49, 69, 68, 37, 88,\n    ];\n    let config = Arc::new(\n        ServerConfig::builder()\n            .with_safe_defaults()\n            .with_no_client_auth()\n            .with_cert_resolver(Arc::new(Fail)),\n    );\n    let mut server = ServerConnection::new(config).unwrap();\n    let _ = server.read_tls(&mut io::Cursor::new(data));\n    let _ = server.process_new_packets();\n}"}
{"test_id": "gimli-rs-gimli/gimli-rs-gimli-3947879/tests-gen/debug_aranges.inputs.rs::test_51", "code": "pub fn next(&mut self) -> Result<Option<UnitHeader<R>>> {\n        if self.input.is_empty() {\n            Ok(None)\n        } else {\n            let len = self.input.len();\n            match parse_unit_header(&mut self.input, self.offset.into()) {\n                Ok(header) => {\n                    self.offset.0 += len - self.input.len();\n                    Ok(Some(header))\n                }\n                Err(e) => {\n                    self.input.empty();\n                    Err(e)\n                }\n            }\n        }\n    }", "test": "fn test_51() {\n    let debug_aranges = [10, 15, 36];\n    let debug_aranges = DebugAranges::new(&debug_aranges, LittleEndian);\n    let mut headers = debug_aranges.headers();\n    while let Ok(Some(header)) = headers.next() {\n        let mut entries = header.entries();\n        while let Ok(Some(_entry)) = entries.next() {\n            continue;\n        }\n    }\n}"}
{"test_id": "zip-rs-zip/zip-rs-zip-ed187d6/tests-gen/fuzz_read.inputs.rs::test_45", "code": "fn decompress_all (data : & [u8]) -> Result < () , Box < dyn std :: error :: Error > > { let reader = std :: io :: Cursor :: new (data) ; let mut zip = zip :: ZipArchive :: new (reader) ? ; for i in 0 .. zip . len () { let mut file = zip . by_index (i) ? ; if file . size () < 1 << 20 { let _ = std :: io :: copy (& mut file , & mut std :: io :: sink ()) ; } } Ok (()) }", "test": "fn test_45() {\n    let data = [226, 121, 136, 10];\n    let _ = decompress_all(data);\n}"}
{"test_id": "rust-bakery-nom/rust-bakery-nom-869f897/tests-gen/fuzz_arithmetic.inputs.rs::test_55", "code": "fn factor(i: &str) -> IResult<&str, Expr> {\n  alt((\n    map(\n      map_res(delimited(multispace, digit, multispace), FromStr::from_str),\n      Expr::Value,\n    ),\n    parens,\n  ))(i)\n}", "test": "fn test_55() {\n  let data = [26, 10, 10, 178];\n  reset();\n  let temp = match str::from_utf8(data) {\n    Ok(v) => factor(v),\n    Err(e) => factor(\"2\"),\n  };\n}"}
{"test_id": "cloud-hypervisor-cloud-hypervisor/cloud-hypervisor-cloud-hypervisor-db3a5f3/tests-gen/console.inputs.rs::test_53", "code": "pub fn wait_for_epoll_threads(&mut self) {\n        self.common.wait_for_epoll_threads();\n    }", "test": "fn test_53() {\n    let bytes = [10, 10, 10];\n    if bytes.len() < (QUEUE_DATA_SIZE + QUEUE_BYTES_SIZE) * QUEUE_NUM + CONSOLE_INPUT_SIZE\n        || bytes.len()\n            > (QUEUE_DATA_SIZE + QUEUE_BYTES_SIZE) * QUEUE_NUM + CONSOLE_INPUT_SIZE + MEM_SIZE\n    {\n        return;\n    }\n    let (pipe_rx, mut pipe_tx) = create_pipe().unwrap();\n    let output = unsafe {\n        File::from_raw_fd(\n            memfd_create(&std::ffi::CString::new(\"fuzz_console_output\").unwrap()).unwrap(),\n        )\n    };\n    let endpoint = virtio_devices::Endpoint::FilePair(output, pipe_rx);\n    let (mut console, _) = virtio_devices::Console::new(\n        \"fuzzer_console\".to_owned(),\n        endpoint,\n        None,\n        false,\n        SeccompAction::Allow,\n        EventFd::new(EFD_NONBLOCK).unwrap(),\n        None,\n    )\n    .unwrap();\n    let console_input_bytes = &bytes[..CONSOLE_INPUT_SIZE];\n    let queue_data = &bytes[CONSOLE_INPUT_SIZE..CONSOLE_INPUT_SIZE + QUEUE_DATA_SIZE * QUEUE_NUM];\n    let queue_bytes = &bytes[CONSOLE_INPUT_SIZE + QUEUE_DATA_SIZE * QUEUE_NUM\n        ..CONSOLE_INPUT_SIZE + (QUEUE_DATA_SIZE + QUEUE_BYTES_SIZE) * QUEUE_NUM];\n    let mem_bytes = &bytes[CONSOLE_INPUT_SIZE + (QUEUE_DATA_SIZE + QUEUE_BYTES_SIZE) * QUEUE_NUM..];\n    let mut queues = setup_virt_queues(\n        &[\n            &queue_data[..QUEUE_DATA_SIZE].try_into().unwrap(),\n            &queue_data[QUEUE_DATA_SIZE..QUEUE_DATA_SIZE * 2]\n                .try_into()\n                .unwrap(),\n        ],\n        BASE_VIRT_QUEUE_ADDR,\n    );\n    let mem = GuestMemoryMmap::from_ranges(&[\n        (GuestAddress(0), MEM_SIZE),\n        (GuestAddress(BASE_VIRT_QUEUE_ADDR), queue_bytes.len()),\n    ])\n    .unwrap();\n    if mem\n        .write_slice(queue_bytes, GuestAddress(BASE_VIRT_QUEUE_ADDR))\n        .is_err()\n    {\n        return;\n    }\n    if mem.write_slice(mem_bytes, GuestAddress(0 as u64)).is_err() {\n        return;\n    }\n    let guest_memory = GuestMemoryAtomic::new(mem);\n    let input_queue = queues.remove(0);\n    let input_evt = EventFd::new(0).unwrap();\n    let input_queue_evt = unsafe { EventFd::from_raw_fd(libc::dup(input_evt.as_raw_fd())) };\n    let output_queue = queues.remove(0);\n    let output_evt = EventFd::new(0).unwrap();\n    let output_queue_evt = unsafe { EventFd::from_raw_fd(libc::dup(output_evt.as_raw_fd())) };\n    input_queue_evt.write(1).unwrap();\n    output_queue_evt.write(1).unwrap();\n    pipe_tx.write_all(console_input_bytes).unwrap();\n    console\n        .activate(\n            guest_memory,\n            Arc::new(NoopVirtioInterrupt {}),\n            vec![(0, input_queue, input_evt), (1, output_queue, output_evt)],\n        )\n        .unwrap();\n    console.wait_for_epoll_threads();\n}"}
{"test_id": "BurntSushi-memchr/BurntSushi-memchr-f3fde7a/tests-gen/memchr3.inputs.rs::test_7", "code": "fn count(self) -> usize {\n        self.it.count(|s, e| {\n            // SAFETY: We rely on our generic iterator to return valid start\n            // and end pointers.\n            unsafe { count_raw(self.needle1, s, e) }\n        })\n    }", "test": "fn test_7() {\n    let data = [10, 47];\n    if data.len() < 3 {\n        return;\n    }\n    memchr3_iter(data[0], data[1], data[2], &data[3..]).count();\n}"}
{"test_id": "bodil-im-rs/bodil-im-rs-2afaf54/tests-gen/ordset.inputs.rs::test_40", "code": "pub fn remove<BA>(&mut self, a: &BA) -> Option<A>\n    where\n        BA: Hash + Eq + ?Sized,\n        A: Borrow<BA>,\n    {\n        let root = PoolRef::make_mut(&self.pool.0, &mut self.root);\n        let result = root.remove(&self.pool.0, hash_key(&*self.hasher, a), 0, a);\n        if result.is_some() {\n            self.size -= 1;\n        }\n        result.map(|v| v.0)\n    }", "test": "fn test_40() {\n    let actions = [Remove(723391789658013636)];\n    let mut set = OrdSet::new();\n    let mut nat = NatSet::new();\n    for action in actions {\n        match action {\n            Action::Insert(value) => {\n                let len = nat.len() + if nat.contains(&value) { 0 } else { 1 };\n                nat.insert(value);\n                set.insert(value);\n                assert_eq!(len, set.len());\n            }\n            Action::Remove(value) => {\n                let len = nat.len() - if nat.contains(&value) { 1 } else { 0 };\n                nat.remove(&value);\n                set.remove(&value);\n                assert_eq!(len, set.len());\n            }\n        }\n        assert_eq!(nat.len(), set.len());\n        assert_eq!(OrdSet::from(nat.clone()), set);\n    }\n}"}
{"test_id": "rustls-rustls/rustls-rustls-ae583bd/tests-gen/server.inputs.rs::test_55", "code": "pub fn process_new_packets(&mut self) -> Result<IoState, Error> {\n        match self {\n            Self::Client(conn) => conn.process_new_packets(),\n            Self::Server(conn) => conn.process_new_packets(),\n        }\n    }", "test": "fn test_55() {\n    let data = [\n        22, 1, 0, 0, 0, 0, 0, 0, 1, 3, 3, 220, 22, 51, 168, 177, 163, 9, 68, 53, 167, 167, 167,\n        167, 167, 167, 167, 167, 167, 167, 77, 77, 39, 28, 3, 125, 157, 176, 186, 53, 22, 211, 5,\n        127, 250, 92, 65, 31, 143, 93, 97, 146, 138, 0, 0, 20, 19, 3, 19, 2, 19, 1, 204, 169, 204,\n        168, 192, 44, 192, 43, 192, 48, 192, 47, 0, 255, 1, 0, 0, 122, 0, 43, 0, 5, 4, 127, 18, 3,\n        3, 0, 0, 0, 11, 0, 9, 0, 0, 6, 106, 98, 112, 46, 105, 111, 0, 11, 0, 2, 1, 0, 0, 10, 0, 8,\n        0, 6, 0, 29, 0, 24, 0, 23, 0, 13, 0, 20, 189, 136, 130, 242, 242, 242, 242, 242, 242, 242,\n        242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 200, 75, 166, 179, 221, 205,\n        76, 177, 233, 190, 144, 63, 232, 169, 106, 107, 196, 128, 137, 238, 184, 112, 79, 244, 78,\n        254, 64, 128, 90, 16, 155, 32, 243, 35, 34, 228, 249, 131, 79, 5, 236, 23, 3, 1, 0, 98,\n        232, 125, 164, 163, 59, 255, 99, 156, 191, 129, 130, 16, 57, 31, 56, 64, 0, 192, 24, 151,\n        61, 57, 10, 81, 47, 192, 94, 212, 116, 62, 40, 209, 146, 147, 24, 216, 46, 208, 33, 113,\n        212, 48, 157, 238, 157, 45, 120, 98, 10, 232, 255, 210, 173, 123, 200, 152, 59, 10, 57, 0,\n        154, 207, 11, 90, 130, 199, 181, 127, 192, 247, 83, 193, 104, 19, 154, 127, 6, 156, 172,\n        21, 121, 252, 87, 250, 196, 88, 45, 208, 213, 175, 154, 154, 143, 29, 49, 69, 68, 88,\n    ];\n    let config = Arc::new(\n        ServerConfig::builder()\n            .with_safe_defaults()\n            .with_no_client_auth()\n            .with_cert_resolver(Arc::new(Fail)),\n    );\n    let mut server = ServerConnection::new(config).unwrap();\n    let _ = server.read_tls(&mut io::Cursor::new(data));\n    let _ = server.process_new_packets();\n}"}
{"test_id": "BurntSushi-memchr/BurntSushi-memchr-f3fde7a/tests-gen/memrmem.inputs.rs::test_23", "code": "pub fn count(&self, haystack: &[u8]) -> usize {\n        // SAFETY: All of our pointers are derived directly from a borrowed\n        // slice, which is guaranteed to be valid.\n        unsafe {\n            let start = haystack.as_ptr();\n            let end = start.add(haystack.len());\n            self.count_raw(start, end)\n        }\n    }", "test": "fn test_23() {\n    let data = [136, 155, 10];\n    if data.len() < 2 {\n        return;\n    }\n    let split = std::cmp::max(data[0] as usize, 1) % data.len() as usize;\n    let (needle, haystack) = (&data[..split], &data[split..]);\n    memmem::rfind_iter(haystack, needle).count();\n}"}
{"test_id": "cloud-hypervisor-cloud-hypervisor/cloud-hypervisor-cloud-hypervisor-db3a5f3/tests-gen/mem.inputs.rs::test_5", "code": "pub fn wait_for_epoll_threads(&mut self) {\n        self.common.wait_for_epoll_threads();\n    }", "test": "fn test_5() {\n    let bytes = [54, 147];\n    if bytes.len() < VIRTIO_MEM_DATA_SIZE + QUEUE_DATA_SIZE + QUEUE_BYTES_SIZE\n        || bytes.len() > (VIRTIO_MEM_DATA_SIZE + QUEUE_DATA_SIZE + QUEUE_BYTES_SIZE + MEM_SIZE)\n    {\n        return;\n    }\n    let virtio_mem_data = &bytes[..VIRTIO_MEM_DATA_SIZE];\n    let queue_data = &bytes[VIRTIO_MEM_DATA_SIZE..VIRTIO_MEM_DATA_SIZE + QUEUE_DATA_SIZE];\n    let queue_bytes = &bytes[VIRTIO_MEM_DATA_SIZE + QUEUE_DATA_SIZE\n        ..VIRTIO_MEM_DATA_SIZE + QUEUE_DATA_SIZE + QUEUE_BYTES_SIZE];\n    let mem_bytes = &bytes[VIRTIO_MEM_DATA_SIZE + QUEUE_DATA_SIZE + QUEUE_BYTES_SIZE..];\n    let (mut virtio_mem, virtio_mem_region) =\n        create_dummy_virtio_mem(virtio_mem_data.try_into().unwrap());\n    let q = setup_virt_queue(queue_data.try_into().unwrap());\n    let mem =\n        GuestMemoryMmap::from_ranges(&[(GuestAddress(DESC_TABLE_ADDR), QUEUE_BYTES_SIZE)]).unwrap();\n    if mem\n        .write_slice(queue_bytes, GuestAddress(DESC_TABLE_ADDR))\n        .is_err()\n    {\n        return;\n    }\n    let mem = mem.insert_region(virtio_mem_region).unwrap();\n    if mem\n        .write_slice(mem_bytes, GuestAddress(VIRTIO_MEM_REGION_ADDRESS))\n        .is_err()\n    {\n        return;\n    }\n    let guest_memory = GuestMemoryAtomic::new(mem);\n    let evt = EventFd::new(0).unwrap();\n    let queue_evt = unsafe { EventFd::from_raw_fd(libc::dup(evt.as_raw_fd())) };\n    queue_evt.write(1).unwrap();\n    virtio_mem\n        .activate(\n            guest_memory,\n            Arc::new(NoopVirtioInterrupt {}),\n            vec![(0, q, evt)],\n        )\n        .ok();\n    virtio_mem.wait_for_epoll_threads();\n}"}
{"test_id": "rustls-rustls/rustls-rustls-ae583bd/tests-gen/client.inputs.rs::test_87", "code": "pub fn process_new_packets(&mut self) -> Result<IoState, Error> {\n        match self {\n            Self::Client(conn) => conn.process_new_packets(),\n            Self::Server(conn) => conn.process_new_packets(),\n        }\n    }", "test": "fn test_87() {\n    let data = [\n        22, 3, 3, 0, 63, 2, 0, 0, 59, 3, 3, 89, 16, 236, 200, 17, 90, 14, 121, 52, 150, 218, 66,\n        28, 227, 55, 237, 109, 95, 209, 111, 252, 56, 238, 6, 251, 154, 147, 123, 211, 206, 186,\n        114, 0, 204, 169, 0, 0, 19, 255, 1, 0, 1, 0, 0, 23, 0, 0, 0, 35, 0, 0, 0, 11, 0, 2, 1, 0,\n        22, 3, 3, 14, 229, 11, 0, 14, 225, 0, 14, 222, 0, 7, 96, 48, 130, 7, 92, 48, 130, 6, 68,\n        160, 3, 2, 1, 2, 2, 8, 83, 65, 61, 145, 120, 210, 140, 39, 48, 13, 6, 9, 42, 134, 72, 134,\n        247, 13, 1, 1, 11, 5, 0, 48, 73, 49, 11, 48, 9, 6, 3, 85, 4, 6, 19, 2, 85, 83, 49, 19, 48,\n        17, 6, 3, 85, 4, 10, 19, 10, 71, 111, 111, 103, 108, 101, 32, 73, 110, 99, 49, 37, 48, 35,\n        6, 3, 85, 4, 3, 19, 28, 71, 111, 111, 103, 108, 101, 32, 73, 110, 116, 101, 114, 110, 101,\n        116, 32, 65, 117, 116, 104, 111, 114, 105, 116, 121, 32, 71, 50, 48, 30, 23, 13, 49, 55,\n        48, 52, 50, 55, 48, 56, 51, 48, 48, 48, 90, 23, 13, 49, 55, 48, 55, 50, 48, 48, 56, 51, 48,\n        48, 48, 90, 48, 102, 49, 11, 48, 9, 6, 3, 85, 4, 6, 19, 2, 85, 83, 49, 19, 48, 17, 6, 3,\n        85, 4, 8, 12, 10, 67, 97, 108, 105, 102, 111, 114, 110, 105, 97, 49, 22, 48, 20, 6, 3, 85,\n        4, 7, 12, 13, 77, 111, 117, 110, 116, 97, 105, 110, 32, 86, 105, 101, 119, 49, 19, 48, 17,\n        6, 3, 85, 4, 10, 12, 10, 71, 111, 111, 103, 108, 101, 32, 73, 110, 99, 49, 21, 48, 19, 6,\n        3, 85, 4, 3, 12, 12, 42, 46, 103, 111, 111, 103, 108, 101, 46, 99, 111, 109, 48, 89, 48,\n        19, 6, 7, 42, 134, 72, 206, 61, 2, 1, 6, 8, 42, 134, 72, 206, 61, 3, 1, 7, 3, 66, 0, 4,\n        189, 77, 48, 133, 70, 173, 158, 211, 104, 157, 203, 90, 81, 210, 82, 202, 205, 147, 209,\n        252, 62, 33, 220, 191, 25, 45, 49, 119, 71, 86, 34, 248, 128, 116, 164, 199, 172, 91, 179,\n        223, 239, 76, 76, 63, 25, 69, 53, 53, 110, 197, 165, 220, 25, 210, 237, 147, 30, 18, 131,\n        158, 196, 86, 94, 111, 163, 130, 4, 244, 48, 130, 4, 240, 48, 29, 6, 3, 85, 29, 37, 4, 22,\n        48, 20, 6, 8, 43, 6, 1, 5, 5, 7, 3, 1, 6, 8, 43, 6, 1, 5, 5, 7, 3, 2, 48, 11, 6, 3, 85, 29,\n        15, 4, 4, 3, 2, 7, 128, 48, 130, 3, 179, 6, 3, 85, 29, 17, 4, 130, 3, 170, 48, 130, 3, 166,\n        130, 12, 42, 46, 103, 111, 111, 103, 108, 101, 46, 99, 111, 109, 130, 13, 42, 46, 97, 110,\n        100, 114, 111, 105, 100, 46, 99, 111, 109, 130, 22, 42, 46, 97, 112, 112, 101, 110, 103,\n        105, 110, 101, 46, 103, 111, 111, 103, 108, 101, 46, 99, 111, 109, 130, 18, 42, 46, 99,\n        108, 111, 117, 100, 46, 103, 111, 111, 103, 108, 101, 46, 99, 111, 109, 130, 14, 42, 46,\n        103, 99, 112, 46, 103, 227, 55, 237, 109, 95, 209, 111, 252, 56, 238, 6, 251, 154, 147,\n        123, 211, 206, 186, 114, 0, 204, 169, 0, 0, 19, 255, 1, 0, 1, 0, 0, 23, 0, 0, 0, 35, 0, 0,\n        0, 11, 0, 2, 1, 0, 22, 3, 3, 14, 229, 11, 0, 14, 225, 0, 14, 222, 0, 7, 96, 48, 130, 7, 92,\n        48, 130, 6, 68, 160, 3, 2, 1, 2, 2, 8, 83, 65, 61, 145, 120, 210, 140, 39, 48, 13, 6, 9,\n        42, 134, 72, 134, 247, 13, 1, 1, 11, 5, 0, 48, 73, 49, 11, 48, 9, 6, 3, 85, 4, 6, 19, 2,\n        85, 83, 49, 19, 48, 17, 6, 3, 85, 4, 10, 19, 10, 71, 111, 111, 103, 108, 101, 32, 73, 110,\n        99, 49, 37, 48, 35, 6, 3, 85, 4, 3, 19, 28, 71, 111, 111, 103, 108, 101, 32, 73, 110, 116,\n        101, 114, 110, 101, 116, 32, 65, 117, 116, 104, 111, 114, 105, 116, 121, 32, 71, 50, 48,\n        30, 23, 13, 49, 55, 48, 52, 50, 55, 48, 56, 51, 48, 48, 48, 90, 23, 13, 49, 55, 48, 55, 50,\n        48, 48, 56, 51, 48, 48, 48, 90, 48, 102, 49, 11, 48, 9, 6, 3, 85, 4, 6, 19, 2, 85, 83, 49,\n        19, 48, 17, 6, 3, 85, 4, 8, 12, 10, 67, 97, 108, 105, 102, 111, 114, 110, 105, 97, 49, 22,\n        48, 20, 6, 3, 85, 4, 7, 12, 13, 77, 111, 117, 110, 116, 97, 105, 110, 32, 86, 105, 101,\n        119, 49, 19, 48, 17, 6, 3, 85, 4, 10, 12, 10, 71, 111, 111, 103, 108, 101, 32, 73, 110, 99,\n        49, 21, 48, 19, 6, 3, 85, 4, 3, 12, 12, 42, 46, 103, 111, 111, 103, 108, 101, 46, 99, 111,\n        109, 48, 89, 48, 19, 6, 7, 42, 134, 72, 206, 61, 2, 1, 6, 8, 42, 134, 72, 206, 61, 3, 1, 7,\n        3, 66, 0, 4, 189, 77, 48, 133, 70, 173, 158, 211, 104, 157, 203, 90, 81, 210, 82, 202, 205,\n        147, 209, 252, 62, 33, 220, 191, 25, 45, 49, 119, 71, 86, 34, 248, 128, 116, 164, 199, 172,\n        91, 179, 223, 239, 76, 76, 63, 25, 69, 53, 53, 110, 197, 165, 220, 25, 210, 237, 147, 30,\n        18, 131, 158, 196, 86, 94, 111, 163, 130, 4, 244, 48, 130, 4, 240, 48, 29, 6, 3, 85, 29,\n        37, 4, 22, 48, 20, 6, 8, 43, 6, 1, 5, 5, 7, 3, 1, 6, 8, 43, 6, 1, 5, 5, 7, 3, 2, 48, 11, 6,\n        3, 85, 29, 15, 4, 4, 3, 2, 7, 128, 48, 130, 3, 179, 6, 3, 85, 29, 17, 4, 130, 3, 170, 48,\n        130, 3, 166, 130, 12, 42, 46, 103, 111, 111, 103, 108, 101, 46, 99, 111, 109, 130, 13, 42,\n        46, 97, 110, 100, 114, 111, 105, 100, 46, 99, 111, 109, 130, 22, 42, 46, 97, 112, 112, 101,\n        110, 103, 105, 110, 101, 46, 103, 111, 111, 103, 108, 101, 46, 99, 111, 109, 130, 18, 42,\n        46, 99, 108, 111, 117, 100, 46, 103, 111, 111, 103, 108, 101, 46, 99, 111, 109, 130, 14,\n        42, 46, 103, 99, 112, 46, 103, 118, 116, 50, 46, 99, 111, 109, 130, 22, 42, 46, 103, 111,\n        111, 103, 108, 101, 45, 97, 110, 97, 108, 121, 116, 105, 99, 115, 46, 99, 111, 109, 130,\n        11, 42, 46, 103, 111, 111, 103, 108, 101, 46, 99, 97, 130, 11, 42, 46, 103, 111, 111, 103,\n        108, 101, 46, 99, 108, 130, 14, 42, 46, 103, 111, 111, 103, 108, 101, 46, 99, 111, 46, 105,\n        110, 130, 14, 42, 46, 103, 111, 111, 103, 108, 101, 46, 99, 111, 46, 106, 112, 130, 14, 42,\n        46, 103, 111, 111, 103, 108, 101, 46, 99, 111, 46, 117, 107, 130, 15, 42, 46, 103, 111,\n        111, 103, 108, 101, 46, 99, 111, 109, 46, 97, 114, 130, 15, 42, 46, 103, 111, 111, 103,\n        108, 101, 46, 99, 111, 109, 46, 97, 117, 130, 15, 42, 46, 103, 111, 111, 103, 108, 101, 46,\n        99, 111, 109, 46, 98, 114, 130, 15, 42, 46, 103, 111, 111, 103, 108, 101, 46, 99, 111, 109,\n        46, 99, 19, 26, 27, 50, 165, 190, 234, 17, 149, 76, 72, 99, 73, 233, 153, 93, 32, 55, 204,\n        254, 42, 105, 81, 22, 149, 75, 169, 222, 73, 130, 192, 16, 112, 244, 44, 243, 236, 188, 36,\n        36, 208, 78, 172, 165, 217, 94, 30, 109, 146, 193, 167, 172, 72, 53, 129, 249, 229, 228,\n        156, 101, 105, 205, 135, 164, 65, 80, 63, 46, 87, 165, 145, 81, 18, 88, 14, 140, 9, 161,\n        172, 122, 164, 18, 165, 39, 243, 154, 16, 151, 125, 85, 3, 6, 247, 102, 88, 95, 95, 100,\n        225, 171, 93, 109, 165, 57, 72, 117, 152, 76, 41, 90, 58, 141, 211, 43, 202, 156, 85, 4,\n        191, 244, 230, 20, 213, 128, 172, 38, 237, 23, 137, 166, 147, 108, 92, 164, 204, 184, 240,\n        102, 142, 100, 227, 125, 154, 226, 0, 179, 73, 199, 228, 10, 170, 221, 91, 131, 199, 112,\n        144, 70, 78, 190, 208, 219, 89, 150, 108, 46, 245, 22, 54, 222, 113, 204, 1, 194, 18, 193,\n        33, 198, 22, 0, 3, 129, 48, 130, 3, 125, 48, 130, 2, 230, 160, 3, 2, 1, 2, 2, 3, 18, 187,\n        230, 48, 13, 6, 9, 42, 134, 72, 134, 247, 13, 1, 1, 5, 5, 0, 48, 78, 49, 11, 48, 9, 6, 3,\n        85, 4, 6, 19, 2, 85, 83, 49, 16, 48, 14, 6, 3, 85, 4, 10, 19, 7, 69, 113, 117, 105, 102,\n        97, 120, 49, 45, 48, 43, 6, 3, 85, 4, 11, 19, 36, 69, 113, 117, 105, 102, 97, 120, 32, 83,\n        101, 99, 117, 114, 101, 32, 67, 101, 114, 116, 105, 102, 105, 99, 97, 116, 101, 32, 65,\n        117, 116, 104, 111, 114, 105, 116, 121, 48, 30, 23, 13, 48, 50, 48, 53, 50, 49, 48, 52, 48,\n        48, 48, 48, 90, 23, 13, 49, 56, 48, 56, 50, 49, 48, 52, 48, 48, 48, 48, 90, 48, 66, 49, 11,\n        48, 9, 6, 3, 85, 4, 6, 19, 2, 85, 83, 48, 22, 48, 20, 6, 3, 85, 4, 10, 19, 13, 71, 101,\n        111, 84, 114, 117, 115, 116, 32, 73, 110, 99, 46, 49, 27, 48, 25, 6, 3, 85, 4, 3, 19, 18,\n        71, 101, 111, 84, 114, 117, 115, 116, 32, 71, 108, 111, 98, 97, 108, 32, 67, 65, 48, 130,\n        1, 34, 48, 13, 6, 9, 42, 134, 72, 134, 247, 13, 1, 1, 1, 5, 0, 3, 130, 1, 15, 0, 48, 130,\n        1, 10, 2, 130, 1, 1, 0, 218, 204, 24, 99, 48, 253, 244, 23, 35, 26, 86, 126, 91, 223, 60,\n        108, 56, 228, 113, 183, 120, 145, 212, 188, 161, 216, 76, 248, 168, 67, 182, 3, 233, 77,\n        33, 7, 8, 136, 218, 88, 47, 102, 57, 41, 189, 5, 120, 139, 157, 56, 232, 5, 183, 106, 126,\n        113, 164, 230, 196, 96, 166, 176, 239, 128, 228, 137, 40, 15, 158, 37, 214, 237, 131, 243,\n        173, 166, 145, 199, 152, 201, 66, 24, 53, 20, 157, 173, 152, 70, 146, 46, 79, 202, 241,\n        135, 67, 193, 22, 149, 87, 45, 80, 239, 137, 45, 128, 122, 87, 173, 242, 238, 95, 107, 210,\n        0, 141, 185, 20, 248, 20, 21, 53, 217, 192, 70, 163, 123, 114, 200, 145, 191, 201, 85, 43,\n        205, 208, 151, 62, 156, 38, 100, 204, 223, 206, 131, 25, 113, 202, 78, 230, 212, 213, 123,\n        169, 25, 205, 85, 222, 200, 236, 210, 94, 56, 83, 229, 92, 79, 140, 45, 254, 80, 35, 54,\n        252, 102, 230, 203, 142, 164, 57, 25, 0, 183, 149, 2, 57, 145, 11, 14, 254, 56, 46, 209,\n        29, 5, 154, 246, 77, 62, 111, 15, 7, 29, 175, 44, 30, 143, 96, 57, 226, 250, 54, 83, 19,\n        57, 212, 94, 38, 43, 219, 61, 168, 20, 189, 50, 235, 24, 3, 40, 82, 4, 113, 229, 171, 51,\n        61, 225, 56, 187, 7, 54, 132, 98, 156, 121, 234, 22, 48, 244, 95, 192, 43, 232, 113, 107,\n        228, 249, 2, 3, 1, 0, 1, 163, 129, 240, 48, 129, 237, 48, 31, 6, 3, 85, 29, 35, 4, 24, 48,\n        22, 128, 20, 72, 230, 104, 249, 43, 210, 178, 149, 215, 71, 216, 35, 32, 16, 79, 51, 152,\n        144, 159, 212, 48, 29, 6, 3, 85, 29, 14, 4, 22, 4, 20, 192, 122, 152, 104, 141, 137, 251,\n        171, 5, 100, 12, 17, 125, 170, 125, 101, 184, 202, 204, 78, 48, 15, 6, 3, 85, 29, 19, 1, 1,\n        255, 4, 5, 48, 3, 1, 1, 255, 48, 14, 6, 3, 85, 29, 15, 1, 1, 255, 4, 4, 3, 2, 1, 6, 48, 58,\n        6, 3, 85, 29, 31, 4, 51, 48, 49, 48, 47, 160, 45, 160, 43, 134, 41, 104, 116, 116, 112, 58,\n        47, 47, 99, 114, 108, 46, 103, 101, 111, 116, 114, 117, 115, 116, 46, 99, 111, 109, 47, 99,\n        114, 108, 115, 47, 115, 101, 99, 117, 114, 101, 99, 97, 46, 99, 114, 108, 48, 78, 6, 3, 85,\n        29, 32, 4, 71, 48, 69, 48, 67, 6, 4, 85, 29, 32, 0, 48, 59, 48, 57, 6, 8, 43, 6, 1, 5, 5,\n        7, 2, 1, 22, 45, 104, 116, 116, 112, 115, 58, 47, 47, 119, 119, 119, 46, 103, 101, 111,\n        116, 114, 117, 115, 116, 46, 99, 111, 109, 47, 114, 101, 115, 111, 117, 114, 99, 101, 115,\n        47, 114, 101, 112, 111, 115, 105, 116, 111, 114, 121, 48, 13, 6, 9, 42, 134, 72, 134, 247,\n        13, 1, 1, 5, 5, 0, 3, 129, 129, 0, 118, 225, 18, 110, 78, 75, 22, 18, 134, 48, 6, 178, 129,\n        8, 207, 240, 8, 199, 199, 113, 126, 102, 238, 194, 237, 212, 59, 31, 255, 240, 240, 200,\n        78, 214, 67, 56, 176, 185, 48, 125, 24, 208, 85, 131, 162, 106, 203, 54, 17, 156, 232, 72,\n        102, 163, 109, 127, 184, 19, 212, 71, 254, 139, 90, 92, 115, 252, 174, 217, 27, 50, 25, 56,\n        171, 151, 52, 20, 170, 150, 210, 235, 163, 28, 20, 8, 73, 182, 187, 229, 145, 239, 131, 54,\n        235, 29, 86, 111, 202, 218, 188, 115, 99, 144, 228, 127, 123, 62, 34, 203, 61, 7, 237, 95,\n        56, 116, 156, 227, 3, 80, 78, 161, 175, 152, 238, 97, 242, 132, 63, 18, 22, 3, 3, 0, 114,\n        12, 0, 0, 110, 3, 0, 29, 32, 75, 217, 44, 1, 117, 219, 122, 48, 71, 161, 89, 28, 185, 211,\n        203, 104, 197, 72, 172, 58, 227, 76, 100, 140, 23, 97, 211, 83, 70, 10, 176, 5, 4, 3, 0,\n        70, 48, 68, 2, 32, 118, 77, 25, 193, 184, 245, 209, 235, 233, 73, 206, 164, 213, 214, 217,\n        58, 189, 77, 153, 98, 68, 51, 73, 61, 86, 46, 224, 166, 129, 107, 233, 99, 2, 32, 124, 140,\n        108, 231, 222, 178, 70, 254, 130, 96, 249, 202, 22, 73, 30, 105, 180, 48, 177, 254, 92,\n        206, 16, 218, 0, 232, 189, 151, 157, 245, 39, 28, 22, 3, 3, 0, 4, 14, 0, 0, 0, 22, 3, 3, 0,\n        190, 4, 0, 0, 186, 0, 1, 137, 192, 0, 180, 20, 223, 122, 124, 254, 176, 24, 87, 129, 188,\n        25, 248, 233, 202, 114, 232, 117, 171, 162, 35, 223, 70, 217, 201, 60, 235, 114, 254, 181,\n        102, 199, 213, 157, 219, 90, 42, 235, 135, 84, 255, 194, 219, 249, 247, 214, 54, 54, 229,\n        79, 220, 3, 190, 161, 210, 47, 16, 37, 64, 211, 213, 90, 152, 193, 224, 185, 50, 214, 247,\n        202, 43, 114, 244, 225, 125, 149, 103, 150, 160, 133, 107, 60, 123, 80, 172, 188, 210, 189,\n        252, 195, 26, 25, 7, 251, 196, 130, 237, 57, 195, 62, 96, 219, 233, 108, 223, 21, 183, 44,\n        247, 233, 117, 14, 205, 189, 245, 126, 108, 249, 188, 52, 226, 115, 236, 151, 168, 171,\n        226, 99, 204, 123, 77, 237, 165, 38, 196, 158, 196, 163, 39, 31, 219, 195, 16, 152, 4, 135,\n        131, 197, 26, 192, 175, 73, 208, 102, 224, 50, 80, 230, 29, 5, 207, 178, 98, 39, 107, 230,\n        1, 197, 170, 5, 64, 181, 56, 55, 178, 122, 4, 178, 114, 110, 79, 20, 3, 3, 0, 1, 1, 22, 3,\n        3, 0, 32, 183, 30, 234, 49, 21, 153, 244, 50, 141, 222, 123, 52, 1, 109, 64, 238, 29, 191,\n        187, 51, 222, 29, 236, 211, 51, 142, 115, 248, 228, 41, 223, 232, 23, 3, 3, 5, 145, 183,\n        198, 127, 233, 133, 132, 204, 255, 193, 240, 165, 168, 179, 134, 137, 28, 111, 57, 20, 103,\n        109, 40, 93, 116, 27, 183, 6, 173, 163, 53, 13, 72, 122, 43, 63, 229, 34, 239, 206, 238,\n        224, 219, 154, 89, 232, 199, 231, 76, 220, 48, 166, 150, 198, 187, 179, 212, 170, 99, 14,\n        86, 71, 119, 180, 116, 170, 223, 163, 40, 114, 100, 115, 113, 43, 44, 114, 235, 76, 52, 47,\n        163, 154, 106, 75, 206, 13, 169, 35, 146, 186, 235, 26, 215, 226, 25, 96, 82, 134, 106,\n        165, 127, 165, 151, 155, 237, 16, 83, 188, 25, 119, 139, 21, 127, 119, 176, 100, 73, 39,\n        111, 86, 232, 52, 9, 66, 93, 115, 223, 106, 228, 206, 238, 160, 132, 136, 64, 102, 43, 74,\n        71, 121, 174, 29, 24, 97, 80, 95, 52, 218, 59, 92, 197, 127, 255, 57, 181, 131, 22, 44,\n        103, 181, 255, 147, 102, 90, 15, 183, 116, 87, 9, 234, 149, 220, 97, 185, 51, 15, 48, 192,\n        77, 192, 92, 6, 25, 231, 98, 183, 247, 191, 91, 35, 232, 21, 25, 172, 40, 237, 60, 161,\n        137, 231, 74, 255, 83, 254, 183, 142, 212, 17, 244, 228, 22, 175, 11, 18, 28, 10, 13, 59,\n        153, 59, 167, 135, 132, 139, 137, 113, 140, 127, 144, 118, 200, 162, 233, 78, 190, 163, 76,\n        226, 254, 141, 23, 103, 104, 130, 9, 249, 38, 224, 186, 81, 202, 138, 93, 91, 204, 157,\n        215, 80, 29, 100, 172, 90, 238, 198, 240, 210, 187, 19, 62, 115, 118, 162, 168, 216, 71,\n        112, 46, 23, 133, 22, 189, 210, 149, 133, 48, 200, 136, 154, 38, 232, 39, 155, 118, 193,\n        34, 213, 153, 254, 27, 118, 184, 252, 128, 4, 175, 4, 84, 119, 78, 252, 154, 99, 252, 142,\n        108, 170, 171, 108, 4, 181, 42, 121, 214, 195, 219, 86, 242, 192, 126, 196, 223, 239, 42,\n        199, 225, 212, 234, 10, 122, 3, 193, 28, 84, 12, 112, 161, 253, 10, 169, 105, 164, 63, 97,\n        189, 164, 233, 134, 45, 115, 68, 28, 24, 245, 177, 156, 59, 119, 158, 169, 190, 92, 55, 25,\n        81, 131, 16, 97, 164, 233, 188, 6, 13, 197, 35, 180, 215, 5, 222, 218, 153, 211, 204, 140,\n        43, 16, 66, 70, 37, 188, 245, 142, 91, 181, 176, 50, 210, 247, 126, 210, 254, 254, 56, 58,\n        202, 187, 189, 198, 247, 74, 189, 80, 143, 231, 208, 22, 188, 255, 184, 79, 239, 101, 153,\n        38, 185, 223, 119, 141, 143, 254, 183, 142, 212, 17, 244, 228, 22, 175, 11, 18, 28, 10, 13,\n        59, 153, 59, 167, 135, 132, 139, 137, 113, 140, 127, 144, 118, 200, 162, 233, 78, 190, 163,\n        76, 226, 254, 141, 23, 103, 104, 130, 9, 249, 38, 224, 186, 81, 202, 138, 93, 91, 204, 157,\n        215, 80, 29, 100, 172, 90, 238, 198, 240, 210, 187, 19, 62, 115, 118, 162, 168, 216, 71,\n        112, 46, 23, 133, 22, 189, 210, 149, 133, 48, 200, 136, 154, 38, 232, 39, 155, 118, 193,\n        34, 213, 153, 254, 27, 118, 184, 252, 128, 4, 175, 4, 84, 119, 78, 252, 154, 99, 252, 142,\n        108, 170, 171, 108, 4, 181, 42, 121, 214, 195, 219, 86, 242, 192, 126, 196, 223, 239, 42,\n        199, 225, 212, 234, 10, 122, 3, 193, 28, 84, 12, 112, 161, 253, 10, 169, 105, 164, 63, 97,\n        189, 164, 233, 134, 45, 115, 68, 28, 24, 245, 177, 156, 59, 119, 158, 169, 190, 92, 55, 25,\n        81, 131, 16, 97, 164, 233, 188, 6, 13, 197, 35, 180, 215, 5, 222, 218, 153, 211, 204, 140,\n        43, 16, 66, 70, 37, 188, 245, 142, 91, 181, 176, 50, 210, 247, 126, 210, 254, 254, 56, 58,\n        202, 187, 189, 198, 247, 74, 189, 80, 143, 231, 208, 22, 188, 255, 184, 79, 239, 101, 153,\n        38, 185, 223, 119, 141, 143, 241, 93, 236, 72, 153, 185, 119, 215, 135, 123, 202, 66, 204,\n        12, 243, 246, 48, 108, 34, 66, 36, 233, 104, 52, 137, 12, 49, 17, 219, 213, 165, 132, 160,\n        153, 6, 175, 133, 172, 78, 183, 236, 228, 81, 164, 11, 152, 93, 194, 97, 108, 105, 102,\n        111, 114, 110, 105, 97, 49, 22, 48, 20, 6, 3, 85, 4, 7, 12, 13, 77, 111, 117, 110, 116, 97,\n        105, 110, 32, 86, 105, 101, 119, 49, 19, 48, 17, 6, 3, 85, 4, 10, 12, 212, 117, 179, 84,\n        175, 251, 73, 172, 10, 71, 111, 111, 103, 108, 101, 32, 73, 110, 99, 77, 49, 252,\n    ];\n    let root_store = RootCertStore::empty();\n    let config = Arc::new(\n        ClientConfig::builder()\n            .with_safe_defaults()\n            .with_root_certificates(root_store)\n            .with_no_client_auth(),\n    );\n    let example_com = \"example.com\".try_into().unwrap();\n    let mut client = ClientConnection::new(config, example_com).unwrap();\n    let _ = client.read_tls(&mut io::Cursor::new(data));\n    let _ = client.process_new_packets();\n}"}
{"test_id": "BurntSushi-memchr/BurntSushi-memchr-f3fde7a/tests-gen/memchr2.inputs.rs::test_34", "code": "fn count(self) -> usize {\n        self.it.count(|s, e| {\n            // SAFETY: We rely on our generic iterator to return valid start\n            // and end pointers.\n            unsafe { count_raw(self.needle1, s, e) }\n        })\n    }", "test": "fn test_34() {\n    let data = [38];\n    if data.len() < 2 {\n        return;\n    }\n    memchr2_iter(data[0], data[1], &data[2..]).count();\n}"}
{"test_id": "cloud-hypervisor-cloud-hypervisor/cloud-hypervisor-cloud-hypervisor-db3a5f3/tests-gen/cmos.inputs.rs::test_37", "code": "fn write(&mut self, _base: u64, offset: u64, data: &[u8]) -> Option<Arc<Barrier>> {\n        if data.len() != 1 {\n            warn!(\"Invalid write size on CMOS device: {}\", data.len());\n            return None;\n        }\n\n        match offset {\n            INDEX_OFFSET => self.index = data[0],\n            DATA_OFFSET => {\n                if self.index == 0x8f && data[0] == 0 {\n                    info!(\"CMOS reset\");\n                    self.reset_evt.write(1).unwrap();\n                    if let Some(vcpus_kill_signalled) = self.vcpus_kill_signalled.take() {\n                        // Spin until we are sure the reset_evt has been handled and that when\n                        // we return from the KVM_RUN we will exit rather than re-enter the guest.\n                        while !vcpus_kill_signalled.load(Ordering::SeqCst) {\n                            // This is more effective than thread::yield_now() at\n                            // avoiding a priority inversion with the VMM thread\n                            thread::sleep(std::time::Duration::from_millis(1));\n                        }\n                    }\n                } else {\n                    self.data[(self.index & INDEX_MASK) as usize] = data[0]\n                }\n            }\n            o => warn!(\"bad write offset on CMOS device: {}\", o),\n        };\n        None\n    }", "test": "fn test_37() {\n    let bytes = [89, 174, 4, 100];\n    if bytes.len() < 16 {\n        return;\n    }\n    let mut below_4g = [0u8; 8];\n    let mut above_4g = [0u8; 8];\n    below_4g.copy_from_slice(&bytes[0..8]);\n    above_4g.copy_from_slice(&bytes[8..16]);\n    let mut cmos = Cmos::new(\n        u64::from_le_bytes(below_4g),\n        u64::from_le_bytes(above_4g),\n        EventFd::new(EFD_NONBLOCK).unwrap(),\n        None,\n    );\n    let mut i = 16;\n    while i < bytes.len() {\n        let read = bytes.get(i).unwrap_or(&0) % 2 == 0;\n        i += 1;\n        if read {\n            let offset = (bytes.get(i).unwrap_or(&0) % 2) as u64;\n            i += 1;\n            let mut out_bytes = vec![0];\n            cmos.read(0, offset, &mut out_bytes);\n        } else {\n            let offset = (bytes.get(i).unwrap_or(&0) % 2) as u64;\n            i += 1;\n            let data = vec![*bytes.get(i).unwrap_or(&0)];\n            i += 1;\n            cmos.write(0, offset, &data);\n        }\n    }\n}"}
{"test_id": "BurntSushi-memchr/BurntSushi-memchr-f3fde7a/tests-gen/memchr.inputs.rs::test_6", "code": "fn count(self) -> usize {\n        self.it.count(|s, e| {\n            // SAFETY: We rely on our generic iterator to return valid start\n            // and end pointers.\n            unsafe { count_raw(self.needle1, s, e) }\n        })\n    }", "test": "fn test_6() {\n    let data = [45, 64];\n    if data.is_empty() {\n        return;\n    }\n    memchr_iter(data[0], &data[1..]).count();\n}"}
{"test_id": "quinn-rs-quinn/quinn-rs-quinn-83e4f46/tests-gen/packet.inputs.rs::test_44", "code": "fn to_vec(params: &TransportParameters) -> Vec<u8> {\n    let mut bytes = Vec::new();\n    params.write(&mut bytes);\n    bytes\n}", "test": "fn test_44() {\n    let data = PacketParams {\n        local_cid_len: 19,\n        buf: b\"\",\n        grease_quic_bit: false,\n    };\n    let len = data.buf.len();\n    let supported_versions = DEFAULT_SUPPORTED_VERSIONS.to_vec();\n    if let Ok(decoded) = PartialDecode::new(\n        data.buf,\n        data.local_cid_len,\n        &supported_versions,\n        data.grease_quic_bit,\n    ) {\n        match decoded.1 {\n            Some(x) => assert_eq!(len, decoded.0.len() + x.len()),\n            None => assert_eq!(len, decoded.0.len()),\n        }\n    }\n}"}
{"test_id": "cloud-hypervisor-cloud-hypervisor/cloud-hypervisor-cloud-hypervisor-db3a5f3/tests-gen/balloon.inputs.rs::test_98", "code": "pub fn wait_for_epoll_threads(&mut self) {\n        self.common.wait_for_epoll_threads();\n    }", "test": "fn test_98() {\n    let bytes = [8, 157, 157, 57];\n    if bytes.len() < QUEUE_DATA_SIZE * QUEUE_NUM\n        || bytes.len() > (QUEUE_DATA_SIZE * QUEUE_NUM + MEM_SIZE)\n    {\n        return;\n    }\n    let mut balloon = virtio_devices::Balloon::new(\n        \"fuzzer_balloon\".to_owned(),\n        BALLOON_SIZE,\n        true,\n        true,\n        SeccompAction::Allow,\n        EventFd::new(EFD_NONBLOCK).unwrap(),\n        None,\n    )\n    .unwrap();\n    let queue_data = &bytes[..QUEUE_DATA_SIZE * QUEUE_NUM];\n    let mem_bytes = &bytes[QUEUE_DATA_SIZE * QUEUE_NUM..];\n    let mem = GuestMemoryMmap::from_ranges(&[(GuestAddress(0), MEM_SIZE)]).unwrap();\n    if mem.write_slice(mem_bytes, GuestAddress(0 as u64)).is_err() {\n        return;\n    }\n    let guest_memory = GuestMemoryAtomic::new(mem);\n    let mut queues = setup_virt_queues(\n        &[\n            &queue_data[..QUEUE_DATA_SIZE].try_into().unwrap(),\n            &queue_data[QUEUE_DATA_SIZE..QUEUE_DATA_SIZE * 2]\n                .try_into()\n                .unwrap(),\n            &queue_data[QUEUE_DATA_SIZE * 2..QUEUE_DATA_SIZE * 3]\n                .try_into()\n                .unwrap(),\n        ],\n        0,\n    );\n    let inflate_q = queues.remove(0);\n    let inflate_evt = EventFd::new(0).unwrap();\n    let inflate_queue_evt = unsafe { EventFd::from_raw_fd(libc::dup(inflate_evt.as_raw_fd())) };\n    let deflate_q = queues.remove(0);\n    let deflate_evt = EventFd::new(0).unwrap();\n    let deflate_queue_evt = unsafe { EventFd::from_raw_fd(libc::dup(deflate_evt.as_raw_fd())) };\n    let reporting_q = queues.remove(0);\n    let reporting_evt = EventFd::new(0).unwrap();\n    let reporting_queue_evt = unsafe { EventFd::from_raw_fd(libc::dup(reporting_evt.as_raw_fd())) };\n    inflate_queue_evt.write(1).unwrap();\n    deflate_queue_evt.write(1).unwrap();\n    reporting_queue_evt.write(1).unwrap();\n    balloon\n        .activate(\n            guest_memory,\n            Arc::new(NoopVirtioInterrupt {}),\n            vec![\n                (0, inflate_q, inflate_evt),\n                (1, deflate_q, deflate_evt),\n                (2, reporting_q, reporting_evt),\n            ],\n        )\n        .ok();\n    balloon.wait_for_epoll_threads();\n}"}
{"test_id": "quinn-rs-quinn/quinn-rs-quinn-83e4f46/tests-gen/streamid.inputs.rs::test_14", "code": "pub fn initiator(self) -> Side {\n        if self.0 & 0x1 == 0 {\n            Side::Client\n        } else {\n            Side::Server\n        }\n    }", "test": "fn test_14() {\n    let data = StreamIdParams {\n        side: Client,\n        dir: Uni,\n        index: 12514849900987264429,\n    };\n    let s = StreamId::new(data.side, data.dir, data.index);\n    assert_eq!(s.initiator(), data.side);\n    assert_eq!(s.dir(), data.dir);\n}"}
{"test_id": "quinn-rs-quinn/quinn-rs-quinn-83e4f46/tests-gen/packet.inputs.rs::test_20", "code": "fn to_vec(params: &TransportParameters) -> Vec<u8> {\n    let mut bytes = Vec::new();\n    params.write(&mut bytes);\n    bytes\n}", "test": "fn test_20() {\n    let data = PacketParams {\n        local_cid_len: 11,\n        buf: b\"\\xf2\\0\",\n        grease_quic_bit: false,\n    };\n    let len = data.buf.len();\n    let supported_versions = DEFAULT_SUPPORTED_VERSIONS.to_vec();\n    if let Ok(decoded) = PartialDecode::new(\n        data.buf,\n        data.local_cid_len,\n        &supported_versions,\n        data.grease_quic_bit,\n    ) {\n        match decoded.1 {\n            Some(x) => assert_eq!(len, decoded.0.len() + x.len()),\n            None => assert_eq!(len, decoded.0.len()),\n        }\n    }\n}"}
{"test_id": "quinn-rs-quinn/quinn-rs-quinn-83e4f46/tests-gen/packet.inputs.rs::test_33", "code": "fn to_vec(params: &TransportParameters) -> Vec<u8> {\n    let mut bytes = Vec::new();\n    params.write(&mut bytes);\n    bytes\n}", "test": "fn test_33() {\n    let data = PacketParams {\n        local_cid_len: 20,\n        buf: b\"\\x12\",\n        grease_quic_bit: false,\n    };\n    let len = data.buf.len();\n    let supported_versions = DEFAULT_SUPPORTED_VERSIONS.to_vec();\n    if let Ok(decoded) = PartialDecode::new(\n        data.buf,\n        data.local_cid_len,\n        &supported_versions,\n        data.grease_quic_bit,\n    ) {\n        match decoded.1 {\n            Some(x) => assert_eq!(len, decoded.0.len() + x.len()),\n            None => assert_eq!(len, decoded.0.len()),\n        }\n    }\n}"}
{"test_id": "marshallpierce-rust-base64/marshallpierce-rust-base64-4ef33cc/tests-gen/roundtrip_random_config.inputs.rs::test_21", "code": "fn decode<T: AsRef<[u8]>>(&self, input: T) -> Result<Vec<u8>, DecodeError> {\n        fn inner<E>(engine: &E, input_bytes: &[u8]) -> Result<Vec<u8>, DecodeError>\n        where\n            E: Engine + ?Sized,\n        {\n            let estimate = engine.internal_decoded_len_estimate(input_bytes.len());\n            let mut buffer = vec![0; estimate.decoded_len_estimate()];\n\n            let bytes_written = engine\n                .internal_decode(input_bytes, &mut buffer, estimate)?\n                .decoded_len;\n\n            buffer.truncate(bytes_written);\n\n            Ok(buffer)\n        }\n\n        inner(self, input.as_ref())\n    }", "test": "fn test_21() {\n    let data = [10, 4, 10, 0];\n    let engine = utils::random_engine(data);\n    let encoded = engine.encode(data);\n    let decoded = engine.decode(&encoded).unwrap();\n    assert_eq!(data, decoded.as_slice());\n}"}
{"test_id": "bodil-im-rs/bodil-im-rs-2afaf54/tests-gen/hashset.inputs.rs::test_10", "code": "pub fn remove<BA>(&mut self, a: &BA) -> Option<A>\n    where\n        BA: Hash + Eq + ?Sized,\n        A: Borrow<BA>,\n    {\n        let root = PoolRef::make_mut(&self.pool.0, &mut self.root);\n        let result = root.remove(&self.pool.0, hash_key(&*self.hasher, a), 0, a);\n        if result.is_some() {\n            self.size -= 1;\n        }\n        result.map(|v| v.0)\n    }", "test": "fn test_10() {\n    let actions = [Remove(17865498319816488459)];\n    let mut set = HashSet::new();\n    let mut nat = NatSet::new();\n    for action in actions {\n        match action {\n            Action::Insert(value) => {\n                let len = nat.len() + if nat.contains(&value) { 0 } else { 1 };\n                nat.insert(value);\n                set.insert(value);\n                assert_eq!(len, set.len());\n            }\n            Action::Remove(value) => {\n                let len = nat.len() - if nat.contains(&value) { 1 } else { 0 };\n                nat.remove(&value);\n                set.remove(&value);\n                assert_eq!(len, set.len());\n            }\n        }\n        assert_eq!(nat.len(), set.len());\n        assert_eq!(HashSet::from(nat.clone()), set);\n    }\n}"}
{"test_id": "gimli-rs-gimli/gimli-rs-gimli-3947879/tests-gen/debug_abbrev.inputs.rs::test_16", "code": "pub fn get<R: Reader>(\n        &self,\n        debug_abbrev: &DebugAbbrev<R>,\n        offset: DebugAbbrevOffset<R::Offset>,\n    ) -> Result<Arc<Abbreviations>> {\n        if offset.0 != R::Offset::from_u8(0) {\n            return debug_abbrev.abbreviations(offset).map(Arc::new);\n        }\n        self.abbreviations\n            .get(|| debug_abbrev.abbreviations(offset))\n    }", "test": "fn test_16() {\n    let debug_abbrev = [91, 91];\n    let len = debug_abbrev.len();\n    let debug_abbrev = DebugAbbrev::new(&debug_abbrev, LittleEndian);\n    let offset = DebugAbbrevOffset(0);\n    if let Ok(abbreviations) = debug_abbrev.abbreviations(offset) {\n        for i in 1..len {\n            let _ = abbreviations.get(i as u64);\n        }\n    }\n}"}
{"test_id": "gimli-rs-gimli/gimli-rs-gimli-3947879/tests-gen/debug_info.inputs.rs::test_27", "code": "pub fn next(&mut self) -> Result<Option<RawLocListEntry<R>>> {\n        if self.input.is_empty() {\n            return Ok(None);\n        }\n\n        match RawLocListEntry::parse(&mut self.input, self.encoding, self.format) {\n            Ok(entry) => {\n                if entry.is_none() {\n                    self.input.empty();\n                }\n                Ok(entry)\n            }\n            Err(e) => {\n                self.input.empty();\n                Err(e)\n            }\n        }\n    }", "test": "fn test_27() {\n    let sections = (\n        [29],\n        [3, 224, 26, 255, 255, 255, 255, 255, 255, 255, 255, 255, 95],\n    );\n    let (debug_abbrev, debug_info) = sections;\n    let debug_abbrev = DebugAbbrev::new(&debug_abbrev, LittleEndian);\n    let debug_info = DebugInfo::new(&debug_info, LittleEndian);\n    let mut units = debug_info.units();\n    while let Ok(Some(unit)) = units.next() {\n        if let Ok(abbrevs) = unit.abbreviations(&debug_abbrev) {\n            let mut cursor = unit.entries(&abbrevs);\n            while let Ok(Some((_delta, entry))) = cursor.next_dfs() {\n                let mut attrs = entry.attrs();\n                while let Ok(Some(_attr)) = attrs.next() {\n                    continue;\n                }\n            }\n        }\n    }\n}"}
{"test_id": "uutils-coreutils/uutils-coreutils-73b7c46/tests-gen/fuzz_parse_size.inputs.rs::test_18", "code": "pub fn parse_size(size: &str) -> Result<u64, ParseSizeError> {\n    Parser::default().parse(size)\n}", "test": "fn test_18() {\n    let data = [10, 36];\n    if let Ok(s) = std::str::from_utf8(data) {\n        _ = parse_size(s);\n    }\n}"}
{"test_id": "gimli-rs-gimli/gimli-rs-gimli-3947879/tests-gen/debug_line.inputs.rs::test_46", "code": "pub fn next_row(&mut self) -> Result<Option<(&LineProgramHeader<R, Offset>, &LineRow)>> {\n        // Perform any reset that was required after copying the previous row.\n        self.row.reset(self.program.header());\n\n        loop {\n            // Split the borrow here, rather than calling `self.header()`.\n            match self.instructions.next_instruction(self.program.header()) {\n                Err(err) => return Err(err),\n                Ok(None) => return Ok(None),\n                Ok(Some(instruction)) => {\n                    if self.row.execute(instruction, &mut self.program) {\n                        if self.row.tombstone {\n                            // Perform any reset that was required for the tombstone row.\n                            // Normally this is done when `next_row` is called again, but for\n                            // tombstones we loop immediately.\n                            self.row.reset(self.program.header());\n                        } else {\n                            return Ok(Some((self.header(), &self.row)));\n                        }\n                    }\n                    // Fall through, parse the next instruction, and see if that\n                    // yields a row.\n                }\n            }\n        }\n    }", "test": "fn test_46() {\n    let debug_line = [91, 178, 91, 178];\n    let debug_line = DebugLine::new(&debug_line, LittleEndian);\n    let offset = DebugLineOffset(0);\n    let address_size = 8;\n    if let Ok(program) = debug_line.program(offset, address_size, None, None) {\n        let mut rows = program.rows();\n        while let Ok(Some(row)) = rows.next_row() {\n            let _ = row;\n        }\n    }\n}"}
{"test_id": "zip-rs-zip/zip-rs-zip-ed187d6/tests-gen/fuzz_read.inputs.rs::test_90", "code": "fn decompress_all (data : & [u8]) -> Result < () , Box < dyn std :: error :: Error > > { let reader = std :: io :: Cursor :: new (data) ; let mut zip = zip :: ZipArchive :: new (reader) ? ; for i in 0 .. zip . len () { let mut file = zip . by_index (i) ? ; if file . size () < 1 << 20 { let _ = std :: io :: copy (& mut file , & mut std :: io :: sink ()) ; } } Ok (()) }", "test": "fn test_90() {\n    let data = [152, 150, 10, 10];\n    let _ = decompress_all(data);\n}"}
{"test_id": "image-rs-image/image-rs-image-e5580ec/tests-gen/fuzzer_script_exr.inputs.rs::test_19", "code": "fn roundtrip (bytes : & [u8]) -> ImageResult < () > { # [doc = \" Read the file from the specified path into an `Rgba32FImage`.\"] fn read_as_rgba_byte_image (read : impl Read + Seek) -> ImageResult < (u32 , u32 , Vec < u8 >) > { let mut decoder = OpenExrDecoder :: with_alpha_preference (read , Some (true)) ? ; match usize :: try_from (decoder . total_bytes ()) { Ok (decoded_size) if decoded_size <= 256 * 1024 * 1024 => { decoder . set_limits (Limits :: default ()) ? ; let (width , height) = decoder . dimensions () ; let mut buffer = vec ! [0 ; decoded_size] ; decoder . read_image (buffer . as_mut_slice ()) ? ; Ok ((width , height , buffer)) } _ => Err (image :: ImageError :: Limits (image :: error :: LimitError :: from_kind (image :: error :: LimitErrorKind :: InsufficientMemory ,) ,)) , } } # [doc = \" Write an `Rgba32FImage`.\"] # [doc = \" Assumes the writer is buffered. In most cases,\"] # [doc = \" you should wrap your writer in a `BufWriter` for best performance.\"] fn write_rgba_image (write : impl Write + Seek , (width , height , data) : & (u32 , u32 , Vec < u8 >) ,) -> ImageResult < () > { OpenExrEncoder :: new (write) . write_image (data . as_slice () , * width , * height , ColorType :: Rgba32F) } let decoded_image = read_as_rgba_byte_image (Cursor :: new (bytes)) ? ; let mut bytes = Vec :: with_capacity (bytes . len () + 20) ; write_rgba_image (Cursor :: new (& mut bytes) , & decoded_image) ? ; let redecoded_image = read_as_rgba_byte_image (Cursor :: new (bytes)) ? ; assert_eq ! (decoded_image , redecoded_image , \"image was valid but was not reproducible\") ; Ok (()) }", "test": "fn test_19() {\n    let data = [61];\n    let _img = roundtrip(data);\n}"}
{"test_id": "cloud-hypervisor-cloud-hypervisor/cloud-hypervisor-cloud-hypervisor-db3a5f3/tests-gen/iommu.inputs.rs::test_25", "code": "pub fn wait_for_epoll_threads(&mut self) {\n        self.common.wait_for_epoll_threads();\n    }", "test": "fn test_25() {\n    let bytes = [6, 10, 40, 58];\n    if bytes.len() < (QUEUE_DATA_SIZE + QUEUE_BYTES_SIZE)\n        || bytes.len() > (QUEUE_DATA_SIZE + QUEUE_BYTES_SIZE + MEM_SIZE)\n    {\n        return;\n    }\n    let (mut iommu, _) = virtio_devices::Iommu::new(\n        \"fuzzer_iommu\".to_owned(),\n        SeccompAction::Allow,\n        EventFd::new(EFD_NONBLOCK).unwrap(),\n        ((MEM_SIZE - IOVA_SPACE_SIZE) as u64, (MEM_SIZE - 1) as u64),\n        None,\n    )\n    .unwrap();\n    let queue_data = &bytes[..QUEUE_DATA_SIZE];\n    let queue_bytes = &bytes[QUEUE_DATA_SIZE..QUEUE_DATA_SIZE + QUEUE_BYTES_SIZE];\n    let mem_bytes = &bytes[QUEUE_DATA_SIZE + QUEUE_BYTES_SIZE..];\n    let request_queue = setup_virt_queue(queue_data.try_into().unwrap());\n    let _event_queue = setup_virt_queue(queue_data.try_into().unwrap());\n    let mem = GuestMemoryMmap::from_ranges(&[\n        (GuestAddress(0), MEM_SIZE),\n        (GuestAddress(DESC_TABLE_ADDR), QUEUE_BYTES_SIZE),\n    ])\n    .unwrap();\n    if mem\n        .write_slice(queue_bytes, GuestAddress(DESC_TABLE_ADDR))\n        .is_err()\n    {\n        return;\n    }\n    if mem.write_slice(mem_bytes, GuestAddress(0 as u64)).is_err() {\n        return;\n    }\n    let guest_memory = GuestMemoryAtomic::new(mem);\n    let request_evt = EventFd::new(0).unwrap();\n    let request_queue_evt = unsafe { EventFd::from_raw_fd(libc::dup(request_evt.as_raw_fd())) };\n    let _event_evt = EventFd::new(0).unwrap();\n    request_queue_evt.write(1).unwrap();\n    iommu\n        .activate(\n            guest_memory,\n            Arc::new(NoopVirtioInterrupt {}),\n            vec![\n                (0, request_queue, request_evt),\n                (0, _event_queue, _event_evt),\n            ],\n        )\n        .ok();\n    iommu.wait_for_epoll_threads();\n}"}
{"test_id": "winnow-rs-winnow/winnow-rs-winnow-9e88734/tests-gen/fuzz_arithmetic.inputs.rs::test_42", "code": "fn factor(i: &mut &str) -> PResult<Expr> {\n    delimited(\n        multispaces,\n        alt((digits.try_map(FromStr::from_str).map(Expr::Value), parens)),\n        multispaces,\n    )\n    .parse_next(i)\n}", "test": "fn test_42() {\n    let data = [41, 8];\n    reset();\n    let _ = match str::from_utf8(data) {\n        Ok(mut v) => factor(&mut v),\n        Err(_) => factor(&mut \"2\"),\n    };\n}"}
{"test_id": "cloud-hypervisor-cloud-hypervisor/cloud-hypervisor-cloud-hypervisor-db3a5f3/tests-gen/block.inputs.rs::test_31", "code": "pub fn wait_for_epoll_threads(&mut self) {\n        self.common.wait_for_epoll_threads();\n    }", "test": "fn test_31() {\n    let bytes = [3, 29, 130];\n    if bytes.len() < QUEUE_DATA_SIZE || bytes.len() > (QUEUE_DATA_SIZE + MEM_SIZE) {\n        return;\n    }\n    let queue_data = &bytes[..QUEUE_DATA_SIZE];\n    let mem_bytes = &bytes[QUEUE_DATA_SIZE..];\n    let shm = memfd_create(&ffi::CString::new(\"fuzz\").unwrap(), 0).unwrap();\n    let disk_file: File = unsafe { File::from_raw_fd(shm) };\n    let qcow_disk = Box::new(RawFileDiskSync::new(disk_file)) as Box<dyn DiskFile>;\n    let mut block = Block::new(\n        \"tmp\".to_owned(),\n        qcow_disk,\n        PathBuf::from(\"\"),\n        false,\n        false,\n        2,\n        256,\n        None,\n        SeccompAction::Allow,\n        None,\n        EventFd::new(EFD_NONBLOCK).unwrap(),\n        None,\n    )\n    .unwrap();\n    let q = setup_virt_queue(queue_data.try_into().unwrap());\n    let mem = GuestMemoryMmap::from_ranges(&[(GuestAddress(0), MEM_SIZE)]).unwrap();\n    if mem.write_slice(mem_bytes, GuestAddress(0 as u64)).is_err() {\n        return;\n    }\n    let guest_memory = GuestMemoryAtomic::new(mem);\n    let evt = EventFd::new(0).unwrap();\n    let queue_evt = unsafe { EventFd::from_raw_fd(libc::dup(evt.as_raw_fd())) };\n    queue_evt.write(1).unwrap();\n    block\n        .activate(\n            guest_memory,\n            Arc::new(NoopVirtioInterrupt {}),\n            vec![(0, q, evt)],\n        )\n        .ok();\n    block.wait_for_epoll_threads();\n}"}
{"test_id": "BurntSushi-memchr/BurntSushi-memchr-f3fde7a/tests-gen/memrchr.inputs.rs::test_97", "code": "fn count(self) -> usize {\n        self.it.count(|s, e| {\n            // SAFETY: We rely on our generic iterator to return valid start\n            // and end pointers.\n            unsafe { count_raw(self.needle1, s, e) }\n        })\n    }", "test": "fn test_97() {\n    let data = [10, 10, 68, 19];\n    if data.is_empty() {\n        return;\n    }\n    memchr_iter(data[0], &data[1..]).rev().count();\n}"}
{"test_id": "seanmonstar-httparse/seanmonstar-httparse-638848e/tests-gen/parse_request.inputs.rs::test_17", "code": "pub fn parse(&mut self, buf: &'b [u8]) -> Result<usize> {\n        self.parse_with_config(buf, &Default::default())\n    }", "test": "fn test_17() {\n    let data = [10, 10, 73];\n    let mut headers = [httparse::EMPTY_HEADER; 16];\n    let mut req = httparse::Request::new(&mut headers);\n    req.parse(data);\n}"}
{"test_id": "image-rs-image-png/image-rs-image-png-e113d76/tests-gen/buf_independent.inputs.rs::test_78", "code": "fn new (inner : R , cap : usize) -> Self { SmalBuf { inner , cap } }", "test": "fn test_78() {\n    let data = [1, 36, 3, 2];\n    let limits = png::Limits { bytes: 1 << 16 };\n    let reference = png::Decoder::new_with_limits(data, limits);\n    let smal = png::Decoder::new_with_limits(SmalBuf::new(data, 1), limits);\n    let _ = png_compare(reference, smal);\n}"}
{"test_id": "image-rs-image/image-rs-image-e5580ec/tests-gen/fuzzer_script_tga.inputs.rs::test_98", "code": "fn decode(encoded: &[u8]) -> Vec<u8> {\n        let decoder = JpegDecoder::new(Cursor::new(encoded)).expect(\"Could not decode image\");\n\n        let mut decoded = vec![0; decoder.total_bytes() as usize];\n        decoder\n            .read_image(&mut decoded)\n            .expect(\"Could not decode image\");\n        decoded\n    }", "test": "fn test_98() {\n    let data = [10, 10, 34, 108];\n    let _ = decode(data);\n}"}
{"test_id": "zip-rs-zip/zip-rs-zip-ed187d6/tests-gen/fuzz_read.inputs.rs::test_83", "code": "fn decompress_all (data : & [u8]) -> Result < () , Box < dyn std :: error :: Error > > { let reader = std :: io :: Cursor :: new (data) ; let mut zip = zip :: ZipArchive :: new (reader) ? ; for i in 0 .. zip . len () { let mut file = zip . by_index (i) ? ; if file . size () < 1 << 20 { let _ = std :: io :: copy (& mut file , & mut std :: io :: sink ()) ; } } Ok (()) }", "test": "fn test_83() {\n    let data = [136, 10, 136, 96];\n    let _ = decompress_all(data);\n}"}
{"test_id": "rust-bakery-nom/rust-bakery-nom-869f897/tests-gen/fuzz_arithmetic.inputs.rs::test_76", "code": "fn factor(i: &str) -> IResult<&str, Expr> {\n  alt((\n    map(\n      map_res(delimited(multispace, digit, multispace), FromStr::from_str),\n      Expr::Value,\n    ),\n    parens,\n  ))(i)\n}", "test": "fn test_76() {\n  let data = [10, 254, 48, 77];\n  reset();\n  let temp = match str::from_utf8(data) {\n    Ok(v) => factor(v),\n    Err(e) => factor(\"2\"),\n  };\n}"}
{"test_id": "image-rs-image-png/image-rs-image-png-e113d76/tests-gen/roundtrip.inputs.rs::test_86", "code": "fn encode_png < 'a > (width : u8 , filter : u8 , compression : u8 , color_type : u8 , raw_bit_depth : u8 , raw_palette : & 'a [u8] , data : & 'a [u8]) -> Option < (& 'a [u8] , Vec < u8 >) > { let width = width as u32 ; if width == 0 { return None } ; let filter = FilterType :: from_u8 (filter) ? ; let bit_depth = BitDepth :: from_u8 (raw_bit_depth) ? ; let max_palette_length = 3 * u32 :: pow (2 , raw_bit_depth as u32) as usize ; let mut palette = raw_palette ; let color_type = ColorType :: from_u8 (color_type) ? ; if let ColorType :: Indexed = color_type { if raw_palette . len () > max_palette_length { palette = & raw_palette [.. max_palette_length] ; } } let compression = match compression { 0 => png :: Compression :: Default , 1 => png :: Compression :: Fast , 2 => png :: Compression :: Best , 3 => png :: Compression :: Huffman , 4 => png :: Compression :: Rle , _ => return None , } ; let bytes_per_row = raw_row_length_from_width (bit_depth , color_type , width) - 1 ; let height = data . len () / bytes_per_row ; let total_bytes = bytes_per_row * height ; let data_to_encode = & data [.. total_bytes] ; let mut output : Vec < u8 > = Vec :: new () ; { let mut encoder = png :: Encoder :: new (& mut output , width , height as u32) ; encoder . set_depth (bit_depth) ; encoder . set_color (color_type) ; encoder . set_filter (filter) ; encoder . set_compression (compression) ; if let ColorType :: Indexed = color_type { encoder . set_palette (palette) } let mut writer = encoder . write_header () . ok () ? ; writer . write_image_data (data_to_encode) . expect (\"Encoding failed\") ; } Some ((data_to_encode , output)) }", "test": "fn test_86() {\n    let data = (8, 238, 231, 4, 8, [238, 231], []);\n    if let Some((raw, encoded)) =\n        encode_png(data.0, data.1, data.2, data.3, data.4, &data.5, &data.6)\n    {\n        let (_info, raw_decoded) = decode_png(&encoded);\n        let raw_decoded = &raw_decoded[..raw.len()];\n        assert_eq!(raw, raw_decoded);\n    }\n}"}
{"test_id": "quinn-rs-quinn/quinn-rs-quinn-83e4f46/tests-gen/packet.inputs.rs::test_5", "code": "fn to_vec(params: &TransportParameters) -> Vec<u8> {\n    let mut bytes = Vec::new();\n    params.write(&mut bytes);\n    bytes\n}", "test": "fn test_5() {\n    let data = PacketParams {\n        local_cid_len: 3,\n        buf: b\"\",\n        grease_quic_bit: true,\n    };\n    let len = data.buf.len();\n    let supported_versions = DEFAULT_SUPPORTED_VERSIONS.to_vec();\n    if let Ok(decoded) = PartialDecode::new(\n        data.buf,\n        data.local_cid_len,\n        &supported_versions,\n        data.grease_quic_bit,\n    ) {\n        match decoded.1 {\n            Some(x) => assert_eq!(len, decoded.0.len() + x.len()),\n            None => assert_eq!(len, decoded.0.len()),\n        }\n    }\n}"}
{"test_id": "image-rs-image/image-rs-image-e5580ec/tests-gen/fuzzer_script_exr.inputs.rs::test_90", "code": "fn roundtrip (bytes : & [u8]) -> ImageResult < () > { # [doc = \" Read the file from the specified path into an `Rgba32FImage`.\"] fn read_as_rgba_byte_image (read : impl Read + Seek) -> ImageResult < (u32 , u32 , Vec < u8 >) > { let mut decoder = OpenExrDecoder :: with_alpha_preference (read , Some (true)) ? ; match usize :: try_from (decoder . total_bytes ()) { Ok (decoded_size) if decoded_size <= 256 * 1024 * 1024 => { decoder . set_limits (Limits :: default ()) ? ; let (width , height) = decoder . dimensions () ; let mut buffer = vec ! [0 ; decoded_size] ; decoder . read_image (buffer . as_mut_slice ()) ? ; Ok ((width , height , buffer)) } _ => Err (image :: ImageError :: Limits (image :: error :: LimitError :: from_kind (image :: error :: LimitErrorKind :: InsufficientMemory ,) ,)) , } } # [doc = \" Write an `Rgba32FImage`.\"] # [doc = \" Assumes the writer is buffered. In most cases,\"] # [doc = \" you should wrap your writer in a `BufWriter` for best performance.\"] fn write_rgba_image (write : impl Write + Seek , (width , height , data) : & (u32 , u32 , Vec < u8 >) ,) -> ImageResult < () > { OpenExrEncoder :: new (write) . write_image (data . as_slice () , * width , * height , ColorType :: Rgba32F) } let decoded_image = read_as_rgba_byte_image (Cursor :: new (bytes)) ? ; let mut bytes = Vec :: with_capacity (bytes . len () + 20) ; write_rgba_image (Cursor :: new (& mut bytes) , & decoded_image) ? ; let redecoded_image = read_as_rgba_byte_image (Cursor :: new (bytes)) ? ; assert_eq ! (decoded_image , redecoded_image , \"image was valid but was not reproducible\") ; Ok (()) }", "test": "fn test_90() {\n    let data = [26, 186];\n    let _img = roundtrip(data);\n}"}
{"test_id": "bodil-im-rs/bodil-im-rs-2afaf54/tests-gen/hashset.inputs.rs::test_43", "code": "pub fn remove<BA>(&mut self, a: &BA) -> Option<A>\n    where\n        BA: Hash + Eq + ?Sized,\n        A: Borrow<BA>,\n    {\n        let root = PoolRef::make_mut(&self.pool.0, &mut self.root);\n        let result = root.remove(&self.pool.0, hash_key(&*self.hasher, a), 0, a);\n        if result.is_some() {\n            self.size -= 1;\n        }\n        result.map(|v| v.0)\n    }", "test": "fn test_43() {\n    let actions = [Insert(18446744069548826977)];\n    let mut set = HashSet::new();\n    let mut nat = NatSet::new();\n    for action in actions {\n        match action {\n            Action::Insert(value) => {\n                let len = nat.len() + if nat.contains(&value) { 0 } else { 1 };\n                nat.insert(value);\n                set.insert(value);\n                assert_eq!(len, set.len());\n            }\n            Action::Remove(value) => {\n                let len = nat.len() - if nat.contains(&value) { 1 } else { 0 };\n                nat.remove(&value);\n                set.remove(&value);\n                assert_eq!(len, set.len());\n            }\n        }\n        assert_eq!(nat.len(), set.len());\n        assert_eq!(HashSet::from(nat.clone()), set);\n    }\n}"}
{"test_id": "gimli-rs-gimli/gimli-rs-gimli-3947879/tests-gen/debug_info.inputs.rs::test_26", "code": "pub fn next(&mut self) -> Result<Option<RawLocListEntry<R>>> {\n        if self.input.is_empty() {\n            return Ok(None);\n        }\n\n        match RawLocListEntry::parse(&mut self.input, self.encoding, self.format) {\n            Ok(entry) => {\n                if entry.is_none() {\n                    self.input.empty();\n                }\n                Ok(entry)\n            }\n            Err(e) => {\n                self.input.empty();\n                Err(e)\n            }\n        }\n    }", "test": "fn test_26() {\n    let sections = (\n        [],\n        [\n            224, 26, 239, 255, 255, 255, 252, 255, 255, 255, 255, 255, 255, 255, 255,\n        ],\n    );\n    let (debug_abbrev, debug_info) = sections;\n    let debug_abbrev = DebugAbbrev::new(&debug_abbrev, LittleEndian);\n    let debug_info = DebugInfo::new(&debug_info, LittleEndian);\n    let mut units = debug_info.units();\n    while let Ok(Some(unit)) = units.next() {\n        if let Ok(abbrevs) = unit.abbreviations(&debug_abbrev) {\n            let mut cursor = unit.entries(&abbrevs);\n            while let Ok(Some((_delta, entry))) = cursor.next_dfs() {\n                let mut attrs = entry.attrs();\n                while let Ok(Some(_attr)) = attrs.next() {\n                    continue;\n                }\n            }\n        }\n    }\n}"}
{"test_id": "quinn-rs-quinn/quinn-rs-quinn-83e4f46/tests-gen/packet.inputs.rs::test_24", "code": "fn to_vec(params: &TransportParameters) -> Vec<u8> {\n    let mut bytes = Vec::new();\n    params.write(&mut bytes);\n    bytes\n}", "test": "fn test_24() {\n    let data = PacketParams {\n        local_cid_len: 16,\n        buf: b\"\",\n        grease_quic_bit: false,\n    };\n    let len = data.buf.len();\n    let supported_versions = DEFAULT_SUPPORTED_VERSIONS.to_vec();\n    if let Ok(decoded) = PartialDecode::new(\n        data.buf,\n        data.local_cid_len,\n        &supported_versions,\n        data.grease_quic_bit,\n    ) {\n        match decoded.1 {\n            Some(x) => assert_eq!(len, decoded.0.len() + x.len()),\n            None => assert_eq!(len, decoded.0.len()),\n        }\n    }\n}"}
{"test_id": "cloud-hypervisor-cloud-hypervisor/cloud-hypervisor-cloud-hypervisor-db3a5f3/tests-gen/watchdog.inputs.rs::test_74", "code": "pub fn wait_for_epoll_threads(&mut self) {\n        self.common.wait_for_epoll_threads();\n    }", "test": "fn test_74() {\n    let bytes = [122, 255, 255, 122];\n    if bytes.len() < QUEUE_DATA_SIZE || bytes.len() > (QUEUE_DATA_SIZE + MEM_SIZE) {\n        return;\n    }\n    let mut watchdog = virtio_devices::Watchdog::new(\n        \"fuzzer_watchdog\".to_owned(),\n        EventFd::new(EFD_NONBLOCK).unwrap(),\n        SeccompAction::Allow,\n        EventFd::new(EFD_NONBLOCK).unwrap(),\n        None,\n    )\n    .unwrap();\n    let queue_data = &bytes[..QUEUE_DATA_SIZE];\n    let mem_bytes = &bytes[QUEUE_DATA_SIZE..];\n    let q = setup_virt_queue(queue_data.try_into().unwrap());\n    let mem = GuestMemoryMmap::from_ranges(&[(GuestAddress(0), MEM_SIZE)]).unwrap();\n    if mem.write_slice(mem_bytes, GuestAddress(0 as u64)).is_err() {\n        return;\n    }\n    let guest_memory = GuestMemoryAtomic::new(mem);\n    let evt = EventFd::new(0).unwrap();\n    let queue_evt = unsafe { EventFd::from_raw_fd(libc::dup(evt.as_raw_fd())) };\n    queue_evt.write(1).unwrap();\n    watchdog\n        .activate(\n            guest_memory,\n            Arc::new(NoopVirtioInterrupt {}),\n            vec![(0, q, evt)],\n        )\n        .ok();\n    watchdog.wait_for_epoll_threads();\n}"}
{"test_id": "cloud-hypervisor-cloud-hypervisor/cloud-hypervisor-cloud-hypervisor-db3a5f3/tests-gen/watchdog.inputs.rs::test_22", "code": "pub fn wait_for_epoll_threads(&mut self) {\n        self.common.wait_for_epoll_threads();\n    }", "test": "fn test_22() {\n    let bytes = [75];\n    if bytes.len() < QUEUE_DATA_SIZE || bytes.len() > (QUEUE_DATA_SIZE + MEM_SIZE) {\n        return;\n    }\n    let mut watchdog = virtio_devices::Watchdog::new(\n        \"fuzzer_watchdog\".to_owned(),\n        EventFd::new(EFD_NONBLOCK).unwrap(),\n        SeccompAction::Allow,\n        EventFd::new(EFD_NONBLOCK).unwrap(),\n        None,\n    )\n    .unwrap();\n    let queue_data = &bytes[..QUEUE_DATA_SIZE];\n    let mem_bytes = &bytes[QUEUE_DATA_SIZE..];\n    let q = setup_virt_queue(queue_data.try_into().unwrap());\n    let mem = GuestMemoryMmap::from_ranges(&[(GuestAddress(0), MEM_SIZE)]).unwrap();\n    if mem.write_slice(mem_bytes, GuestAddress(0 as u64)).is_err() {\n        return;\n    }\n    let guest_memory = GuestMemoryAtomic::new(mem);\n    let evt = EventFd::new(0).unwrap();\n    let queue_evt = unsafe { EventFd::from_raw_fd(libc::dup(evt.as_raw_fd())) };\n    queue_evt.write(1).unwrap();\n    watchdog\n        .activate(\n            guest_memory,\n            Arc::new(NoopVirtioInterrupt {}),\n            vec![(0, q, evt)],\n        )\n        .ok();\n    watchdog.wait_for_epoll_threads();\n}"}
{"test_id": "BurntSushi-memchr/BurntSushi-memchr-f3fde7a/tests-gen/memchr3.inputs.rs::test_53", "code": "fn count(self) -> usize {\n        self.it.count(|s, e| {\n            // SAFETY: We rely on our generic iterator to return valid start\n            // and end pointers.\n            unsafe { count_raw(self.needle1, s, e) }\n        })\n    }", "test": "fn test_53() {\n    let data = [22];\n    if data.len() < 3 {\n        return;\n    }\n    memchr3_iter(data[0], data[1], data[2], &data[3..]).count();\n}"}
{"test_id": "image-rs-image-gif/image-rs-image-gif-80fd8c0/tests-gen/decode.inputs.rs::test_81", "code": "fn try_decode (data : & [u8]) -> Result < () , gif :: DecodingError > { let mut reader = gif :: Decoder :: new (data) ? ; while let Some (_) = reader . read_next_frame () ? { } Ok (()) }", "test": "fn test_81() {\n    let data = [2, 0];\n    let _ = try_decode(data);\n}"}
{"test_id": "cloud-hypervisor-cloud-hypervisor/cloud-hypervisor-cloud-hypervisor-db3a5f3/tests-gen/iommu.inputs.rs::test_99", "code": "pub fn wait_for_epoll_threads(&mut self) {\n        self.common.wait_for_epoll_threads();\n    }", "test": "fn test_99() {\n    let bytes = [190, 59, 41];\n    if bytes.len() < (QUEUE_DATA_SIZE + QUEUE_BYTES_SIZE)\n        || bytes.len() > (QUEUE_DATA_SIZE + QUEUE_BYTES_SIZE + MEM_SIZE)\n    {\n        return;\n    }\n    let (mut iommu, _) = virtio_devices::Iommu::new(\n        \"fuzzer_iommu\".to_owned(),\n        SeccompAction::Allow,\n        EventFd::new(EFD_NONBLOCK).unwrap(),\n        ((MEM_SIZE - IOVA_SPACE_SIZE) as u64, (MEM_SIZE - 1) as u64),\n        None,\n    )\n    .unwrap();\n    let queue_data = &bytes[..QUEUE_DATA_SIZE];\n    let queue_bytes = &bytes[QUEUE_DATA_SIZE..QUEUE_DATA_SIZE + QUEUE_BYTES_SIZE];\n    let mem_bytes = &bytes[QUEUE_DATA_SIZE + QUEUE_BYTES_SIZE..];\n    let request_queue = setup_virt_queue(queue_data.try_into().unwrap());\n    let _event_queue = setup_virt_queue(queue_data.try_into().unwrap());\n    let mem = GuestMemoryMmap::from_ranges(&[\n        (GuestAddress(0), MEM_SIZE),\n        (GuestAddress(DESC_TABLE_ADDR), QUEUE_BYTES_SIZE),\n    ])\n    .unwrap();\n    if mem\n        .write_slice(queue_bytes, GuestAddress(DESC_TABLE_ADDR))\n        .is_err()\n    {\n        return;\n    }\n    if mem.write_slice(mem_bytes, GuestAddress(0 as u64)).is_err() {\n        return;\n    }\n    let guest_memory = GuestMemoryAtomic::new(mem);\n    let request_evt = EventFd::new(0).unwrap();\n    let request_queue_evt = unsafe { EventFd::from_raw_fd(libc::dup(request_evt.as_raw_fd())) };\n    let _event_evt = EventFd::new(0).unwrap();\n    request_queue_evt.write(1).unwrap();\n    iommu\n        .activate(\n            guest_memory,\n            Arc::new(NoopVirtioInterrupt {}),\n            vec![\n                (0, request_queue, request_evt),\n                (0, _event_queue, _event_evt),\n            ],\n        )\n        .ok();\n    iommu.wait_for_epoll_threads();\n}"}
{"test_id": "quinn-rs-quinn/quinn-rs-quinn-83e4f46/tests-gen/packet.inputs.rs::test_67", "code": "fn to_vec(params: &TransportParameters) -> Vec<u8> {\n    let mut bytes = Vec::new();\n    params.write(&mut bytes);\n    bytes\n}", "test": "fn test_67() {\n    let data = PacketParams {\n        local_cid_len: 18,\n        buf: b\"\\x85\",\n        grease_quic_bit: false,\n    };\n    let len = data.buf.len();\n    let supported_versions = DEFAULT_SUPPORTED_VERSIONS.to_vec();\n    if let Ok(decoded) = PartialDecode::new(\n        data.buf,\n        data.local_cid_len,\n        &supported_versions,\n        data.grease_quic_bit,\n    ) {\n        match decoded.1 {\n            Some(x) => assert_eq!(len, decoded.0.len() + x.len()),\n            None => assert_eq!(len, decoded.0.len()),\n        }\n    }\n}"}
{"test_id": "BurntSushi-memchr/BurntSushi-memchr-f3fde7a/tests-gen/memrchr2.inputs.rs::test_88", "code": "fn count(self) -> usize {\n        self.it.count(|s, e| {\n            // SAFETY: We rely on our generic iterator to return valid start\n            // and end pointers.\n            unsafe { count_raw(self.needle1, s, e) }\n        })\n    }", "test": "fn test_88() {\n    let data = [177, 2, 221];\n    if data.len() < 2 {\n        return;\n    }\n    memchr2_iter(data[0], data[1], &data[2..]).rev().count();\n}"}
{"test_id": "cloud-hypervisor-cloud-hypervisor/cloud-hypervisor-cloud-hypervisor-db3a5f3/tests-gen/iommu.inputs.rs::test_14", "code": "pub fn wait_for_epoll_threads(&mut self) {\n        self.common.wait_for_epoll_threads();\n    }", "test": "fn test_14() {\n    let bytes = [56, 4, 56];\n    if bytes.len() < (QUEUE_DATA_SIZE + QUEUE_BYTES_SIZE)\n        || bytes.len() > (QUEUE_DATA_SIZE + QUEUE_BYTES_SIZE + MEM_SIZE)\n    {\n        return;\n    }\n    let (mut iommu, _) = virtio_devices::Iommu::new(\n        \"fuzzer_iommu\".to_owned(),\n        SeccompAction::Allow,\n        EventFd::new(EFD_NONBLOCK).unwrap(),\n        ((MEM_SIZE - IOVA_SPACE_SIZE) as u64, (MEM_SIZE - 1) as u64),\n        None,\n    )\n    .unwrap();\n    let queue_data = &bytes[..QUEUE_DATA_SIZE];\n    let queue_bytes = &bytes[QUEUE_DATA_SIZE..QUEUE_DATA_SIZE + QUEUE_BYTES_SIZE];\n    let mem_bytes = &bytes[QUEUE_DATA_SIZE + QUEUE_BYTES_SIZE..];\n    let request_queue = setup_virt_queue(queue_data.try_into().unwrap());\n    let _event_queue = setup_virt_queue(queue_data.try_into().unwrap());\n    let mem = GuestMemoryMmap::from_ranges(&[\n        (GuestAddress(0), MEM_SIZE),\n        (GuestAddress(DESC_TABLE_ADDR), QUEUE_BYTES_SIZE),\n    ])\n    .unwrap();\n    if mem\n        .write_slice(queue_bytes, GuestAddress(DESC_TABLE_ADDR))\n        .is_err()\n    {\n        return;\n    }\n    if mem.write_slice(mem_bytes, GuestAddress(0 as u64)).is_err() {\n        return;\n    }\n    let guest_memory = GuestMemoryAtomic::new(mem);\n    let request_evt = EventFd::new(0).unwrap();\n    let request_queue_evt = unsafe { EventFd::from_raw_fd(libc::dup(request_evt.as_raw_fd())) };\n    let _event_evt = EventFd::new(0).unwrap();\n    request_queue_evt.write(1).unwrap();\n    iommu\n        .activate(\n            guest_memory,\n            Arc::new(NoopVirtioInterrupt {}),\n            vec![\n                (0, request_queue, request_evt),\n                (0, _event_queue, _event_evt),\n            ],\n        )\n        .ok();\n    iommu.wait_for_epoll_threads();\n}"}
{"test_id": "gimli-rs-gimli/gimli-rs-gimli-3947879/tests-gen/debug_abbrev.inputs.rs::test_15", "code": "pub fn get<R: Reader>(\n        &self,\n        debug_abbrev: &DebugAbbrev<R>,\n        offset: DebugAbbrevOffset<R::Offset>,\n    ) -> Result<Arc<Abbreviations>> {\n        if offset.0 != R::Offset::from_u8(0) {\n            return debug_abbrev.abbreviations(offset).map(Arc::new);\n        }\n        self.abbreviations\n            .get(|| debug_abbrev.abbreviations(offset))\n    }", "test": "fn test_15() {\n    let debug_abbrev = [91, 91];\n    let len = debug_abbrev.len();\n    let debug_abbrev = DebugAbbrev::new(&debug_abbrev, LittleEndian);\n    let offset = DebugAbbrevOffset(0);\n    if let Ok(abbreviations) = debug_abbrev.abbreviations(offset) {\n        for i in 1..len {\n            let _ = abbreviations.get(i as u64);\n        }\n    }\n}"}
{"test_id": "BurntSushi-memchr/BurntSushi-memchr-f3fde7a/tests-gen/memrmem.inputs.rs::test_27", "code": "pub fn count(&self, haystack: &[u8]) -> usize {\n        // SAFETY: All of our pointers are derived directly from a borrowed\n        // slice, which is guaranteed to be valid.\n        unsafe {\n            let start = haystack.as_ptr();\n            let end = start.add(haystack.len());\n            self.count_raw(start, end)\n        }\n    }", "test": "fn test_27() {\n    let data = [10];\n    if data.len() < 2 {\n        return;\n    }\n    let split = std::cmp::max(data[0] as usize, 1) % data.len() as usize;\n    let (needle, haystack) = (&data[..split], &data[split..]);\n    memmem::rfind_iter(haystack, needle).count();\n}"}
{"test_id": "rust-bio-rust-bio/rust-bio-rust-bio-319a0d8/tests-gen/banded_aligner.inputs.rs::test_52", "code": "fn validate_alignment_score(al: &Alignment, x: TextSlice, y: TextSlice, scoring: &Scoring<MatchParams>) -> bool {\n    use AlignmentOperation::*;\n    let path = al.path();\n    let mut score = 0;\n    if al.mode==AlignmentMode::Custom {\n        if al.xstart > 0 {\n            score += scoring.xclip_prefix;\n        }\n        if al.ystart > 0 {\n            score += scoring.yclip_prefix;\n        }\n        if al.xend < al.xlen {\n            score += scoring.xclip_suffix;\n        }\n        if al.yend < al.ylen {\n            score += scoring.yclip_suffix;\n        }\n    }\n    let mut last_op = None;\n    for (i, j, op) in path {\n        score += match op {\n            Match | Subst => scoring.match_fn.score(x[i-1], y[j-1]),\n            Del => if last_op==Some(Del) { scoring.gap_extend } else { scoring.gap_open + scoring.gap_extend },\n            Ins => if last_op==Some(Ins) { scoring.gap_extend } else { scoring.gap_open + scoring.gap_extend },\n            _ => 0,\n        };\n        last_op = Some(op);\n    }\n    al.score==score\n}", "test": "fn test_52() {\n    let data = [4, 38, 40, 213];\n    if data.len() < 50 || data.len() > 300 {\n        return;\n    }\n    let (split_byte, data) = data.split_first().unwrap();\n    let (kmer_byte, data) = data.split_first().unwrap();\n    let (window_byte, data) = data.split_first().unwrap();\n    let (match_score_byte, data) = data.split_first().unwrap();\n    let (mismatch_score_byte, data) = data.split_first().unwrap();\n    let (gap_open_byte, data) = data.split_first().unwrap();\n    let (gap_extend_byte, data) = data.split_first().unwrap();\n    let (xclip_prefix_byte, data) = data.split_first().unwrap();\n    let (xclip_suffix_byte, data) = data.split_first().unwrap();\n    let (yclip_prefix_byte, data) = data.split_first().unwrap();\n    let (yclip_suffix_byte, data) = data.split_first().unwrap();\n    let alphabets = b\"ACGT\";\n    let v: Vec<_> = data\n        .iter()\n        .map(|i| alphabets[(*i as usize) % alphabets.len()])\n        .collect();\n    let kmer_len: usize = 5 + (*kmer_byte as usize) % 10;\n    let window_size: usize = 5 + (*window_byte as usize) % 10;\n    let split_pos: usize = min(data.len() - 1, max(*split_byte as usize, 1));\n    let match_score = 1 + (*match_score_byte as i32) % 5;\n    let mismatch_score = -((*mismatch_score_byte as i32) % 10);\n    let gap_open = -((*gap_open_byte as i32) % 20);\n    let gap_extend = -((*gap_extend_byte as i32) % 10);\n    let (x, y) = v.split_at(split_pos);\n    println!(\n        \"x: {}, y: {}, k: {}, w: {}, scoring ({}, {}, {}, {})\",\n        String::from_utf8(x.to_vec()).unwrap(),\n        String::from_utf8(y.to_vec()).unwrap(),\n        kmer_len,\n        window_size,\n        gap_open,\n        gap_extend,\n        match_score,\n        mismatch_score\n    );\n    let base_score = Scoring::from_scores(gap_open, gap_extend, match_score, mismatch_score);\n    {\n        println!(\n            \"Clip scores ({}, {}, {}, {})\",\n            xclip_prefix_byte, xclip_suffix_byte, yclip_prefix_byte, yclip_suffix_byte\n        );\n        let scoring = Scoring {\n            xclip_prefix: -(*xclip_prefix_byte as i32),\n            xclip_suffix: -(*xclip_suffix_byte as i32),\n            yclip_prefix: -(*yclip_prefix_byte as i32),\n            yclip_suffix: -(*yclip_suffix_byte as i32),\n            ..base_score.clone()\n        };\n        let mut b_aligner = banded::Aligner::with_scoring(scoring.clone(), kmer_len, window_size);\n        let b_alignment = b_aligner.custom(x, y);\n        assert!(validate_alignment_score(&b_alignment, x, y, &scoring));\n        let mut f_aligner = pairwise::Aligner::with_scoring(scoring.clone());\n        let f_alignment = f_aligner.custom(x, y);\n        assert!(validate_alignment_score(&f_alignment, x, y, &scoring));\n        let band_all_alignment = b_aligner.custom_with_matches(x, y, &Vec::new());\n        assert_eq!(band_all_alignment.score, f_alignment.score);\n    }\n    {\n        let scoring = Scoring {\n            xclip_prefix: 0,\n            xclip_suffix: 0,\n            yclip_suffix: 0,\n            ..base_score.clone()\n        };\n        let mut b_aligner = banded::Aligner::with_scoring(scoring.clone(), kmer_len, window_size);\n        let b_alignment = b_aligner.custom(x, y);\n        assert_eq!(b_alignment.ystart, 0);\n        assert!(validate_alignment_score(&b_alignment, x, y, &scoring));\n        let mut f_aligner = pairwise::Aligner::with_scoring(scoring.clone());\n        let f_alignment = f_aligner.custom(x, y);\n        assert_eq!(f_alignment.ystart, 0);\n        assert!(validate_alignment_score(&f_alignment, x, y, &scoring));\n        let band_all_alignment = b_aligner.custom_with_matches(x, y, &Vec::new());\n        assert_eq!(band_all_alignment.score, f_alignment.score);\n    }\n    {\n        let scoring = Scoring {\n            xclip_prefix: 0,\n            xclip_suffix: 0,\n            yclip_prefix: 0,\n            ..base_score.clone()\n        };\n        let mut b_aligner = banded::Aligner::with_scoring(scoring.clone(), kmer_len, window_size);\n        let b_alignment = b_aligner.custom(x, y);\n        assert_eq!(b_alignment.yend, b_alignment.ylen);\n        assert!(validate_alignment_score(&b_alignment, x, y, &scoring));\n        let mut f_aligner = pairwise::Aligner::with_scoring(scoring.clone());\n        let f_alignment = f_aligner.custom(x, y);\n        assert_eq!(f_alignment.yend, f_alignment.ylen);\n        assert!(validate_alignment_score(&f_alignment, x, y, &scoring));\n        let band_all_alignment = b_aligner.custom_with_matches(x, y, &Vec::new());\n        assert_eq!(band_all_alignment.score, f_alignment.score);\n    }\n    {\n        let scoring = Scoring {\n            xclip_suffix: 0,\n            yclip_prefix: 0,\n            yclip_suffix: 0,\n            ..base_score.clone()\n        };\n        let mut b_aligner = banded::Aligner::with_scoring(scoring.clone(), kmer_len, window_size);\n        let b_alignment = b_aligner.custom(x, y);\n        assert_eq!(b_alignment.xstart, 0);\n        assert!(validate_alignment_score(&b_alignment, x, y, &scoring));\n        let mut f_aligner = pairwise::Aligner::with_scoring(scoring.clone());\n        let f_alignment = f_aligner.custom(x, y);\n        assert_eq!(f_alignment.xstart, 0);\n        assert!(validate_alignment_score(&f_alignment, x, y, &scoring));\n        let band_all_alignment = b_aligner.custom_with_matches(x, y, &Vec::new());\n        assert_eq!(band_all_alignment.score, f_alignment.score);\n    }\n    {\n        let scoring = Scoring {\n            xclip_prefix: 0,\n            yclip_prefix: 0,\n            yclip_suffix: 0,\n            ..base_score.clone()\n        };\n        let mut b_aligner = banded::Aligner::with_scoring(scoring.clone(), kmer_len, window_size);\n        let b_alignment = b_aligner.custom(x, y);\n        assert_eq!(b_alignment.xend, b_alignment.xlen);\n        assert!(validate_alignment_score(&b_alignment, x, y, &scoring));\n        let mut f_aligner = pairwise::Aligner::with_scoring(scoring.clone());\n        let f_alignment = f_aligner.custom(x, y);\n        assert_eq!(f_alignment.xend, f_alignment.xlen);\n        assert!(validate_alignment_score(&f_alignment, x, y, &scoring));\n        let band_all_alignment = b_aligner.custom_with_matches(x, y, &Vec::new());\n        assert_eq!(band_all_alignment.score, f_alignment.score);\n    }\n    {\n        let mut aligner = banded::Aligner::with_scoring(base_score.clone(), kmer_len, window_size);\n        let alignment = aligner.local(x, y);\n        assert!(alignment.score >= 0);\n        assert!(validate_alignment_score(&alignment, x, y, &base_score));\n        let alignment = aligner.semiglobal(x, y);\n        assert_eq!(alignment.xstart, 0);\n        assert_eq!(alignment.xend, alignment.xlen);\n        assert!(validate_alignment_score(&alignment, x, y, &base_score));\n        let alignment = aligner.global(x, y);\n        assert_eq!(alignment.xstart, 0);\n        assert_eq!(alignment.xend, alignment.xlen);\n        assert_eq!(alignment.ystart, 0);\n        assert_eq!(alignment.yend, alignment.ylen);\n        assert!(validate_alignment_score(&alignment, x, y, &base_score));\n    }\n    {\n        let mut aligner = pairwise::Aligner::with_scoring(base_score.clone());\n        let alignment = aligner.local(x, y);\n        assert!(alignment.score >= 0);\n        assert!(validate_alignment_score(&alignment, x, y, &base_score));\n        let alignment = aligner.semiglobal(x, y);\n        assert_eq!(alignment.xstart, 0);\n        assert_eq!(alignment.xend, alignment.xlen);\n        assert!(validate_alignment_score(&alignment, x, y, &base_score));\n        let alignment = aligner.global(x, y);\n        assert_eq!(alignment.xstart, 0);\n        assert_eq!(alignment.xend, alignment.xlen);\n        assert_eq!(alignment.ystart, 0);\n        assert_eq!(alignment.yend, alignment.ylen);\n        assert!(validate_alignment_score(&alignment, x, y, &base_score));\n    }\n}"}
{"test_id": "image-rs-image-png/image-rs-image-png-e113d76/tests-gen/decode.inputs.rs::test_55", "code": "fn png_decode (data : & [u8]) -> Result < (Option < png :: OutputInfo > , Vec < u8 >) , () > { let limits = png :: Limits { bytes : 1 << 16 } ; let decoder = png :: Decoder :: new_with_limits (data , limits) ; let mut reader = decoder . read_info () . map_err (| _ | ()) ? ; if reader . info () . raw_bytes () > 5_000_000 { return Err (()) ; } let mut img_data = vec ! [0u8 ; reader . info () . raw_bytes ()] ; let mut last_info = None ; while let Ok (info) = reader . next_frame (& mut img_data) { last_info = Some (info) ; } Ok ((last_info , img_data)) }", "test": "fn test_55() {\n    let data = [\n        137, 80, 78, 71, 13, 10, 26, 10, 0, 0, 0, 13, 73, 72, 68, 82, 0, 4, 0, 2, 0, 0, 0, 0, 4, 2,\n        0, 0, 0, 64, 20, 127, 255, 0, 0, 0, 23, 73, 68, 65, 84, 92,\n    ];\n    let _ = png_decode(&data);\n}"}
{"test_id": "quinn-rs-quinn/quinn-rs-quinn-83e4f46/tests-gen/packet.inputs.rs::test_76", "code": "fn to_vec(params: &TransportParameters) -> Vec<u8> {\n    let mut bytes = Vec::new();\n    params.write(&mut bytes);\n    bytes\n}", "test": "fn test_76() {\n    let data = PacketParams {\n        local_cid_len: 11,\n        buf: b\"\\0\",\n        grease_quic_bit: false,\n    };\n    let len = data.buf.len();\n    let supported_versions = DEFAULT_SUPPORTED_VERSIONS.to_vec();\n    if let Ok(decoded) = PartialDecode::new(\n        data.buf,\n        data.local_cid_len,\n        &supported_versions,\n        data.grease_quic_bit,\n    ) {\n        match decoded.1 {\n            Some(x) => assert_eq!(len, decoded.0.len() + x.len()),\n            None => assert_eq!(len, decoded.0.len()),\n        }\n    }\n}"}
{"test_id": "marshallpierce-rust-base64/marshallpierce-rust-base64-4ef33cc/tests-gen/roundtrip_no_pad.inputs.rs::test_35", "code": "fn decode<T: AsRef<[u8]>>(&self, input: T) -> Result<Vec<u8>, DecodeError> {\n        fn inner<E>(engine: &E, input_bytes: &[u8]) -> Result<Vec<u8>, DecodeError>\n        where\n            E: Engine + ?Sized,\n        {\n            let estimate = engine.internal_decoded_len_estimate(input_bytes.len());\n            let mut buffer = vec![0; estimate.decoded_len_estimate()];\n\n            let bytes_written = engine\n                .internal_decode(input_bytes, &mut buffer, estimate)?\n                .decoded_len;\n\n            buffer.truncate(bytes_written);\n\n            Ok(buffer)\n        }\n\n        inner(self, input.as_ref())\n    }", "test": "fn test_35() {\n    let data = [63, 10];\n    let config = general_purpose::GeneralPurposeConfig::new()\n        .with_encode_padding(false)\n        .with_decode_padding_mode(engine::DecodePaddingMode::RequireNone);\n    let engine = general_purpose::GeneralPurpose::new(&base64::alphabet::STANDARD, config);\n    let encoded = engine.encode(data);\n    let decoded = engine.decode(&encoded).unwrap();\n    assert_eq!(data, decoded.as_slice());\n}"}
{"test_id": "dtolnay-semver/dtolnay-semver-750f0ac/tests-gen/sort_version.inputs.rs::test_5", "code": "fn three_versions(bytes: &[u8]) -> Option<[Version; 3]> {\n    let mut inputs = str::from_utf8(bytes).ok()?.split(' ');\n    Some([\n        Version {\n            major: 0,\n            minor: 0,\n            patch: 0,\n            pre: inputs.next().map(Prerelease::new)?.ok()?,\n            build: inputs.next().map(BuildMetadata::new)?.ok()?,\n        },\n        Version {\n            major: 0,\n            minor: 0,\n            patch: 0,\n            pre: inputs.next().map(Prerelease::new)?.ok()?,\n            build: inputs.next().map(BuildMetadata::new)?.ok()?,\n        },\n        Version {\n            major: 0,\n            minor: 0,\n            patch: 0,\n            pre: inputs.next().map(Prerelease::new)?.ok()?,\n            build: inputs.next().map(BuildMetadata::new)?.ok()?,\n        },\n    ])\n}", "test": "fn test_5() {\n    let bytes = [10, 10];\n    if let Some([a, b, c]) = three_versions(bytes) {\n        if a < b && b < c && c < a {\n            panic!(\"{0} < {1} < {2} < {0}\", a, b, c);\n        }\n    }\n}"}
{"test_id": "quinn-rs-quinn/quinn-rs-quinn-83e4f46/tests-gen/streamid.inputs.rs::test_61", "code": "pub fn initiator(self) -> Side {\n        if self.0 & 0x1 == 0 {\n            Side::Client\n        } else {\n            Side::Server\n        }\n    }", "test": "fn test_61() {\n    let data = StreamIdParams {\n        side: Server,\n        dir: Uni,\n        index: 10497237267925282221,\n    };\n    let s = StreamId::new(data.side, data.dir, data.index);\n    assert_eq!(s.initiator(), data.side);\n    assert_eq!(s.dir(), data.dir);\n}"}
{"test_id": "BurntSushi-memchr/BurntSushi-memchr-f3fde7a/tests-gen/memrchr3.inputs.rs::test_29", "code": "fn count(self) -> usize {\n        self.it.count(|s, e| {\n            // SAFETY: We rely on our generic iterator to return valid start\n            // and end pointers.\n            unsafe { count_raw(self.needle1, s, e) }\n        })\n    }", "test": "fn test_29() {\n    let data = [42, 14];\n    if data.len() < 3 {\n        return;\n    }\n    memchr3_iter(data[0], data[1], data[2], &data[3..]).rev().count();\n}"}
{"test_id": "cloud-hypervisor-cloud-hypervisor/cloud-hypervisor-cloud-hypervisor-db3a5f3/tests-gen/console.inputs.rs::test_55", "code": "pub fn wait_for_epoll_threads(&mut self) {\n        self.common.wait_for_epoll_threads();\n    }", "test": "fn test_55() {\n    let bytes = [10, 42];\n    if bytes.len() < (QUEUE_DATA_SIZE + QUEUE_BYTES_SIZE) * QUEUE_NUM + CONSOLE_INPUT_SIZE\n        || bytes.len()\n            > (QUEUE_DATA_SIZE + QUEUE_BYTES_SIZE) * QUEUE_NUM + CONSOLE_INPUT_SIZE + MEM_SIZE\n    {\n        return;\n    }\n    let (pipe_rx, mut pipe_tx) = create_pipe().unwrap();\n    let output = unsafe {\n        File::from_raw_fd(\n            memfd_create(&std::ffi::CString::new(\"fuzz_console_output\").unwrap()).unwrap(),\n        )\n    };\n    let endpoint = virtio_devices::Endpoint::FilePair(output, pipe_rx);\n    let (mut console, _) = virtio_devices::Console::new(\n        \"fuzzer_console\".to_owned(),\n        endpoint,\n        None,\n        false,\n        SeccompAction::Allow,\n        EventFd::new(EFD_NONBLOCK).unwrap(),\n        None,\n    )\n    .unwrap();\n    let console_input_bytes = &bytes[..CONSOLE_INPUT_SIZE];\n    let queue_data = &bytes[CONSOLE_INPUT_SIZE..CONSOLE_INPUT_SIZE + QUEUE_DATA_SIZE * QUEUE_NUM];\n    let queue_bytes = &bytes[CONSOLE_INPUT_SIZE + QUEUE_DATA_SIZE * QUEUE_NUM\n        ..CONSOLE_INPUT_SIZE + (QUEUE_DATA_SIZE + QUEUE_BYTES_SIZE) * QUEUE_NUM];\n    let mem_bytes = &bytes[CONSOLE_INPUT_SIZE + (QUEUE_DATA_SIZE + QUEUE_BYTES_SIZE) * QUEUE_NUM..];\n    let mut queues = setup_virt_queues(\n        &[\n            &queue_data[..QUEUE_DATA_SIZE].try_into().unwrap(),\n            &queue_data[QUEUE_DATA_SIZE..QUEUE_DATA_SIZE * 2]\n                .try_into()\n                .unwrap(),\n        ],\n        BASE_VIRT_QUEUE_ADDR,\n    );\n    let mem = GuestMemoryMmap::from_ranges(&[\n        (GuestAddress(0), MEM_SIZE),\n        (GuestAddress(BASE_VIRT_QUEUE_ADDR), queue_bytes.len()),\n    ])\n    .unwrap();\n    if mem\n        .write_slice(queue_bytes, GuestAddress(BASE_VIRT_QUEUE_ADDR))\n        .is_err()\n    {\n        return;\n    }\n    if mem.write_slice(mem_bytes, GuestAddress(0 as u64)).is_err() {\n        return;\n    }\n    let guest_memory = GuestMemoryAtomic::new(mem);\n    let input_queue = queues.remove(0);\n    let input_evt = EventFd::new(0).unwrap();\n    let input_queue_evt = unsafe { EventFd::from_raw_fd(libc::dup(input_evt.as_raw_fd())) };\n    let output_queue = queues.remove(0);\n    let output_evt = EventFd::new(0).unwrap();\n    let output_queue_evt = unsafe { EventFd::from_raw_fd(libc::dup(output_evt.as_raw_fd())) };\n    input_queue_evt.write(1).unwrap();\n    output_queue_evt.write(1).unwrap();\n    pipe_tx.write_all(console_input_bytes).unwrap();\n    console\n        .activate(\n            guest_memory,\n            Arc::new(NoopVirtioInterrupt {}),\n            vec![(0, input_queue, input_evt), (1, output_queue, output_evt)],\n        )\n        .unwrap();\n    console.wait_for_epoll_threads();\n}"}
{"test_id": "quinn-rs-quinn/quinn-rs-quinn-83e4f46/tests-gen/streamid.inputs.rs::test_89", "code": "pub fn initiator(self) -> Side {\n        if self.0 & 0x1 == 0 {\n            Side::Client\n        } else {\n            Side::Server\n        }\n    }", "test": "fn test_89() {\n    let data = StreamIdParams {\n        side: Server,\n        dir: Uni,\n        index: 12514849316871712173,\n    };\n    let s = StreamId::new(data.side, data.dir, data.index);\n    assert_eq!(s.initiator(), data.side);\n    assert_eq!(s.dir(), data.dir);\n}"}
{"test_id": "gfx-rs-naga/gfx-rs-naga-92e41b4/tests-gen/wgsl_parser.inputs.rs::test_28", "code": "pub fn parse(mut self) -> Result<crate::Module, Error> {\n        let mut module = {\n            if self.next()? != spirv::MAGIC_NUMBER {\n                return Err(Error::InvalidHeader);\n            }\n            let version_raw = self.next()?;\n            let generator = self.next()?;\n            let _bound = self.next()?;\n            let _schema = self.next()?;\n            log::info!(\"Generated by {} version {:x}\", generator, version_raw);\n            crate::Module::default()\n        };\n\n        self.layouter.clear();\n        self.dummy_functions = Arena::new();\n        self.lookup_function.clear();\n        self.function_call_graph.clear();\n\n        loop {\n            use spirv::Op;\n\n            let inst = match self.next_inst() {\n                Ok(inst) => inst,\n                Err(Error::IncompleteData) => break,\n                Err(other) => return Err(other),\n            };\n            log::debug!(\"\\t{:?} [{}]\", inst.op, inst.wc);\n\n            match inst.op {\n                Op::Capability => self.parse_capability(inst),\n                Op::Extension => self.parse_extension(inst),\n                Op::ExtInstImport => self.parse_ext_inst_import(inst),\n                Op::MemoryModel => self.parse_memory_model(inst),\n                Op::EntryPoint => self.parse_entry_point(inst),\n                Op::ExecutionMode => self.parse_execution_mode(inst),\n                Op::String => self.parse_string(inst),\n                Op::Source => self.parse_source(inst),\n                Op::SourceExtension => self.parse_source_extension(inst),\n                Op::Name => self.parse_name(inst),\n                Op::MemberName => self.parse_member_name(inst),\n                Op::ModuleProcessed => self.parse_module_processed(inst),\n                Op::Decorate => self.parse_decorate(inst),\n                Op::MemberDecorate => self.parse_member_decorate(inst),\n                Op::TypeVoid => self.parse_type_void(inst),\n                Op::TypeBool => self.parse_type_bool(inst, &mut module),\n                Op::TypeInt => self.parse_type_int(inst, &mut module),\n                Op::TypeFloat => self.parse_type_float(inst, &mut module),\n                Op::TypeVector => self.parse_type_vector(inst, &mut module),\n                Op::TypeMatrix => self.parse_type_matrix(inst, &mut module),\n                Op::TypeFunction => self.parse_type_function(inst),\n                Op::TypePointer => self.parse_type_pointer(inst, &mut module),\n                Op::TypeArray => self.parse_type_array(inst, &mut module),\n                Op::TypeRuntimeArray => self.parse_type_runtime_array(inst, &mut module),\n                Op::TypeStruct => self.parse_type_struct(inst, &mut module),\n                Op::TypeImage => self.parse_type_image(inst, &mut module),\n                Op::TypeSampledImage => self.parse_type_sampled_image(inst),\n                Op::TypeSampler => self.parse_type_sampler(inst, &mut module),\n                Op::Constant | Op::SpecConstant => self.parse_constant(inst, &mut module),\n                Op::ConstantComposite => self.parse_composite_constant(inst, &mut module),\n                Op::ConstantNull | Op::Undef => self.parse_null_constant(inst, &mut module),\n                Op::ConstantTrue => self.parse_bool_constant(inst, true, &mut module),\n                Op::ConstantFalse => self.parse_bool_constant(inst, false, &mut module),\n                Op::Variable => self.parse_global_variable(inst, &mut module),\n                Op::Function => {\n                    self.switch(ModuleState::Function, inst.op)?;\n                    inst.expect(5)?;\n                    self.parse_function(&mut module)\n                }\n                _ => Err(Error::UnsupportedInstruction(self.state, inst.op)), //TODO\n            }?;\n        }\n\n        log::info!(\"Patching...\");\n        {\n            let mut nodes = petgraph::algo::toposort(&self.function_call_graph, None)\n                .map_err(|cycle| Error::FunctionCallCycle(cycle.node_id()))?;\n            nodes.reverse(); // we need dominated first\n            let mut functions = mem::take(&mut module.functions);\n            for fun_id in nodes {\n                if fun_id > !(functions.len() as u32) {\n                    // skip all the fake IDs registered for the entry points\n                    continue;\n                }\n                let lookup = self.lookup_function.get_mut(&fun_id).unwrap();\n                // take out the function from the old array\n                let fun = mem::take(&mut functions[lookup.handle]);\n                // add it to the newly formed arena, and adjust the lookup\n                lookup.handle = module\n                    .functions\n                    .append(fun, functions.get_span(lookup.handle));\n            }\n        }\n        // patch all the functions\n        for (handle, fun) in module.functions.iter_mut() {\n            self.patch_function(Some(handle), fun)?;\n        }\n        for ep in module.entry_points.iter_mut() {\n            self.patch_function(None, &mut ep.function)?;\n        }\n\n        // Check all the images and samplers to have consistent comparison property.\n        for (handle, flags) in self.handle_sampling.drain() {\n            if !image::patch_comparison_type(\n                flags,\n                module.global_variables.get_mut(handle),\n                &mut module.types,\n            ) {\n                return Err(Error::InconsistentComparisonSampling(handle));\n            }\n        }\n\n        if !self.future_decor.is_empty() {\n            log::warn!(\"Unused item decorations: {:?}\", self.future_decor);\n            self.future_decor.clear();\n        }\n        if !self.future_member_decor.is_empty() {\n            log::warn!(\"Unused member decorations: {:?}\", self.future_member_decor);\n            self.future_member_decor.clear();\n        }\n\n        Ok(module)\n    }", "test": "fn test_28() {\n    let data = \"<\\u{8}\";\n    let _result = Frontend::new().parse(&data);\n}"}
{"test_id": "gimli-rs-gimli/gimli-rs-gimli-3947879/tests-gen/debug_info.inputs.rs::test_96", "code": "pub fn next(&mut self) -> Result<Option<RawLocListEntry<R>>> {\n        if self.input.is_empty() {\n            return Ok(None);\n        }\n\n        match RawLocListEntry::parse(&mut self.input, self.encoding, self.format) {\n            Ok(entry) => {\n                if entry.is_none() {\n                    self.input.empty();\n                }\n                Ok(entry)\n            }\n            Err(e) => {\n                self.input.empty();\n                Err(e)\n            }\n        }\n    }", "test": "fn test_96() {\n    let sections = (\n        [],\n        [\n            224, 26, 0, 254, 255, 255, 255, 255, 254, 49, 255, 255, 255, 255, 255, 255,\n        ],\n    );\n    let (debug_abbrev, debug_info) = sections;\n    let debug_abbrev = DebugAbbrev::new(&debug_abbrev, LittleEndian);\n    let debug_info = DebugInfo::new(&debug_info, LittleEndian);\n    let mut units = debug_info.units();\n    while let Ok(Some(unit)) = units.next() {\n        if let Ok(abbrevs) = unit.abbreviations(&debug_abbrev) {\n            let mut cursor = unit.entries(&abbrevs);\n            while let Ok(Some((_delta, entry))) = cursor.next_dfs() {\n                let mut attrs = entry.attrs();\n                while let Ok(Some(_attr)) = attrs.next() {\n                    continue;\n                }\n            }\n        }\n    }\n}"}
{"test_id": "bodil-im-rs/bodil-im-rs-2afaf54/tests-gen/ordset.inputs.rs::test_51", "code": "pub fn remove<BA>(&mut self, a: &BA) -> Option<A>\n    where\n        BA: Hash + Eq + ?Sized,\n        A: Borrow<BA>,\n    {\n        let root = PoolRef::make_mut(&self.pool.0, &mut self.root);\n        let result = root.remove(&self.pool.0, hash_key(&*self.hasher, a), 0, a);\n        if result.is_some() {\n            self.size -= 1;\n        }\n        result.map(|v| v.0)\n    }", "test": "fn test_51() {\n    let actions = [Insert(2815)];\n    let mut set = OrdSet::new();\n    let mut nat = NatSet::new();\n    for action in actions {\n        match action {\n            Action::Insert(value) => {\n                let len = nat.len() + if nat.contains(&value) { 0 } else { 1 };\n                nat.insert(value);\n                set.insert(value);\n                assert_eq!(len, set.len());\n            }\n            Action::Remove(value) => {\n                let len = nat.len() - if nat.contains(&value) { 1 } else { 0 };\n                nat.remove(&value);\n                set.remove(&value);\n                assert_eq!(len, set.len());\n            }\n        }\n        assert_eq!(nat.len(), set.len());\n        assert_eq!(OrdSet::from(nat.clone()), set);\n    }\n}"}
{"test_id": "BurntSushi-memchr/BurntSushi-memchr-f3fde7a/tests-gen/memrchr3.inputs.rs::test_95", "code": "fn count(self) -> usize {\n        self.it.count(|s, e| {\n            // SAFETY: We rely on our generic iterator to return valid start\n            // and end pointers.\n            unsafe { count_raw(self.needle1, s, e) }\n        })\n    }", "test": "fn test_95() {\n    let data = [10];\n    if data.len() < 3 {\n        return;\n    }\n    memchr3_iter(data[0], data[1], data[2], &data[3..]).rev().count();\n}"}
{"test_id": "gfx-rs-naga/gfx-rs-naga-92e41b4/tests-gen/wgsl_parser.inputs.rs::test_34", "code": "pub fn parse(mut self) -> Result<crate::Module, Error> {\n        let mut module = {\n            if self.next()? != spirv::MAGIC_NUMBER {\n                return Err(Error::InvalidHeader);\n            }\n            let version_raw = self.next()?;\n            let generator = self.next()?;\n            let _bound = self.next()?;\n            let _schema = self.next()?;\n            log::info!(\"Generated by {} version {:x}\", generator, version_raw);\n            crate::Module::default()\n        };\n\n        self.layouter.clear();\n        self.dummy_functions = Arena::new();\n        self.lookup_function.clear();\n        self.function_call_graph.clear();\n\n        loop {\n            use spirv::Op;\n\n            let inst = match self.next_inst() {\n                Ok(inst) => inst,\n                Err(Error::IncompleteData) => break,\n                Err(other) => return Err(other),\n            };\n            log::debug!(\"\\t{:?} [{}]\", inst.op, inst.wc);\n\n            match inst.op {\n                Op::Capability => self.parse_capability(inst),\n                Op::Extension => self.parse_extension(inst),\n                Op::ExtInstImport => self.parse_ext_inst_import(inst),\n                Op::MemoryModel => self.parse_memory_model(inst),\n                Op::EntryPoint => self.parse_entry_point(inst),\n                Op::ExecutionMode => self.parse_execution_mode(inst),\n                Op::String => self.parse_string(inst),\n                Op::Source => self.parse_source(inst),\n                Op::SourceExtension => self.parse_source_extension(inst),\n                Op::Name => self.parse_name(inst),\n                Op::MemberName => self.parse_member_name(inst),\n                Op::ModuleProcessed => self.parse_module_processed(inst),\n                Op::Decorate => self.parse_decorate(inst),\n                Op::MemberDecorate => self.parse_member_decorate(inst),\n                Op::TypeVoid => self.parse_type_void(inst),\n                Op::TypeBool => self.parse_type_bool(inst, &mut module),\n                Op::TypeInt => self.parse_type_int(inst, &mut module),\n                Op::TypeFloat => self.parse_type_float(inst, &mut module),\n                Op::TypeVector => self.parse_type_vector(inst, &mut module),\n                Op::TypeMatrix => self.parse_type_matrix(inst, &mut module),\n                Op::TypeFunction => self.parse_type_function(inst),\n                Op::TypePointer => self.parse_type_pointer(inst, &mut module),\n                Op::TypeArray => self.parse_type_array(inst, &mut module),\n                Op::TypeRuntimeArray => self.parse_type_runtime_array(inst, &mut module),\n                Op::TypeStruct => self.parse_type_struct(inst, &mut module),\n                Op::TypeImage => self.parse_type_image(inst, &mut module),\n                Op::TypeSampledImage => self.parse_type_sampled_image(inst),\n                Op::TypeSampler => self.parse_type_sampler(inst, &mut module),\n                Op::Constant | Op::SpecConstant => self.parse_constant(inst, &mut module),\n                Op::ConstantComposite => self.parse_composite_constant(inst, &mut module),\n                Op::ConstantNull | Op::Undef => self.parse_null_constant(inst, &mut module),\n                Op::ConstantTrue => self.parse_bool_constant(inst, true, &mut module),\n                Op::ConstantFalse => self.parse_bool_constant(inst, false, &mut module),\n                Op::Variable => self.parse_global_variable(inst, &mut module),\n                Op::Function => {\n                    self.switch(ModuleState::Function, inst.op)?;\n                    inst.expect(5)?;\n                    self.parse_function(&mut module)\n                }\n                _ => Err(Error::UnsupportedInstruction(self.state, inst.op)), //TODO\n            }?;\n        }\n\n        log::info!(\"Patching...\");\n        {\n            let mut nodes = petgraph::algo::toposort(&self.function_call_graph, None)\n                .map_err(|cycle| Error::FunctionCallCycle(cycle.node_id()))?;\n            nodes.reverse(); // we need dominated first\n            let mut functions = mem::take(&mut module.functions);\n            for fun_id in nodes {\n                if fun_id > !(functions.len() as u32) {\n                    // skip all the fake IDs registered for the entry points\n                    continue;\n                }\n                let lookup = self.lookup_function.get_mut(&fun_id).unwrap();\n                // take out the function from the old array\n                let fun = mem::take(&mut functions[lookup.handle]);\n                // add it to the newly formed arena, and adjust the lookup\n                lookup.handle = module\n                    .functions\n                    .append(fun, functions.get_span(lookup.handle));\n            }\n        }\n        // patch all the functions\n        for (handle, fun) in module.functions.iter_mut() {\n            self.patch_function(Some(handle), fun)?;\n        }\n        for ep in module.entry_points.iter_mut() {\n            self.patch_function(None, &mut ep.function)?;\n        }\n\n        // Check all the images and samplers to have consistent comparison property.\n        for (handle, flags) in self.handle_sampling.drain() {\n            if !image::patch_comparison_type(\n                flags,\n                module.global_variables.get_mut(handle),\n                &mut module.types,\n            ) {\n                return Err(Error::InconsistentComparisonSampling(handle));\n            }\n        }\n\n        if !self.future_decor.is_empty() {\n            log::warn!(\"Unused item decorations: {:?}\", self.future_decor);\n            self.future_decor.clear();\n        }\n        if !self.future_member_decor.is_empty() {\n            log::warn!(\"Unused member decorations: {:?}\", self.future_member_decor);\n            self.future_member_decor.clear();\n        }\n\n        Ok(module)\n    }", "test": "fn test_34() {\n    let data = \"\\0\\r1!\";\n    let _result = Frontend::new().parse(&data);\n}"}
{"test_id": "cloud-hypervisor-cloud-hypervisor/cloud-hypervisor-cloud-hypervisor-db3a5f3/tests-gen/iommu.inputs.rs::test_50", "code": "pub fn wait_for_epoll_threads(&mut self) {\n        self.common.wait_for_epoll_threads();\n    }", "test": "fn test_50() {\n    let bytes = [42, 10];\n    if bytes.len() < (QUEUE_DATA_SIZE + QUEUE_BYTES_SIZE)\n        || bytes.len() > (QUEUE_DATA_SIZE + QUEUE_BYTES_SIZE + MEM_SIZE)\n    {\n        return;\n    }\n    let (mut iommu, _) = virtio_devices::Iommu::new(\n        \"fuzzer_iommu\".to_owned(),\n        SeccompAction::Allow,\n        EventFd::new(EFD_NONBLOCK).unwrap(),\n        ((MEM_SIZE - IOVA_SPACE_SIZE) as u64, (MEM_SIZE - 1) as u64),\n        None,\n    )\n    .unwrap();\n    let queue_data = &bytes[..QUEUE_DATA_SIZE];\n    let queue_bytes = &bytes[QUEUE_DATA_SIZE..QUEUE_DATA_SIZE + QUEUE_BYTES_SIZE];\n    let mem_bytes = &bytes[QUEUE_DATA_SIZE + QUEUE_BYTES_SIZE..];\n    let request_queue = setup_virt_queue(queue_data.try_into().unwrap());\n    let _event_queue = setup_virt_queue(queue_data.try_into().unwrap());\n    let mem = GuestMemoryMmap::from_ranges(&[\n        (GuestAddress(0), MEM_SIZE),\n        (GuestAddress(DESC_TABLE_ADDR), QUEUE_BYTES_SIZE),\n    ])\n    .unwrap();\n    if mem\n        .write_slice(queue_bytes, GuestAddress(DESC_TABLE_ADDR))\n        .is_err()\n    {\n        return;\n    }\n    if mem.write_slice(mem_bytes, GuestAddress(0 as u64)).is_err() {\n        return;\n    }\n    let guest_memory = GuestMemoryAtomic::new(mem);\n    let request_evt = EventFd::new(0).unwrap();\n    let request_queue_evt = unsafe { EventFd::from_raw_fd(libc::dup(request_evt.as_raw_fd())) };\n    let _event_evt = EventFd::new(0).unwrap();\n    request_queue_evt.write(1).unwrap();\n    iommu\n        .activate(\n            guest_memory,\n            Arc::new(NoopVirtioInterrupt {}),\n            vec![\n                (0, request_queue, request_evt),\n                (0, _event_queue, _event_evt),\n            ],\n        )\n        .ok();\n    iommu.wait_for_epoll_threads();\n}"}
{"test_id": "cloud-hypervisor-cloud-hypervisor/cloud-hypervisor-cloud-hypervisor-db3a5f3/tests-gen/block.inputs.rs::test_24", "code": "pub fn wait_for_epoll_threads(&mut self) {\n        self.common.wait_for_epoll_threads();\n    }", "test": "fn test_24() {\n    let bytes = [43, 36];\n    if bytes.len() < QUEUE_DATA_SIZE || bytes.len() > (QUEUE_DATA_SIZE + MEM_SIZE) {\n        return;\n    }\n    let queue_data = &bytes[..QUEUE_DATA_SIZE];\n    let mem_bytes = &bytes[QUEUE_DATA_SIZE..];\n    let shm = memfd_create(&ffi::CString::new(\"fuzz\").unwrap(), 0).unwrap();\n    let disk_file: File = unsafe { File::from_raw_fd(shm) };\n    let qcow_disk = Box::new(RawFileDiskSync::new(disk_file)) as Box<dyn DiskFile>;\n    let mut block = Block::new(\n        \"tmp\".to_owned(),\n        qcow_disk,\n        PathBuf::from(\"\"),\n        false,\n        false,\n        2,\n        256,\n        None,\n        SeccompAction::Allow,\n        None,\n        EventFd::new(EFD_NONBLOCK).unwrap(),\n        None,\n    )\n    .unwrap();\n    let q = setup_virt_queue(queue_data.try_into().unwrap());\n    let mem = GuestMemoryMmap::from_ranges(&[(GuestAddress(0), MEM_SIZE)]).unwrap();\n    if mem.write_slice(mem_bytes, GuestAddress(0 as u64)).is_err() {\n        return;\n    }\n    let guest_memory = GuestMemoryAtomic::new(mem);\n    let evt = EventFd::new(0).unwrap();\n    let queue_evt = unsafe { EventFd::from_raw_fd(libc::dup(evt.as_raw_fd())) };\n    queue_evt.write(1).unwrap();\n    block\n        .activate(\n            guest_memory,\n            Arc::new(NoopVirtioInterrupt {}),\n            vec![(0, q, evt)],\n        )\n        .ok();\n    block.wait_for_epoll_threads();\n}"}
{"test_id": "cloud-hypervisor-cloud-hypervisor/cloud-hypervisor-cloud-hypervisor-db3a5f3/tests-gen/pmem.inputs.rs::test_41", "code": "pub fn wait_for_epoll_threads(&mut self) {\n        self.common.wait_for_epoll_threads();\n    }", "test": "fn test_41() {\n    let bytes = [14, 39, 25, 81];\n    if bytes.len() < QUEUE_DATA_SIZE || bytes.len() > (QUEUE_DATA_SIZE + MEM_SIZE) {\n        return;\n    }\n    let mut pmem = create_dummy_pmem();\n    let queue_data = &bytes[..QUEUE_DATA_SIZE];\n    let mem_bytes = &bytes[QUEUE_DATA_SIZE..];\n    let q = setup_virt_queue(queue_data.try_into().unwrap());\n    let mem = GuestMemoryMmap::from_ranges(&[(GuestAddress(0), MEM_SIZE)]).unwrap();\n    if mem.write_slice(mem_bytes, GuestAddress(0 as u64)).is_err() {\n        return;\n    }\n    let guest_memory = GuestMemoryAtomic::new(mem);\n    let evt = EventFd::new(0).unwrap();\n    let queue_evt = unsafe { EventFd::from_raw_fd(libc::dup(evt.as_raw_fd())) };\n    queue_evt.write(1).unwrap();\n    pmem.activate(\n        guest_memory,\n        Arc::new(NoopVirtioInterrupt {}),\n        vec![(0, q, evt)],\n    )\n    .ok();\n    pmem.wait_for_epoll_threads();\n}"}
{"test_id": "cloud-hypervisor-cloud-hypervisor/cloud-hypervisor-cloud-hypervisor-db3a5f3/tests-gen/rng.inputs.rs::test_93", "code": "pub fn wait_for_epoll_threads(&mut self) {\n        self.common.wait_for_epoll_threads();\n    }", "test": "fn test_93() {\n    let bytes = [5, 5, 5, 42];\n    if bytes.len() < (QUEUE_DATA_SIZE + QUEUE_BYTES_SIZE)\n        || bytes.len() > (QUEUE_DATA_SIZE + QUEUE_BYTES_SIZE + MEM_SIZE)\n    {\n        return;\n    }\n    let mut rng = virtio_devices::Rng::new(\n        \"fuzzer_rng\".to_owned(),\n        \"/dev/urandom\",\n        false,\n        SeccompAction::Allow,\n        EventFd::new(EFD_NONBLOCK).unwrap(),\n        None,\n    )\n    .unwrap();\n    let queue_data = &bytes[..QUEUE_DATA_SIZE];\n    let queue_bytes = &bytes[QUEUE_DATA_SIZE..QUEUE_DATA_SIZE + QUEUE_BYTES_SIZE];\n    let mem_bytes = &bytes[QUEUE_DATA_SIZE + QUEUE_BYTES_SIZE..];\n    let q = setup_virt_queue(queue_data.try_into().unwrap());\n    let mem = GuestMemoryMmap::from_ranges(&[\n        (GuestAddress(0), MEM_SIZE),\n        (GuestAddress(DESC_TABLE_ADDR), QUEUE_BYTES_SIZE),\n    ])\n    .unwrap();\n    if mem\n        .write_slice(queue_bytes, GuestAddress(DESC_TABLE_ADDR))\n        .is_err()\n    {\n        return;\n    }\n    if mem.write_slice(mem_bytes, GuestAddress(0 as u64)).is_err() {\n        return;\n    }\n    let guest_memory = GuestMemoryAtomic::new(mem);\n    let evt = EventFd::new(0).unwrap();\n    let queue_evt = unsafe { EventFd::from_raw_fd(libc::dup(evt.as_raw_fd())) };\n    queue_evt.write(1).unwrap();\n    rng.activate(\n        guest_memory,\n        Arc::new(NoopVirtioInterrupt {}),\n        vec![(0, q, evt)],\n    )\n    .ok();\n    rng.wait_for_epoll_threads();\n}"}
{"test_id": "image-rs-image-png/image-rs-image-png-e113d76/tests-gen/roundtrip.inputs.rs::test_91", "code": "fn encode_png < 'a > (width : u8 , filter : u8 , compression : u8 , color_type : u8 , raw_bit_depth : u8 , raw_palette : & 'a [u8] , data : & 'a [u8]) -> Option < (& 'a [u8] , Vec < u8 >) > { let width = width as u32 ; if width == 0 { return None } ; let filter = FilterType :: from_u8 (filter) ? ; let bit_depth = BitDepth :: from_u8 (raw_bit_depth) ? ; let max_palette_length = 3 * u32 :: pow (2 , raw_bit_depth as u32) as usize ; let mut palette = raw_palette ; let color_type = ColorType :: from_u8 (color_type) ? ; if let ColorType :: Indexed = color_type { if raw_palette . len () > max_palette_length { palette = & raw_palette [.. max_palette_length] ; } } let compression = match compression { 0 => png :: Compression :: Default , 1 => png :: Compression :: Fast , 2 => png :: Compression :: Best , 3 => png :: Compression :: Huffman , 4 => png :: Compression :: Rle , _ => return None , } ; let bytes_per_row = raw_row_length_from_width (bit_depth , color_type , width) - 1 ; let height = data . len () / bytes_per_row ; let total_bytes = bytes_per_row * height ; let data_to_encode = & data [.. total_bytes] ; let mut output : Vec < u8 > = Vec :: new () ; { let mut encoder = png :: Encoder :: new (& mut output , width , height as u32) ; encoder . set_depth (bit_depth) ; encoder . set_color (color_type) ; encoder . set_filter (filter) ; encoder . set_compression (compression) ; if let ColorType :: Indexed = color_type { encoder . set_palette (palette) } let mut writer = encoder . write_header () . ok () ? ; writer . write_image_data (data_to_encode) . expect (\"Encoding failed\") ; } Some ((data_to_encode , output)) }", "test": "fn test_91() {\n    let data = (1, 0, 1, 4, 1, [], []);\n    if let Some((raw, encoded)) =\n        encode_png(data.0, data.1, data.2, data.3, data.4, &data.5, &data.6)\n    {\n        let (_info, raw_decoded) = decode_png(&encoded);\n        let raw_decoded = &raw_decoded[..raw.len()];\n        assert_eq!(raw, raw_decoded);\n    }\n}"}
{"test_id": "seanmonstar-httparse/seanmonstar-httparse-638848e/tests-gen/parse_request.inputs.rs::test_35", "code": "pub fn parse(&mut self, buf: &'b [u8]) -> Result<usize> {\n        self.parse_with_config(buf, &Default::default())\n    }", "test": "fn test_35() {\n    let data = [10, 10, 10];\n    let mut headers = [httparse::EMPTY_HEADER; 16];\n    let mut req = httparse::Request::new(&mut headers);\n    req.parse(data);\n}"}
{"test_id": "gimli-rs-gimli/gimli-rs-gimli-3947879/tests-gen/debug_abbrev.inputs.rs::test_37", "code": "pub fn get<R: Reader>(\n        &self,\n        debug_abbrev: &DebugAbbrev<R>,\n        offset: DebugAbbrevOffset<R::Offset>,\n    ) -> Result<Arc<Abbreviations>> {\n        if offset.0 != R::Offset::from_u8(0) {\n            return debug_abbrev.abbreviations(offset).map(Arc::new);\n        }\n        self.abbreviations\n            .get(|| debug_abbrev.abbreviations(offset))\n    }", "test": "fn test_37() {\n    let debug_abbrev = [44];\n    let len = debug_abbrev.len();\n    let debug_abbrev = DebugAbbrev::new(&debug_abbrev, LittleEndian);\n    let offset = DebugAbbrevOffset(0);\n    if let Ok(abbreviations) = debug_abbrev.abbreviations(offset) {\n        for i in 1..len {\n            let _ = abbreviations.get(i as u64);\n        }\n    }\n}"}
{"test_id": "tafia-calamine/tafia-calamine-5a5804d/tests-gen/fuzz_all.inputs.rs::test_3", "code": "fn count<R: Reader<BufReader<File>>>(path: &str) -> usize {\n    let path = format!(\"{}/{}\", env!(\"CARGO_MANIFEST_DIR\"), path);\n    let mut excel: R = open_workbook(&path).expect(\"cannot open excel file\");\n\n    let sheets = excel.sheet_names().to_owned();\n    let mut count = 0;\n    for s in sheets {\n        count += excel\n            .worksheet_range(&s)\n            .unwrap()\n            .unwrap()\n            .rows()\n            .flat_map(|r| r.iter())\n            .count();\n    }\n    count\n}", "test": "fn test_3() {\n    let data = [14, 69, 12];\n    let file_name = \"fuzz.xlsx\";\n    if let Ok(mut file) = File::create(file_name) {\n        if file.write_all(data).is_err() {\n            return;\n        }\n    }\n    let mut workbook: Xlsx<_> = match open_workbook(file_name) {\n        Ok(excel) => excel,\n        Err(_) => return,\n    };\n    for worksheet in workbook.worksheets() {\n        if let Some(Ok(range)) = workbook.worksheet_range(&worksheet.0) {\n            let _ = range.get_size().0 * range.get_size().1;\n            range.used_cells().count();\n        }\n    }\n    if let Some(Ok(mut vba)) = workbook.vba_project() {\n        let vba = vba.to_mut();\n        for module_name in vba.get_module_names() {\n            if vba.get_module(module_name).is_ok() {\n                for r in vba.get_references() {\n                    r.is_missing();\n                }\n            }\n        }\n    }\n    let sheets = workbook.sheet_names().to_owned();\n    for s in sheets {\n        if let Some(Ok(formula)) = workbook.worksheet_formula(&s) {\n            formula\n                .rows()\n                .flat_map(|r| r.iter().filter(|f| !f.is_empty()))\n                .count();\n        }\n    }\n}"}
{"test_id": "marshallpierce-rust-base64/marshallpierce-rust-base64-4ef33cc/tests-gen/decode_random.inputs.rs::test_90", "code": "fn decode<T: AsRef<[u8]>>(&self, input: T) -> Result<Vec<u8>, DecodeError> {\n        fn inner<E>(engine: &E, input_bytes: &[u8]) -> Result<Vec<u8>, DecodeError>\n        where\n            E: Engine + ?Sized,\n        {\n            let estimate = engine.internal_decoded_len_estimate(input_bytes.len());\n            let mut buffer = vec![0; estimate.decoded_len_estimate()];\n\n            let bytes_written = engine\n                .internal_decode(input_bytes, &mut buffer, estimate)?\n                .decoded_len;\n\n            buffer.truncate(bytes_written);\n\n            Ok(buffer)\n        }\n\n        inner(self, input.as_ref())\n    }", "test": "fn test_90() {\n    let data = [205, 194];\n    let engine = utils::random_engine(data);\n    let _ = engine.decode(data);\n}"}
{"test_id": "gimli-rs-gimli/gimli-rs-gimli-3947879/tests-gen/debug_aranges.inputs.rs::test_35", "code": "pub fn next(&mut self) -> Result<Option<UnitHeader<R>>> {\n        if self.input.is_empty() {\n            Ok(None)\n        } else {\n            let len = self.input.len();\n            match parse_unit_header(&mut self.input, self.offset.into()) {\n                Ok(header) => {\n                    self.offset.0 += len - self.input.len();\n                    Ok(Some(header))\n                }\n                Err(e) => {\n                    self.input.empty();\n                    Err(e)\n                }\n            }\n        }\n    }", "test": "fn test_35() {\n    let debug_aranges = [11];\n    let debug_aranges = DebugAranges::new(&debug_aranges, LittleEndian);\n    let mut headers = debug_aranges.headers();\n    while let Ok(Some(header)) = headers.next() {\n        let mut entries = header.entries();\n        while let Ok(Some(_entry)) = entries.next() {\n            continue;\n        }\n    }\n}"}
{"test_id": "rust-bakery-nom/rust-bakery-nom-869f897/tests-gen/fuzz_arithmetic.inputs.rs::test_91", "code": "fn factor(i: &str) -> IResult<&str, Expr> {\n  alt((\n    map(\n      map_res(delimited(multispace, digit, multispace), FromStr::from_str),\n      Expr::Value,\n    ),\n    parens,\n  ))(i)\n}", "test": "fn test_91() {\n  let data = [238, 10];\n  reset();\n  let temp = match str::from_utf8(data) {\n    Ok(v) => factor(v),\n    Err(e) => factor(\"2\"),\n  };\n}"}
{"test_id": "cloud-hypervisor-cloud-hypervisor/cloud-hypervisor-cloud-hypervisor-db3a5f3/tests-gen/pmem.inputs.rs::test_63", "code": "pub fn wait_for_epoll_threads(&mut self) {\n        self.common.wait_for_epoll_threads();\n    }", "test": "fn test_63() {\n    let bytes = [10, 240, 14, 8];\n    if bytes.len() < QUEUE_DATA_SIZE || bytes.len() > (QUEUE_DATA_SIZE + MEM_SIZE) {\n        return;\n    }\n    let mut pmem = create_dummy_pmem();\n    let queue_data = &bytes[..QUEUE_DATA_SIZE];\n    let mem_bytes = &bytes[QUEUE_DATA_SIZE..];\n    let q = setup_virt_queue(queue_data.try_into().unwrap());\n    let mem = GuestMemoryMmap::from_ranges(&[(GuestAddress(0), MEM_SIZE)]).unwrap();\n    if mem.write_slice(mem_bytes, GuestAddress(0 as u64)).is_err() {\n        return;\n    }\n    let guest_memory = GuestMemoryAtomic::new(mem);\n    let evt = EventFd::new(0).unwrap();\n    let queue_evt = unsafe { EventFd::from_raw_fd(libc::dup(evt.as_raw_fd())) };\n    queue_evt.write(1).unwrap();\n    pmem.activate(\n        guest_memory,\n        Arc::new(NoopVirtioInterrupt {}),\n        vec![(0, q, evt)],\n    )\n    .ok();\n    pmem.wait_for_epoll_threads();\n}"}
{"test_id": "cloud-hypervisor-cloud-hypervisor/cloud-hypervisor-cloud-hypervisor-db3a5f3/tests-gen/balloon.inputs.rs::test_9", "code": "pub fn wait_for_epoll_threads(&mut self) {\n        self.common.wait_for_epoll_threads();\n    }", "test": "fn test_9() {\n    let bytes = [26, 26];\n    if bytes.len() < QUEUE_DATA_SIZE * QUEUE_NUM\n        || bytes.len() > (QUEUE_DATA_SIZE * QUEUE_NUM + MEM_SIZE)\n    {\n        return;\n    }\n    let mut balloon = virtio_devices::Balloon::new(\n        \"fuzzer_balloon\".to_owned(),\n        BALLOON_SIZE,\n        true,\n        true,\n        SeccompAction::Allow,\n        EventFd::new(EFD_NONBLOCK).unwrap(),\n        None,\n    )\n    .unwrap();\n    let queue_data = &bytes[..QUEUE_DATA_SIZE * QUEUE_NUM];\n    let mem_bytes = &bytes[QUEUE_DATA_SIZE * QUEUE_NUM..];\n    let mem = GuestMemoryMmap::from_ranges(&[(GuestAddress(0), MEM_SIZE)]).unwrap();\n    if mem.write_slice(mem_bytes, GuestAddress(0 as u64)).is_err() {\n        return;\n    }\n    let guest_memory = GuestMemoryAtomic::new(mem);\n    let mut queues = setup_virt_queues(\n        &[\n            &queue_data[..QUEUE_DATA_SIZE].try_into().unwrap(),\n            &queue_data[QUEUE_DATA_SIZE..QUEUE_DATA_SIZE * 2]\n                .try_into()\n                .unwrap(),\n            &queue_data[QUEUE_DATA_SIZE * 2..QUEUE_DATA_SIZE * 3]\n                .try_into()\n                .unwrap(),\n        ],\n        0,\n    );\n    let inflate_q = queues.remove(0);\n    let inflate_evt = EventFd::new(0).unwrap();\n    let inflate_queue_evt = unsafe { EventFd::from_raw_fd(libc::dup(inflate_evt.as_raw_fd())) };\n    let deflate_q = queues.remove(0);\n    let deflate_evt = EventFd::new(0).unwrap();\n    let deflate_queue_evt = unsafe { EventFd::from_raw_fd(libc::dup(deflate_evt.as_raw_fd())) };\n    let reporting_q = queues.remove(0);\n    let reporting_evt = EventFd::new(0).unwrap();\n    let reporting_queue_evt = unsafe { EventFd::from_raw_fd(libc::dup(reporting_evt.as_raw_fd())) };\n    inflate_queue_evt.write(1).unwrap();\n    deflate_queue_evt.write(1).unwrap();\n    reporting_queue_evt.write(1).unwrap();\n    balloon\n        .activate(\n            guest_memory,\n            Arc::new(NoopVirtioInterrupt {}),\n            vec![\n                (0, inflate_q, inflate_evt),\n                (1, deflate_q, deflate_evt),\n                (2, reporting_q, reporting_evt),\n            ],\n        )\n        .ok();\n    balloon.wait_for_epoll_threads();\n}"}
{"test_id": "cloud-hypervisor-cloud-hypervisor/cloud-hypervisor-cloud-hypervisor-db3a5f3/tests-gen/rng.inputs.rs::test_92", "code": "pub fn wait_for_epoll_threads(&mut self) {\n        self.common.wait_for_epoll_threads();\n    }", "test": "fn test_92() {\n    let bytes = [5, 69, 59, 5];\n    if bytes.len() < (QUEUE_DATA_SIZE + QUEUE_BYTES_SIZE)\n        || bytes.len() > (QUEUE_DATA_SIZE + QUEUE_BYTES_SIZE + MEM_SIZE)\n    {\n        return;\n    }\n    let mut rng = virtio_devices::Rng::new(\n        \"fuzzer_rng\".to_owned(),\n        \"/dev/urandom\",\n        false,\n        SeccompAction::Allow,\n        EventFd::new(EFD_NONBLOCK).unwrap(),\n        None,\n    )\n    .unwrap();\n    let queue_data = &bytes[..QUEUE_DATA_SIZE];\n    let queue_bytes = &bytes[QUEUE_DATA_SIZE..QUEUE_DATA_SIZE + QUEUE_BYTES_SIZE];\n    let mem_bytes = &bytes[QUEUE_DATA_SIZE + QUEUE_BYTES_SIZE..];\n    let q = setup_virt_queue(queue_data.try_into().unwrap());\n    let mem = GuestMemoryMmap::from_ranges(&[\n        (GuestAddress(0), MEM_SIZE),\n        (GuestAddress(DESC_TABLE_ADDR), QUEUE_BYTES_SIZE),\n    ])\n    .unwrap();\n    if mem\n        .write_slice(queue_bytes, GuestAddress(DESC_TABLE_ADDR))\n        .is_err()\n    {\n        return;\n    }\n    if mem.write_slice(mem_bytes, GuestAddress(0 as u64)).is_err() {\n        return;\n    }\n    let guest_memory = GuestMemoryAtomic::new(mem);\n    let evt = EventFd::new(0).unwrap();\n    let queue_evt = unsafe { EventFd::from_raw_fd(libc::dup(evt.as_raw_fd())) };\n    queue_evt.write(1).unwrap();\n    rng.activate(\n        guest_memory,\n        Arc::new(NoopVirtioInterrupt {}),\n        vec![(0, q, evt)],\n    )\n    .ok();\n    rng.wait_for_epoll_threads();\n}"}
{"test_id": "XAMPPRocky-tokei/XAMPPRocky-tokei-92ddc2e/tests-gen/parse_from_slice_panic.inputs.rs::test_72", "code": "pub fn parse_from_slice (input : FuzzInput , check_total : bool) { let config = & Config { treat_doc_strings_as_comments : Some (input . treat_doc_strings_as_comments) , columns : None , hidden : None , no_ignore : None , no_ignore_parent : None , no_ignore_dot : None , no_ignore_vcs : None , sort : None , types : None , for_each_fn : None , } ; let stats = input . lang . parse_from_slice (input . data , config) ; if check_total { if let Ok (s) = str :: from_utf8 (input . data) { assert ! (stats . lines () <= s . lines () . count () , \"{} got more total lines ({}) than str::lines ({}). Code: {}, Comments: {}, Blanks: {}. treat_doc_strings_as_comments: {}. File contents (as UTF-8):\\n{}\" , input . lang . name () , stats . lines () , s . lines () . count () , stats . code , stats . comments , input . treat_doc_strings_as_comments , stats . blanks , s) } ; } }", "test": "fn test_72() {\n    let data = FuzzInput {\n        lang: Unison,\n        treat_doc_strings_as_comments: false,\n        data: [222, 255, 255, 255, 255, 30, 30, 255],\n    };\n    parse_from_slice(data, false);\n}"}
{"test_id": "marshallpierce-rust-base64/marshallpierce-rust-base64-4ef33cc/tests-gen/roundtrip_no_pad.inputs.rs::test_53", "code": "fn decode<T: AsRef<[u8]>>(&self, input: T) -> Result<Vec<u8>, DecodeError> {\n        fn inner<E>(engine: &E, input_bytes: &[u8]) -> Result<Vec<u8>, DecodeError>\n        where\n            E: Engine + ?Sized,\n        {\n            let estimate = engine.internal_decoded_len_estimate(input_bytes.len());\n            let mut buffer = vec![0; estimate.decoded_len_estimate()];\n\n            let bytes_written = engine\n                .internal_decode(input_bytes, &mut buffer, estimate)?\n                .decoded_len;\n\n            buffer.truncate(bytes_written);\n\n            Ok(buffer)\n        }\n\n        inner(self, input.as_ref())\n    }", "test": "fn test_53() {\n    let data = [138, 63];\n    let config = general_purpose::GeneralPurposeConfig::new()\n        .with_encode_padding(false)\n        .with_decode_padding_mode(engine::DecodePaddingMode::RequireNone);\n    let engine = general_purpose::GeneralPurpose::new(&base64::alphabet::STANDARD, config);\n    let encoded = engine.encode(data);\n    let decoded = engine.decode(&encoded).unwrap();\n    assert_eq!(data, decoded.as_slice());\n}"}
{"test_id": "cloud-hypervisor-cloud-hypervisor/cloud-hypervisor-cloud-hypervisor-db3a5f3/tests-gen/console.inputs.rs::test_69", "code": "pub fn wait_for_epoll_threads(&mut self) {\n        self.common.wait_for_epoll_threads();\n    }", "test": "fn test_69() {\n    let bytes = [10, 40, 242, 242];\n    if bytes.len() < (QUEUE_DATA_SIZE + QUEUE_BYTES_SIZE) * QUEUE_NUM + CONSOLE_INPUT_SIZE\n        || bytes.len()\n            > (QUEUE_DATA_SIZE + QUEUE_BYTES_SIZE) * QUEUE_NUM + CONSOLE_INPUT_SIZE + MEM_SIZE\n    {\n        return;\n    }\n    let (pipe_rx, mut pipe_tx) = create_pipe().unwrap();\n    let output = unsafe {\n        File::from_raw_fd(\n            memfd_create(&std::ffi::CString::new(\"fuzz_console_output\").unwrap()).unwrap(),\n        )\n    };\n    let endpoint = virtio_devices::Endpoint::FilePair(output, pipe_rx);\n    let (mut console, _) = virtio_devices::Console::new(\n        \"fuzzer_console\".to_owned(),\n        endpoint,\n        None,\n        false,\n        SeccompAction::Allow,\n        EventFd::new(EFD_NONBLOCK).unwrap(),\n        None,\n    )\n    .unwrap();\n    let console_input_bytes = &bytes[..CONSOLE_INPUT_SIZE];\n    let queue_data = &bytes[CONSOLE_INPUT_SIZE..CONSOLE_INPUT_SIZE + QUEUE_DATA_SIZE * QUEUE_NUM];\n    let queue_bytes = &bytes[CONSOLE_INPUT_SIZE + QUEUE_DATA_SIZE * QUEUE_NUM\n        ..CONSOLE_INPUT_SIZE + (QUEUE_DATA_SIZE + QUEUE_BYTES_SIZE) * QUEUE_NUM];\n    let mem_bytes = &bytes[CONSOLE_INPUT_SIZE + (QUEUE_DATA_SIZE + QUEUE_BYTES_SIZE) * QUEUE_NUM..];\n    let mut queues = setup_virt_queues(\n        &[\n            &queue_data[..QUEUE_DATA_SIZE].try_into().unwrap(),\n            &queue_data[QUEUE_DATA_SIZE..QUEUE_DATA_SIZE * 2]\n                .try_into()\n                .unwrap(),\n        ],\n        BASE_VIRT_QUEUE_ADDR,\n    );\n    let mem = GuestMemoryMmap::from_ranges(&[\n        (GuestAddress(0), MEM_SIZE),\n        (GuestAddress(BASE_VIRT_QUEUE_ADDR), queue_bytes.len()),\n    ])\n    .unwrap();\n    if mem\n        .write_slice(queue_bytes, GuestAddress(BASE_VIRT_QUEUE_ADDR))\n        .is_err()\n    {\n        return;\n    }\n    if mem.write_slice(mem_bytes, GuestAddress(0 as u64)).is_err() {\n        return;\n    }\n    let guest_memory = GuestMemoryAtomic::new(mem);\n    let input_queue = queues.remove(0);\n    let input_evt = EventFd::new(0).unwrap();\n    let input_queue_evt = unsafe { EventFd::from_raw_fd(libc::dup(input_evt.as_raw_fd())) };\n    let output_queue = queues.remove(0);\n    let output_evt = EventFd::new(0).unwrap();\n    let output_queue_evt = unsafe { EventFd::from_raw_fd(libc::dup(output_evt.as_raw_fd())) };\n    input_queue_evt.write(1).unwrap();\n    output_queue_evt.write(1).unwrap();\n    pipe_tx.write_all(console_input_bytes).unwrap();\n    console\n        .activate(\n            guest_memory,\n            Arc::new(NoopVirtioInterrupt {}),\n            vec![(0, input_queue, input_evt), (1, output_queue, output_evt)],\n        )\n        .unwrap();\n    console.wait_for_epoll_threads();\n}"}
{"test_id": "marshallpierce-rust-base64/marshallpierce-rust-base64-4ef33cc/tests-gen/decode_random.inputs.rs::test_73", "code": "fn decode<T: AsRef<[u8]>>(&self, input: T) -> Result<Vec<u8>, DecodeError> {\n        fn inner<E>(engine: &E, input_bytes: &[u8]) -> Result<Vec<u8>, DecodeError>\n        where\n            E: Engine + ?Sized,\n        {\n            let estimate = engine.internal_decoded_len_estimate(input_bytes.len());\n            let mut buffer = vec![0; estimate.decoded_len_estimate()];\n\n            let bytes_written = engine\n                .internal_decode(input_bytes, &mut buffer, estimate)?\n                .decoded_len;\n\n            buffer.truncate(bytes_written);\n\n            Ok(buffer)\n        }\n\n        inner(self, input.as_ref())\n    }", "test": "fn test_73() {\n    let data = [48];\n    let engine = utils::random_engine(data);\n    let _ = engine.decode(data);\n}"}
{"test_id": "cloud-hypervisor-cloud-hypervisor/cloud-hypervisor-cloud-hypervisor-db3a5f3/tests-gen/iommu.inputs.rs::test_12", "code": "pub fn wait_for_epoll_threads(&mut self) {\n        self.common.wait_for_epoll_threads();\n    }", "test": "fn test_12() {\n    let bytes = [10, 4, 56];\n    if bytes.len() < (QUEUE_DATA_SIZE + QUEUE_BYTES_SIZE)\n        || bytes.len() > (QUEUE_DATA_SIZE + QUEUE_BYTES_SIZE + MEM_SIZE)\n    {\n        return;\n    }\n    let (mut iommu, _) = virtio_devices::Iommu::new(\n        \"fuzzer_iommu\".to_owned(),\n        SeccompAction::Allow,\n        EventFd::new(EFD_NONBLOCK).unwrap(),\n        ((MEM_SIZE - IOVA_SPACE_SIZE) as u64, (MEM_SIZE - 1) as u64),\n        None,\n    )\n    .unwrap();\n    let queue_data = &bytes[..QUEUE_DATA_SIZE];\n    let queue_bytes = &bytes[QUEUE_DATA_SIZE..QUEUE_DATA_SIZE + QUEUE_BYTES_SIZE];\n    let mem_bytes = &bytes[QUEUE_DATA_SIZE + QUEUE_BYTES_SIZE..];\n    let request_queue = setup_virt_queue(queue_data.try_into().unwrap());\n    let _event_queue = setup_virt_queue(queue_data.try_into().unwrap());\n    let mem = GuestMemoryMmap::from_ranges(&[\n        (GuestAddress(0), MEM_SIZE),\n        (GuestAddress(DESC_TABLE_ADDR), QUEUE_BYTES_SIZE),\n    ])\n    .unwrap();\n    if mem\n        .write_slice(queue_bytes, GuestAddress(DESC_TABLE_ADDR))\n        .is_err()\n    {\n        return;\n    }\n    if mem.write_slice(mem_bytes, GuestAddress(0 as u64)).is_err() {\n        return;\n    }\n    let guest_memory = GuestMemoryAtomic::new(mem);\n    let request_evt = EventFd::new(0).unwrap();\n    let request_queue_evt = unsafe { EventFd::from_raw_fd(libc::dup(request_evt.as_raw_fd())) };\n    let _event_evt = EventFd::new(0).unwrap();\n    request_queue_evt.write(1).unwrap();\n    iommu\n        .activate(\n            guest_memory,\n            Arc::new(NoopVirtioInterrupt {}),\n            vec![\n                (0, request_queue, request_evt),\n                (0, _event_queue, _event_evt),\n            ],\n        )\n        .ok();\n    iommu.wait_for_epoll_threads();\n}"}
{"test_id": "BurntSushi-memchr/BurntSushi-memchr-f3fde7a/tests-gen/memmem.inputs.rs::test_46", "code": "pub fn count(&self, haystack: &[u8]) -> usize {\n        // SAFETY: All of our pointers are derived directly from a borrowed\n        // slice, which is guaranteed to be valid.\n        unsafe {\n            let start = haystack.as_ptr();\n            let end = start.add(haystack.len());\n            self.count_raw(start, end)\n        }\n    }", "test": "fn test_46() {\n    let data = [10, 10, 65];\n    if data.len() < 2 {\n        return;\n    }\n    let split = std::cmp::max(data[0] as usize, 1) % data.len() as usize;\n    let (needle, haystack) = (&data[..split], &data[split..]);\n    memmem::find_iter(haystack, needle).count();\n}"}
{"test_id": "cloud-hypervisor-cloud-hypervisor/cloud-hypervisor-cloud-hypervisor-db3a5f3/tests-gen/console.inputs.rs::test_35", "code": "pub fn wait_for_epoll_threads(&mut self) {\n        self.common.wait_for_epoll_threads();\n    }", "test": "fn test_35() {\n    let bytes = [26, 26];\n    if bytes.len() < (QUEUE_DATA_SIZE + QUEUE_BYTES_SIZE) * QUEUE_NUM + CONSOLE_INPUT_SIZE\n        || bytes.len()\n            > (QUEUE_DATA_SIZE + QUEUE_BYTES_SIZE) * QUEUE_NUM + CONSOLE_INPUT_SIZE + MEM_SIZE\n    {\n        return;\n    }\n    let (pipe_rx, mut pipe_tx) = create_pipe().unwrap();\n    let output = unsafe {\n        File::from_raw_fd(\n            memfd_create(&std::ffi::CString::new(\"fuzz_console_output\").unwrap()).unwrap(),\n        )\n    };\n    let endpoint = virtio_devices::Endpoint::FilePair(output, pipe_rx);\n    let (mut console, _) = virtio_devices::Console::new(\n        \"fuzzer_console\".to_owned(),\n        endpoint,\n        None,\n        false,\n        SeccompAction::Allow,\n        EventFd::new(EFD_NONBLOCK).unwrap(),\n        None,\n    )\n    .unwrap();\n    let console_input_bytes = &bytes[..CONSOLE_INPUT_SIZE];\n    let queue_data = &bytes[CONSOLE_INPUT_SIZE..CONSOLE_INPUT_SIZE + QUEUE_DATA_SIZE * QUEUE_NUM];\n    let queue_bytes = &bytes[CONSOLE_INPUT_SIZE + QUEUE_DATA_SIZE * QUEUE_NUM\n        ..CONSOLE_INPUT_SIZE + (QUEUE_DATA_SIZE + QUEUE_BYTES_SIZE) * QUEUE_NUM];\n    let mem_bytes = &bytes[CONSOLE_INPUT_SIZE + (QUEUE_DATA_SIZE + QUEUE_BYTES_SIZE) * QUEUE_NUM..];\n    let mut queues = setup_virt_queues(\n        &[\n            &queue_data[..QUEUE_DATA_SIZE].try_into().unwrap(),\n            &queue_data[QUEUE_DATA_SIZE..QUEUE_DATA_SIZE * 2]\n                .try_into()\n                .unwrap(),\n        ],\n        BASE_VIRT_QUEUE_ADDR,\n    );\n    let mem = GuestMemoryMmap::from_ranges(&[\n        (GuestAddress(0), MEM_SIZE),\n        (GuestAddress(BASE_VIRT_QUEUE_ADDR), queue_bytes.len()),\n    ])\n    .unwrap();\n    if mem\n        .write_slice(queue_bytes, GuestAddress(BASE_VIRT_QUEUE_ADDR))\n        .is_err()\n    {\n        return;\n    }\n    if mem.write_slice(mem_bytes, GuestAddress(0 as u64)).is_err() {\n        return;\n    }\n    let guest_memory = GuestMemoryAtomic::new(mem);\n    let input_queue = queues.remove(0);\n    let input_evt = EventFd::new(0).unwrap();\n    let input_queue_evt = unsafe { EventFd::from_raw_fd(libc::dup(input_evt.as_raw_fd())) };\n    let output_queue = queues.remove(0);\n    let output_evt = EventFd::new(0).unwrap();\n    let output_queue_evt = unsafe { EventFd::from_raw_fd(libc::dup(output_evt.as_raw_fd())) };\n    input_queue_evt.write(1).unwrap();\n    output_queue_evt.write(1).unwrap();\n    pipe_tx.write_all(console_input_bytes).unwrap();\n    console\n        .activate(\n            guest_memory,\n            Arc::new(NoopVirtioInterrupt {}),\n            vec![(0, input_queue, input_evt), (1, output_queue, output_evt)],\n        )\n        .unwrap();\n    console.wait_for_epoll_threads();\n}"}
{"test_id": "cloud-hypervisor-cloud-hypervisor/cloud-hypervisor-cloud-hypervisor-db3a5f3/tests-gen/console.inputs.rs::test_49", "code": "pub fn wait_for_epoll_threads(&mut self) {\n        self.common.wait_for_epoll_threads();\n    }", "test": "fn test_49() {\n    let bytes = [10];\n    if bytes.len() < (QUEUE_DATA_SIZE + QUEUE_BYTES_SIZE) * QUEUE_NUM + CONSOLE_INPUT_SIZE\n        || bytes.len()\n            > (QUEUE_DATA_SIZE + QUEUE_BYTES_SIZE) * QUEUE_NUM + CONSOLE_INPUT_SIZE + MEM_SIZE\n    {\n        return;\n    }\n    let (pipe_rx, mut pipe_tx) = create_pipe().unwrap();\n    let output = unsafe {\n        File::from_raw_fd(\n            memfd_create(&std::ffi::CString::new(\"fuzz_console_output\").unwrap()).unwrap(),\n        )\n    };\n    let endpoint = virtio_devices::Endpoint::FilePair(output, pipe_rx);\n    let (mut console, _) = virtio_devices::Console::new(\n        \"fuzzer_console\".to_owned(),\n        endpoint,\n        None,\n        false,\n        SeccompAction::Allow,\n        EventFd::new(EFD_NONBLOCK).unwrap(),\n        None,\n    )\n    .unwrap();\n    let console_input_bytes = &bytes[..CONSOLE_INPUT_SIZE];\n    let queue_data = &bytes[CONSOLE_INPUT_SIZE..CONSOLE_INPUT_SIZE + QUEUE_DATA_SIZE * QUEUE_NUM];\n    let queue_bytes = &bytes[CONSOLE_INPUT_SIZE + QUEUE_DATA_SIZE * QUEUE_NUM\n        ..CONSOLE_INPUT_SIZE + (QUEUE_DATA_SIZE + QUEUE_BYTES_SIZE) * QUEUE_NUM];\n    let mem_bytes = &bytes[CONSOLE_INPUT_SIZE + (QUEUE_DATA_SIZE + QUEUE_BYTES_SIZE) * QUEUE_NUM..];\n    let mut queues = setup_virt_queues(\n        &[\n            &queue_data[..QUEUE_DATA_SIZE].try_into().unwrap(),\n            &queue_data[QUEUE_DATA_SIZE..QUEUE_DATA_SIZE * 2]\n                .try_into()\n                .unwrap(),\n        ],\n        BASE_VIRT_QUEUE_ADDR,\n    );\n    let mem = GuestMemoryMmap::from_ranges(&[\n        (GuestAddress(0), MEM_SIZE),\n        (GuestAddress(BASE_VIRT_QUEUE_ADDR), queue_bytes.len()),\n    ])\n    .unwrap();\n    if mem\n        .write_slice(queue_bytes, GuestAddress(BASE_VIRT_QUEUE_ADDR))\n        .is_err()\n    {\n        return;\n    }\n    if mem.write_slice(mem_bytes, GuestAddress(0 as u64)).is_err() {\n        return;\n    }\n    let guest_memory = GuestMemoryAtomic::new(mem);\n    let input_queue = queues.remove(0);\n    let input_evt = EventFd::new(0).unwrap();\n    let input_queue_evt = unsafe { EventFd::from_raw_fd(libc::dup(input_evt.as_raw_fd())) };\n    let output_queue = queues.remove(0);\n    let output_evt = EventFd::new(0).unwrap();\n    let output_queue_evt = unsafe { EventFd::from_raw_fd(libc::dup(output_evt.as_raw_fd())) };\n    input_queue_evt.write(1).unwrap();\n    output_queue_evt.write(1).unwrap();\n    pipe_tx.write_all(console_input_bytes).unwrap();\n    console\n        .activate(\n            guest_memory,\n            Arc::new(NoopVirtioInterrupt {}),\n            vec![(0, input_queue, input_evt), (1, output_queue, output_evt)],\n        )\n        .unwrap();\n    console.wait_for_epoll_threads();\n}"}
{"test_id": "XAMPPRocky-tokei/XAMPPRocky-tokei-92ddc2e/tests-gen/parse_from_slice_panic.inputs.rs::test_34", "code": "pub fn parse_from_slice (input : FuzzInput , check_total : bool) { let config = & Config { treat_doc_strings_as_comments : Some (input . treat_doc_strings_as_comments) , columns : None , hidden : None , no_ignore : None , no_ignore_parent : None , no_ignore_dot : None , no_ignore_vcs : None , sort : None , types : None , for_each_fn : None , } ; let stats = input . lang . parse_from_slice (input . data , config) ; if check_total { if let Ok (s) = str :: from_utf8 (input . data) { assert ! (stats . lines () <= s . lines () . count () , \"{} got more total lines ({}) than str::lines ({}). Code: {}, Comments: {}, Blanks: {}. treat_doc_strings_as_comments: {}. File contents (as UTF-8):\\n{}\" , input . lang . name () , stats . lines () , s . lines () . count () , stats . code , stats . comments , input . treat_doc_strings_as_comments , stats . blanks , s) } ; } }", "test": "fn test_34() {\n    let data = FuzzInput {\n        lang: AWK,\n        treat_doc_strings_as_comments: false,\n        data: [0, 0, 2, 13, 255, 0, 255, 88],\n    };\n    parse_from_slice(data, false);\n}"}
{"test_id": "cloud-hypervisor-cloud-hypervisor/cloud-hypervisor-cloud-hypervisor-db3a5f3/tests-gen/rng.inputs.rs::test_85", "code": "pub fn wait_for_epoll_threads(&mut self) {\n        self.common.wait_for_epoll_threads();\n    }", "test": "fn test_85() {\n    let bytes = [5, 10, 39];\n    if bytes.len() < (QUEUE_DATA_SIZE + QUEUE_BYTES_SIZE)\n        || bytes.len() > (QUEUE_DATA_SIZE + QUEUE_BYTES_SIZE + MEM_SIZE)\n    {\n        return;\n    }\n    let mut rng = virtio_devices::Rng::new(\n        \"fuzzer_rng\".to_owned(),\n        \"/dev/urandom\",\n        false,\n        SeccompAction::Allow,\n        EventFd::new(EFD_NONBLOCK).unwrap(),\n        None,\n    )\n    .unwrap();\n    let queue_data = &bytes[..QUEUE_DATA_SIZE];\n    let queue_bytes = &bytes[QUEUE_DATA_SIZE..QUEUE_DATA_SIZE + QUEUE_BYTES_SIZE];\n    let mem_bytes = &bytes[QUEUE_DATA_SIZE + QUEUE_BYTES_SIZE..];\n    let q = setup_virt_queue(queue_data.try_into().unwrap());\n    let mem = GuestMemoryMmap::from_ranges(&[\n        (GuestAddress(0), MEM_SIZE),\n        (GuestAddress(DESC_TABLE_ADDR), QUEUE_BYTES_SIZE),\n    ])\n    .unwrap();\n    if mem\n        .write_slice(queue_bytes, GuestAddress(DESC_TABLE_ADDR))\n        .is_err()\n    {\n        return;\n    }\n    if mem.write_slice(mem_bytes, GuestAddress(0 as u64)).is_err() {\n        return;\n    }\n    let guest_memory = GuestMemoryAtomic::new(mem);\n    let evt = EventFd::new(0).unwrap();\n    let queue_evt = unsafe { EventFd::from_raw_fd(libc::dup(evt.as_raw_fd())) };\n    queue_evt.write(1).unwrap();\n    rng.activate(\n        guest_memory,\n        Arc::new(NoopVirtioInterrupt {}),\n        vec![(0, q, evt)],\n    )\n    .ok();\n    rng.wait_for_epoll_threads();\n}"}
{"test_id": "gimli-rs-gimli/gimli-rs-gimli-3947879/tests-gen/eh_frame_hdr.inputs.rs::test_41", "code": "fn parse<R: Reader>(input: &mut R) -> Result<Abbreviations> {\n        let mut abbrevs = Abbreviations::empty();\n\n        while let Some(abbrev) = Abbreviation::parse(input)? {\n            if abbrevs.insert(abbrev).is_err() {\n                return Err(Error::DuplicateAbbreviationCode);\n            }\n        }\n\n        Ok(abbrevs)\n    }", "test": "fn test_41() {\n    let eh_frame_hdr = [8, 10, 8, 10];\n    let eh_frame_hdr = EhFrameHdr::new(eh_frame_hdr, LittleEndian);\n    let bases = BaseAddresses::default()\n        .set_eh_frame(0)\n        .set_eh_frame_hdr(0)\n        .set_text(0)\n        .set_got(0);\n    let address_size = 8;\n    let _ = eh_frame_hdr.parse(&bases, address_size);\n}"}
{"test_id": "bodil-im-rs/bodil-im-rs-2afaf54/tests-gen/ordset.inputs.rs::test_67", "code": "pub fn remove<BA>(&mut self, a: &BA) -> Option<A>\n    where\n        BA: Hash + Eq + ?Sized,\n        A: Borrow<BA>,\n    {\n        let root = PoolRef::make_mut(&self.pool.0, &mut self.root);\n        let result = root.remove(&self.pool.0, hash_key(&*self.hasher, a), 0, a);\n        if result.is_some() {\n            self.size -= 1;\n        }\n        result.map(|v| v.0)\n    }", "test": "fn test_67() {\n    let actions = [Insert(4991471628406095871)];\n    let mut set = OrdSet::new();\n    let mut nat = NatSet::new();\n    for action in actions {\n        match action {\n            Action::Insert(value) => {\n                let len = nat.len() + if nat.contains(&value) { 0 } else { 1 };\n                nat.insert(value);\n                set.insert(value);\n                assert_eq!(len, set.len());\n            }\n            Action::Remove(value) => {\n                let len = nat.len() - if nat.contains(&value) { 1 } else { 0 };\n                nat.remove(&value);\n                set.remove(&value);\n                assert_eq!(len, set.len());\n            }\n        }\n        assert_eq!(nat.len(), set.len());\n        assert_eq!(OrdSet::from(nat.clone()), set);\n    }\n}"}
{"test_id": "marshallpierce-rust-base64/marshallpierce-rust-base64-4ef33cc/tests-gen/roundtrip_no_pad.inputs.rs::test_38", "code": "fn decode<T: AsRef<[u8]>>(&self, input: T) -> Result<Vec<u8>, DecodeError> {\n        fn inner<E>(engine: &E, input_bytes: &[u8]) -> Result<Vec<u8>, DecodeError>\n        where\n            E: Engine + ?Sized,\n        {\n            let estimate = engine.internal_decoded_len_estimate(input_bytes.len());\n            let mut buffer = vec![0; estimate.decoded_len_estimate()];\n\n            let bytes_written = engine\n                .internal_decode(input_bytes, &mut buffer, estimate)?\n                .decoded_len;\n\n            buffer.truncate(bytes_written);\n\n            Ok(buffer)\n        }\n\n        inner(self, input.as_ref())\n    }", "test": "fn test_38() {\n    let data = [63, 11, 122];\n    let config = general_purpose::GeneralPurposeConfig::new()\n        .with_encode_padding(false)\n        .with_decode_padding_mode(engine::DecodePaddingMode::RequireNone);\n    let engine = general_purpose::GeneralPurpose::new(&base64::alphabet::STANDARD, config);\n    let encoded = engine.encode(data);\n    let decoded = engine.decode(&encoded).unwrap();\n    assert_eq!(data, decoded.as_slice());\n}"}
{"test_id": "winnow-rs-winnow/winnow-rs-winnow-9e88734/tests-gen/fuzz_arithmetic.inputs.rs::test_64", "code": "fn factor(i: &mut &str) -> PResult<Expr> {\n    delimited(\n        multispaces,\n        alt((digits.try_map(FromStr::from_str).map(Expr::Value), parens)),\n        multispaces,\n    )\n    .parse_next(i)\n}", "test": "fn test_64() {\n    let data = [10, 39];\n    reset();\n    let _ = match str::from_utf8(data) {\n        Ok(mut v) => factor(&mut v),\n        Err(_) => factor(&mut \"2\"),\n    };\n}"}
{"test_id": "cloud-hypervisor-cloud-hypervisor/cloud-hypervisor-cloud-hypervisor-db3a5f3/tests-gen/cmos.inputs.rs::test_4", "code": "fn write(&mut self, _base: u64, offset: u64, data: &[u8]) -> Option<Arc<Barrier>> {\n        if data.len() != 1 {\n            warn!(\"Invalid write size on CMOS device: {}\", data.len());\n            return None;\n        }\n\n        match offset {\n            INDEX_OFFSET => self.index = data[0],\n            DATA_OFFSET => {\n                if self.index == 0x8f && data[0] == 0 {\n                    info!(\"CMOS reset\");\n                    self.reset_evt.write(1).unwrap();\n                    if let Some(vcpus_kill_signalled) = self.vcpus_kill_signalled.take() {\n                        // Spin until we are sure the reset_evt has been handled and that when\n                        // we return from the KVM_RUN we will exit rather than re-enter the guest.\n                        while !vcpus_kill_signalled.load(Ordering::SeqCst) {\n                            // This is more effective than thread::yield_now() at\n                            // avoiding a priority inversion with the VMM thread\n                            thread::sleep(std::time::Duration::from_millis(1));\n                        }\n                    }\n                } else {\n                    self.data[(self.index & INDEX_MASK) as usize] = data[0]\n                }\n            }\n            o => warn!(\"bad write offset on CMOS device: {}\", o),\n        };\n        None\n    }", "test": "fn test_4() {\n    let bytes = [10, 10];\n    if bytes.len() < 16 {\n        return;\n    }\n    let mut below_4g = [0u8; 8];\n    let mut above_4g = [0u8; 8];\n    below_4g.copy_from_slice(&bytes[0..8]);\n    above_4g.copy_from_slice(&bytes[8..16]);\n    let mut cmos = Cmos::new(\n        u64::from_le_bytes(below_4g),\n        u64::from_le_bytes(above_4g),\n        EventFd::new(EFD_NONBLOCK).unwrap(),\n        None,\n    );\n    let mut i = 16;\n    while i < bytes.len() {\n        let read = bytes.get(i).unwrap_or(&0) % 2 == 0;\n        i += 1;\n        if read {\n            let offset = (bytes.get(i).unwrap_or(&0) % 2) as u64;\n            i += 1;\n            let mut out_bytes = vec![0];\n            cmos.read(0, offset, &mut out_bytes);\n        } else {\n            let offset = (bytes.get(i).unwrap_or(&0) % 2) as u64;\n            i += 1;\n            let data = vec![*bytes.get(i).unwrap_or(&0)];\n            i += 1;\n            cmos.write(0, offset, &data);\n        }\n    }\n}"}
{"test_id": "winnow-rs-winnow/winnow-rs-winnow-9e88734/tests-gen/fuzz_arithmetic.inputs.rs::test_17", "code": "fn factor(i: &mut &str) -> PResult<Expr> {\n    delimited(\n        multispaces,\n        alt((digits.try_map(FromStr::from_str).map(Expr::Value), parens)),\n        multispaces,\n    )\n    .parse_next(i)\n}", "test": "fn test_17() {\n    let data = [10, 10, 229];\n    reset();\n    let _ = match str::from_utf8(data) {\n        Ok(mut v) => factor(&mut v),\n        Err(_) => factor(&mut \"2\"),\n    };\n}"}
{"test_id": "marshallpierce-rust-base64/marshallpierce-rust-base64-4ef33cc/tests-gen/roundtrip.inputs.rs::test_73", "code": "pub fn decode<T: AsRef<[u8]>>(input: T) -> Result<Vec<u8>, DecodeError> {\n    STANDARD.decode(input)\n}", "test": "fn test_73() {\n    let data = [10, 205];\n    let encoded = STANDARD.encode(data);\n    let decoded = STANDARD.decode(&encoded).unwrap();\n    assert_eq!(data, decoded.as_slice());\n}"}
{"test_id": "rustls-rustls/rustls-rustls-ae583bd/tests-gen/client.inputs.rs::test_91", "code": "pub fn process_new_packets(&mut self) -> Result<IoState, Error> {\n        match self {\n            Self::Client(conn) => conn.process_new_packets(),\n            Self::Server(conn) => conn.process_new_packets(),\n        }\n    }", "test": "fn test_91() {\n    let data = [\n        22, 3, 3, 0, 63, 2, 0, 0, 59, 3, 3, 89, 16, 236, 200, 17, 90, 14, 121, 52, 150, 218, 66,\n        28, 227, 55, 237, 109, 95, 209, 111, 252, 56, 238, 6, 251, 154, 147, 123, 211, 206, 186,\n        114, 0, 204, 169, 0, 0, 19, 255, 1, 0, 1, 0, 0, 23, 0, 0, 0, 35, 0, 0, 0, 11, 0, 2, 1, 0,\n        22, 3, 3, 14, 229, 11, 0, 14, 225, 0, 14, 222, 0, 7, 96, 48, 130, 7, 92, 48, 130, 6, 68,\n        160, 3, 2, 1, 2, 2, 8, 83, 65, 61, 145, 120, 210, 140, 39, 48, 13, 6, 9, 42, 134, 72, 134,\n        247, 13, 1, 1, 11, 5, 0, 48, 73, 49, 11, 48, 9, 6, 3, 85, 4, 6, 19, 2, 85, 83, 49, 19, 48,\n        17, 6, 3, 85, 4, 10, 19, 10, 71, 111, 111, 103, 108, 101, 32, 73, 110, 99, 49, 37, 48, 35,\n        6, 3, 85, 4, 3, 19, 28, 71, 111, 111, 103, 108, 101, 32, 73, 110, 116, 101, 114, 110, 101,\n        116, 32, 65, 117, 116, 104, 111, 114, 105, 116, 121, 32, 71, 50, 48, 30, 23, 13, 49, 55,\n        48, 52, 50, 55, 48, 56, 51, 48, 48, 48, 90, 23, 13, 49, 55, 48, 55, 50, 48, 48, 56, 51, 48,\n        48, 48, 90, 48, 102, 49, 11, 48, 9, 6, 3, 85, 4, 6, 19, 2, 85, 83, 49, 19, 48, 17, 6, 3,\n        85, 4, 8, 12, 10, 67, 97, 108, 105, 102, 111, 114, 110, 105, 97, 49, 22, 48, 20, 6, 3, 85,\n        4, 7, 12, 13, 77, 111, 117, 110, 116, 97, 105, 110, 32, 86, 105, 101, 119, 49, 19, 48, 17,\n        6, 3, 85, 4, 10, 12, 10, 71, 111, 111, 103, 108, 101, 32, 73, 110, 99, 49, 21, 48, 19, 6,\n        3, 85, 4, 3, 12, 12, 42, 46, 103, 111, 111, 103, 108, 101, 46, 99, 111, 109, 48, 89, 48,\n        19, 6, 7, 42, 134, 72, 206, 61, 2, 1, 6, 8, 42, 134, 72, 206, 61, 3, 1, 7, 3, 66, 0, 4,\n        189, 77, 48, 133, 70, 173, 158, 211, 104, 157, 203, 90, 81, 210, 82, 202, 205, 147, 209,\n        252, 62, 33, 220, 191, 25, 45, 49, 119, 71, 86, 34, 248, 128, 116, 164, 199, 172, 91, 179,\n        223, 239, 76, 76, 63, 25, 69, 53, 53, 110, 197, 165, 220, 25, 210, 237, 147, 30, 18, 131,\n        158, 196, 86, 94, 111, 163, 130, 4, 244, 48, 130, 4, 240, 48, 29, 6, 3, 85, 29, 37, 4, 22,\n        48, 20, 6, 8, 43, 6, 1, 5, 5, 7, 3, 1, 6, 8, 43, 6, 1, 5, 5, 7, 3, 2, 48, 11, 6, 3, 85, 29,\n        15, 4, 4, 3, 2, 7, 128, 48, 130, 3, 179, 6, 3, 85, 29, 17, 4, 130, 3, 170, 48, 130, 3, 166,\n        130, 12, 42, 46, 103, 111, 111, 103, 108, 101, 46, 99, 111, 109, 130, 13, 42, 46, 97, 110,\n        100, 114, 111, 105, 100, 46, 99, 111, 109, 130, 22, 42, 46, 97, 112, 112, 101, 110, 103,\n        105, 110, 101, 46, 103, 111, 111, 103, 108, 101, 46, 99, 111, 109, 130, 18, 42, 46, 99,\n        108, 111, 117, 100, 46, 103, 111, 111, 103, 108, 101, 46, 99, 111, 109, 130, 14, 42, 46,\n        103, 99, 112, 46, 103, 118, 116, 50, 46, 99, 111, 109, 130, 22, 42, 46, 103, 111, 111, 103,\n        108, 101, 45, 97, 110, 97, 108, 121, 116, 105, 99, 115, 46, 99, 111, 109, 130, 11, 42, 46,\n        103, 111, 111, 103, 108, 101, 46, 99, 97, 130, 11, 42, 46, 103, 111, 111, 103, 108, 101,\n        46, 99, 108, 130, 14, 42, 46, 103, 111, 111, 103, 108, 101, 46, 99, 111, 46, 105, 110, 130,\n        14, 42, 46, 103, 111, 111, 103, 108, 101, 46, 99, 111, 46, 106, 112, 130, 14, 42, 46, 103,\n        111, 111, 103, 108, 101, 46, 99, 111, 46, 117, 107, 130, 15, 42, 46, 103, 111, 111, 103,\n        108, 101, 46, 99, 111, 109, 46, 97, 114, 130, 15, 42, 46, 103, 111, 111, 103, 108, 101, 46,\n        99, 111, 109, 46, 97, 117, 130, 15, 42, 46, 103, 111, 22, 3, 3, 0, 63, 2, 0, 0, 59, 3, 3,\n        89, 16, 236, 200, 17, 90, 14, 121, 52, 150, 218, 66, 28, 227, 55, 237, 109, 95, 209, 111,\n        252, 56, 238, 6, 251, 154, 147, 123, 211, 206, 186, 114, 0, 204, 169, 0, 0, 19, 255, 1, 0,\n        1, 0, 0, 23, 0, 0, 0, 35, 0, 0, 0, 11, 0, 2, 1, 0, 22, 3, 3, 14, 229, 11, 0, 14, 225, 0,\n        14, 222, 0, 7, 96, 48, 130, 7, 92, 48, 130, 6, 68, 160, 3, 2, 1, 2, 2, 8, 83, 65, 61, 145,\n        120, 210, 140, 39, 48, 13, 6, 9, 42, 134, 72, 134, 247, 13, 1, 1, 11, 5, 0, 48, 73, 49, 11,\n        48, 9, 6, 3, 85, 4, 6, 19, 2, 85, 83, 49, 19, 48, 17, 6, 3, 85, 4, 10, 19, 10, 71, 111,\n        111, 103, 108, 101, 32, 73, 110, 99, 49, 37, 48, 35, 6, 3, 85, 4, 3, 19, 28, 71, 111, 111,\n        103, 108, 101, 32, 73, 110, 116, 101, 114, 110, 101, 116, 32, 65, 117, 116, 104, 111, 114,\n        105, 116, 121, 32, 71, 50, 48, 30, 23, 13, 49, 55, 48, 52, 50, 55, 48, 56, 51, 48, 48, 48,\n        90, 23, 13, 49, 55, 48, 55, 50, 48, 48, 56, 51, 48, 48, 48, 90, 48, 102, 49, 11, 48, 9, 6,\n        3, 85, 4, 6, 19, 2, 85, 83, 49, 19, 48, 17, 6, 3, 85, 4, 8, 12, 10, 67, 97, 108, 105, 102,\n        111, 114, 110, 105, 97, 49, 22, 48, 20, 6, 3, 85, 4, 7, 12, 13, 77, 111, 117, 110, 116, 97,\n        105, 110, 32, 86, 105, 101, 119, 49, 19, 48, 17, 6, 3, 85, 4, 10, 12, 10, 71, 111, 111,\n        103, 108, 101, 32, 73, 110, 99, 49, 21, 48, 19, 6, 3, 85, 4, 3, 12, 12, 42, 46, 103, 111,\n        111, 103, 108, 101, 46, 99, 111, 109, 48, 89, 48, 19, 6, 7, 42, 134, 72, 206, 61, 2, 1, 6,\n        8, 42, 134, 72, 206, 61, 3, 1, 7, 3, 66, 0, 4, 189, 77, 48, 133, 70, 173, 158, 211, 104,\n        157, 203, 90, 111, 103, 108, 101, 46, 99, 111, 109, 46, 98, 114, 130, 15, 42, 46, 103, 111,\n        111, 103, 108, 101, 46, 99, 111, 109, 46, 99, 111, 130, 15, 42, 46, 103, 111, 111, 103,\n        108, 101, 46, 99, 111, 109, 46, 109, 120, 130, 15, 42, 46, 103, 111, 111, 103, 108, 101,\n        46, 99, 111, 109, 46, 116, 114, 130, 15, 42, 46, 103, 111, 111, 103, 108, 101, 46, 99, 111,\n        109, 46, 118, 110, 130, 11, 42, 46, 103, 111, 111, 103, 108, 101, 46, 100, 101, 130, 11,\n        42, 46, 103, 111, 111, 103, 108, 101, 46, 101, 115, 130, 11, 42, 46, 103, 111, 111, 103,\n        108, 101, 46, 102, 114, 130, 11, 42, 46, 103, 111, 111, 103, 108, 101, 46, 104, 117, 130,\n        11, 42, 46, 103, 111, 111, 103, 108, 101, 46, 105, 116, 130, 11, 42, 46, 103, 111, 111,\n        103, 108, 101, 46, 110, 108, 130, 11, 42, 46, 103, 111, 81, 210, 82, 202, 205, 147, 209,\n        252, 62, 33, 220, 191, 25, 45, 49, 119, 71, 86, 34, 248, 128,\n    ];\n    let root_store = RootCertStore::empty();\n    let config = Arc::new(\n        ClientConfig::builder()\n            .with_safe_defaults()\n            .with_root_certificates(root_store)\n            .with_no_client_auth(),\n    );\n    let example_com = \"example.com\".try_into().unwrap();\n    let mut client = ClientConnection::new(config, example_com).unwrap();\n    let _ = client.read_tls(&mut io::Cursor::new(data));\n    let _ = client.process_new_packets();\n}"}
{"test_id": "gfx-rs-naga/gfx-rs-naga-92e41b4/tests-gen/wgsl_parser.inputs.rs::test_97", "code": "pub fn parse(mut self) -> Result<crate::Module, Error> {\n        let mut module = {\n            if self.next()? != spirv::MAGIC_NUMBER {\n                return Err(Error::InvalidHeader);\n            }\n            let version_raw = self.next()?;\n            let generator = self.next()?;\n            let _bound = self.next()?;\n            let _schema = self.next()?;\n            log::info!(\"Generated by {} version {:x}\", generator, version_raw);\n            crate::Module::default()\n        };\n\n        self.layouter.clear();\n        self.dummy_functions = Arena::new();\n        self.lookup_function.clear();\n        self.function_call_graph.clear();\n\n        loop {\n            use spirv::Op;\n\n            let inst = match self.next_inst() {\n                Ok(inst) => inst,\n                Err(Error::IncompleteData) => break,\n                Err(other) => return Err(other),\n            };\n            log::debug!(\"\\t{:?} [{}]\", inst.op, inst.wc);\n\n            match inst.op {\n                Op::Capability => self.parse_capability(inst),\n                Op::Extension => self.parse_extension(inst),\n                Op::ExtInstImport => self.parse_ext_inst_import(inst),\n                Op::MemoryModel => self.parse_memory_model(inst),\n                Op::EntryPoint => self.parse_entry_point(inst),\n                Op::ExecutionMode => self.parse_execution_mode(inst),\n                Op::String => self.parse_string(inst),\n                Op::Source => self.parse_source(inst),\n                Op::SourceExtension => self.parse_source_extension(inst),\n                Op::Name => self.parse_name(inst),\n                Op::MemberName => self.parse_member_name(inst),\n                Op::ModuleProcessed => self.parse_module_processed(inst),\n                Op::Decorate => self.parse_decorate(inst),\n                Op::MemberDecorate => self.parse_member_decorate(inst),\n                Op::TypeVoid => self.parse_type_void(inst),\n                Op::TypeBool => self.parse_type_bool(inst, &mut module),\n                Op::TypeInt => self.parse_type_int(inst, &mut module),\n                Op::TypeFloat => self.parse_type_float(inst, &mut module),\n                Op::TypeVector => self.parse_type_vector(inst, &mut module),\n                Op::TypeMatrix => self.parse_type_matrix(inst, &mut module),\n                Op::TypeFunction => self.parse_type_function(inst),\n                Op::TypePointer => self.parse_type_pointer(inst, &mut module),\n                Op::TypeArray => self.parse_type_array(inst, &mut module),\n                Op::TypeRuntimeArray => self.parse_type_runtime_array(inst, &mut module),\n                Op::TypeStruct => self.parse_type_struct(inst, &mut module),\n                Op::TypeImage => self.parse_type_image(inst, &mut module),\n                Op::TypeSampledImage => self.parse_type_sampled_image(inst),\n                Op::TypeSampler => self.parse_type_sampler(inst, &mut module),\n                Op::Constant | Op::SpecConstant => self.parse_constant(inst, &mut module),\n                Op::ConstantComposite => self.parse_composite_constant(inst, &mut module),\n                Op::ConstantNull | Op::Undef => self.parse_null_constant(inst, &mut module),\n                Op::ConstantTrue => self.parse_bool_constant(inst, true, &mut module),\n                Op::ConstantFalse => self.parse_bool_constant(inst, false, &mut module),\n                Op::Variable => self.parse_global_variable(inst, &mut module),\n                Op::Function => {\n                    self.switch(ModuleState::Function, inst.op)?;\n                    inst.expect(5)?;\n                    self.parse_function(&mut module)\n                }\n                _ => Err(Error::UnsupportedInstruction(self.state, inst.op)), //TODO\n            }?;\n        }\n\n        log::info!(\"Patching...\");\n        {\n            let mut nodes = petgraph::algo::toposort(&self.function_call_graph, None)\n                .map_err(|cycle| Error::FunctionCallCycle(cycle.node_id()))?;\n            nodes.reverse(); // we need dominated first\n            let mut functions = mem::take(&mut module.functions);\n            for fun_id in nodes {\n                if fun_id > !(functions.len() as u32) {\n                    // skip all the fake IDs registered for the entry points\n                    continue;\n                }\n                let lookup = self.lookup_function.get_mut(&fun_id).unwrap();\n                // take out the function from the old array\n                let fun = mem::take(&mut functions[lookup.handle]);\n                // add it to the newly formed arena, and adjust the lookup\n                lookup.handle = module\n                    .functions\n                    .append(fun, functions.get_span(lookup.handle));\n            }\n        }\n        // patch all the functions\n        for (handle, fun) in module.functions.iter_mut() {\n            self.patch_function(Some(handle), fun)?;\n        }\n        for ep in module.entry_points.iter_mut() {\n            self.patch_function(None, &mut ep.function)?;\n        }\n\n        // Check all the images and samplers to have consistent comparison property.\n        for (handle, flags) in self.handle_sampling.drain() {\n            if !image::patch_comparison_type(\n                flags,\n                module.global_variables.get_mut(handle),\n                &mut module.types,\n            ) {\n                return Err(Error::InconsistentComparisonSampling(handle));\n            }\n        }\n\n        if !self.future_decor.is_empty() {\n            log::warn!(\"Unused item decorations: {:?}\", self.future_decor);\n            self.future_decor.clear();\n        }\n        if !self.future_member_decor.is_empty() {\n            log::warn!(\"Unused member decorations: {:?}\", self.future_member_decor);\n            self.future_member_decor.clear();\n        }\n\n        Ok(module)\n    }", "test": "fn test_97() {\n    let data = \"<P\\0\";\n    let _result = Frontend::new().parse(&data);\n}"}
{"test_id": "dtolnay-semver/dtolnay-semver-750f0ac/tests-gen/sort_version.inputs.rs::test_11", "code": "fn three_versions(bytes: &[u8]) -> Option<[Version; 3]> {\n    let mut inputs = str::from_utf8(bytes).ok()?.split(' ');\n    Some([\n        Version {\n            major: 0,\n            minor: 0,\n            patch: 0,\n            pre: inputs.next().map(Prerelease::new)?.ok()?,\n            build: inputs.next().map(BuildMetadata::new)?.ok()?,\n        },\n        Version {\n            major: 0,\n            minor: 0,\n            patch: 0,\n            pre: inputs.next().map(Prerelease::new)?.ok()?,\n            build: inputs.next().map(BuildMetadata::new)?.ok()?,\n        },\n        Version {\n            major: 0,\n            minor: 0,\n            patch: 0,\n            pre: inputs.next().map(Prerelease::new)?.ok()?,\n            build: inputs.next().map(BuildMetadata::new)?.ok()?,\n        },\n    ])\n}", "test": "fn test_11() {\n    let bytes = [10, 140, 36];\n    if let Some([a, b, c]) = three_versions(bytes) {\n        if a < b && b < c && c < a {\n            panic!(\"{0} < {1} < {2} < {0}\", a, b, c);\n        }\n    }\n}"}
{"test_id": "BurntSushi-memchr/BurntSushi-memchr-f3fde7a/tests-gen/memmem.inputs.rs::test_94", "code": "pub fn count(&self, haystack: &[u8]) -> usize {\n        // SAFETY: All of our pointers are derived directly from a borrowed\n        // slice, which is guaranteed to be valid.\n        unsafe {\n            let start = haystack.as_ptr();\n            let end = start.add(haystack.len());\n            self.count_raw(start, end)\n        }\n    }", "test": "fn test_94() {\n    let data = [10, 10];\n    if data.len() < 2 {\n        return;\n    }\n    let split = std::cmp::max(data[0] as usize, 1) % data.len() as usize;\n    let (needle, haystack) = (&data[..split], &data[split..]);\n    memmem::find_iter(haystack, needle).count();\n}"}
{"test_id": "rustls-rustls/rustls-rustls-ae583bd/tests-gen/message.inputs.rs::test_20", "code": "pub fn used(&self) -> usize {\n        self.cursor\n    }", "test": "fn test_20() {\n    let data = [22, 3, 4, 0, 10, 8, 0, 0, 6, 0, 4, 0, 0, 0, 0];\n    let mut rdr = Reader::init(data);\n    if let Ok(m) = OpaqueMessage::read(&mut rdr) {\n        let msg = match Message::try_from(m.into_plain_message()) {\n            Ok(msg) => msg,\n            Err(_) => return,\n        };\n        let enc = PlainMessage::from(msg)\n            .into_unencrypted_opaque()\n            .encode();\n        assert_eq!(enc, data[..rdr.used()]);\n    }\n}"}
{"test_id": "cloud-hypervisor-cloud-hypervisor/cloud-hypervisor-cloud-hypervisor-db3a5f3/tests-gen/mem.inputs.rs::test_67", "code": "pub fn wait_for_epoll_threads(&mut self) {\n        self.common.wait_for_epoll_threads();\n    }", "test": "fn test_67() {\n    let bytes = [10, 54, 4, 126];\n    if bytes.len() < VIRTIO_MEM_DATA_SIZE + QUEUE_DATA_SIZE + QUEUE_BYTES_SIZE\n        || bytes.len() > (VIRTIO_MEM_DATA_SIZE + QUEUE_DATA_SIZE + QUEUE_BYTES_SIZE + MEM_SIZE)\n    {\n        return;\n    }\n    let virtio_mem_data = &bytes[..VIRTIO_MEM_DATA_SIZE];\n    let queue_data = &bytes[VIRTIO_MEM_DATA_SIZE..VIRTIO_MEM_DATA_SIZE + QUEUE_DATA_SIZE];\n    let queue_bytes = &bytes[VIRTIO_MEM_DATA_SIZE + QUEUE_DATA_SIZE\n        ..VIRTIO_MEM_DATA_SIZE + QUEUE_DATA_SIZE + QUEUE_BYTES_SIZE];\n    let mem_bytes = &bytes[VIRTIO_MEM_DATA_SIZE + QUEUE_DATA_SIZE + QUEUE_BYTES_SIZE..];\n    let (mut virtio_mem, virtio_mem_region) =\n        create_dummy_virtio_mem(virtio_mem_data.try_into().unwrap());\n    let q = setup_virt_queue(queue_data.try_into().unwrap());\n    let mem =\n        GuestMemoryMmap::from_ranges(&[(GuestAddress(DESC_TABLE_ADDR), QUEUE_BYTES_SIZE)]).unwrap();\n    if mem\n        .write_slice(queue_bytes, GuestAddress(DESC_TABLE_ADDR))\n        .is_err()\n    {\n        return;\n    }\n    let mem = mem.insert_region(virtio_mem_region).unwrap();\n    if mem\n        .write_slice(mem_bytes, GuestAddress(VIRTIO_MEM_REGION_ADDRESS))\n        .is_err()\n    {\n        return;\n    }\n    let guest_memory = GuestMemoryAtomic::new(mem);\n    let evt = EventFd::new(0).unwrap();\n    let queue_evt = unsafe { EventFd::from_raw_fd(libc::dup(evt.as_raw_fd())) };\n    queue_evt.write(1).unwrap();\n    virtio_mem\n        .activate(\n            guest_memory,\n            Arc::new(NoopVirtioInterrupt {}),\n            vec![(0, q, evt)],\n        )\n        .ok();\n    virtio_mem.wait_for_epoll_threads();\n}"}
{"test_id": "rustls-rustls/rustls-rustls-ae583bd/tests-gen/message.inputs.rs::test_0", "code": "pub fn used(&self) -> usize {\n        self.cursor\n    }", "test": "fn test_0() {\n    let data = [20, 3, 3, 0, 1, 1];\n    let mut rdr = Reader::init(data);\n    if let Ok(m) = OpaqueMessage::read(&mut rdr) {\n        let msg = match Message::try_from(m.into_plain_message()) {\n            Ok(msg) => msg,\n            Err(_) => return,\n        };\n        let enc = PlainMessage::from(msg)\n            .into_unencrypted_opaque()\n            .encode();\n        assert_eq!(enc, data[..rdr.used()]);\n    }\n}"}
{"test_id": "rustls-rustls/rustls-rustls-ae583bd/tests-gen/message.inputs.rs::test_1", "code": "pub fn used(&self) -> usize {\n        self.cursor\n    }", "test": "fn test_1() {\n    let data = [22, 3, 3, 0, 1, 15];\n    let mut rdr = Reader::init(data);\n    if let Ok(m) = OpaqueMessage::read(&mut rdr) {\n        let msg = match Message::try_from(m.into_plain_message()) {\n            Ok(msg) => msg,\n            Err(_) => return,\n        };\n        let enc = PlainMessage::from(msg)\n            .into_unencrypted_opaque()\n            .encode();\n        assert_eq!(enc, data[..rdr.used()]);\n    }\n}"}
{"test_id": "dtolnay-syn/dtolnay-syn-b1a038c/tests-gen/create_token_buffer.inputs.rs::test_51", "code": "fn parse_str(self, s: &str) -> Result<Self::Output> {\n        self.parse2(proc_macro2::TokenStream::from_str(s)?)\n    }", "test": "fn test_51() {\n    let data = [192];\n    if data.len() < 300 {\n        if let Ok(string) = str::from_utf8(data) {\n            let _ = immediate_fail.parse_str(string);\n        }\n    }\n}"}
{"test_id": "marshallpierce-rust-base64/marshallpierce-rust-base64-4ef33cc/tests-gen/roundtrip_random_config.inputs.rs::test_83", "code": "fn decode<T: AsRef<[u8]>>(&self, input: T) -> Result<Vec<u8>, DecodeError> {\n        fn inner<E>(engine: &E, input_bytes: &[u8]) -> Result<Vec<u8>, DecodeError>\n        where\n            E: Engine + ?Sized,\n        {\n            let estimate = engine.internal_decoded_len_estimate(input_bytes.len());\n            let mut buffer = vec![0; estimate.decoded_len_estimate()];\n\n            let bytes_written = engine\n                .internal_decode(input_bytes, &mut buffer, estimate)?\n                .decoded_len;\n\n            buffer.truncate(bytes_written);\n\n            Ok(buffer)\n        }\n\n        inner(self, input.as_ref())\n    }", "test": "fn test_83() {\n    let data = [137, 128, 2, 2];\n    let engine = utils::random_engine(data);\n    let encoded = engine.encode(data);\n    let decoded = engine.decode(&encoded).unwrap();\n    assert_eq!(data, decoded.as_slice());\n}"}
{"test_id": "gimli-rs-gimli/gimli-rs-gimli-3947879/tests-gen/debug_aranges.inputs.rs::test_49", "code": "pub fn next(&mut self) -> Result<Option<UnitHeader<R>>> {\n        if self.input.is_empty() {\n            Ok(None)\n        } else {\n            let len = self.input.len();\n            match parse_unit_header(&mut self.input, self.offset.into()) {\n                Ok(header) => {\n                    self.offset.0 += len - self.input.len();\n                    Ok(Some(header))\n                }\n                Err(e) => {\n                    self.input.empty();\n                    Err(e)\n                }\n            }\n        }\n    }", "test": "fn test_49() {\n    let debug_aranges = [10, 38];\n    let debug_aranges = DebugAranges::new(&debug_aranges, LittleEndian);\n    let mut headers = debug_aranges.headers();\n    while let Ok(Some(header)) = headers.next() {\n        let mut entries = header.entries();\n        while let Ok(Some(_entry)) = entries.next() {\n            continue;\n        }\n    }\n}"}
{"test_id": "gfx-rs-naga/gfx-rs-naga-92e41b4/tests-gen/wgsl_parser.inputs.rs::test_2", "code": "pub fn parse(mut self) -> Result<crate::Module, Error> {\n        let mut module = {\n            if self.next()? != spirv::MAGIC_NUMBER {\n                return Err(Error::InvalidHeader);\n            }\n            let version_raw = self.next()?;\n            let generator = self.next()?;\n            let _bound = self.next()?;\n            let _schema = self.next()?;\n            log::info!(\"Generated by {} version {:x}\", generator, version_raw);\n            crate::Module::default()\n        };\n\n        self.layouter.clear();\n        self.dummy_functions = Arena::new();\n        self.lookup_function.clear();\n        self.function_call_graph.clear();\n\n        loop {\n            use spirv::Op;\n\n            let inst = match self.next_inst() {\n                Ok(inst) => inst,\n                Err(Error::IncompleteData) => break,\n                Err(other) => return Err(other),\n            };\n            log::debug!(\"\\t{:?} [{}]\", inst.op, inst.wc);\n\n            match inst.op {\n                Op::Capability => self.parse_capability(inst),\n                Op::Extension => self.parse_extension(inst),\n                Op::ExtInstImport => self.parse_ext_inst_import(inst),\n                Op::MemoryModel => self.parse_memory_model(inst),\n                Op::EntryPoint => self.parse_entry_point(inst),\n                Op::ExecutionMode => self.parse_execution_mode(inst),\n                Op::String => self.parse_string(inst),\n                Op::Source => self.parse_source(inst),\n                Op::SourceExtension => self.parse_source_extension(inst),\n                Op::Name => self.parse_name(inst),\n                Op::MemberName => self.parse_member_name(inst),\n                Op::ModuleProcessed => self.parse_module_processed(inst),\n                Op::Decorate => self.parse_decorate(inst),\n                Op::MemberDecorate => self.parse_member_decorate(inst),\n                Op::TypeVoid => self.parse_type_void(inst),\n                Op::TypeBool => self.parse_type_bool(inst, &mut module),\n                Op::TypeInt => self.parse_type_int(inst, &mut module),\n                Op::TypeFloat => self.parse_type_float(inst, &mut module),\n                Op::TypeVector => self.parse_type_vector(inst, &mut module),\n                Op::TypeMatrix => self.parse_type_matrix(inst, &mut module),\n                Op::TypeFunction => self.parse_type_function(inst),\n                Op::TypePointer => self.parse_type_pointer(inst, &mut module),\n                Op::TypeArray => self.parse_type_array(inst, &mut module),\n                Op::TypeRuntimeArray => self.parse_type_runtime_array(inst, &mut module),\n                Op::TypeStruct => self.parse_type_struct(inst, &mut module),\n                Op::TypeImage => self.parse_type_image(inst, &mut module),\n                Op::TypeSampledImage => self.parse_type_sampled_image(inst),\n                Op::TypeSampler => self.parse_type_sampler(inst, &mut module),\n                Op::Constant | Op::SpecConstant => self.parse_constant(inst, &mut module),\n                Op::ConstantComposite => self.parse_composite_constant(inst, &mut module),\n                Op::ConstantNull | Op::Undef => self.parse_null_constant(inst, &mut module),\n                Op::ConstantTrue => self.parse_bool_constant(inst, true, &mut module),\n                Op::ConstantFalse => self.parse_bool_constant(inst, false, &mut module),\n                Op::Variable => self.parse_global_variable(inst, &mut module),\n                Op::Function => {\n                    self.switch(ModuleState::Function, inst.op)?;\n                    inst.expect(5)?;\n                    self.parse_function(&mut module)\n                }\n                _ => Err(Error::UnsupportedInstruction(self.state, inst.op)), //TODO\n            }?;\n        }\n\n        log::info!(\"Patching...\");\n        {\n            let mut nodes = petgraph::algo::toposort(&self.function_call_graph, None)\n                .map_err(|cycle| Error::FunctionCallCycle(cycle.node_id()))?;\n            nodes.reverse(); // we need dominated first\n            let mut functions = mem::take(&mut module.functions);\n            for fun_id in nodes {\n                if fun_id > !(functions.len() as u32) {\n                    // skip all the fake IDs registered for the entry points\n                    continue;\n                }\n                let lookup = self.lookup_function.get_mut(&fun_id).unwrap();\n                // take out the function from the old array\n                let fun = mem::take(&mut functions[lookup.handle]);\n                // add it to the newly formed arena, and adjust the lookup\n                lookup.handle = module\n                    .functions\n                    .append(fun, functions.get_span(lookup.handle));\n            }\n        }\n        // patch all the functions\n        for (handle, fun) in module.functions.iter_mut() {\n            self.patch_function(Some(handle), fun)?;\n        }\n        for ep in module.entry_points.iter_mut() {\n            self.patch_function(None, &mut ep.function)?;\n        }\n\n        // Check all the images and samplers to have consistent comparison property.\n        for (handle, flags) in self.handle_sampling.drain() {\n            if !image::patch_comparison_type(\n                flags,\n                module.global_variables.get_mut(handle),\n                &mut module.types,\n            ) {\n                return Err(Error::InconsistentComparisonSampling(handle));\n            }\n        }\n\n        if !self.future_decor.is_empty() {\n            log::warn!(\"Unused item decorations: {:?}\", self.future_decor);\n            self.future_decor.clear();\n        }\n        if !self.future_member_decor.is_empty() {\n            log::warn!(\"Unused member decorations: {:?}\", self.future_member_decor);\n            self.future_member_decor.clear();\n        }\n\n        Ok(module)\n    }", "test": "fn test_2() {\n    let data = \"!\\n\";\n    let _result = Frontend::new().parse(&data);\n}"}
{"test_id": "image-rs-image-png/image-rs-image-png-e113d76/tests-gen/decode.inputs.rs::test_68", "code": "fn png_decode (data : & [u8]) -> Result < (Option < png :: OutputInfo > , Vec < u8 >) , () > { let limits = png :: Limits { bytes : 1 << 16 } ; let decoder = png :: Decoder :: new_with_limits (data , limits) ; let mut reader = decoder . read_info () . map_err (| _ | ()) ? ; if reader . info () . raw_bytes () > 5_000_000 { return Err (()) ; } let mut img_data = vec ! [0u8 ; reader . info () . raw_bytes ()] ; let mut last_info = None ; while let Ok (info) = reader . next_frame (& mut img_data) { last_info = Some (info) ; } Ok ((last_info , img_data)) }", "test": "fn test_68() {\n    let data = [\n        137, 80, 78, 71, 13, 10, 26, 10, 0, 0, 0, 13, 73, 72, 68, 82, 0, 0, 0, 32, 0, 0, 0, 32, 2,\n        3, 0, 0, 0, 14, 20, 146, 103, 0, 0, 0, 4, 102, 0, 0, 247, 0, 2, 0, 49, 46,\n    ];\n    let _ = png_decode(&data);\n}"}
{"test_id": "gimli-rs-gimli/gimli-rs-gimli-3947879/tests-gen/eh_frame_hdr.inputs.rs::test_3", "code": "fn parse<R: Reader>(input: &mut R) -> Result<Abbreviations> {\n        let mut abbrevs = Abbreviations::empty();\n\n        while let Some(abbrev) = Abbreviation::parse(input)? {\n            if abbrevs.insert(abbrev).is_err() {\n                return Err(Error::DuplicateAbbreviationCode);\n            }\n        }\n\n        Ok(abbrevs)\n    }", "test": "fn test_3() {\n    let eh_frame_hdr = [10, 8];\n    let eh_frame_hdr = EhFrameHdr::new(eh_frame_hdr, LittleEndian);\n    let bases = BaseAddresses::default()\n        .set_eh_frame(0)\n        .set_eh_frame_hdr(0)\n        .set_text(0)\n        .set_got(0);\n    let address_size = 8;\n    let _ = eh_frame_hdr.parse(&bases, address_size);\n}"}
{"test_id": "cloud-hypervisor-cloud-hypervisor/cloud-hypervisor-cloud-hypervisor-db3a5f3/tests-gen/cmos.inputs.rs::test_39", "code": "fn write(&mut self, _base: u64, offset: u64, data: &[u8]) -> Option<Arc<Barrier>> {\n        if data.len() != 1 {\n            warn!(\"Invalid write size on CMOS device: {}\", data.len());\n            return None;\n        }\n\n        match offset {\n            INDEX_OFFSET => self.index = data[0],\n            DATA_OFFSET => {\n                if self.index == 0x8f && data[0] == 0 {\n                    info!(\"CMOS reset\");\n                    self.reset_evt.write(1).unwrap();\n                    if let Some(vcpus_kill_signalled) = self.vcpus_kill_signalled.take() {\n                        // Spin until we are sure the reset_evt has been handled and that when\n                        // we return from the KVM_RUN we will exit rather than re-enter the guest.\n                        while !vcpus_kill_signalled.load(Ordering::SeqCst) {\n                            // This is more effective than thread::yield_now() at\n                            // avoiding a priority inversion with the VMM thread\n                            thread::sleep(std::time::Duration::from_millis(1));\n                        }\n                    }\n                } else {\n                    self.data[(self.index & INDEX_MASK) as usize] = data[0]\n                }\n            }\n            o => warn!(\"bad write offset on CMOS device: {}\", o),\n        };\n        None\n    }", "test": "fn test_39() {\n    let bytes = [4, 100, 89, 166];\n    if bytes.len() < 16 {\n        return;\n    }\n    let mut below_4g = [0u8; 8];\n    let mut above_4g = [0u8; 8];\n    below_4g.copy_from_slice(&bytes[0..8]);\n    above_4g.copy_from_slice(&bytes[8..16]);\n    let mut cmos = Cmos::new(\n        u64::from_le_bytes(below_4g),\n        u64::from_le_bytes(above_4g),\n        EventFd::new(EFD_NONBLOCK).unwrap(),\n        None,\n    );\n    let mut i = 16;\n    while i < bytes.len() {\n        let read = bytes.get(i).unwrap_or(&0) % 2 == 0;\n        i += 1;\n        if read {\n            let offset = (bytes.get(i).unwrap_or(&0) % 2) as u64;\n            i += 1;\n            let mut out_bytes = vec![0];\n            cmos.read(0, offset, &mut out_bytes);\n        } else {\n            let offset = (bytes.get(i).unwrap_or(&0) % 2) as u64;\n            i += 1;\n            let data = vec![*bytes.get(i).unwrap_or(&0)];\n            i += 1;\n            cmos.write(0, offset, &data);\n        }\n    }\n}"}
{"test_id": "cloud-hypervisor-cloud-hypervisor/cloud-hypervisor-cloud-hypervisor-db3a5f3/tests-gen/pmem.inputs.rs::test_7", "code": "pub fn wait_for_epoll_threads(&mut self) {\n        self.common.wait_for_epoll_threads();\n    }", "test": "fn test_7() {\n    let bytes = [10, 255, 231];\n    if bytes.len() < QUEUE_DATA_SIZE || bytes.len() > (QUEUE_DATA_SIZE + MEM_SIZE) {\n        return;\n    }\n    let mut pmem = create_dummy_pmem();\n    let queue_data = &bytes[..QUEUE_DATA_SIZE];\n    let mem_bytes = &bytes[QUEUE_DATA_SIZE..];\n    let q = setup_virt_queue(queue_data.try_into().unwrap());\n    let mem = GuestMemoryMmap::from_ranges(&[(GuestAddress(0), MEM_SIZE)]).unwrap();\n    if mem.write_slice(mem_bytes, GuestAddress(0 as u64)).is_err() {\n        return;\n    }\n    let guest_memory = GuestMemoryAtomic::new(mem);\n    let evt = EventFd::new(0).unwrap();\n    let queue_evt = unsafe { EventFd::from_raw_fd(libc::dup(evt.as_raw_fd())) };\n    queue_evt.write(1).unwrap();\n    pmem.activate(\n        guest_memory,\n        Arc::new(NoopVirtioInterrupt {}),\n        vec![(0, q, evt)],\n    )\n    .ok();\n    pmem.wait_for_epoll_threads();\n}"}
{"test_id": "gfx-rs-naga/gfx-rs-naga-92e41b4/tests-gen/wgsl_parser.inputs.rs::test_65", "code": "pub fn parse(mut self) -> Result<crate::Module, Error> {\n        let mut module = {\n            if self.next()? != spirv::MAGIC_NUMBER {\n                return Err(Error::InvalidHeader);\n            }\n            let version_raw = self.next()?;\n            let generator = self.next()?;\n            let _bound = self.next()?;\n            let _schema = self.next()?;\n            log::info!(\"Generated by {} version {:x}\", generator, version_raw);\n            crate::Module::default()\n        };\n\n        self.layouter.clear();\n        self.dummy_functions = Arena::new();\n        self.lookup_function.clear();\n        self.function_call_graph.clear();\n\n        loop {\n            use spirv::Op;\n\n            let inst = match self.next_inst() {\n                Ok(inst) => inst,\n                Err(Error::IncompleteData) => break,\n                Err(other) => return Err(other),\n            };\n            log::debug!(\"\\t{:?} [{}]\", inst.op, inst.wc);\n\n            match inst.op {\n                Op::Capability => self.parse_capability(inst),\n                Op::Extension => self.parse_extension(inst),\n                Op::ExtInstImport => self.parse_ext_inst_import(inst),\n                Op::MemoryModel => self.parse_memory_model(inst),\n                Op::EntryPoint => self.parse_entry_point(inst),\n                Op::ExecutionMode => self.parse_execution_mode(inst),\n                Op::String => self.parse_string(inst),\n                Op::Source => self.parse_source(inst),\n                Op::SourceExtension => self.parse_source_extension(inst),\n                Op::Name => self.parse_name(inst),\n                Op::MemberName => self.parse_member_name(inst),\n                Op::ModuleProcessed => self.parse_module_processed(inst),\n                Op::Decorate => self.parse_decorate(inst),\n                Op::MemberDecorate => self.parse_member_decorate(inst),\n                Op::TypeVoid => self.parse_type_void(inst),\n                Op::TypeBool => self.parse_type_bool(inst, &mut module),\n                Op::TypeInt => self.parse_type_int(inst, &mut module),\n                Op::TypeFloat => self.parse_type_float(inst, &mut module),\n                Op::TypeVector => self.parse_type_vector(inst, &mut module),\n                Op::TypeMatrix => self.parse_type_matrix(inst, &mut module),\n                Op::TypeFunction => self.parse_type_function(inst),\n                Op::TypePointer => self.parse_type_pointer(inst, &mut module),\n                Op::TypeArray => self.parse_type_array(inst, &mut module),\n                Op::TypeRuntimeArray => self.parse_type_runtime_array(inst, &mut module),\n                Op::TypeStruct => self.parse_type_struct(inst, &mut module),\n                Op::TypeImage => self.parse_type_image(inst, &mut module),\n                Op::TypeSampledImage => self.parse_type_sampled_image(inst),\n                Op::TypeSampler => self.parse_type_sampler(inst, &mut module),\n                Op::Constant | Op::SpecConstant => self.parse_constant(inst, &mut module),\n                Op::ConstantComposite => self.parse_composite_constant(inst, &mut module),\n                Op::ConstantNull | Op::Undef => self.parse_null_constant(inst, &mut module),\n                Op::ConstantTrue => self.parse_bool_constant(inst, true, &mut module),\n                Op::ConstantFalse => self.parse_bool_constant(inst, false, &mut module),\n                Op::Variable => self.parse_global_variable(inst, &mut module),\n                Op::Function => {\n                    self.switch(ModuleState::Function, inst.op)?;\n                    inst.expect(5)?;\n                    self.parse_function(&mut module)\n                }\n                _ => Err(Error::UnsupportedInstruction(self.state, inst.op)), //TODO\n            }?;\n        }\n\n        log::info!(\"Patching...\");\n        {\n            let mut nodes = petgraph::algo::toposort(&self.function_call_graph, None)\n                .map_err(|cycle| Error::FunctionCallCycle(cycle.node_id()))?;\n            nodes.reverse(); // we need dominated first\n            let mut functions = mem::take(&mut module.functions);\n            for fun_id in nodes {\n                if fun_id > !(functions.len() as u32) {\n                    // skip all the fake IDs registered for the entry points\n                    continue;\n                }\n                let lookup = self.lookup_function.get_mut(&fun_id).unwrap();\n                // take out the function from the old array\n                let fun = mem::take(&mut functions[lookup.handle]);\n                // add it to the newly formed arena, and adjust the lookup\n                lookup.handle = module\n                    .functions\n                    .append(fun, functions.get_span(lookup.handle));\n            }\n        }\n        // patch all the functions\n        for (handle, fun) in module.functions.iter_mut() {\n            self.patch_function(Some(handle), fun)?;\n        }\n        for ep in module.entry_points.iter_mut() {\n            self.patch_function(None, &mut ep.function)?;\n        }\n\n        // Check all the images and samplers to have consistent comparison property.\n        for (handle, flags) in self.handle_sampling.drain() {\n            if !image::patch_comparison_type(\n                flags,\n                module.global_variables.get_mut(handle),\n                &mut module.types,\n            ) {\n                return Err(Error::InconsistentComparisonSampling(handle));\n            }\n        }\n\n        if !self.future_decor.is_empty() {\n            log::warn!(\"Unused item decorations: {:?}\", self.future_decor);\n            self.future_decor.clear();\n        }\n        if !self.future_member_decor.is_empty() {\n            log::warn!(\"Unused member decorations: {:?}\", self.future_member_decor);\n            self.future_member_decor.clear();\n        }\n\n        Ok(module)\n    }", "test": "fn test_65() {\n    let data = \"-\";\n    let _result = Frontend::new().parse(&data);\n}"}
{"test_id": "BurntSushi-memchr/BurntSushi-memchr-f3fde7a/tests-gen/memrchr3.inputs.rs::test_8", "code": "fn count(self) -> usize {\n        self.it.count(|s, e| {\n            // SAFETY: We rely on our generic iterator to return valid start\n            // and end pointers.\n            unsafe { count_raw(self.needle1, s, e) }\n        })\n    }", "test": "fn test_8() {\n    let data = [36, 35];\n    if data.len() < 3 {\n        return;\n    }\n    memchr3_iter(data[0], data[1], data[2], &data[3..]).rev().count();\n}"}
{"test_id": "gimli-rs-gimli/gimli-rs-gimli-3947879/tests-gen/debug_info.inputs.rs::test_13", "code": "pub fn next(&mut self) -> Result<Option<RawLocListEntry<R>>> {\n        if self.input.is_empty() {\n            return Ok(None);\n        }\n\n        match RawLocListEntry::parse(&mut self.input, self.encoding, self.format) {\n            Ok(entry) => {\n                if entry.is_none() {\n                    self.input.empty();\n                }\n                Ok(entry)\n            }\n            Err(e) => {\n                self.input.empty();\n                Err(e)\n            }\n        }\n    }", "test": "fn test_13() {\n    let sections = (\n        [],\n        [\n            224, 26, 253, 255, 255, 255, 255, 255, 255, 255, 255, 254, 255, 45, 255, 43,\n        ],\n    );\n    let (debug_abbrev, debug_info) = sections;\n    let debug_abbrev = DebugAbbrev::new(&debug_abbrev, LittleEndian);\n    let debug_info = DebugInfo::new(&debug_info, LittleEndian);\n    let mut units = debug_info.units();\n    while let Ok(Some(unit)) = units.next() {\n        if let Ok(abbrevs) = unit.abbreviations(&debug_abbrev) {\n            let mut cursor = unit.entries(&abbrevs);\n            while let Ok(Some((_delta, entry))) = cursor.next_dfs() {\n                let mut attrs = entry.attrs();\n                while let Ok(Some(_attr)) = attrs.next() {\n                    continue;\n                }\n            }\n        }\n    }\n}"}
{"test_id": "XAMPPRocky-tokei/XAMPPRocky-tokei-92ddc2e/tests-gen/parse_from_slice_panic.inputs.rs::test_57", "code": "pub fn parse_from_slice (input : FuzzInput , check_total : bool) { let config = & Config { treat_doc_strings_as_comments : Some (input . treat_doc_strings_as_comments) , columns : None , hidden : None , no_ignore : None , no_ignore_parent : None , no_ignore_dot : None , no_ignore_vcs : None , sort : None , types : None , for_each_fn : None , } ; let stats = input . lang . parse_from_slice (input . data , config) ; if check_total { if let Ok (s) = str :: from_utf8 (input . data) { assert ! (stats . lines () <= s . lines () . count () , \"{} got more total lines ({}) than str::lines ({}). Code: {}, Comments: {}, Blanks: {}. treat_doc_strings_as_comments: {}. File contents (as UTF-8):\\n{}\" , input . lang . name () , stats . lines () , s . lines () . count () , stats . code , stats . comments , input . treat_doc_strings_as_comments , stats . blanks , s) } ; } }", "test": "fn test_57() {\n    let data = FuzzInput {\n        lang: ABNF,\n        treat_doc_strings_as_comments: false,\n        data: [0, 0, 0, 0, 0, 255, 255, 254, 0],\n    };\n    parse_from_slice(data, false);\n}"}
{"test_id": "seanmonstar-httparse/seanmonstar-httparse-638848e/tests-gen/parse_request.inputs.rs::test_64", "code": "pub fn parse(&mut self, buf: &'b [u8]) -> Result<usize> {\n        self.parse_with_config(buf, &Default::default())\n    }", "test": "fn test_64() {\n    let data = [8, 8];\n    let mut headers = [httparse::EMPTY_HEADER; 16];\n    let mut req = httparse::Request::new(&mut headers);\n    req.parse(data);\n}"}
{"test_id": "image-rs-image/image-rs-image-e5580ec/tests-gen/fuzzer_script_exr.inputs.rs::test_33", "code": "fn roundtrip (bytes : & [u8]) -> ImageResult < () > { # [doc = \" Read the file from the specified path into an `Rgba32FImage`.\"] fn read_as_rgba_byte_image (read : impl Read + Seek) -> ImageResult < (u32 , u32 , Vec < u8 >) > { let mut decoder = OpenExrDecoder :: with_alpha_preference (read , Some (true)) ? ; match usize :: try_from (decoder . total_bytes ()) { Ok (decoded_size) if decoded_size <= 256 * 1024 * 1024 => { decoder . set_limits (Limits :: default ()) ? ; let (width , height) = decoder . dimensions () ; let mut buffer = vec ! [0 ; decoded_size] ; decoder . read_image (buffer . as_mut_slice ()) ? ; Ok ((width , height , buffer)) } _ => Err (image :: ImageError :: Limits (image :: error :: LimitError :: from_kind (image :: error :: LimitErrorKind :: InsufficientMemory ,) ,)) , } } # [doc = \" Write an `Rgba32FImage`.\"] # [doc = \" Assumes the writer is buffered. In most cases,\"] # [doc = \" you should wrap your writer in a `BufWriter` for best performance.\"] fn write_rgba_image (write : impl Write + Seek , (width , height , data) : & (u32 , u32 , Vec < u8 >) ,) -> ImageResult < () > { OpenExrEncoder :: new (write) . write_image (data . as_slice () , * width , * height , ColorType :: Rgba32F) } let decoded_image = read_as_rgba_byte_image (Cursor :: new (bytes)) ? ; let mut bytes = Vec :: with_capacity (bytes . len () + 20) ; write_rgba_image (Cursor :: new (& mut bytes) , & decoded_image) ? ; let redecoded_image = read_as_rgba_byte_image (Cursor :: new (bytes)) ? ; assert_eq ! (decoded_image , redecoded_image , \"image was valid but was not reproducible\") ; Ok (()) }", "test": "fn test_33() {\n    let data = [255, 255, 39];\n    let _img = roundtrip(data);\n}"}
{"test_id": "dtolnay-syn/dtolnay-syn-b1a038c/tests-gen/create_token_buffer.inputs.rs::test_17", "code": "fn parse_str(self, s: &str) -> Result<Self::Output> {\n        self.parse2(proc_macro2::TokenStream::from_str(s)?)\n    }", "test": "fn test_17() {\n    let data = [8, 121];\n    if data.len() < 300 {\n        if let Ok(string) = str::from_utf8(data) {\n            let _ = immediate_fail.parse_str(string);\n        }\n    }\n}"}
{"test_id": "rustls-rustls/rustls-rustls-ae583bd/tests-gen/server.inputs.rs::test_14", "code": "pub fn process_new_packets(&mut self) -> Result<IoState, Error> {\n        match self {\n            Self::Client(conn) => conn.process_new_packets(),\n            Self::Server(conn) => conn.process_new_packets(),\n        }\n    }", "test": "fn test_14() {\n    let data = [\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 50, 15, 199, 10,\n        239, 16, 176, 28, 0, 45, 0, 2, 1, 1, 0, 35, 0, 0, 22, 3, 3, 0, 37, 16, 0, 0, 33, 32, 174,\n        238, 64, 160, 89, 49, 176, 161, 116, 71, 184, 117, 131, 29, 119, 30, 254, 193, 66, 215, 34,\n        226, 85, 150, 137, 157, 149, 108, 207, 252, 23, 86, 20, 3, 3, 0, 1, 1, 22, 3, 3, 0, 32, 95,\n        94, 179, 244, 73, 139, 102, 175, 65, 93, 186, 57, 105, 115, 213, 72, 207, 171, 68, 112,\n        247, 61, 197, 101, 209, 80, 21, 197, 16, 192, 38, 207, 23, 3, 3, 0, 97, 120, 117, 231, 50,\n        21, 63, 29, 51, 245, 52, 162, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    ];\n    let config = Arc::new(\n        ServerConfig::builder()\n            .with_safe_defaults()\n            .with_no_client_auth()\n            .with_cert_resolver(Arc::new(Fail)),\n    );\n    let mut server = ServerConnection::new(config).unwrap();\n    let _ = server.read_tls(&mut io::Cursor::new(data));\n    let _ = server.process_new_packets();\n}"}
{"test_id": "marshallpierce-rust-base64/marshallpierce-rust-base64-4ef33cc/tests-gen/roundtrip.inputs.rs::test_76", "code": "pub fn decode<T: AsRef<[u8]>>(input: T) -> Result<Vec<u8>, DecodeError> {\n    STANDARD.decode(input)\n}", "test": "fn test_76() {\n    let data = [91, 201];\n    let encoded = STANDARD.encode(data);\n    let decoded = STANDARD.decode(&encoded).unwrap();\n    assert_eq!(data, decoded.as_slice());\n}"}
{"test_id": "BurntSushi-memchr/BurntSushi-memchr-f3fde7a/tests-gen/memchr.inputs.rs::test_9", "code": "fn count(self) -> usize {\n        self.it.count(|s, e| {\n            // SAFETY: We rely on our generic iterator to return valid start\n            // and end pointers.\n            unsafe { count_raw(self.needle1, s, e) }\n        })\n    }", "test": "fn test_9() {\n    let data = [42, 68];\n    if data.is_empty() {\n        return;\n    }\n    memchr_iter(data[0], &data[1..]).count();\n}"}
{"test_id": "image-rs-image-png/image-rs-image-png-e113d76/tests-gen/buf_independent.inputs.rs::test_50", "code": "fn new (inner : R , cap : usize) -> Self { SmalBuf { inner , cap } }", "test": "fn test_50() {\n    let data = [1];\n    let limits = png::Limits { bytes: 1 << 16 };\n    let reference = png::Decoder::new_with_limits(data, limits);\n    let smal = png::Decoder::new_with_limits(SmalBuf::new(data, 1), limits);\n    let _ = png_compare(reference, smal);\n}"}
{"test_id": "gfx-rs-naga/gfx-rs-naga-92e41b4/tests-gen/wgsl_parser.inputs.rs::test_17", "code": "pub fn parse(mut self) -> Result<crate::Module, Error> {\n        let mut module = {\n            if self.next()? != spirv::MAGIC_NUMBER {\n                return Err(Error::InvalidHeader);\n            }\n            let version_raw = self.next()?;\n            let generator = self.next()?;\n            let _bound = self.next()?;\n            let _schema = self.next()?;\n            log::info!(\"Generated by {} version {:x}\", generator, version_raw);\n            crate::Module::default()\n        };\n\n        self.layouter.clear();\n        self.dummy_functions = Arena::new();\n        self.lookup_function.clear();\n        self.function_call_graph.clear();\n\n        loop {\n            use spirv::Op;\n\n            let inst = match self.next_inst() {\n                Ok(inst) => inst,\n                Err(Error::IncompleteData) => break,\n                Err(other) => return Err(other),\n            };\n            log::debug!(\"\\t{:?} [{}]\", inst.op, inst.wc);\n\n            match inst.op {\n                Op::Capability => self.parse_capability(inst),\n                Op::Extension => self.parse_extension(inst),\n                Op::ExtInstImport => self.parse_ext_inst_import(inst),\n                Op::MemoryModel => self.parse_memory_model(inst),\n                Op::EntryPoint => self.parse_entry_point(inst),\n                Op::ExecutionMode => self.parse_execution_mode(inst),\n                Op::String => self.parse_string(inst),\n                Op::Source => self.parse_source(inst),\n                Op::SourceExtension => self.parse_source_extension(inst),\n                Op::Name => self.parse_name(inst),\n                Op::MemberName => self.parse_member_name(inst),\n                Op::ModuleProcessed => self.parse_module_processed(inst),\n                Op::Decorate => self.parse_decorate(inst),\n                Op::MemberDecorate => self.parse_member_decorate(inst),\n                Op::TypeVoid => self.parse_type_void(inst),\n                Op::TypeBool => self.parse_type_bool(inst, &mut module),\n                Op::TypeInt => self.parse_type_int(inst, &mut module),\n                Op::TypeFloat => self.parse_type_float(inst, &mut module),\n                Op::TypeVector => self.parse_type_vector(inst, &mut module),\n                Op::TypeMatrix => self.parse_type_matrix(inst, &mut module),\n                Op::TypeFunction => self.parse_type_function(inst),\n                Op::TypePointer => self.parse_type_pointer(inst, &mut module),\n                Op::TypeArray => self.parse_type_array(inst, &mut module),\n                Op::TypeRuntimeArray => self.parse_type_runtime_array(inst, &mut module),\n                Op::TypeStruct => self.parse_type_struct(inst, &mut module),\n                Op::TypeImage => self.parse_type_image(inst, &mut module),\n                Op::TypeSampledImage => self.parse_type_sampled_image(inst),\n                Op::TypeSampler => self.parse_type_sampler(inst, &mut module),\n                Op::Constant | Op::SpecConstant => self.parse_constant(inst, &mut module),\n                Op::ConstantComposite => self.parse_composite_constant(inst, &mut module),\n                Op::ConstantNull | Op::Undef => self.parse_null_constant(inst, &mut module),\n                Op::ConstantTrue => self.parse_bool_constant(inst, true, &mut module),\n                Op::ConstantFalse => self.parse_bool_constant(inst, false, &mut module),\n                Op::Variable => self.parse_global_variable(inst, &mut module),\n                Op::Function => {\n                    self.switch(ModuleState::Function, inst.op)?;\n                    inst.expect(5)?;\n                    self.parse_function(&mut module)\n                }\n                _ => Err(Error::UnsupportedInstruction(self.state, inst.op)), //TODO\n            }?;\n        }\n\n        log::info!(\"Patching...\");\n        {\n            let mut nodes = petgraph::algo::toposort(&self.function_call_graph, None)\n                .map_err(|cycle| Error::FunctionCallCycle(cycle.node_id()))?;\n            nodes.reverse(); // we need dominated first\n            let mut functions = mem::take(&mut module.functions);\n            for fun_id in nodes {\n                if fun_id > !(functions.len() as u32) {\n                    // skip all the fake IDs registered for the entry points\n                    continue;\n                }\n                let lookup = self.lookup_function.get_mut(&fun_id).unwrap();\n                // take out the function from the old array\n                let fun = mem::take(&mut functions[lookup.handle]);\n                // add it to the newly formed arena, and adjust the lookup\n                lookup.handle = module\n                    .functions\n                    .append(fun, functions.get_span(lookup.handle));\n            }\n        }\n        // patch all the functions\n        for (handle, fun) in module.functions.iter_mut() {\n            self.patch_function(Some(handle), fun)?;\n        }\n        for ep in module.entry_points.iter_mut() {\n            self.patch_function(None, &mut ep.function)?;\n        }\n\n        // Check all the images and samplers to have consistent comparison property.\n        for (handle, flags) in self.handle_sampling.drain() {\n            if !image::patch_comparison_type(\n                flags,\n                module.global_variables.get_mut(handle),\n                &mut module.types,\n            ) {\n                return Err(Error::InconsistentComparisonSampling(handle));\n            }\n        }\n\n        if !self.future_decor.is_empty() {\n            log::warn!(\"Unused item decorations: {:?}\", self.future_decor);\n            self.future_decor.clear();\n        }\n        if !self.future_member_decor.is_empty() {\n            log::warn!(\"Unused member decorations: {:?}\", self.future_member_decor);\n            self.future_member_decor.clear();\n        }\n\n        Ok(module)\n    }", "test": "fn test_17() {\n    let data = \"<\\n\\r\\0\";\n    let _result = Frontend::new().parse(&data);\n}"}
{"test_id": "image-rs-image-gif/image-rs-image-gif-80fd8c0/tests-gen/decode.inputs.rs::test_46", "code": "fn try_decode (data : & [u8]) -> Result < () , gif :: DecodingError > { let mut reader = gif :: Decoder :: new (data) ? ; while let Some (_) = reader . read_next_frame () ? { } Ok (()) }", "test": "fn test_46() {\n    let data = [13, 10, 251, 251];\n    let _ = try_decode(data);\n}"}
{"test_id": "BurntSushi-memchr/BurntSushi-memchr-f3fde7a/tests-gen/memrchr3.inputs.rs::test_78", "code": "fn count(self) -> usize {\n        self.it.count(|s, e| {\n            // SAFETY: We rely on our generic iterator to return valid start\n            // and end pointers.\n            unsafe { count_raw(self.needle1, s, e) }\n        })\n    }", "test": "fn test_78() {\n    let data = [138];\n    if data.len() < 3 {\n        return;\n    }\n    memchr3_iter(data[0], data[1], data[2], &data[3..]).rev().count();\n}"}
{"test_id": "gimli-rs-gimli/gimli-rs-gimli-3947879/tests-gen/eh_frame_hdr.inputs.rs::test_32", "code": "fn parse<R: Reader>(input: &mut R) -> Result<Abbreviations> {\n        let mut abbrevs = Abbreviations::empty();\n\n        while let Some(abbrev) = Abbreviation::parse(input)? {\n            if abbrevs.insert(abbrev).is_err() {\n                return Err(Error::DuplicateAbbreviationCode);\n            }\n        }\n\n        Ok(abbrevs)\n    }", "test": "fn test_32() {\n    let eh_frame_hdr = [10, 10, 8, 14];\n    let eh_frame_hdr = EhFrameHdr::new(eh_frame_hdr, LittleEndian);\n    let bases = BaseAddresses::default()\n        .set_eh_frame(0)\n        .set_eh_frame_hdr(0)\n        .set_text(0)\n        .set_got(0);\n    let address_size = 8;\n    let _ = eh_frame_hdr.parse(&bases, address_size);\n}"}
{"test_id": "BurntSushi-memchr/BurntSushi-memchr-f3fde7a/tests-gen/memmem.inputs.rs::test_64", "code": "pub fn count(&self, haystack: &[u8]) -> usize {\n        // SAFETY: All of our pointers are derived directly from a borrowed\n        // slice, which is guaranteed to be valid.\n        unsafe {\n            let start = haystack.as_ptr();\n            let end = start.add(haystack.len());\n            self.count_raw(start, end)\n        }\n    }", "test": "fn test_64() {\n    let data = [15];\n    if data.len() < 2 {\n        return;\n    }\n    let split = std::cmp::max(data[0] as usize, 1) % data.len() as usize;\n    let (needle, haystack) = (&data[..split], &data[split..]);\n    memmem::find_iter(haystack, needle).count();\n}"}
{"test_id": "rust-bio-rust-bio/rust-bio-rust-bio-319a0d8/tests-gen/banded_aligner.inputs.rs::test_74", "code": "fn validate_alignment_score(al: &Alignment, x: TextSlice, y: TextSlice, scoring: &Scoring<MatchParams>) -> bool {\n    use AlignmentOperation::*;\n    let path = al.path();\n    let mut score = 0;\n    if al.mode==AlignmentMode::Custom {\n        if al.xstart > 0 {\n            score += scoring.xclip_prefix;\n        }\n        if al.ystart > 0 {\n            score += scoring.yclip_prefix;\n        }\n        if al.xend < al.xlen {\n            score += scoring.xclip_suffix;\n        }\n        if al.yend < al.ylen {\n            score += scoring.yclip_suffix;\n        }\n    }\n    let mut last_op = None;\n    for (i, j, op) in path {\n        score += match op {\n            Match | Subst => scoring.match_fn.score(x[i-1], y[j-1]),\n            Del => if last_op==Some(Del) { scoring.gap_extend } else { scoring.gap_open + scoring.gap_extend },\n            Ins => if last_op==Some(Ins) { scoring.gap_extend } else { scoring.gap_open + scoring.gap_extend },\n            _ => 0,\n        };\n        last_op = Some(op);\n    }\n    al.score==score\n}", "test": "fn test_74() {\n    let data = [1, 38, 40, 0];\n    if data.len() < 50 || data.len() > 300 {\n        return;\n    }\n    let (split_byte, data) = data.split_first().unwrap();\n    let (kmer_byte, data) = data.split_first().unwrap();\n    let (window_byte, data) = data.split_first().unwrap();\n    let (match_score_byte, data) = data.split_first().unwrap();\n    let (mismatch_score_byte, data) = data.split_first().unwrap();\n    let (gap_open_byte, data) = data.split_first().unwrap();\n    let (gap_extend_byte, data) = data.split_first().unwrap();\n    let (xclip_prefix_byte, data) = data.split_first().unwrap();\n    let (xclip_suffix_byte, data) = data.split_first().unwrap();\n    let (yclip_prefix_byte, data) = data.split_first().unwrap();\n    let (yclip_suffix_byte, data) = data.split_first().unwrap();\n    let alphabets = b\"ACGT\";\n    let v: Vec<_> = data\n        .iter()\n        .map(|i| alphabets[(*i as usize) % alphabets.len()])\n        .collect();\n    let kmer_len: usize = 5 + (*kmer_byte as usize) % 10;\n    let window_size: usize = 5 + (*window_byte as usize) % 10;\n    let split_pos: usize = min(data.len() - 1, max(*split_byte as usize, 1));\n    let match_score = 1 + (*match_score_byte as i32) % 5;\n    let mismatch_score = -((*mismatch_score_byte as i32) % 10);\n    let gap_open = -((*gap_open_byte as i32) % 20);\n    let gap_extend = -((*gap_extend_byte as i32) % 10);\n    let (x, y) = v.split_at(split_pos);\n    println!(\n        \"x: {}, y: {}, k: {}, w: {}, scoring ({}, {}, {}, {})\",\n        String::from_utf8(x.to_vec()).unwrap(),\n        String::from_utf8(y.to_vec()).unwrap(),\n        kmer_len,\n        window_size,\n        gap_open,\n        gap_extend,\n        match_score,\n        mismatch_score\n    );\n    let base_score = Scoring::from_scores(gap_open, gap_extend, match_score, mismatch_score);\n    {\n        println!(\n            \"Clip scores ({}, {}, {}, {})\",\n            xclip_prefix_byte, xclip_suffix_byte, yclip_prefix_byte, yclip_suffix_byte\n        );\n        let scoring = Scoring {\n            xclip_prefix: -(*xclip_prefix_byte as i32),\n            xclip_suffix: -(*xclip_suffix_byte as i32),\n            yclip_prefix: -(*yclip_prefix_byte as i32),\n            yclip_suffix: -(*yclip_suffix_byte as i32),\n            ..base_score.clone()\n        };\n        let mut b_aligner = banded::Aligner::with_scoring(scoring.clone(), kmer_len, window_size);\n        let b_alignment = b_aligner.custom(x, y);\n        assert!(validate_alignment_score(&b_alignment, x, y, &scoring));\n        let mut f_aligner = pairwise::Aligner::with_scoring(scoring.clone());\n        let f_alignment = f_aligner.custom(x, y);\n        assert!(validate_alignment_score(&f_alignment, x, y, &scoring));\n        let band_all_alignment = b_aligner.custom_with_matches(x, y, &Vec::new());\n        assert_eq!(band_all_alignment.score, f_alignment.score);\n    }\n    {\n        let scoring = Scoring {\n            xclip_prefix: 0,\n            xclip_suffix: 0,\n            yclip_suffix: 0,\n            ..base_score.clone()\n        };\n        let mut b_aligner = banded::Aligner::with_scoring(scoring.clone(), kmer_len, window_size);\n        let b_alignment = b_aligner.custom(x, y);\n        assert_eq!(b_alignment.ystart, 0);\n        assert!(validate_alignment_score(&b_alignment, x, y, &scoring));\n        let mut f_aligner = pairwise::Aligner::with_scoring(scoring.clone());\n        let f_alignment = f_aligner.custom(x, y);\n        assert_eq!(f_alignment.ystart, 0);\n        assert!(validate_alignment_score(&f_alignment, x, y, &scoring));\n        let band_all_alignment = b_aligner.custom_with_matches(x, y, &Vec::new());\n        assert_eq!(band_all_alignment.score, f_alignment.score);\n    }\n    {\n        let scoring = Scoring {\n            xclip_prefix: 0,\n            xclip_suffix: 0,\n            yclip_prefix: 0,\n            ..base_score.clone()\n        };\n        let mut b_aligner = banded::Aligner::with_scoring(scoring.clone(), kmer_len, window_size);\n        let b_alignment = b_aligner.custom(x, y);\n        assert_eq!(b_alignment.yend, b_alignment.ylen);\n        assert!(validate_alignment_score(&b_alignment, x, y, &scoring));\n        let mut f_aligner = pairwise::Aligner::with_scoring(scoring.clone());\n        let f_alignment = f_aligner.custom(x, y);\n        assert_eq!(f_alignment.yend, f_alignment.ylen);\n        assert!(validate_alignment_score(&f_alignment, x, y, &scoring));\n        let band_all_alignment = b_aligner.custom_with_matches(x, y, &Vec::new());\n        assert_eq!(band_all_alignment.score, f_alignment.score);\n    }\n    {\n        let scoring = Scoring {\n            xclip_suffix: 0,\n            yclip_prefix: 0,\n            yclip_suffix: 0,\n            ..base_score.clone()\n        };\n        let mut b_aligner = banded::Aligner::with_scoring(scoring.clone(), kmer_len, window_size);\n        let b_alignment = b_aligner.custom(x, y);\n        assert_eq!(b_alignment.xstart, 0);\n        assert!(validate_alignment_score(&b_alignment, x, y, &scoring));\n        let mut f_aligner = pairwise::Aligner::with_scoring(scoring.clone());\n        let f_alignment = f_aligner.custom(x, y);\n        assert_eq!(f_alignment.xstart, 0);\n        assert!(validate_alignment_score(&f_alignment, x, y, &scoring));\n        let band_all_alignment = b_aligner.custom_with_matches(x, y, &Vec::new());\n        assert_eq!(band_all_alignment.score, f_alignment.score);\n    }\n    {\n        let scoring = Scoring {\n            xclip_prefix: 0,\n            yclip_prefix: 0,\n            yclip_suffix: 0,\n            ..base_score.clone()\n        };\n        let mut b_aligner = banded::Aligner::with_scoring(scoring.clone(), kmer_len, window_size);\n        let b_alignment = b_aligner.custom(x, y);\n        assert_eq!(b_alignment.xend, b_alignment.xlen);\n        assert!(validate_alignment_score(&b_alignment, x, y, &scoring));\n        let mut f_aligner = pairwise::Aligner::with_scoring(scoring.clone());\n        let f_alignment = f_aligner.custom(x, y);\n        assert_eq!(f_alignment.xend, f_alignment.xlen);\n        assert!(validate_alignment_score(&f_alignment, x, y, &scoring));\n        let band_all_alignment = b_aligner.custom_with_matches(x, y, &Vec::new());\n        assert_eq!(band_all_alignment.score, f_alignment.score);\n    }\n    {\n        let mut aligner = banded::Aligner::with_scoring(base_score.clone(), kmer_len, window_size);\n        let alignment = aligner.local(x, y);\n        assert!(alignment.score >= 0);\n        assert!(validate_alignment_score(&alignment, x, y, &base_score));\n        let alignment = aligner.semiglobal(x, y);\n        assert_eq!(alignment.xstart, 0);\n        assert_eq!(alignment.xend, alignment.xlen);\n        assert!(validate_alignment_score(&alignment, x, y, &base_score));\n        let alignment = aligner.global(x, y);\n        assert_eq!(alignment.xstart, 0);\n        assert_eq!(alignment.xend, alignment.xlen);\n        assert_eq!(alignment.ystart, 0);\n        assert_eq!(alignment.yend, alignment.ylen);\n        assert!(validate_alignment_score(&alignment, x, y, &base_score));\n    }\n    {\n        let mut aligner = pairwise::Aligner::with_scoring(base_score.clone());\n        let alignment = aligner.local(x, y);\n        assert!(alignment.score >= 0);\n        assert!(validate_alignment_score(&alignment, x, y, &base_score));\n        let alignment = aligner.semiglobal(x, y);\n        assert_eq!(alignment.xstart, 0);\n        assert_eq!(alignment.xend, alignment.xlen);\n        assert!(validate_alignment_score(&alignment, x, y, &base_score));\n        let alignment = aligner.global(x, y);\n        assert_eq!(alignment.xstart, 0);\n        assert_eq!(alignment.xend, alignment.xlen);\n        assert_eq!(alignment.ystart, 0);\n        assert_eq!(alignment.yend, alignment.ylen);\n        assert!(validate_alignment_score(&alignment, x, y, &base_score));\n    }\n}"}
{"test_id": "marshallpierce-rust-base64/marshallpierce-rust-base64-4ef33cc/tests-gen/roundtrip.inputs.rs::test_1", "code": "pub fn decode<T: AsRef<[u8]>>(input: T) -> Result<Vec<u8>, DecodeError> {\n    STANDARD.decode(input)\n}", "test": "fn test_1() {\n    let data = [61, 10];\n    let encoded = STANDARD.encode(data);\n    let decoded = STANDARD.decode(&encoded).unwrap();\n    assert_eq!(data, decoded.as_slice());\n}"}
{"test_id": "cloud-hypervisor-cloud-hypervisor/cloud-hypervisor-cloud-hypervisor-db3a5f3/tests-gen/balloon.inputs.rs::test_99", "code": "pub fn wait_for_epoll_threads(&mut self) {\n        self.common.wait_for_epoll_threads();\n    }", "test": "fn test_99() {\n    let bytes = [8, 157, 157, 57];\n    if bytes.len() < QUEUE_DATA_SIZE * QUEUE_NUM\n        || bytes.len() > (QUEUE_DATA_SIZE * QUEUE_NUM + MEM_SIZE)\n    {\n        return;\n    }\n    let mut balloon = virtio_devices::Balloon::new(\n        \"fuzzer_balloon\".to_owned(),\n        BALLOON_SIZE,\n        true,\n        true,\n        SeccompAction::Allow,\n        EventFd::new(EFD_NONBLOCK).unwrap(),\n        None,\n    )\n    .unwrap();\n    let queue_data = &bytes[..QUEUE_DATA_SIZE * QUEUE_NUM];\n    let mem_bytes = &bytes[QUEUE_DATA_SIZE * QUEUE_NUM..];\n    let mem = GuestMemoryMmap::from_ranges(&[(GuestAddress(0), MEM_SIZE)]).unwrap();\n    if mem.write_slice(mem_bytes, GuestAddress(0 as u64)).is_err() {\n        return;\n    }\n    let guest_memory = GuestMemoryAtomic::new(mem);\n    let mut queues = setup_virt_queues(\n        &[\n            &queue_data[..QUEUE_DATA_SIZE].try_into().unwrap(),\n            &queue_data[QUEUE_DATA_SIZE..QUEUE_DATA_SIZE * 2]\n                .try_into()\n                .unwrap(),\n            &queue_data[QUEUE_DATA_SIZE * 2..QUEUE_DATA_SIZE * 3]\n                .try_into()\n                .unwrap(),\n        ],\n        0,\n    );\n    let inflate_q = queues.remove(0);\n    let inflate_evt = EventFd::new(0).unwrap();\n    let inflate_queue_evt = unsafe { EventFd::from_raw_fd(libc::dup(inflate_evt.as_raw_fd())) };\n    let deflate_q = queues.remove(0);\n    let deflate_evt = EventFd::new(0).unwrap();\n    let deflate_queue_evt = unsafe { EventFd::from_raw_fd(libc::dup(deflate_evt.as_raw_fd())) };\n    let reporting_q = queues.remove(0);\n    let reporting_evt = EventFd::new(0).unwrap();\n    let reporting_queue_evt = unsafe { EventFd::from_raw_fd(libc::dup(reporting_evt.as_raw_fd())) };\n    inflate_queue_evt.write(1).unwrap();\n    deflate_queue_evt.write(1).unwrap();\n    reporting_queue_evt.write(1).unwrap();\n    balloon\n        .activate(\n            guest_memory,\n            Arc::new(NoopVirtioInterrupt {}),\n            vec![\n                (0, inflate_q, inflate_evt),\n                (1, deflate_q, deflate_evt),\n                (2, reporting_q, reporting_evt),\n            ],\n        )\n        .ok();\n    balloon.wait_for_epoll_threads();\n}"}
{"test_id": "XAMPPRocky-tokei/XAMPPRocky-tokei-92ddc2e/tests-gen/parse_from_slice_total.inputs.rs::test_11", "code": "pub fn parse_from_slice (input : FuzzInput , check_total : bool) { let config = & Config { treat_doc_strings_as_comments : Some (input . treat_doc_strings_as_comments) , columns : None , hidden : None , no_ignore : None , no_ignore_parent : None , no_ignore_dot : None , no_ignore_vcs : None , sort : None , types : None , for_each_fn : None , } ; let stats = input . lang . parse_from_slice (input . data , config) ; if check_total { if let Ok (s) = str :: from_utf8 (input . data) { assert ! (stats . lines () <= s . lines () . count () , \"{} got more total lines ({}) than str::lines ({}). Code: {}, Comments: {}, Blanks: {}. treat_doc_strings_as_comments: {}. File contents (as UTF-8):\\n{}\" , input . lang . name () , stats . lines () , s . lines () . count () , stats . code , stats . comments , input . treat_doc_strings_as_comments , stats . blanks , s) } ; } }", "test": "fn test_11() {\n    let data = FuzzInput {\n        lang: Zsh,\n        treat_doc_strings_as_comments: true,\n        data: [255, 10, 255, 255, 255, 255, 255, 255],\n    };\n    parse_from_slice(data, true);\n}"}
{"test_id": "image-rs-image-gif/image-rs-image-gif-80fd8c0/tests-gen/decode.inputs.rs::test_87", "code": "fn try_decode (data : & [u8]) -> Result < () , gif :: DecodingError > { let mut reader = gif :: Decoder :: new (data) ? ; while let Some (_) = reader . read_next_frame () ? { } Ok (()) }", "test": "fn test_87() {\n    let data = [241, 245, 2];\n    let _ = try_decode(data);\n}"}
{"test_id": "zip-rs-zip/zip-rs-zip-ed187d6/tests-gen/fuzz_read.inputs.rs::test_72", "code": "fn decompress_all (data : & [u8]) -> Result < () , Box < dyn std :: error :: Error > > { let reader = std :: io :: Cursor :: new (data) ; let mut zip = zip :: ZipArchive :: new (reader) ? ; for i in 0 .. zip . len () { let mut file = zip . by_index (i) ? ; if file . size () < 1 << 20 { let _ = std :: io :: copy (& mut file , & mut std :: io :: sink ()) ; } } Ok (()) }", "test": "fn test_72() {\n    let data = [10, 92];\n    let _ = decompress_all(data);\n}"}
{"test_id": "BurntSushi-memchr/BurntSushi-memchr-f3fde7a/tests-gen/memrmem.inputs.rs::test_33", "code": "pub fn count(&self, haystack: &[u8]) -> usize {\n        // SAFETY: All of our pointers are derived directly from a borrowed\n        // slice, which is guaranteed to be valid.\n        unsafe {\n            let start = haystack.as_ptr();\n            let end = start.add(haystack.len());\n            self.count_raw(start, end)\n        }\n    }", "test": "fn test_33() {\n    let data = [144, 23];\n    if data.len() < 2 {\n        return;\n    }\n    let split = std::cmp::max(data[0] as usize, 1) % data.len() as usize;\n    let (needle, haystack) = (&data[..split], &data[split..]);\n    memmem::rfind_iter(haystack, needle).count();\n}"}
{"test_id": "XAMPPRocky-tokei/XAMPPRocky-tokei-92ddc2e/tests-gen/parse_from_slice_total.inputs.rs::test_78", "code": "pub fn parse_from_slice (input : FuzzInput , check_total : bool) { let config = & Config { treat_doc_strings_as_comments : Some (input . treat_doc_strings_as_comments) , columns : None , hidden : None , no_ignore : None , no_ignore_parent : None , no_ignore_dot : None , no_ignore_vcs : None , sort : None , types : None , for_each_fn : None , } ; let stats = input . lang . parse_from_slice (input . data , config) ; if check_total { if let Ok (s) = str :: from_utf8 (input . data) { assert ! (stats . lines () <= s . lines () . count () , \"{} got more total lines ({}) than str::lines ({}). Code: {}, Comments: {}, Blanks: {}. treat_doc_strings_as_comments: {}. File contents (as UTF-8):\\n{}\" , input . lang . name () , stats . lines () , s . lines () . count () , stats . code , stats . comments , input . treat_doc_strings_as_comments , stats . blanks , s) } ; } }", "test": "fn test_78() {\n    let data = FuzzInput {\n        lang: Zsh,\n        treat_doc_strings_as_comments: true,\n        data: [255, 255, 255, 255, 255, 255, 255, 255],\n    };\n    parse_from_slice(data, true);\n}"}
{"test_id": "marshallpierce-rust-base64/marshallpierce-rust-base64-4ef33cc/tests-gen/roundtrip.inputs.rs::test_74", "code": "pub fn decode<T: AsRef<[u8]>>(input: T) -> Result<Vec<u8>, DecodeError> {\n    STANDARD.decode(input)\n}", "test": "fn test_74() {\n    let data = [8, 205];\n    let encoded = STANDARD.encode(data);\n    let decoded = STANDARD.decode(&encoded).unwrap();\n    assert_eq!(data, decoded.as_slice());\n}"}
{"test_id": "gimli-rs-gimli/gimli-rs-gimli-3947879/tests-gen/debug_line.inputs.rs::test_77", "code": "pub fn next_row(&mut self) -> Result<Option<(&LineProgramHeader<R, Offset>, &LineRow)>> {\n        // Perform any reset that was required after copying the previous row.\n        self.row.reset(self.program.header());\n\n        loop {\n            // Split the borrow here, rather than calling `self.header()`.\n            match self.instructions.next_instruction(self.program.header()) {\n                Err(err) => return Err(err),\n                Ok(None) => return Ok(None),\n                Ok(Some(instruction)) => {\n                    if self.row.execute(instruction, &mut self.program) {\n                        if self.row.tombstone {\n                            // Perform any reset that was required for the tombstone row.\n                            // Normally this is done when `next_row` is called again, but for\n                            // tombstones we loop immediately.\n                            self.row.reset(self.program.header());\n                        } else {\n                            return Ok(Some((self.header(), &self.row)));\n                        }\n                    }\n                    // Fall through, parse the next instruction, and see if that\n                    // yields a row.\n                }\n            }\n        }\n    }", "test": "fn test_77() {\n    let debug_line = [126, 178, 91, 26];\n    let debug_line = DebugLine::new(&debug_line, LittleEndian);\n    let offset = DebugLineOffset(0);\n    let address_size = 8;\n    if let Ok(program) = debug_line.program(offset, address_size, None, None) {\n        let mut rows = program.rows();\n        while let Ok(Some(row)) = rows.next_row() {\n            let _ = row;\n        }\n    }\n}"}
{"test_id": "dtolnay-syn/dtolnay-syn-b1a038c/tests-gen/create_token_buffer.inputs.rs::test_10", "code": "fn parse_str(self, s: &str) -> Result<Self::Output> {\n        self.parse2(proc_macro2::TokenStream::from_str(s)?)\n    }", "test": "fn test_10() {\n    let data = [8, 112];\n    if data.len() < 300 {\n        if let Ok(string) = str::from_utf8(data) {\n            let _ = immediate_fail.parse_str(string);\n        }\n    }\n}"}
{"test_id": "cloud-hypervisor-cloud-hypervisor/cloud-hypervisor-cloud-hypervisor-db3a5f3/tests-gen/cmos.inputs.rs::test_75", "code": "fn write(&mut self, _base: u64, offset: u64, data: &[u8]) -> Option<Arc<Barrier>> {\n        if data.len() != 1 {\n            warn!(\"Invalid write size on CMOS device: {}\", data.len());\n            return None;\n        }\n\n        match offset {\n            INDEX_OFFSET => self.index = data[0],\n            DATA_OFFSET => {\n                if self.index == 0x8f && data[0] == 0 {\n                    info!(\"CMOS reset\");\n                    self.reset_evt.write(1).unwrap();\n                    if let Some(vcpus_kill_signalled) = self.vcpus_kill_signalled.take() {\n                        // Spin until we are sure the reset_evt has been handled and that when\n                        // we return from the KVM_RUN we will exit rather than re-enter the guest.\n                        while !vcpus_kill_signalled.load(Ordering::SeqCst) {\n                            // This is more effective than thread::yield_now() at\n                            // avoiding a priority inversion with the VMM thread\n                            thread::sleep(std::time::Duration::from_millis(1));\n                        }\n                    }\n                } else {\n                    self.data[(self.index & INDEX_MASK) as usize] = data[0]\n                }\n            }\n            o => warn!(\"bad write offset on CMOS device: {}\", o),\n        };\n        None\n    }", "test": "fn test_75() {\n    let bytes = [10, 10];\n    if bytes.len() < 16 {\n        return;\n    }\n    let mut below_4g = [0u8; 8];\n    let mut above_4g = [0u8; 8];\n    below_4g.copy_from_slice(&bytes[0..8]);\n    above_4g.copy_from_slice(&bytes[8..16]);\n    let mut cmos = Cmos::new(\n        u64::from_le_bytes(below_4g),\n        u64::from_le_bytes(above_4g),\n        EventFd::new(EFD_NONBLOCK).unwrap(),\n        None,\n    );\n    let mut i = 16;\n    while i < bytes.len() {\n        let read = bytes.get(i).unwrap_or(&0) % 2 == 0;\n        i += 1;\n        if read {\n            let offset = (bytes.get(i).unwrap_or(&0) % 2) as u64;\n            i += 1;\n            let mut out_bytes = vec![0];\n            cmos.read(0, offset, &mut out_bytes);\n        } else {\n            let offset = (bytes.get(i).unwrap_or(&0) % 2) as u64;\n            i += 1;\n            let data = vec![*bytes.get(i).unwrap_or(&0)];\n            i += 1;\n            cmos.write(0, offset, &data);\n        }\n    }\n}"}
{"test_id": "bodil-im-rs/bodil-im-rs-2afaf54/tests-gen/ordset.inputs.rs::test_77", "code": "pub fn remove<BA>(&mut self, a: &BA) -> Option<A>\n    where\n        BA: Hash + Eq + ?Sized,\n        A: Borrow<BA>,\n    {\n        let root = PoolRef::make_mut(&self.pool.0, &mut self.root);\n        let result = root.remove(&self.pool.0, hash_key(&*self.hasher, a), 0, a);\n        if result.is_some() {\n            self.size -= 1;\n        }\n        result.map(|v| v.0)\n    }", "test": "fn test_77() {\n    let actions = [Remove(18446473641093758975)];\n    let mut set = OrdSet::new();\n    let mut nat = NatSet::new();\n    for action in actions {\n        match action {\n            Action::Insert(value) => {\n                let len = nat.len() + if nat.contains(&value) { 0 } else { 1 };\n                nat.insert(value);\n                set.insert(value);\n                assert_eq!(len, set.len());\n            }\n            Action::Remove(value) => {\n                let len = nat.len() - if nat.contains(&value) { 1 } else { 0 };\n                nat.remove(&value);\n                set.remove(&value);\n                assert_eq!(len, set.len());\n            }\n        }\n        assert_eq!(nat.len(), set.len());\n        assert_eq!(OrdSet::from(nat.clone()), set);\n    }\n}"}
{"test_id": "marshallpierce-rust-base64/marshallpierce-rust-base64-4ef33cc/tests-gen/roundtrip_no_pad.inputs.rs::test_25", "code": "fn decode<T: AsRef<[u8]>>(&self, input: T) -> Result<Vec<u8>, DecodeError> {\n        fn inner<E>(engine: &E, input_bytes: &[u8]) -> Result<Vec<u8>, DecodeError>\n        where\n            E: Engine + ?Sized,\n        {\n            let estimate = engine.internal_decoded_len_estimate(input_bytes.len());\n            let mut buffer = vec![0; estimate.decoded_len_estimate()];\n\n            let bytes_written = engine\n                .internal_decode(input_bytes, &mut buffer, estimate)?\n                .decoded_len;\n\n            buffer.truncate(bytes_written);\n\n            Ok(buffer)\n        }\n\n        inner(self, input.as_ref())\n    }", "test": "fn test_25() {\n    let data = [45, 5, 41];\n    let config = general_purpose::GeneralPurposeConfig::new()\n        .with_encode_padding(false)\n        .with_decode_padding_mode(engine::DecodePaddingMode::RequireNone);\n    let engine = general_purpose::GeneralPurpose::new(&base64::alphabet::STANDARD, config);\n    let encoded = engine.encode(data);\n    let decoded = engine.decode(&encoded).unwrap();\n    assert_eq!(data, decoded.as_slice());\n}"}
{"test_id": "winnow-rs-winnow/winnow-rs-winnow-9e88734/tests-gen/fuzz_arithmetic.inputs.rs::test_21", "code": "fn factor(i: &mut &str) -> PResult<Expr> {\n    delimited(\n        multispaces,\n        alt((digits.try_map(FromStr::from_str).map(Expr::Value), parens)),\n        multispaces,\n    )\n    .parse_next(i)\n}", "test": "fn test_21() {\n    let data = [1, 0, 0, 35];\n    reset();\n    let _ = match str::from_utf8(data) {\n        Ok(mut v) => factor(&mut v),\n        Err(_) => factor(&mut \"2\"),\n    };\n}"}
{"test_id": "XAMPPRocky-tokei/XAMPPRocky-tokei-92ddc2e/tests-gen/parse_from_slice_total.inputs.rs::test_45", "code": "pub fn parse_from_slice (input : FuzzInput , check_total : bool) { let config = & Config { treat_doc_strings_as_comments : Some (input . treat_doc_strings_as_comments) , columns : None , hidden : None , no_ignore : None , no_ignore_parent : None , no_ignore_dot : None , no_ignore_vcs : None , sort : None , types : None , for_each_fn : None , } ; let stats = input . lang . parse_from_slice (input . data , config) ; if check_total { if let Ok (s) = str :: from_utf8 (input . data) { assert ! (stats . lines () <= s . lines () . count () , \"{} got more total lines ({}) than str::lines ({}). Code: {}, Comments: {}, Blanks: {}. treat_doc_strings_as_comments: {}. File contents (as UTF-8):\\n{}\" , input . lang . name () , stats . lines () , s . lines () . count () , stats . code , stats . comments , input . treat_doc_strings_as_comments , stats . blanks , s) } ; } }", "test": "fn test_45() {\n    let data = FuzzInput {\n        lang: Zsh,\n        treat_doc_strings_as_comments: true,\n        data: [255, 255, 255, 255, 39, 255, 255, 255, 255],\n    };\n    parse_from_slice(data, true);\n}"}
{"test_id": "gimli-rs-gimli/gimli-rs-gimli-3947879/tests-gen/debug_aranges.inputs.rs::test_18", "code": "pub fn next(&mut self) -> Result<Option<UnitHeader<R>>> {\n        if self.input.is_empty() {\n            Ok(None)\n        } else {\n            let len = self.input.len();\n            match parse_unit_header(&mut self.input, self.offset.into()) {\n                Ok(header) => {\n                    self.offset.0 += len - self.input.len();\n                    Ok(Some(header))\n                }\n                Err(e) => {\n                    self.input.empty();\n                    Err(e)\n                }\n            }\n        }\n    }", "test": "fn test_18() {\n    let debug_aranges = [0, 2];\n    let debug_aranges = DebugAranges::new(&debug_aranges, LittleEndian);\n    let mut headers = debug_aranges.headers();\n    while let Ok(Some(header)) = headers.next() {\n        let mut entries = header.entries();\n        while let Ok(Some(_entry)) = entries.next() {\n            continue;\n        }\n    }\n}"}
{"test_id": "gimli-rs-gimli/gimli-rs-gimli-3947879/tests-gen/eh_frame.inputs.rs::test_12", "code": "pub fn next_row(&mut self) -> Result<Option<(&LineProgramHeader<R, Offset>, &LineRow)>> {\n        // Perform any reset that was required after copying the previous row.\n        self.row.reset(self.program.header());\n\n        loop {\n            // Split the borrow here, rather than calling `self.header()`.\n            match self.instructions.next_instruction(self.program.header()) {\n                Err(err) => return Err(err),\n                Ok(None) => return Ok(None),\n                Ok(Some(instruction)) => {\n                    if self.row.execute(instruction, &mut self.program) {\n                        if self.row.tombstone {\n                            // Perform any reset that was required for the tombstone row.\n                            // Normally this is done when `next_row` is called again, but for\n                            // tombstones we loop immediately.\n                            self.row.reset(self.program.header());\n                        } else {\n                            return Ok(Some((self.header(), &self.row)));\n                        }\n                    }\n                    // Fall through, parse the next instruction, and see if that\n                    // yields a row.\n                }\n            }\n        }\n    }", "test": "fn test_12() {\n    let eh_frame = [10, 211, 96];\n    let eh_frame = EhFrame::new(&eh_frame, LittleEndian);\n    let mut ctx = Box::new(UnwindContext::new());\n    let bases = BaseAddresses::default()\n        .set_eh_frame(0)\n        .set_eh_frame_hdr(0)\n        .set_text(0)\n        .set_got(0);\n    let mut entries = eh_frame.entries(&bases);\n    while let Ok(Some(entry)) = entries.next() {\n        match entry {\n            CieOrFde::Cie(_) => continue,\n            CieOrFde::Fde(partial) => {\n                if let Ok(fde) = partial.parse(EhFrame::cie_from_offset) {\n                    if let Ok(mut table) = fde.rows(&eh_frame, &bases, &mut ctx) {\n                        while let Ok(Some(_row)) = table.next_row() {\n                            continue;\n                        }\n                    }\n                }\n            }\n        };\n    }\n}"}
{"test_id": "tafia-calamine/tafia-calamine-5a5804d/tests-gen/fuzz_all.inputs.rs::test_9", "code": "fn count<R: Reader<BufReader<File>>>(path: &str) -> usize {\n    let path = format!(\"{}/{}\", env!(\"CARGO_MANIFEST_DIR\"), path);\n    let mut excel: R = open_workbook(&path).expect(\"cannot open excel file\");\n\n    let sheets = excel.sheet_names().to_owned();\n    let mut count = 0;\n    for s in sheets {\n        count += excel\n            .worksheet_range(&s)\n            .unwrap()\n            .unwrap()\n            .rows()\n            .flat_map(|r| r.iter())\n            .count();\n    }\n    count\n}", "test": "fn test_9() {\n    let data = [138];\n    let file_name = \"fuzz.xlsx\";\n    if let Ok(mut file) = File::create(file_name) {\n        if file.write_all(data).is_err() {\n            return;\n        }\n    }\n    let mut workbook: Xlsx<_> = match open_workbook(file_name) {\n        Ok(excel) => excel,\n        Err(_) => return,\n    };\n    for worksheet in workbook.worksheets() {\n        if let Some(Ok(range)) = workbook.worksheet_range(&worksheet.0) {\n            let _ = range.get_size().0 * range.get_size().1;\n            range.used_cells().count();\n        }\n    }\n    if let Some(Ok(mut vba)) = workbook.vba_project() {\n        let vba = vba.to_mut();\n        for module_name in vba.get_module_names() {\n            if vba.get_module(module_name).is_ok() {\n                for r in vba.get_references() {\n                    r.is_missing();\n                }\n            }\n        }\n    }\n    let sheets = workbook.sheet_names().to_owned();\n    for s in sheets {\n        if let Some(Ok(formula)) = workbook.worksheet_formula(&s) {\n            formula\n                .rows()\n                .flat_map(|r| r.iter().filter(|f| !f.is_empty()))\n                .count();\n        }\n    }\n}"}
{"test_id": "image-rs-image/image-rs-image-e5580ec/tests-gen/fuzzer_script_exr.inputs.rs::test_75", "code": "fn roundtrip (bytes : & [u8]) -> ImageResult < () > { # [doc = \" Read the file from the specified path into an `Rgba32FImage`.\"] fn read_as_rgba_byte_image (read : impl Read + Seek) -> ImageResult < (u32 , u32 , Vec < u8 >) > { let mut decoder = OpenExrDecoder :: with_alpha_preference (read , Some (true)) ? ; match usize :: try_from (decoder . total_bytes ()) { Ok (decoded_size) if decoded_size <= 256 * 1024 * 1024 => { decoder . set_limits (Limits :: default ()) ? ; let (width , height) = decoder . dimensions () ; let mut buffer = vec ! [0 ; decoded_size] ; decoder . read_image (buffer . as_mut_slice ()) ? ; Ok ((width , height , buffer)) } _ => Err (image :: ImageError :: Limits (image :: error :: LimitError :: from_kind (image :: error :: LimitErrorKind :: InsufficientMemory ,) ,)) , } } # [doc = \" Write an `Rgba32FImage`.\"] # [doc = \" Assumes the writer is buffered. In most cases,\"] # [doc = \" you should wrap your writer in a `BufWriter` for best performance.\"] fn write_rgba_image (write : impl Write + Seek , (width , height , data) : & (u32 , u32 , Vec < u8 >) ,) -> ImageResult < () > { OpenExrEncoder :: new (write) . write_image (data . as_slice () , * width , * height , ColorType :: Rgba32F) } let decoded_image = read_as_rgba_byte_image (Cursor :: new (bytes)) ? ; let mut bytes = Vec :: with_capacity (bytes . len () + 20) ; write_rgba_image (Cursor :: new (& mut bytes) , & decoded_image) ? ; let redecoded_image = read_as_rgba_byte_image (Cursor :: new (bytes)) ? ; assert_eq ! (decoded_image , redecoded_image , \"image was valid but was not reproducible\") ; Ok (()) }", "test": "fn test_75() {\n    let data = [138, 39, 10];\n    let _img = roundtrip(data);\n}"}
{"test_id": "cloud-hypervisor-cloud-hypervisor/cloud-hypervisor-cloud-hypervisor-db3a5f3/tests-gen/mem.inputs.rs::test_95", "code": "pub fn wait_for_epoll_threads(&mut self) {\n        self.common.wait_for_epoll_threads();\n    }", "test": "fn test_95() {\n    let bytes = [10, 10, 42];\n    if bytes.len() < VIRTIO_MEM_DATA_SIZE + QUEUE_DATA_SIZE + QUEUE_BYTES_SIZE\n        || bytes.len() > (VIRTIO_MEM_DATA_SIZE + QUEUE_DATA_SIZE + QUEUE_BYTES_SIZE + MEM_SIZE)\n    {\n        return;\n    }\n    let virtio_mem_data = &bytes[..VIRTIO_MEM_DATA_SIZE];\n    let queue_data = &bytes[VIRTIO_MEM_DATA_SIZE..VIRTIO_MEM_DATA_SIZE + QUEUE_DATA_SIZE];\n    let queue_bytes = &bytes[VIRTIO_MEM_DATA_SIZE + QUEUE_DATA_SIZE\n        ..VIRTIO_MEM_DATA_SIZE + QUEUE_DATA_SIZE + QUEUE_BYTES_SIZE];\n    let mem_bytes = &bytes[VIRTIO_MEM_DATA_SIZE + QUEUE_DATA_SIZE + QUEUE_BYTES_SIZE..];\n    let (mut virtio_mem, virtio_mem_region) =\n        create_dummy_virtio_mem(virtio_mem_data.try_into().unwrap());\n    let q = setup_virt_queue(queue_data.try_into().unwrap());\n    let mem =\n        GuestMemoryMmap::from_ranges(&[(GuestAddress(DESC_TABLE_ADDR), QUEUE_BYTES_SIZE)]).unwrap();\n    if mem\n        .write_slice(queue_bytes, GuestAddress(DESC_TABLE_ADDR))\n        .is_err()\n    {\n        return;\n    }\n    let mem = mem.insert_region(virtio_mem_region).unwrap();\n    if mem\n        .write_slice(mem_bytes, GuestAddress(VIRTIO_MEM_REGION_ADDRESS))\n        .is_err()\n    {\n        return;\n    }\n    let guest_memory = GuestMemoryAtomic::new(mem);\n    let evt = EventFd::new(0).unwrap();\n    let queue_evt = unsafe { EventFd::from_raw_fd(libc::dup(evt.as_raw_fd())) };\n    queue_evt.write(1).unwrap();\n    virtio_mem\n        .activate(\n            guest_memory,\n            Arc::new(NoopVirtioInterrupt {}),\n            vec![(0, q, evt)],\n        )\n        .ok();\n    virtio_mem.wait_for_epoll_threads();\n}"}
{"test_id": "image-rs-image/image-rs-image-e5580ec/tests-gen/fuzzer_script_tga.inputs.rs::test_96", "code": "fn decode(encoded: &[u8]) -> Vec<u8> {\n        let decoder = JpegDecoder::new(Cursor::new(encoded)).expect(\"Could not decode image\");\n\n        let mut decoded = vec![0; decoder.total_bytes() as usize];\n        decoder\n            .read_image(&mut decoded)\n            .expect(\"Could not decode image\");\n        decoded\n    }", "test": "fn test_96() {\n    let data = [10, 10, 34];\n    let _ = decode(data);\n}"}
{"test_id": "BurntSushi-memchr/BurntSushi-memchr-f3fde7a/tests-gen/memrchr.inputs.rs::test_1", "code": "fn count(self) -> usize {\n        self.it.count(|s, e| {\n            // SAFETY: We rely on our generic iterator to return valid start\n            // and end pointers.\n            unsafe { count_raw(self.needle1, s, e) }\n        })\n    }", "test": "fn test_1() {\n    let data = [10, 10];\n    if data.is_empty() {\n        return;\n    }\n    memchr_iter(data[0], &data[1..]).rev().count();\n}"}
{"test_id": "gimli-rs-gimli/gimli-rs-gimli-3947879/tests-gen/debug_info.inputs.rs::test_90", "code": "pub fn next(&mut self) -> Result<Option<RawLocListEntry<R>>> {\n        if self.input.is_empty() {\n            return Ok(None);\n        }\n\n        match RawLocListEntry::parse(&mut self.input, self.encoding, self.format) {\n            Ok(entry) => {\n                if entry.is_none() {\n                    self.input.empty();\n                }\n                Ok(entry)\n            }\n            Err(e) => {\n                self.input.empty();\n                Err(e)\n            }\n        }\n    }", "test": "fn test_90() {\n    let sections = (\n        [],\n        [\n            5, 0, 255, 255, 255, 255, 255, 255, 255, 255, 255, 1, 255, 255, 255, 255,\n        ],\n    );\n    let (debug_abbrev, debug_info) = sections;\n    let debug_abbrev = DebugAbbrev::new(&debug_abbrev, LittleEndian);\n    let debug_info = DebugInfo::new(&debug_info, LittleEndian);\n    let mut units = debug_info.units();\n    while let Ok(Some(unit)) = units.next() {\n        if let Ok(abbrevs) = unit.abbreviations(&debug_abbrev) {\n            let mut cursor = unit.entries(&abbrevs);\n            while let Ok(Some((_delta, entry))) = cursor.next_dfs() {\n                let mut attrs = entry.attrs();\n                while let Ok(Some(_attr)) = attrs.next() {\n                    continue;\n                }\n            }\n        }\n    }\n}"}
{"test_id": "rust-bio-rust-bio/rust-bio-rust-bio-319a0d8/tests-gen/myers_matching.inputs.rs::test_9", "code": "fn validate_alignment (aln : & Alignment , x : & [u8] , y : & [u8]) { let y = & y [aln . ystart .. aln . yend] ; let mut ix = 0 ; let mut iy = 0 ; let mut calc_dist = 0 ; for op in & aln . operations { match * op { Match => { assert ! (x [ix] == y [iy] , \"Match operation, but characters are not equal\") ; ix += 1 ; iy += 1 ; } Subst => { assert ! (x [ix] != y [iy] , \"Subst operation, but characters are equal\") ; calc_dist += 1 ; ix += 1 ; iy += 1 ; } Del => { calc_dist += 1 ; iy += 1 ; } Ins => { calc_dist += 1 ; ix += 1 ; } _ => unreachable ! () } } assert_eq ! (calc_dist , aln . score as usize) ; }", "test": "fn test_9() {\n    let data = [6, 246, 58];\n    if data.len() < 3 {\n        return;\n    }\n    let (max_dist, data) = data.split_first().unwrap();\n    let (pattern_len, data) = data.split_first().unwrap();\n    let max_dist = min(64, *max_dist);\n    let pattern_len = max(1, min(64, min(data.len(), *pattern_len as usize)));\n    if data.iter().any(|&b| b < 65 || b > 122 || b > 90 && b < 97) {\n        return;\n    }\n    let (pattern, text) = data.split_at(pattern_len);\n    let max_dist = max_dist as u8;\n    let _ = MyersBuilder::new().build_64(pattern);\n    let _ = MyersBuilder::new().build_long_64(pattern);\n    let mut myers = Myers::<u64>::new(pattern);\n    let mut myers_long = long::Myers::<u8>::new(pattern);\n    let end_dist: Vec<_> = myers.find_all_end(text, max_dist).collect();\n    let end_dist_long: Vec<_> = myers_long\n        .find_all_end(text, max_dist as usize)\n        .map(|(end, dist)| (end, dist as u8))\n        .collect();\n    assert_eq!(end_dist, end_dist_long);\n    let mut aln = Alignment::default();\n    let mut aln_long = Alignment::default();\n    {\n        let mut matches = myers.find_all(text, max_dist);\n        let mut matches_long = myers_long.find_all(text, max_dist as usize);\n        matches.alignment(&mut aln);\n        matches_long.alignment(&mut aln_long);\n        let mut end_dist_iter = end_dist.iter();\n        while matches.next_alignment(&mut aln) {\n            assert!(matches_long.next_alignment(&mut aln_long));\n            assert_eq!(aln, aln_long);\n            validate_alignment(&aln, pattern, text);\n            assert!(aln.score as u8 <= max_dist);\n            let (end, dist) = end_dist_iter.next().unwrap();\n            assert_eq!(*end + 1, aln.yend);\n            assert_eq!(*dist, aln.score as u8);\n        }\n        assert!(end_dist_iter.next().is_none());\n        assert!(!matches_long.next_alignment(&mut aln_long));\n    }\n    {\n        let mut matches = myers.find_all_lazy(text, max_dist);\n        let mut matches_long = myers_long.find_all_lazy(text, max_dist as usize);\n        let mut end_dist_iter = end_dist.iter();\n        while let Some((end, dist)) = matches.next() {\n            let (end_long, dist_long) = matches_long.next().unwrap();\n            assert_eq!((end, dist), (end_long, dist_long as u8));\n            assert!(matches.alignment_at(end, &mut aln));\n            assert!(matches_long.alignment_at(end, &mut aln_long));\n            assert_eq!(aln, aln_long);\n            validate_alignment(&aln, pattern, text);\n            assert_eq!(dist, aln.score as u8);\n            assert!(aln.score as u8 <= max_dist);\n            let (end, dist) = end_dist_iter.next().unwrap();\n            assert_eq!(*end + 1, aln.yend);\n            assert_eq!(*dist, aln.score as u8);\n            assert!(!matches.alignment_at(end + 1, &mut aln));\n        }\n        assert!(end_dist_iter.next().is_none());\n    }\n    let mut matches = myers.find_all_lazy(text, u8::max_value());\n    let mut matches_long = myers_long.find_all_lazy(text, u8::max_value() as usize);\n    let mut i = 0;\n    while let Some((end, dist)) = matches.next() {\n        assert_eq!(end, i);\n        let (end_long, dist_long) = matches_long.next().unwrap();\n        assert_eq!((end, dist), (end_long, dist_long as u8));\n        assert!(matches.alignment_at(end, &mut aln));\n        assert!(matches_long.alignment_at(end, &mut aln_long));\n        assert_eq!(aln, aln_long);\n        validate_alignment(&aln, pattern, text);\n        assert_eq!(dist, aln.score as u8);\n        assert!(aln.score as u8 <= u8::max_value());\n        assert!(!matches.alignment_at(end + 1, &mut aln));\n        assert!(!matches_long.alignment_at(end + 1, &mut aln_long));\n        i += 1;\n    }\n}"}
{"test_id": "gimli-rs-gimli/gimli-rs-gimli-3947879/tests-gen/eh_frame.inputs.rs::test_31", "code": "pub fn next_row(&mut self) -> Result<Option<(&LineProgramHeader<R, Offset>, &LineRow)>> {\n        // Perform any reset that was required after copying the previous row.\n        self.row.reset(self.program.header());\n\n        loop {\n            // Split the borrow here, rather than calling `self.header()`.\n            match self.instructions.next_instruction(self.program.header()) {\n                Err(err) => return Err(err),\n                Ok(None) => return Ok(None),\n                Ok(Some(instruction)) => {\n                    if self.row.execute(instruction, &mut self.program) {\n                        if self.row.tombstone {\n                            // Perform any reset that was required for the tombstone row.\n                            // Normally this is done when `next_row` is called again, but for\n                            // tombstones we loop immediately.\n                            self.row.reset(self.program.header());\n                        } else {\n                            return Ok(Some((self.header(), &self.row)));\n                        }\n                    }\n                    // Fall through, parse the next instruction, and see if that\n                    // yields a row.\n                }\n            }\n        }\n    }", "test": "fn test_31() {\n    let eh_frame = [10, 211, 10, 211];\n    let eh_frame = EhFrame::new(&eh_frame, LittleEndian);\n    let mut ctx = Box::new(UnwindContext::new());\n    let bases = BaseAddresses::default()\n        .set_eh_frame(0)\n        .set_eh_frame_hdr(0)\n        .set_text(0)\n        .set_got(0);\n    let mut entries = eh_frame.entries(&bases);\n    while let Ok(Some(entry)) = entries.next() {\n        match entry {\n            CieOrFde::Cie(_) => continue,\n            CieOrFde::Fde(partial) => {\n                if let Ok(fde) = partial.parse(EhFrame::cie_from_offset) {\n                    if let Ok(mut table) = fde.rows(&eh_frame, &bases, &mut ctx) {\n                        while let Ok(Some(_row)) = table.next_row() {\n                            continue;\n                        }\n                    }\n                }\n            }\n        };\n    }\n}"}
{"test_id": "zip-rs-zip/zip-rs-zip-ed187d6/tests-gen/fuzz_read.inputs.rs::test_33", "code": "fn decompress_all (data : & [u8]) -> Result < () , Box < dyn std :: error :: Error > > { let reader = std :: io :: Cursor :: new (data) ; let mut zip = zip :: ZipArchive :: new (reader) ? ; for i in 0 .. zip . len () { let mut file = zip . by_index (i) ? ; if file . size () < 1 << 20 { let _ = std :: io :: copy (& mut file , & mut std :: io :: sink ()) ; } } Ok (()) }", "test": "fn test_33() {\n    let data = [136, 10, 136, 65];\n    let _ = decompress_all(data);\n}"}
{"test_id": "gimli-rs-gimli/gimli-rs-gimli-3947879/tests-gen/debug_abbrev.inputs.rs::test_26", "code": "pub fn get<R: Reader>(\n        &self,\n        debug_abbrev: &DebugAbbrev<R>,\n        offset: DebugAbbrevOffset<R::Offset>,\n    ) -> Result<Arc<Abbreviations>> {\n        if offset.0 != R::Offset::from_u8(0) {\n            return debug_abbrev.abbreviations(offset).map(Arc::new);\n        }\n        self.abbreviations\n            .get(|| debug_abbrev.abbreviations(offset))\n    }", "test": "fn test_26() {\n    let debug_abbrev = [10];\n    let len = debug_abbrev.len();\n    let debug_abbrev = DebugAbbrev::new(&debug_abbrev, LittleEndian);\n    let offset = DebugAbbrevOffset(0);\n    if let Ok(abbreviations) = debug_abbrev.abbreviations(offset) {\n        for i in 1..len {\n            let _ = abbreviations.get(i as u64);\n        }\n    }\n}"}
{"test_id": "rustls-rustls/rustls-rustls-ae583bd/tests-gen/client.inputs.rs::test_7", "code": "pub fn process_new_packets(&mut self) -> Result<IoState, Error> {\n        match self {\n            Self::Client(conn) => conn.process_new_packets(),\n            Self::Server(conn) => conn.process_new_packets(),\n        }\n    }", "test": "fn test_7() {\n    let data = [\n        22, 3, 3, 0, 63, 2, 0, 0, 59, 3, 3, 89, 16, 236, 200, 17, 90, 14, 121, 52, 150, 218, 66,\n        28, 227, 55, 237, 109, 95, 209, 111, 252, 56, 238, 6, 251, 154, 147, 123, 211, 206, 186,\n        114, 0, 204, 169, 0, 0, 19, 255, 1, 0, 1, 0, 0, 23, 0, 0, 0, 35, 0, 0, 0, 11, 0, 2, 1, 0,\n        22, 3, 3, 14, 229, 11, 0, 14, 225, 0, 14, 222, 0, 7, 96, 48, 130, 7, 92, 48, 130, 6, 68,\n        160, 3, 2, 1, 2, 2, 8, 83, 65, 61, 145, 120, 210, 140, 39, 48, 13, 6, 9, 42, 134, 72, 134,\n        247, 13, 1, 1, 11, 5, 0, 48, 73, 49, 11, 48, 9, 6, 3, 85, 4, 6, 19, 2, 85, 83, 49, 19, 48,\n        17, 6, 3, 85, 4, 10, 19, 10, 71, 111, 111, 103, 108, 101, 32, 73, 110, 99, 49, 37, 48, 35,\n        6, 3, 85, 4, 3, 19, 28, 71, 111, 111, 103, 108, 101, 32, 73, 110, 116, 101, 114, 110, 101,\n        116, 32, 65, 117, 116, 104, 111, 114, 105, 116, 121, 32, 71, 50, 48, 30, 23, 13, 49, 55,\n        48, 52, 50, 55, 48, 56, 51, 48, 48, 48, 90, 23, 13, 49, 55, 48, 55, 50, 48, 48, 56, 51, 48,\n        48, 48, 90, 48, 102, 49, 11, 48, 9, 6, 3, 85, 4, 6, 19, 2, 85, 83, 49, 19, 48, 17, 6, 3,\n        85, 4, 8, 12, 10, 67, 97, 108, 105, 102, 111, 114, 110, 105, 97, 49, 22, 48, 20, 6, 3, 85,\n        4, 7, 12, 13, 77, 111, 117, 110, 116, 97, 105, 110, 32, 86, 105, 101, 119, 49, 19, 48, 17,\n        6, 3, 85, 4, 10, 12, 10, 71, 111, 111, 103, 108, 101, 32, 73, 110, 99, 49, 21, 48, 19, 6,\n        3, 85, 4, 3, 12, 12, 42, 46, 103, 111, 111, 103, 108, 101, 46, 99, 111, 109, 48, 89, 48,\n        19, 6, 7, 42, 134, 72, 206, 61, 2, 1, 6, 8, 42, 134, 72, 206, 61, 3, 1, 7, 3, 66, 0, 4,\n        189, 77, 48, 133, 70, 173, 158, 211, 104, 157, 203, 90, 81, 210, 82, 202, 205, 147, 209,\n        252, 62, 33, 220, 191, 25, 45, 49, 119, 71, 86, 34, 248, 128, 116, 164, 199, 172, 91, 179,\n        223, 239, 76, 76, 63, 25, 69, 53, 53, 110, 197, 165, 220, 25, 210, 237, 147, 30, 18, 131,\n        158, 196, 86, 94, 111, 163, 130, 4, 244, 48, 130, 4, 240, 48, 29, 6, 3, 85, 29, 37, 4, 22,\n        48, 20, 6, 8, 43, 6, 1, 5, 5, 7, 3, 1, 6, 8, 43, 6, 1, 5, 5, 7, 3, 2, 48, 11, 6, 3, 85, 29,\n        15, 4, 4, 3, 2, 7, 128, 48, 130, 3, 179, 6, 3, 85, 29, 17, 4, 130, 3, 170, 48, 130, 3, 166,\n        130, 12, 42, 46, 103, 111, 111, 103, 108, 101, 46, 99, 111, 109, 130, 13, 42, 46, 97, 110,\n        100, 114, 111, 105, 100, 46, 99, 111, 109, 130, 22, 42, 46, 97, 112, 112, 101, 110, 103,\n        105, 110, 101, 46, 103, 111, 111, 103, 108, 101, 46, 99, 111, 109, 130, 18, 42, 46, 99,\n        108, 111, 117, 100, 46, 103, 111, 111, 103, 108, 101, 46, 99, 111, 109, 130, 14, 42, 46,\n        103, 99, 112, 46, 103, 118, 116, 50, 46, 99, 111, 109, 130, 22, 42, 46, 103, 111, 111, 103,\n        108, 101, 45, 97, 110, 97, 108, 121, 116, 105, 99, 115, 46, 99, 111, 109, 130, 11, 42, 46,\n        103, 111, 111, 103, 108, 101, 46, 99, 97, 130, 11, 42, 46, 103, 111, 111, 103, 108, 101,\n        46, 99, 108, 130, 14, 42, 46, 103, 111, 111, 103, 108, 101, 46, 99, 111, 46, 105, 110, 130,\n        14, 42, 46, 103, 111, 111, 103, 108, 101, 46, 99, 111, 46, 106, 112, 130, 14, 42, 46, 103,\n        111, 111, 103, 108, 101, 46, 99, 111, 46, 117, 107, 130, 15, 42, 46, 103, 111, 111, 103,\n        108, 101, 46, 99, 111, 109, 46, 97, 114, 130, 15, 42, 46, 103, 111, 111, 103, 108, 101, 46,\n        99, 111, 109, 46, 97, 117, 130, 15, 42, 46, 103, 111, 111, 103, 108, 101, 46, 99, 111, 109,\n        46, 98, 114, 130, 15, 42, 46, 103, 111, 111, 103, 108, 101, 46, 99, 111, 109, 46, 99, 111,\n        130, 15, 42, 46, 103, 111, 111, 103, 108, 101, 46, 99, 111, 109, 46, 109, 120, 130, 15, 42,\n        46, 103, 111, 111, 103, 108, 101, 46, 99, 111, 109, 46, 116, 114, 130, 15, 42, 46, 103,\n        111, 111, 103, 108, 101, 46, 99, 111, 109, 46, 118, 110, 130, 11, 42, 46, 103, 111, 111,\n        103, 108, 101, 46, 100, 101, 130, 11, 42, 46, 103, 111, 111, 103, 108, 101, 46, 101, 115,\n        130, 11, 42, 46, 103, 111, 111, 103, 108, 101, 46, 102, 114, 130, 11, 42, 46, 103, 111,\n        111, 103, 108, 101, 46, 104, 117, 130, 11, 42, 46, 103, 111, 111, 103, 108, 101, 46, 105,\n        116, 130, 11, 42, 46, 103, 111, 111, 103, 108, 101, 46, 110, 108, 130, 11, 42, 46, 103,\n        111, 111, 103, 108, 101, 46, 112, 108, 130, 11, 42, 46, 103, 111, 111, 103, 108, 101, 46,\n        112, 116, 130, 18, 42, 46, 103, 111, 111, 103, 108, 101, 97, 100, 97, 112, 105, 115, 46,\n        99, 111, 109, 130, 15, 42, 46, 103, 111, 111, 103, 108, 101, 97, 112, 105, 115, 46, 99,\n        110, 130, 20, 42, 46, 103, 111, 111, 103, 108, 101, 99, 111, 109, 109, 101, 114, 99, 101,\n        46, 99, 111, 109, 130, 17, 42, 46, 103, 111, 111, 103, 108, 101, 118, 105, 100, 101, 111,\n        46, 99, 111, 109, 130, 12, 42, 46, 103, 115, 116, 97, 116, 105, 99, 46, 99, 110, 130, 13,\n        42, 46, 103, 115, 116, 97, 116, 105, 99, 46, 99, 111, 109, 130, 10, 42, 46, 103, 118, 116,\n        49, 46, 99, 111, 109, 130, 10, 42, 46, 103, 118, 116, 52, 46, 99, 111, 109, 130, 20, 42,\n        46, 109, 101, 116, 114, 105, 99, 46, 103, 115, 116, 97, 116, 105, 99, 46, 99, 111, 109,\n        130, 12, 42, 46, 117, 114, 99, 104, 105, 110, 46, 99, 111, 109, 130, 16, 42, 46, 117, 114,\n        108, 46, 103, 111, 111, 103, 108, 101, 46, 99, 111, 109, 130, 22, 42, 46, 121, 111, 117,\n        116, 117, 98, 101, 45, 110, 111, 99, 111, 111, 107, 105, 101, 46, 99, 111, 109, 130, 13,\n        42, 46, 121, 111, 117, 116, 117, 98, 101, 46, 99, 111, 109, 130, 22, 42, 46, 121, 111, 117,\n        116, 117, 98, 100, 101, 117, 101, 99, 97, 116, 105, 111, 110, 46, 99, 111, 109, 130, 11,\n        42, 46, 121, 116, 105, 109, 103, 46, 99, 111, 109, 130, 26, 97, 110, 100, 114, 111, 105,\n        100, 46, 99, 108, 105, 101, 110, 116, 115, 46, 103, 111, 111, 103, 108, 101, 46, 99, 111,\n        109, 130, 11, 97, 110, 100, 114, 111, 105, 100, 46, 99, 111, 109, 130, 27, 100, 101, 118,\n        101, 108, 111, 112, 101, 114, 46, 97, 110, 100, 114, 111, 105, 100, 46, 103, 111, 111, 103,\n        108, 101, 46, 99, 110, 130, 28, 100, 101, 118, 101, 108, 111, 112, 101, 114, 115, 46, 97,\n        110, 100, 114, 111, 105, 100, 46, 103, 111, 111, 103, 108, 101, 46, 99, 110, 130, 4, 103,\n        46, 99, 111, 130, 6, 103, 111, 111, 47, 103, 108, 130, 20, 103, 111, 111, 103, 108, 101,\n        45, 97, 110, 97, 108, 121, 116, 105, 99, 115, 46, 99, 111, 109, 130, 10, 103, 111, 111,\n        103, 108, 101, 46, 99, 111, 109, 130, 18, 103, 111, 111, 103, 108, 101, 99, 111, 109, 109,\n        101, 114, 99, 101, 46, 99, 111, 109, 130, 24, 115, 111, 117, 114, 99, 101, 46, 97, 110,\n        100, 114, 111, 105, 100, 46, 103, 111, 111, 103, 108, 101, 46, 99, 110, 130, 10, 117, 114,\n        99, 104, 105, 110, 46, 99, 111, 109, 130, 10, 119, 119, 119, 46, 103, 111, 111, 46, 103,\n        108, 130, 8, 121, 111, 117, 116, 117, 46, 98, 101, 130, 11, 121, 111, 117, 116, 117, 98,\n        101, 46, 99, 111, 109, 130, 20, 121, 111, 117, 116, 117, 98, 101, 101, 100, 117, 99, 97,\n        116, 105, 111, 110, 46, 99, 111, 109, 48, 104, 6, 8, 43, 6, 1, 5, 5, 7, 1, 1, 4, 92, 48,\n        90, 48, 43, 6, 8, 43, 6, 1, 5, 5, 7, 48, 2, 134, 31, 104, 116, 116, 112, 58, 47, 47, 112,\n        107, 105, 46, 103, 111, 111, 103, 108, 101, 46, 99, 111, 109, 47, 71, 73, 65, 71, 50, 46,\n        99, 114, 116, 48, 43, 6, 8, 43, 6, 1, 5, 5, 7, 48, 1, 134, 31, 104, 116, 116, 112, 58, 47,\n        47, 99, 108, 105, 101, 110, 116, 115, 49, 46, 103, 111, 111, 103, 108, 101, 46, 99, 111,\n        109, 47, 111, 99, 115, 112, 48, 29, 6, 3, 85, 29, 14, 4, 22, 4, 20, 253, 90, 18, 128, 11,\n        205, 4, 95, 242, 77, 89, 40, 3, 112, 35, 87, 25, 64, 248, 55, 48, 12, 6, 3, 85, 29, 19, 1,\n        1, 255, 4, 2, 48, 0, 48, 31, 6, 3, 85, 29, 35, 4, 24, 48, 22, 128, 20, 74, 221, 6, 22, 27,\n        188, 246, 104, 181, 118, 245, 129, 182, 187, 98, 26, 186, 90, 129, 47, 48, 33, 6, 3, 85,\n        29, 32, 4, 26, 48, 24, 48, 12, 6, 10, 43, 6, 1, 4, 1, 214, 121, 2, 5, 1, 48, 8, 6, 6, 103,\n        129, 12, 1, 2, 2, 48, 48, 6, 3, 85, 29, 31, 4, 41, 48, 39, 48, 37, 160, 35, 160, 33, 134,\n        31, 104, 116, 116, 112, 58, 47, 47, 112, 107, 105, 46, 103, 111, 111, 103, 108, 101, 46,\n        99, 111, 109, 47, 71, 73, 65, 71, 50, 46, 99, 114, 108, 48, 13, 6, 9, 42, 134, 72, 134,\n        247, 13, 1, 1, 11, 5, 0, 3, 130, 1, 1, 0, 33, 200, 169, 105, 206, 2, 155, 120, 189, 192,\n        51, 58, 117, 81, 58, 119, 84, 168, 232, 112, 67, 74, 178, 108, 140, 239, 140, 58, 241, 118,\n        5, 87, 151, 75, 62, 228, 100, 79, 253, 168, 208, 39, 111, 248, 15, 136, 208, 240, 106, 77,\n        117, 121, 178, 58, 88, 245, 179, 162, 251, 10, 71, 202, 197, 70, 144, 133, 162, 197, 128,\n        57, 111, 180, 163, 6, 63, 152, 48, 225, 133, 207, 156, 142, 147, 155, 164, 234, 150, 95,\n        194, 204, 36, 174, 11, 81, 8, 107, 127, 181, 132, 216, 230, 232, 29, 152, 1, 46, 152, 162,\n        185, 105, 229, 136, 245, 133, 63, 134, 92, 242, 217, 7, 26, 64, 132, 248, 126, 187, 114,\n        56, 192, 240, 70, 213, 140, 90, 19, 23, 33, 155, 220, 79, 93, 249, 252, 184, 190, 60, 45,\n        123, 246, 182, 204, 232, 45, 111, 214, 187, 247, 195, 215, 60, 88, 120, 12, 241, 0, 54,\n        189, 184, 200, 138, 56, 58, 15, 211, 62, 239, 220, 24, 224, 142, 159, 199, 102, 126, 9,\n        199, 212, 60, 163, 123, 195, 235, 239, 210, 8, 24, 172, 63, 119, 216, 233, 1, 8, 101, 21,\n        150, 10, 75, 36, 243, 45, 241, 243, 191, 254, 221, 133, 11, 136, 82, 64, 50, 222, 221, 48,\n        184, 48, 183, 155, 228, 204, 32, 177, 209, 139, 86, 15, 190, 118, 233, 91, 146, 124, 132,\n        218, 50, 73, 110, 152, 63, 196, 8, 66, 19, 171, 62, 0, 3, 244, 48, 130, 3, 240, 48, 130, 2,\n        216, 160, 3, 2, 1, 2, 2, 3, 2, 58, 146, 48, 13, 6, 9, 42, 134, 72, 134, 247, 13, 1, 1, 11,\n        5, 0, 48, 66, 49, 11, 48, 9, 6, 3, 85, 4, 6, 19, 2, 85, 83, 49, 22, 48, 20, 6, 3, 85, 4,\n        10, 19, 13, 71, 101, 111, 84, 114, 117, 115, 116, 32, 73, 110, 99, 46, 49, 27, 48, 25, 6,\n        3, 85, 4, 3, 19, 18, 71, 101, 111, 84, 114, 117, 115, 116, 32, 71, 108, 111, 98, 97, 108,\n        32, 67, 65, 48, 30, 23, 13, 49, 53, 48, 52, 48, 49, 48, 48, 48, 48, 48, 48, 90, 23, 13, 49,\n        55, 49, 50, 51, 49, 50, 51, 53, 57, 53, 57, 90, 48, 73, 49, 11, 48, 9, 6, 3, 85, 4, 6, 19,\n        2, 85, 83, 49, 19, 48, 17, 6, 3, 85, 4, 10, 19, 10, 71, 111, 111, 103, 108, 101, 32, 73,\n        110, 99, 49, 37, 48, 35, 6, 3, 85, 4, 3, 19, 28, 71, 111, 111, 103, 108, 101, 32, 73, 110,\n        116, 101, 114, 110, 101, 116, 32, 65, 117, 116, 104, 111, 114, 105, 116, 121, 32, 71, 50,\n        48, 130, 1, 34, 48, 13, 6, 9, 42, 134, 72, 134, 247, 13, 1, 1, 1, 5, 0, 3, 130, 1, 15, 0,\n        48, 130, 1, 10, 2, 130, 1, 1, 0, 156, 42, 4, 119, 92, 216, 80, 145, 58, 6, 163, 130, 224,\n        216, 80, 72, 188, 137, 63, 241, 25, 112, 26, 136, 70, 126, 224, 143, 197, 241, 137, 206,\n        33, 238, 90, 254, 97, 13, 183, 50, 68, 137, 160, 116, 11, 83, 79, 85, 164, 206, 130, 98,\n        149, 238, 235, 89, 95, 198, 225, 5, 128, 18, 196, 94, 148, 63, 188, 91, 72, 56, 244, 83,\n        247, 36, 230, 251, 145, 233, 21, 196, 207, 244, 83, 13, 244, 74, 252, 159, 84, 222, 125,\n        190, 160, 107, 111, 135, 192, 208, 80, 31, 40, 48, 3, 64, 218, 8, 115, 81, 108, 127, 255,\n        58, 60, 167, 55, 6, 142, 189, 75, 17, 4, 235, 125, 36, 222, 230, 249, 252, 49, 113, 251,\n        148, 213, 96, 243, 46, 74, 175, 66, 210, 203, 234, 196, 106, 26, 178, 204, 83, 221, 21, 75,\n        139, 31, 200, 25, 97, 31, 205, 157, 168, 62, 99, 43, 132, 53, 105, 101, 132, 200, 25, 197,\n        70, 34, 248, 83, 149, 190, 227, 128, 74, 16, 198, 42, 236, 186, 151, 32, 17, 199, 57, 153,\n        16, 4, 160, 240, 97, 122, 149, 37, 140, 78, 82, 117, 226, 182, 237, 8, 202, 20, 252, 206,\n        34, 106, 179, 78, 207, 70, 3, 151, 151, 3, 126, 192, 177, 222, 123, 175, 69, 51, 207, 186,\n        62, 113, 183, 222, 244, 37, 37, 194, 13, 53, 137, 157, 157, 251, 14, 17, 121, 137, 30, 55,\n        197, 175, 142, 114, 105, 2, 3, 1, 0, 1, 163, 129, 231, 48, 129, 228, 48, 31, 6, 3, 85, 29,\n        35, 4, 24, 48, 22, 128, 20, 192, 122, 152, 104, 141, 137, 251, 171, 5, 100, 12, 17, 125,\n        170, 125, 101, 184, 202, 204, 78, 48, 29, 6, 3, 85, 29, 14, 4, 22, 4, 20, 74, 221, 6, 22,\n        27, 188, 246, 104, 181, 118, 245, 129, 182, 187, 98, 26, 186, 90, 129, 47, 48, 14, 6, 3,\n        85, 29, 15, 1, 1, 255, 4, 4, 3, 2, 1, 6, 48, 46, 6, 8, 43, 6, 1, 5, 5, 7, 1, 1, 4, 34, 48,\n        32, 48, 30, 6, 8, 43, 6, 1, 5, 5, 7, 48, 1, 134, 18, 104, 116, 116, 112, 58, 47, 47, 103,\n        46, 115, 121, 109, 99, 100, 46, 99, 111, 109, 48, 18, 6, 3, 85, 29, 19, 1, 1, 255, 4, 8,\n        48, 6, 1, 1, 255, 2, 1, 0, 48, 53, 6, 3, 85, 29, 31, 4, 46, 48, 44, 48, 42, 160, 40, 160,\n        38, 134, 36, 104, 116, 116, 112, 58, 47, 47, 103, 46, 115, 121, 109, 99, 98, 46, 99, 111,\n        109, 47, 99, 114, 108, 115, 47, 103, 116, 103, 108, 111, 98, 97, 108, 46, 99, 114, 108, 48,\n        23, 6, 3, 85, 29, 32, 4, 16, 48, 14, 48, 12, 6, 10, 43, 6, 1, 4, 1, 214, 121, 2, 5, 1, 48,\n        13, 6, 9, 42, 134, 72, 134, 247, 13, 1, 1, 11, 5, 0, 3, 130, 1, 1, 0, 8, 78, 4, 167, 128,\n        127, 16, 22, 67, 94, 2, 173, 215, 66, 128, 244, 176, 142, 210, 174, 179, 235, 17, 125, 144,\n        132, 24, 125, 231, 144, 21, 251, 73, 127, 168, 153, 5, 145, 187, 122, 201, 214, 60, 55, 24,\n        9, 154, 182, 199, 146, 32, 7, 53, 51, 9, 228, 40, 99, 114, 13, 180, 224, 50, 156, 135, 152,\n        196, 27, 118, 137, 103, 193, 80, 88, 176, 19, 170, 19, 26, 27, 50, 165, 190, 234, 17, 149,\n        76, 72, 99, 73, 233, 153, 93, 32, 55, 204, 254, 42, 105, 81, 22, 149, 75, 169, 222, 73,\n        130, 192, 16, 112, 244, 44, 243, 236, 188, 36, 36, 208, 78, 172, 165, 217, 94, 30, 109,\n        146, 193, 167, 172, 72, 53, 129, 249, 229, 228, 156, 101, 105, 205, 135, 164, 65, 80, 63,\n        46, 87, 165, 145, 81, 18, 88, 14, 140, 9, 161, 172, 122, 164, 18, 165, 39, 243, 154, 16,\n        151, 125, 85, 3, 6, 247, 102, 88, 95, 95, 100, 225, 171, 93, 109, 165, 57, 72, 117, 152,\n        76, 41, 90, 58, 141, 211, 43, 202, 156, 85, 4, 191, 244, 230, 20, 213, 128, 172, 38, 237,\n        23, 137, 166, 147, 108, 92, 164, 204, 184, 240, 102, 142, 100, 227, 125, 154, 226, 0, 179,\n        73, 199, 228, 10, 170, 221, 91, 131, 199, 112, 144, 70, 78, 190, 208, 219, 89, 150, 108,\n        46, 245, 22, 54, 222, 113, 204, 1, 194, 18, 193, 33, 198, 22, 0, 3, 129, 48, 130, 3, 125,\n        48, 130, 2, 230, 160, 3, 2, 1, 2, 2, 3, 18, 187, 230, 48, 13, 6, 9, 42, 134, 72, 134, 247,\n        13, 1, 1, 5, 5, 0, 48, 78, 49, 11, 48, 9, 6, 3, 85, 4, 6, 19, 2, 85, 83, 49, 16, 48, 14, 6,\n        3, 85, 4, 10, 19, 7, 69, 113, 117, 105, 102, 97, 120, 49, 45, 48, 43, 6, 3, 85, 4, 11, 19,\n        36, 69, 113, 117, 105, 102, 97, 120, 32, 83, 101, 99, 117, 114, 101, 32, 67, 101, 114, 116,\n        105, 102, 105, 99, 97, 116, 101, 32, 65, 117, 116, 104, 111, 114, 105, 116, 121, 48, 30,\n        23, 13, 48, 50, 48, 53, 50, 49, 48, 52, 48, 48, 48, 48, 90, 23, 13, 49, 56, 48, 56, 50, 49,\n        48, 52, 48, 48, 48, 48, 90, 48, 66, 49, 11, 48, 9, 6, 3, 85, 4, 6, 19, 2, 85, 83, 49, 22,\n        48, 20, 6, 3, 85, 4, 10, 19, 13, 71, 101, 111, 84, 114, 117, 115, 116, 32, 73, 110, 99, 46,\n        49, 27, 48, 25, 6, 3, 85, 4, 3, 19, 18, 71, 101, 111, 84, 114, 117, 115, 116, 32, 71, 108,\n        111, 98, 97, 108, 32, 67, 65, 48, 130, 1, 34, 48, 13, 6, 9, 42, 134, 72, 134, 247, 13, 1,\n        1, 1, 5, 0, 3, 130, 1, 15, 0, 48, 130, 1, 10, 2, 130, 1, 1, 0, 218, 204, 24, 99, 48, 253,\n        244, 23, 35, 26, 86, 126, 91, 223, 60, 108, 56, 228, 113, 183, 120, 145, 212, 188, 161,\n        216, 76, 248, 168, 67, 182, 3, 233, 77, 33, 7, 8, 136, 218, 88, 47, 102, 57, 41, 189, 5,\n        120, 139, 157, 56, 232, 5, 183, 106, 126, 113, 164, 230, 196, 96, 166, 176, 239, 128, 228,\n        137, 40, 15, 158, 37, 214, 237, 131, 243, 173, 166, 145, 199, 152, 201, 66, 24, 53, 20,\n        157, 173, 152, 70, 146, 46, 79, 202, 241, 135, 67, 193, 22, 149, 87, 45, 80, 239, 137, 45,\n        128, 122, 87, 173, 242, 238, 95, 107, 210, 0, 141, 185, 20, 248, 20, 21, 53, 217, 192, 70,\n        163, 123, 114, 200, 145, 191, 201, 85, 43, 205, 208, 151, 62, 156, 38, 100, 204, 223, 206,\n        131, 25, 113, 202, 78, 230, 212, 213, 123, 169, 25, 205, 85, 222, 200, 236, 210, 94, 56,\n        83, 229, 92, 79, 140, 45, 254, 80, 35, 54, 252, 102, 230, 203, 142, 164, 57, 25, 0, 183,\n        149, 2, 57, 145, 11, 14, 254, 56, 46, 209, 29, 5, 154, 246, 77, 62, 111, 15, 7, 29, 175,\n        44, 30, 143, 96, 57, 226, 250, 54, 83, 19, 57, 212, 94, 38, 43, 219, 61, 168, 20, 189, 50,\n        235, 24, 3, 40, 82, 4, 113, 229, 171, 51, 61, 225, 56, 187, 7, 54, 132, 98, 156, 121, 234,\n        22, 48, 244, 95, 192, 43, 232, 113, 107, 228, 249, 2, 3, 1, 0, 1, 163, 129, 240, 48, 129,\n        237, 48, 31, 6, 3, 85, 29, 35, 4, 24, 48, 22, 128, 20, 72, 230, 104, 249, 43, 210, 178,\n        149, 215, 71, 216, 35, 32, 16, 79, 51, 152, 144, 159, 212, 48, 29, 6, 3, 85, 29, 14, 4, 22,\n        4, 20, 192, 122, 152, 104, 141, 137, 251, 171, 5, 100, 12, 17, 125, 170, 125, 101, 184,\n        202, 204, 78, 48, 15, 6, 3, 85, 29, 19, 1, 1, 255, 4, 5, 48, 3, 1, 1, 255, 48, 14, 6, 3,\n        85, 29, 15, 1, 1, 255, 4, 4, 3, 2, 1, 6, 48, 58, 6, 3, 85, 29, 31, 4, 51, 48, 49, 48, 47,\n        160, 45, 160, 43, 134, 41, 104, 116, 116, 112, 58, 47, 47, 99, 114, 108, 46, 103, 101, 111,\n        116, 114, 117, 115, 116, 46, 99, 111, 109, 47, 99, 114, 108, 115, 47, 115, 101, 99, 117,\n        114, 101, 99, 97, 46, 99, 114, 108, 48, 78, 6, 3, 85, 29, 32, 4, 71, 48, 69, 48, 67, 6, 4,\n        85, 29, 32, 0, 48, 59, 48, 57, 6, 8, 43, 6, 1, 5, 5, 7, 2, 1, 22, 45, 104, 116, 116, 112,\n        115, 58, 47, 47, 119, 119, 119, 46, 103, 101, 111, 116, 114, 117, 115, 116, 46, 99, 111,\n        109, 47, 114, 101, 115, 111, 117, 114, 99, 101, 115, 47, 114, 101, 112, 111, 115, 105, 116,\n        111, 114, 121, 48, 13, 6, 9, 42, 134, 72, 134, 247, 13, 1, 1, 5, 5, 0, 3, 129, 129, 0, 118,\n        225, 18, 110, 78, 75, 22, 18, 134, 48, 6, 178, 48, 1, 134, 18, 104, 116, 116, 112, 58, 47,\n        47, 103, 46, 115, 121, 109, 99, 100, 46, 99, 111, 109, 48, 18, 6, 3, 85, 29, 19, 1, 1, 255,\n        4, 8, 48, 6, 1, 1, 255, 2, 1, 0, 48, 53, 6, 3, 85, 29, 31, 4, 46, 48, 44, 48, 42, 160, 40,\n        160, 38, 134, 36, 104, 116, 116, 112, 58, 47, 47, 103, 46, 115, 121, 109, 99, 98, 46, 99,\n        111, 109, 47, 99, 114, 108, 115, 47, 103, 116, 103, 108, 111, 98, 97, 108, 46, 99, 114,\n        108, 48, 23, 6, 3, 85, 29, 32, 4, 16, 48, 14, 48, 12, 6, 10, 43, 6, 1, 4, 1, 214, 121, 2,\n        5, 1, 48, 13, 6, 9, 42, 134, 72, 134, 247, 13, 1, 1, 11, 5, 0, 3, 130, 1, 1, 0, 8, 78, 4,\n        167, 128, 127, 16, 22, 67, 94, 2, 173, 215, 66, 128, 244, 176, 142, 210, 174, 179, 235, 17,\n        125, 144, 132, 24, 125, 231, 144, 21, 251, 73, 127, 168, 153, 5, 145, 187, 122, 201, 214,\n        60, 55, 24, 9, 154, 182, 199, 146, 32, 7, 53, 51, 9, 228, 40, 99, 114, 13, 180, 224, 50,\n        156, 135, 152, 196, 27, 118, 137, 103, 193, 80, 88, 176, 19, 170, 19, 26, 27, 50, 165, 190,\n        234, 17, 149, 76, 72, 99, 73, 233, 153, 93, 32, 55, 204, 254, 42, 105, 81, 22, 149, 75,\n        169, 222, 73, 130, 192, 16, 112, 244, 44, 243, 236, 188, 36, 36, 208, 78, 172, 165, 217,\n        94, 30, 109, 146, 193, 167, 172, 72, 53, 129, 249, 229, 228, 156, 101, 105, 205, 135, 164,\n        65, 80, 63, 46, 87, 165, 145, 81, 18, 88, 14, 140, 9, 161, 172, 122, 164, 18, 165, 39, 243,\n        154, 16, 151, 125, 85, 3, 6, 247, 102, 88, 95, 95, 100, 225, 171, 93, 109, 165, 57, 72,\n        117, 152, 76, 41, 90, 58, 141, 211, 43, 202, 156, 85, 4, 191, 244, 230, 20, 213, 128, 172,\n        38, 237, 23, 137, 166, 147, 108, 92, 164, 204, 184, 240, 102, 142, 100, 227, 125, 154, 226,\n        0, 179, 73, 199, 228, 10, 170, 221, 91, 131, 199, 112, 144, 70, 78, 190, 208, 219, 89, 150,\n        108, 226, 99, 204, 123, 77, 237, 165, 38, 196, 158, 196, 163, 39, 31, 219, 195, 16, 152, 4,\n        135, 131, 197, 26, 192, 175, 73, 208, 102, 224, 50, 80, 230, 29, 5, 207, 178, 98, 39, 107,\n        230, 1, 197, 170, 5, 64, 181, 56, 55, 178, 122, 4, 178, 114, 110, 79, 20, 3, 3, 0, 1, 1,\n        22, 3, 3, 0, 32, 183, 30, 234, 49, 21, 153, 244, 50, 141, 222, 123, 52, 1, 109, 64, 238,\n        29, 191, 187, 51, 222, 29, 236, 211, 51, 142, 115, 248, 228, 41, 223, 232, 23, 3, 3, 5,\n        145, 183, 198, 127, 233, 133, 132, 204, 255, 193, 240, 165, 168, 179, 134, 137, 28, 111,\n        57, 20, 103, 109, 40, 93, 116, 27, 183, 6, 173, 163, 53, 13, 72, 122, 43, 63, 229, 34, 239,\n        206, 238, 224, 219, 154, 89, 232, 199, 231, 76, 220, 48, 166, 150, 198, 187, 179, 212, 170,\n        99, 14, 86, 71, 119, 180, 116, 170, 223, 163, 40, 114, 100, 115, 113, 43, 44, 114, 235, 76,\n        52, 47, 163, 154, 106, 75, 206, 13, 169, 35, 146, 186, 235, 26, 215, 226, 25, 96, 82, 134,\n        106, 165, 127, 165, 151, 155, 237, 16, 83, 188, 25, 119, 139, 21, 127, 119, 176, 100, 73,\n        39, 111, 86, 232, 52, 9, 66, 93, 115, 223, 106, 228, 206, 238, 160, 132, 136, 64, 102, 43,\n        74, 71, 121, 174, 29, 24, 97, 80, 95, 52, 218, 59, 92, 197, 127, 255, 57, 181, 131, 22, 44,\n        103, 181, 255, 147, 102, 90, 15, 183, 116, 87, 9, 234, 149, 220, 97, 185, 51, 15, 48, 192,\n        77, 192, 92, 6, 25, 231, 98, 183, 247, 191, 91, 35, 232, 21, 25, 172, 40, 237, 60, 161,\n        137, 231, 74, 255, 83, 254, 183, 142, 212, 17, 244, 228, 22, 175, 11, 18, 28, 10, 13, 59,\n        153, 59, 167, 135, 132, 139, 137, 113, 140, 127, 144, 118, 200, 162, 233, 78, 190, 163, 76,\n        226, 254, 141, 23, 103, 104, 130, 9, 249, 38, 224, 186, 81, 202, 138, 93, 91, 204, 157,\n        215, 80, 29, 100, 172, 90, 238, 198, 240, 210, 187, 19, 62, 115, 118, 162, 168, 216, 71,\n        112, 46, 23, 133, 22, 189, 210, 149, 133, 48, 200, 136, 154, 38, 232, 39, 155, 118, 193,\n        34, 213, 153, 254, 27, 118, 184, 252, 128, 4, 175, 4, 84, 119, 78, 252, 154, 99, 252, 142,\n        108, 170, 171, 108, 4, 181, 42, 121, 214, 195, 219, 86, 242, 192, 126, 196, 223, 239, 42,\n        199, 225, 212, 234, 10, 122, 3, 193, 28, 84, 12, 112, 161, 253, 10, 169, 105, 164, 63, 97,\n        189, 164, 233, 134, 45, 115, 68, 28, 24, 245, 177, 156, 59, 119, 158, 169, 190, 92, 55, 25,\n        81, 131, 16, 97, 164, 233, 188, 6, 13, 197, 35, 180, 215, 5, 222, 218, 153, 211, 204, 140,\n        43, 16, 66, 70, 37, 188, 245, 142, 91, 181, 176, 50, 210, 247, 126, 210, 254, 254, 56, 58,\n        202, 187, 189, 198, 247, 74, 189, 80, 143, 231, 208, 22, 188, 255, 184, 79, 239, 101, 153,\n        38, 185, 223, 119, 141, 143, 241, 93, 236, 72, 153, 185, 119, 215, 135, 123, 202, 66, 204,\n        12, 243, 246, 48, 43, 154, 83, 0, 100, 146, 157, 230, 233, 147, 209, 45, 106, 170, 231,\n        113, 162, 217, 136, 142, 254, 179, 55, 216, 202, 171, 112, 33, 169, 211, 27, 69, 131, 131,\n        186, 210, 79, 186, 244, 223, 25, 153, 0, 204, 17, 150, 183, 82, 33, 40, 165, 178, 214, 212,\n        185, 215, 118, 116, 192, 121, 23, 111, 14, 148, 118, 17, 195, 123, 98, 96, 227, 160, 203,\n        98, 44, 10, 17, 73, 153, 8, 104, 225, 126, 28, 62, 50, 167, 146, 93, 246, 148, 222, 56,\n        235, 205, 189, 222, 186, 74, 242, 195, 91, 54, 135, 245, 245, 139, 235, 233, 43, 125, 89,\n        87, 250, 179, 228, 228, 166, 141, 238, 53, 245, 80, 235, 32, 142, 81, 180, 51, 107, 117,\n        28, 197, 62, 15, 107, 40, 167, 63, 119, 215, 239, 4, 53, 26, 254, 55, 153, 8, 89, 253, 156,\n        98, 25, 51, 54, 205, 255, 183, 37, 76, 39, 153, 92, 240, 79, 178, 157, 153, 205, 242, 91,\n        133, 204, 26, 107, 7, 105, 59, 186, 37, 217, 61, 171, 159, 165, 68, 171, 10, 91, 29, 236,\n        136, 188, 153, 202, 63, 99, 47, 38, 246, 92, 156, 111, 100, 241, 142, 19, 98, 204, 171,\n        188, 6, 5, 117, 91, 47, 16, 227, 100, 43, 77, 56, 70, 231, 10, 161, 170, 195, 142, 34, 154,\n        173, 32, 78, 93, 39, 56, 185, 38, 249, 59, 219, 48, 15, 106, 245, 187, 64, 82, 47, 144,\n        134, 130, 154, 54, 87, 70, 166, 72, 234, 147, 121, 227, 24, 77, 204, 246, 109, 49, 57, 104,\n        114, 128, 35, 40, 34, 113, 75, 116, 91, 6, 43, 28, 123, 123, 43, 180, 82, 237, 1, 250, 108,\n        126, 244, 40, 186, 108, 59, 59, 1, 232, 50, 14, 248, 26, 158, 112, 110, 245, 133, 40, 44,\n        38, 130, 187, 34, 190, 179, 134, 98, 54, 71, 52, 151, 64, 70, 253, 247, 48, 201, 189, 117,\n        28, 18, 6, 111, 239, 64, 248, 250, 231, 85, 20, 133, 210, 238, 207, 121, 136, 37, 127, 16,\n        135, 191, 150, 42, 174, 107, 239, 142, 40, 108, 34, 66, 36, 233, 104, 52, 137, 12, 49, 17,\n        219, 213, 165, 132, 160, 153, 6, 175, 133, 172, 78, 183, 236, 228, 81, 164, 11, 152, 93,\n        194, 212, 117, 179, 84, 175, 251, 73, 172, 77, 252, 207, 166, 218, 20, 168, 183, 0, 205,\n        40, 203, 120, 130, 87, 123, 61, 140, 237, 224, 132, 178, 103, 208, 78, 140, 40, 13, 123, 9,\n        47, 68, 171, 162, 116, 160, 87, 84, 2, 14, 84, 180, 242, 73, 38, 223, 191, 114, 45, 232,\n        208, 252, 180, 95, 17, 205, 199, 106, 169, 123, 181, 212, 225, 41, 91, 38, 81, 23, 176,\n        105, 40, 194, 246, 174, 78, 30, 205, 204, 147, 9, 172, 98, 65, 188, 225, 83, 245, 167, 203,\n        99, 201, 207, 126, 192, 173, 250, 25, 28, 101, 164, 88, 191, 186, 203, 199, 243, 35, 13,\n        187, 204, 61, 180, 2, 24, 198, 83, 6, 147, 212, 139, 186, 164, 180, 193, 193, 241, 96, 217,\n        160, 58, 117, 133, 132, 97, 135, 174, 24, 49, 123, 161, 202, 191, 10, 20, 238, 223, 213,\n        107, 139, 69, 58, 239, 56, 147, 15, 71, 130, 244, 112, 179, 219, 45, 136, 223, 145, 5, 100,\n        70, 194, 104, 130, 39, 47, 144, 40, 179, 162, 166, 177, 238, 10, 122, 181, 88, 128, 242,\n        228, 211, 145, 239, 231, 38, 58, 56, 75, 175, 203, 162, 198, 220, 58, 152, 213, 24, 223,\n        20, 41, 227, 102, 59, 122, 94, 95, 197, 33, 196, 28, 96, 184, 228, 76, 194, 197, 105, 5,\n        26, 90, 174, 79, 27, 218, 172, 92, 44, 155, 33, 236, 30, 190, 13, 110, 13, 60, 176, 93, 14,\n        91, 214, 255, 254, 88, 103, 178, 198, 121, 186, 64, 227, 162, 168, 215, 191, 237, 199, 111,\n        169, 20, 159, 6, 182, 229, 25, 157, 45, 54, 158, 121, 226, 199, 147, 48, 82, 174, 41, 55,\n        185, 164, 65, 101, 174, 22, 69, 163, 141, 174, 103, 99, 196, 91, 121, 197, 219, 197, 90,\n        242, 150, 42, 209, 60, 97, 55, 242, 58, 126, 231, 22, 127, 91, 166, 44, 228, 231, 29, 236,\n        61, 35, 12, 152, 48, 104, 183, 24, 213, 102, 189, 214, 101, 136, 11, 226, 31, 83, 243, 242,\n        206, 101, 180, 179, 14, 35, 13, 104, 249, 151, 118, 148, 180, 205, 245, 29, 35, 253, 113,\n        62, 102, 109, 228, 28, 120, 68, 76, 243, 62, 250, 159, 100, 137, 94, 216, 30, 90, 10, 230,\n        54, 242, 196, 232, 13, 12, 177, 50, 32, 91, 126, 103, 88, 54, 57, 13, 172, 80, 167, 15, 51,\n        109, 159, 237, 164, 251, 229, 16, 134, 132, 56, 93, 60, 51, 230, 25, 105, 230, 1, 54, 204,\n        248, 53, 80, 16, 54, 168, 4, 173, 246, 198, 106, 252, 153, 5, 227, 23, 169, 9, 2, 162, 237,\n        46, 114, 238, 203, 103, 62, 66, 43, 119, 56, 209, 97, 60, 189, 54, 25, 228, 137, 19, 198,\n        68, 137, 40, 197, 159, 152, 220, 149, 128, 201, 201, 138, 46, 70, 97, 140, 146, 244, 106,\n        103, 120, 211, 231, 150, 37, 41, 30, 87, 208, 191, 66, 142, 55, 222, 11, 102, 197, 30, 213,\n        6, 144, 18, 123, 235, 145, 73, 249, 60, 240, 251, 161, 240, 147, 201, 165, 206, 167, 115,\n        79, 225, 189, 27, 95, 168, 239, 189, 46, 13, 198, 47, 228, 179, 156, 53, 40, 209, 116, 191,\n        177, 143, 60, 157, 172, 193, 123, 252, 146, 28, 6, 20, 225, 237, 80, 166, 97, 59, 162, 189,\n        172, 91, 121, 248, 134, 72, 36, 23, 3, 3, 1, 134, 184, 233, 245, 63, 202, 189, 95, 218, 14,\n        44, 104, 150, 88, 57, 147, 139, 108, 12, 24, 244, 48, 244, 12, 105, 140, 245, 216, 203, 98,\n        220, 166, 61, 248, 29, 21, 205, 163, 217, 131, 222, 142, 243, 231, 56, 251, 8, 91, 104,\n        142, 192, 167, 237, 78, 125, 38, 215, 152, 1, 134, 184, 233, 245, 63, 202, 189, 95, 218,\n        14, 44, 104, 150, 88, 57, 147, 139, 108, 12, 24, 244, 48, 244, 12, 105, 140, 245, 216, 203,\n        98, 220, 166, 61, 248, 29, 21, 205, 163, 217, 131, 222, 142, 243, 231, 56, 251, 8, 91, 104,\n        142, 192, 167, 237, 78, 125, 38, 215, 152, 134, 128, 126, 89, 102, 207, 188, 230, 246, 14,\n        24, 126, 138, 114, 180, 118, 107, 248, 123, 189, 108, 188, 51, 72, 43, 11, 120, 144, 125,\n        151, 128, 70, 175, 208, 157, 21, 23, 181, 116, 24, 151, 213, 169, 71, 137, 211, 133, 66,\n        217, 94, 56, 172, 53, 200, 76, 212, 201, 64, 165, 40, 211, 58, 41, 133, 5, 40, 217, 195,\n        19, 205, 202, 220, 96, 17, 175, 95, 25, 22, 158, 125, 215, 107, 136, 1, 124, 91, 213, 38,\n        226, 229, 171, 102, 229, 43, 21, 96, 18, 64, 250, 121, 28, 196, 204, 232, 170, 196, 217,\n        241, 72, 52, 204, 213, 15, 38, 22, 211, 23, 30, 200, 130, 144, 162, 241, 75, 131, 109, 216,\n        53, 176, 129, 181, 234, 255, 221, 66, 0, 103, 20, 218, 25, 242, 178, 29, 66, 74, 132, 102,\n        65, 47, 113, 156, 220, 240, 218, 205, 242, 139, 64, 190, 177, 79, 163, 13, 245, 95, 144,\n        138, 214, 18, 105, 157, 143, 227, 178, 156, 38, 215, 106, 254, 245, 153, 14, 188, 52, 101,\n        188, 238, 86, 47, 120, 37, 100, 136, 93, 124, 217, 73, 77, 154, 46, 244, 106, 178, 10, 189,\n        146, 171, 135, 220, 144, 201, 229, 61, 61, 135, 192, 76, 64, 222, 138, 66, 197, 214, 166,\n        41, 39, 147, 245, 35, 15, 191, 134, 204, 64, 72, 168, 114, 232, 179, 225, 117, 94, 47, 184,\n        219, 143, 107, 210, 56, 223, 248, 86, 107, 154, 214, 43, 23, 71, 130, 241, 25, 50, 204,\n        144, 244, 19, 51, 33, 180, 0, 17, 184, 61, 147,\n    ];\n    let root_store = RootCertStore::empty();\n    let config = Arc::new(\n        ClientConfig::builder()\n            .with_safe_defaults()\n            .with_root_certificates(root_store)\n            .with_no_client_auth(),\n    );\n    let example_com = \"example.com\".try_into().unwrap();\n    let mut client = ClientConnection::new(config, example_com).unwrap();\n    let _ = client.read_tls(&mut io::Cursor::new(data));\n    let _ = client.process_new_packets();\n}"}
{"test_id": "image-rs-image/image-rs-image-e5580ec/tests-gen/fuzzer_script_exr.inputs.rs::test_81", "code": "fn roundtrip (bytes : & [u8]) -> ImageResult < () > { # [doc = \" Read the file from the specified path into an `Rgba32FImage`.\"] fn read_as_rgba_byte_image (read : impl Read + Seek) -> ImageResult < (u32 , u32 , Vec < u8 >) > { let mut decoder = OpenExrDecoder :: with_alpha_preference (read , Some (true)) ? ; match usize :: try_from (decoder . total_bytes ()) { Ok (decoded_size) if decoded_size <= 256 * 1024 * 1024 => { decoder . set_limits (Limits :: default ()) ? ; let (width , height) = decoder . dimensions () ; let mut buffer = vec ! [0 ; decoded_size] ; decoder . read_image (buffer . as_mut_slice ()) ? ; Ok ((width , height , buffer)) } _ => Err (image :: ImageError :: Limits (image :: error :: LimitError :: from_kind (image :: error :: LimitErrorKind :: InsufficientMemory ,) ,)) , } } # [doc = \" Write an `Rgba32FImage`.\"] # [doc = \" Assumes the writer is buffered. In most cases,\"] # [doc = \" you should wrap your writer in a `BufWriter` for best performance.\"] fn write_rgba_image (write : impl Write + Seek , (width , height , data) : & (u32 , u32 , Vec < u8 >) ,) -> ImageResult < () > { OpenExrEncoder :: new (write) . write_image (data . as_slice () , * width , * height , ColorType :: Rgba32F) } let decoded_image = read_as_rgba_byte_image (Cursor :: new (bytes)) ? ; let mut bytes = Vec :: with_capacity (bytes . len () + 20) ; write_rgba_image (Cursor :: new (& mut bytes) , & decoded_image) ? ; let redecoded_image = read_as_rgba_byte_image (Cursor :: new (bytes)) ? ; assert_eq ! (decoded_image , redecoded_image , \"image was valid but was not reproducible\") ; Ok (()) }", "test": "fn test_81() {\n    let data = [1, 125, 61, 39];\n    let _img = roundtrip(data);\n}"}
{"test_id": "quinn-rs-quinn/quinn-rs-quinn-83e4f46/tests-gen/streamid.inputs.rs::test_33", "code": "pub fn initiator(self) -> Side {\n        if self.0 & 0x1 == 0 {\n            Side::Client\n        } else {\n            Side::Server\n        }\n    }", "test": "fn test_33() {\n    let data = StreamIdParams {\n        side: Server,\n        dir: Uni,\n        index: 12514849899225656749,\n    };\n    let s = StreamId::new(data.side, data.dir, data.index);\n    assert_eq!(s.initiator(), data.side);\n    assert_eq!(s.dir(), data.dir);\n}"}
{"test_id": "bodil-im-rs/bodil-im-rs-2afaf54/tests-gen/hashset.inputs.rs::test_11", "code": "pub fn remove<BA>(&mut self, a: &BA) -> Option<A>\n    where\n        BA: Hash + Eq + ?Sized,\n        A: Borrow<BA>,\n    {\n        let root = PoolRef::make_mut(&self.pool.0, &mut self.root);\n        let result = root.remove(&self.pool.0, hash_key(&*self.hasher, a), 0, a);\n        if result.is_some() {\n            self.size -= 1;\n        }\n        result.map(|v| v.0)\n    }", "test": "fn test_11() {\n    let actions = [Remove(725361010688393226)];\n    let mut set = HashSet::new();\n    let mut nat = NatSet::new();\n    for action in actions {\n        match action {\n            Action::Insert(value) => {\n                let len = nat.len() + if nat.contains(&value) { 0 } else { 1 };\n                nat.insert(value);\n                set.insert(value);\n                assert_eq!(len, set.len());\n            }\n            Action::Remove(value) => {\n                let len = nat.len() - if nat.contains(&value) { 1 } else { 0 };\n                nat.remove(&value);\n                set.remove(&value);\n                assert_eq!(len, set.len());\n            }\n        }\n        assert_eq!(nat.len(), set.len());\n        assert_eq!(HashSet::from(nat.clone()), set);\n    }\n}"}
{"test_id": "BurntSushi-memchr/BurntSushi-memchr-f3fde7a/tests-gen/memrchr.inputs.rs::test_27", "code": "fn count(self) -> usize {\n        self.it.count(|s, e| {\n            // SAFETY: We rely on our generic iterator to return valid start\n            // and end pointers.\n            unsafe { count_raw(self.needle1, s, e) }\n        })\n    }", "test": "fn test_27() {\n    let data = [10, 241, 10, 254];\n    if data.is_empty() {\n        return;\n    }\n    memchr_iter(data[0], &data[1..]).rev().count();\n}"}
{"test_id": "cloud-hypervisor-cloud-hypervisor/cloud-hypervisor-cloud-hypervisor-db3a5f3/tests-gen/watchdog.inputs.rs::test_69", "code": "pub fn wait_for_epoll_threads(&mut self) {\n        self.common.wait_for_epoll_threads();\n    }", "test": "fn test_69() {\n    let bytes = [245];\n    if bytes.len() < QUEUE_DATA_SIZE || bytes.len() > (QUEUE_DATA_SIZE + MEM_SIZE) {\n        return;\n    }\n    let mut watchdog = virtio_devices::Watchdog::new(\n        \"fuzzer_watchdog\".to_owned(),\n        EventFd::new(EFD_NONBLOCK).unwrap(),\n        SeccompAction::Allow,\n        EventFd::new(EFD_NONBLOCK).unwrap(),\n        None,\n    )\n    .unwrap();\n    let queue_data = &bytes[..QUEUE_DATA_SIZE];\n    let mem_bytes = &bytes[QUEUE_DATA_SIZE..];\n    let q = setup_virt_queue(queue_data.try_into().unwrap());\n    let mem = GuestMemoryMmap::from_ranges(&[(GuestAddress(0), MEM_SIZE)]).unwrap();\n    if mem.write_slice(mem_bytes, GuestAddress(0 as u64)).is_err() {\n        return;\n    }\n    let guest_memory = GuestMemoryAtomic::new(mem);\n    let evt = EventFd::new(0).unwrap();\n    let queue_evt = unsafe { EventFd::from_raw_fd(libc::dup(evt.as_raw_fd())) };\n    queue_evt.write(1).unwrap();\n    watchdog\n        .activate(\n            guest_memory,\n            Arc::new(NoopVirtioInterrupt {}),\n            vec![(0, q, evt)],\n        )\n        .ok();\n    watchdog.wait_for_epoll_threads();\n}"}
{"test_id": "gimli-rs-gimli/gimli-rs-gimli-3947879/tests-gen/debug_line.inputs.rs::test_24", "code": "pub fn next_row(&mut self) -> Result<Option<(&LineProgramHeader<R, Offset>, &LineRow)>> {\n        // Perform any reset that was required after copying the previous row.\n        self.row.reset(self.program.header());\n\n        loop {\n            // Split the borrow here, rather than calling `self.header()`.\n            match self.instructions.next_instruction(self.program.header()) {\n                Err(err) => return Err(err),\n                Ok(None) => return Ok(None),\n                Ok(Some(instruction)) => {\n                    if self.row.execute(instruction, &mut self.program) {\n                        if self.row.tombstone {\n                            // Perform any reset that was required for the tombstone row.\n                            // Normally this is done when `next_row` is called again, but for\n                            // tombstones we loop immediately.\n                            self.row.reset(self.program.header());\n                        } else {\n                            return Ok(Some((self.header(), &self.row)));\n                        }\n                    }\n                    // Fall through, parse the next instruction, and see if that\n                    // yields a row.\n                }\n            }\n        }\n    }", "test": "fn test_24() {\n    let debug_line = [42, 91, 26];\n    let debug_line = DebugLine::new(&debug_line, LittleEndian);\n    let offset = DebugLineOffset(0);\n    let address_size = 8;\n    if let Ok(program) = debug_line.program(offset, address_size, None, None) {\n        let mut rows = program.rows();\n        while let Ok(Some(row)) = rows.next_row() {\n            let _ = row;\n        }\n    }\n}"}
{"test_id": "cloud-hypervisor-cloud-hypervisor/cloud-hypervisor-cloud-hypervisor-db3a5f3/tests-gen/balloon.inputs.rs::test_96", "code": "pub fn wait_for_epoll_threads(&mut self) {\n        self.common.wait_for_epoll_threads();\n    }", "test": "fn test_96() {\n    let bytes = [8, 157, 57];\n    if bytes.len() < QUEUE_DATA_SIZE * QUEUE_NUM\n        || bytes.len() > (QUEUE_DATA_SIZE * QUEUE_NUM + MEM_SIZE)\n    {\n        return;\n    }\n    let mut balloon = virtio_devices::Balloon::new(\n        \"fuzzer_balloon\".to_owned(),\n        BALLOON_SIZE,\n        true,\n        true,\n        SeccompAction::Allow,\n        EventFd::new(EFD_NONBLOCK).unwrap(),\n        None,\n    )\n    .unwrap();\n    let queue_data = &bytes[..QUEUE_DATA_SIZE * QUEUE_NUM];\n    let mem_bytes = &bytes[QUEUE_DATA_SIZE * QUEUE_NUM..];\n    let mem = GuestMemoryMmap::from_ranges(&[(GuestAddress(0), MEM_SIZE)]).unwrap();\n    if mem.write_slice(mem_bytes, GuestAddress(0 as u64)).is_err() {\n        return;\n    }\n    let guest_memory = GuestMemoryAtomic::new(mem);\n    let mut queues = setup_virt_queues(\n        &[\n            &queue_data[..QUEUE_DATA_SIZE].try_into().unwrap(),\n            &queue_data[QUEUE_DATA_SIZE..QUEUE_DATA_SIZE * 2]\n                .try_into()\n                .unwrap(),\n            &queue_data[QUEUE_DATA_SIZE * 2..QUEUE_DATA_SIZE * 3]\n                .try_into()\n                .unwrap(),\n        ],\n        0,\n    );\n    let inflate_q = queues.remove(0);\n    let inflate_evt = EventFd::new(0).unwrap();\n    let inflate_queue_evt = unsafe { EventFd::from_raw_fd(libc::dup(inflate_evt.as_raw_fd())) };\n    let deflate_q = queues.remove(0);\n    let deflate_evt = EventFd::new(0).unwrap();\n    let deflate_queue_evt = unsafe { EventFd::from_raw_fd(libc::dup(deflate_evt.as_raw_fd())) };\n    let reporting_q = queues.remove(0);\n    let reporting_evt = EventFd::new(0).unwrap();\n    let reporting_queue_evt = unsafe { EventFd::from_raw_fd(libc::dup(reporting_evt.as_raw_fd())) };\n    inflate_queue_evt.write(1).unwrap();\n    deflate_queue_evt.write(1).unwrap();\n    reporting_queue_evt.write(1).unwrap();\n    balloon\n        .activate(\n            guest_memory,\n            Arc::new(NoopVirtioInterrupt {}),\n            vec![\n                (0, inflate_q, inflate_evt),\n                (1, deflate_q, deflate_evt),\n                (2, reporting_q, reporting_evt),\n            ],\n        )\n        .ok();\n    balloon.wait_for_epoll_threads();\n}"}
{"test_id": "cloud-hypervisor-cloud-hypervisor/cloud-hypervisor-cloud-hypervisor-db3a5f3/tests-gen/block.inputs.rs::test_58", "code": "pub fn wait_for_epoll_threads(&mut self) {\n        self.common.wait_for_epoll_threads();\n    }", "test": "fn test_58() {\n    let bytes = [1, 0, 238, 53];\n    if bytes.len() < QUEUE_DATA_SIZE || bytes.len() > (QUEUE_DATA_SIZE + MEM_SIZE) {\n        return;\n    }\n    let queue_data = &bytes[..QUEUE_DATA_SIZE];\n    let mem_bytes = &bytes[QUEUE_DATA_SIZE..];\n    let shm = memfd_create(&ffi::CString::new(\"fuzz\").unwrap(), 0).unwrap();\n    let disk_file: File = unsafe { File::from_raw_fd(shm) };\n    let qcow_disk = Box::new(RawFileDiskSync::new(disk_file)) as Box<dyn DiskFile>;\n    let mut block = Block::new(\n        \"tmp\".to_owned(),\n        qcow_disk,\n        PathBuf::from(\"\"),\n        false,\n        false,\n        2,\n        256,\n        None,\n        SeccompAction::Allow,\n        None,\n        EventFd::new(EFD_NONBLOCK).unwrap(),\n        None,\n    )\n    .unwrap();\n    let q = setup_virt_queue(queue_data.try_into().unwrap());\n    let mem = GuestMemoryMmap::from_ranges(&[(GuestAddress(0), MEM_SIZE)]).unwrap();\n    if mem.write_slice(mem_bytes, GuestAddress(0 as u64)).is_err() {\n        return;\n    }\n    let guest_memory = GuestMemoryAtomic::new(mem);\n    let evt = EventFd::new(0).unwrap();\n    let queue_evt = unsafe { EventFd::from_raw_fd(libc::dup(evt.as_raw_fd())) };\n    queue_evt.write(1).unwrap();\n    block\n        .activate(\n            guest_memory,\n            Arc::new(NoopVirtioInterrupt {}),\n            vec![(0, q, evt)],\n        )\n        .ok();\n    block.wait_for_epoll_threads();\n}"}
{"test_id": "XAMPPRocky-tokei/XAMPPRocky-tokei-92ddc2e/tests-gen/parse_from_slice_total.inputs.rs::test_99", "code": "pub fn parse_from_slice (input : FuzzInput , check_total : bool) { let config = & Config { treat_doc_strings_as_comments : Some (input . treat_doc_strings_as_comments) , columns : None , hidden : None , no_ignore : None , no_ignore_parent : None , no_ignore_dot : None , no_ignore_vcs : None , sort : None , types : None , for_each_fn : None , } ; let stats = input . lang . parse_from_slice (input . data , config) ; if check_total { if let Ok (s) = str :: from_utf8 (input . data) { assert ! (stats . lines () <= s . lines () . count () , \"{} got more total lines ({}) than str::lines ({}). Code: {}, Comments: {}, Blanks: {}. treat_doc_strings_as_comments: {}. File contents (as UTF-8):\\n{}\" , input . lang . name () , stats . lines () , s . lines () . count () , stats . code , stats . comments , input . treat_doc_strings_as_comments , stats . blanks , s) } ; } }", "test": "fn test_99() {\n    let data = FuzzInput {\n        lang: Css,\n        treat_doc_strings_as_comments: false,\n        data: [255, 255, 255, 0, 252, 16, 255, 93, 16],\n    };\n    parse_from_slice(data, true);\n}"}
{"test_id": "rustls-rustls/rustls-rustls-ae583bd/tests-gen/message.inputs.rs::test_82", "code": "pub fn used(&self) -> usize {\n        self.cursor\n    }", "test": "fn test_82() {\n    let data = [\n        22, 3, 3, 0, 16, 20, 0, 0, 12, 9, 163, 151, 252, 228, 20, 143, 65, 96, 164, 84, 69,\n    ];\n    let mut rdr = Reader::init(data);\n    if let Ok(m) = OpaqueMessage::read(&mut rdr) {\n        let msg = match Message::try_from(m.into_plain_message()) {\n            Ok(msg) => msg,\n            Err(_) => return,\n        };\n        let enc = PlainMessage::from(msg)\n            .into_unencrypted_opaque()\n            .encode();\n        assert_eq!(enc, data[..rdr.used()]);\n    }\n}"}
{"test_id": "marshallpierce-rust-base64/marshallpierce-rust-base64-4ef33cc/tests-gen/decode_random.inputs.rs::test_71", "code": "fn decode<T: AsRef<[u8]>>(&self, input: T) -> Result<Vec<u8>, DecodeError> {\n        fn inner<E>(engine: &E, input_bytes: &[u8]) -> Result<Vec<u8>, DecodeError>\n        where\n            E: Engine + ?Sized,\n        {\n            let estimate = engine.internal_decoded_len_estimate(input_bytes.len());\n            let mut buffer = vec![0; estimate.decoded_len_estimate()];\n\n            let bytes_written = engine\n                .internal_decode(input_bytes, &mut buffer, estimate)?\n                .decoded_len;\n\n            buffer.truncate(bytes_written);\n\n            Ok(buffer)\n        }\n\n        inner(self, input.as_ref())\n    }", "test": "fn test_71() {\n    let data = [49];\n    let engine = utils::random_engine(data);\n    let _ = engine.decode(data);\n}"}
{"test_id": "marshallpierce-rust-base64/marshallpierce-rust-base64-4ef33cc/tests-gen/decode_random.inputs.rs::test_23", "code": "fn decode<T: AsRef<[u8]>>(&self, input: T) -> Result<Vec<u8>, DecodeError> {\n        fn inner<E>(engine: &E, input_bytes: &[u8]) -> Result<Vec<u8>, DecodeError>\n        where\n            E: Engine + ?Sized,\n        {\n            let estimate = engine.internal_decoded_len_estimate(input_bytes.len());\n            let mut buffer = vec![0; estimate.decoded_len_estimate()];\n\n            let bytes_written = engine\n                .internal_decode(input_bytes, &mut buffer, estimate)?\n                .decoded_len;\n\n            buffer.truncate(bytes_written);\n\n            Ok(buffer)\n        }\n\n        inner(self, input.as_ref())\n    }", "test": "fn test_23() {\n    let data = [1];\n    let engine = utils::random_engine(data);\n    let _ = engine.decode(data);\n}"}
{"test_id": "tafia-calamine/tafia-calamine-5a5804d/tests-gen/fuzz_all.inputs.rs::test_53", "code": "fn count<R: Reader<BufReader<File>>>(path: &str) -> usize {\n    let path = format!(\"{}/{}\", env!(\"CARGO_MANIFEST_DIR\"), path);\n    let mut excel: R = open_workbook(&path).expect(\"cannot open excel file\");\n\n    let sheets = excel.sheet_names().to_owned();\n    let mut count = 0;\n    for s in sheets {\n        count += excel\n            .worksheet_range(&s)\n            .unwrap()\n            .unwrap()\n            .rows()\n            .flat_map(|r| r.iter())\n            .count();\n    }\n    count\n}", "test": "fn test_53() {\n    let data = [91, 33];\n    let file_name = \"fuzz.xlsx\";\n    if let Ok(mut file) = File::create(file_name) {\n        if file.write_all(data).is_err() {\n            return;\n        }\n    }\n    let mut workbook: Xlsx<_> = match open_workbook(file_name) {\n        Ok(excel) => excel,\n        Err(_) => return,\n    };\n    for worksheet in workbook.worksheets() {\n        if let Some(Ok(range)) = workbook.worksheet_range(&worksheet.0) {\n            let _ = range.get_size().0 * range.get_size().1;\n            range.used_cells().count();\n        }\n    }\n    if let Some(Ok(mut vba)) = workbook.vba_project() {\n        let vba = vba.to_mut();\n        for module_name in vba.get_module_names() {\n            if vba.get_module(module_name).is_ok() {\n                for r in vba.get_references() {\n                    r.is_missing();\n                }\n            }\n        }\n    }\n    let sheets = workbook.sheet_names().to_owned();\n    for s in sheets {\n        if let Some(Ok(formula)) = workbook.worksheet_formula(&s) {\n            formula\n                .rows()\n                .flat_map(|r| r.iter().filter(|f| !f.is_empty()))\n                .count();\n        }\n    }\n}"}
{"test_id": "quinn-rs-quinn/quinn-rs-quinn-83e4f46/tests-gen/streamid.inputs.rs::test_32", "code": "pub fn initiator(self) -> Side {\n        if self.0 & 0x1 == 0 {\n            Side::Client\n        } else {\n            Side::Server\n        }\n    }", "test": "fn test_32() {\n    let data = StreamIdParams {\n        side: Server,\n        dir: Uni,\n        index: 12514849899225656749,\n    };\n    let s = StreamId::new(data.side, data.dir, data.index);\n    assert_eq!(s.initiator(), data.side);\n    assert_eq!(s.dir(), data.dir);\n}"}
{"test_id": "cloud-hypervisor-cloud-hypervisor/cloud-hypervisor-cloud-hypervisor-db3a5f3/tests-gen/iommu.inputs.rs::test_68", "code": "pub fn wait_for_epoll_threads(&mut self) {\n        self.common.wait_for_epoll_threads();\n    }", "test": "fn test_68() {\n    let bytes = [4, 58, 10, 4];\n    if bytes.len() < (QUEUE_DATA_SIZE + QUEUE_BYTES_SIZE)\n        || bytes.len() > (QUEUE_DATA_SIZE + QUEUE_BYTES_SIZE + MEM_SIZE)\n    {\n        return;\n    }\n    let (mut iommu, _) = virtio_devices::Iommu::new(\n        \"fuzzer_iommu\".to_owned(),\n        SeccompAction::Allow,\n        EventFd::new(EFD_NONBLOCK).unwrap(),\n        ((MEM_SIZE - IOVA_SPACE_SIZE) as u64, (MEM_SIZE - 1) as u64),\n        None,\n    )\n    .unwrap();\n    let queue_data = &bytes[..QUEUE_DATA_SIZE];\n    let queue_bytes = &bytes[QUEUE_DATA_SIZE..QUEUE_DATA_SIZE + QUEUE_BYTES_SIZE];\n    let mem_bytes = &bytes[QUEUE_DATA_SIZE + QUEUE_BYTES_SIZE..];\n    let request_queue = setup_virt_queue(queue_data.try_into().unwrap());\n    let _event_queue = setup_virt_queue(queue_data.try_into().unwrap());\n    let mem = GuestMemoryMmap::from_ranges(&[\n        (GuestAddress(0), MEM_SIZE),\n        (GuestAddress(DESC_TABLE_ADDR), QUEUE_BYTES_SIZE),\n    ])\n    .unwrap();\n    if mem\n        .write_slice(queue_bytes, GuestAddress(DESC_TABLE_ADDR))\n        .is_err()\n    {\n        return;\n    }\n    if mem.write_slice(mem_bytes, GuestAddress(0 as u64)).is_err() {\n        return;\n    }\n    let guest_memory = GuestMemoryAtomic::new(mem);\n    let request_evt = EventFd::new(0).unwrap();\n    let request_queue_evt = unsafe { EventFd::from_raw_fd(libc::dup(request_evt.as_raw_fd())) };\n    let _event_evt = EventFd::new(0).unwrap();\n    request_queue_evt.write(1).unwrap();\n    iommu\n        .activate(\n            guest_memory,\n            Arc::new(NoopVirtioInterrupt {}),\n            vec![\n                (0, request_queue, request_evt),\n                (0, _event_queue, _event_evt),\n            ],\n        )\n        .ok();\n    iommu.wait_for_epoll_threads();\n}"}
{"test_id": "BurntSushi-memchr/BurntSushi-memchr-f3fde7a/tests-gen/memrmem.inputs.rs::test_3", "code": "pub fn count(&self, haystack: &[u8]) -> usize {\n        // SAFETY: All of our pointers are derived directly from a borrowed\n        // slice, which is guaranteed to be valid.\n        unsafe {\n            let start = haystack.as_ptr();\n            let end = start.add(haystack.len());\n            self.count_raw(start, end)\n        }\n    }", "test": "fn test_3() {\n    let data = [255, 14];\n    if data.len() < 2 {\n        return;\n    }\n    let split = std::cmp::max(data[0] as usize, 1) % data.len() as usize;\n    let (needle, haystack) = (&data[..split], &data[split..]);\n    memmem::rfind_iter(haystack, needle).count();\n}"}
{"test_id": "cloud-hypervisor-cloud-hypervisor/cloud-hypervisor-cloud-hypervisor-db3a5f3/tests-gen/iommu.inputs.rs::test_6", "code": "pub fn wait_for_epoll_threads(&mut self) {\n        self.common.wait_for_epoll_threads();\n    }", "test": "fn test_6() {\n    let bytes = [11];\n    if bytes.len() < (QUEUE_DATA_SIZE + QUEUE_BYTES_SIZE)\n        || bytes.len() > (QUEUE_DATA_SIZE + QUEUE_BYTES_SIZE + MEM_SIZE)\n    {\n        return;\n    }\n    let (mut iommu, _) = virtio_devices::Iommu::new(\n        \"fuzzer_iommu\".to_owned(),\n        SeccompAction::Allow,\n        EventFd::new(EFD_NONBLOCK).unwrap(),\n        ((MEM_SIZE - IOVA_SPACE_SIZE) as u64, (MEM_SIZE - 1) as u64),\n        None,\n    )\n    .unwrap();\n    let queue_data = &bytes[..QUEUE_DATA_SIZE];\n    let queue_bytes = &bytes[QUEUE_DATA_SIZE..QUEUE_DATA_SIZE + QUEUE_BYTES_SIZE];\n    let mem_bytes = &bytes[QUEUE_DATA_SIZE + QUEUE_BYTES_SIZE..];\n    let request_queue = setup_virt_queue(queue_data.try_into().unwrap());\n    let _event_queue = setup_virt_queue(queue_data.try_into().unwrap());\n    let mem = GuestMemoryMmap::from_ranges(&[\n        (GuestAddress(0), MEM_SIZE),\n        (GuestAddress(DESC_TABLE_ADDR), QUEUE_BYTES_SIZE),\n    ])\n    .unwrap();\n    if mem\n        .write_slice(queue_bytes, GuestAddress(DESC_TABLE_ADDR))\n        .is_err()\n    {\n        return;\n    }\n    if mem.write_slice(mem_bytes, GuestAddress(0 as u64)).is_err() {\n        return;\n    }\n    let guest_memory = GuestMemoryAtomic::new(mem);\n    let request_evt = EventFd::new(0).unwrap();\n    let request_queue_evt = unsafe { EventFd::from_raw_fd(libc::dup(request_evt.as_raw_fd())) };\n    let _event_evt = EventFd::new(0).unwrap();\n    request_queue_evt.write(1).unwrap();\n    iommu\n        .activate(\n            guest_memory,\n            Arc::new(NoopVirtioInterrupt {}),\n            vec![\n                (0, request_queue, request_evt),\n                (0, _event_queue, _event_evt),\n            ],\n        )\n        .ok();\n    iommu.wait_for_epoll_threads();\n}"}
{"test_id": "cloud-hypervisor-cloud-hypervisor/cloud-hypervisor-cloud-hypervisor-db3a5f3/tests-gen/iommu.inputs.rs::test_7", "code": "pub fn wait_for_epoll_threads(&mut self) {\n        self.common.wait_for_epoll_threads();\n    }", "test": "fn test_7() {\n    let bytes = [11];\n    if bytes.len() < (QUEUE_DATA_SIZE + QUEUE_BYTES_SIZE)\n        || bytes.len() > (QUEUE_DATA_SIZE + QUEUE_BYTES_SIZE + MEM_SIZE)\n    {\n        return;\n    }\n    let (mut iommu, _) = virtio_devices::Iommu::new(\n        \"fuzzer_iommu\".to_owned(),\n        SeccompAction::Allow,\n        EventFd::new(EFD_NONBLOCK).unwrap(),\n        ((MEM_SIZE - IOVA_SPACE_SIZE) as u64, (MEM_SIZE - 1) as u64),\n        None,\n    )\n    .unwrap();\n    let queue_data = &bytes[..QUEUE_DATA_SIZE];\n    let queue_bytes = &bytes[QUEUE_DATA_SIZE..QUEUE_DATA_SIZE + QUEUE_BYTES_SIZE];\n    let mem_bytes = &bytes[QUEUE_DATA_SIZE + QUEUE_BYTES_SIZE..];\n    let request_queue = setup_virt_queue(queue_data.try_into().unwrap());\n    let _event_queue = setup_virt_queue(queue_data.try_into().unwrap());\n    let mem = GuestMemoryMmap::from_ranges(&[\n        (GuestAddress(0), MEM_SIZE),\n        (GuestAddress(DESC_TABLE_ADDR), QUEUE_BYTES_SIZE),\n    ])\n    .unwrap();\n    if mem\n        .write_slice(queue_bytes, GuestAddress(DESC_TABLE_ADDR))\n        .is_err()\n    {\n        return;\n    }\n    if mem.write_slice(mem_bytes, GuestAddress(0 as u64)).is_err() {\n        return;\n    }\n    let guest_memory = GuestMemoryAtomic::new(mem);\n    let request_evt = EventFd::new(0).unwrap();\n    let request_queue_evt = unsafe { EventFd::from_raw_fd(libc::dup(request_evt.as_raw_fd())) };\n    let _event_evt = EventFd::new(0).unwrap();\n    request_queue_evt.write(1).unwrap();\n    iommu\n        .activate(\n            guest_memory,\n            Arc::new(NoopVirtioInterrupt {}),\n            vec![\n                (0, request_queue, request_evt),\n                (0, _event_queue, _event_evt),\n            ],\n        )\n        .ok();\n    iommu.wait_for_epoll_threads();\n}"}
{"test_id": "BurntSushi-memchr/BurntSushi-memchr-f3fde7a/tests-gen/memrchr3.inputs.rs::test_77", "code": "fn count(self) -> usize {\n        self.it.count(|s, e| {\n            // SAFETY: We rely on our generic iterator to return valid start\n            // and end pointers.\n            unsafe { count_raw(self.needle1, s, e) }\n        })\n    }", "test": "fn test_77() {\n    let data = [138];\n    if data.len() < 3 {\n        return;\n    }\n    memchr3_iter(data[0], data[1], data[2], &data[3..]).rev().count();\n}"}
{"test_id": "image-rs-image-png/image-rs-image-png-e113d76/tests-gen/roundtrip.inputs.rs::test_33", "code": "fn encode_png < 'a > (width : u8 , filter : u8 , compression : u8 , color_type : u8 , raw_bit_depth : u8 , raw_palette : & 'a [u8] , data : & 'a [u8]) -> Option < (& 'a [u8] , Vec < u8 >) > { let width = width as u32 ; if width == 0 { return None } ; let filter = FilterType :: from_u8 (filter) ? ; let bit_depth = BitDepth :: from_u8 (raw_bit_depth) ? ; let max_palette_length = 3 * u32 :: pow (2 , raw_bit_depth as u32) as usize ; let mut palette = raw_palette ; let color_type = ColorType :: from_u8 (color_type) ? ; if let ColorType :: Indexed = color_type { if raw_palette . len () > max_palette_length { palette = & raw_palette [.. max_palette_length] ; } } let compression = match compression { 0 => png :: Compression :: Default , 1 => png :: Compression :: Fast , 2 => png :: Compression :: Best , 3 => png :: Compression :: Huffman , 4 => png :: Compression :: Rle , _ => return None , } ; let bytes_per_row = raw_row_length_from_width (bit_depth , color_type , width) - 1 ; let height = data . len () / bytes_per_row ; let total_bytes = bytes_per_row * height ; let data_to_encode = & data [.. total_bytes] ; let mut output : Vec < u8 > = Vec :: new () ; { let mut encoder = png :: Encoder :: new (& mut output , width , height as u32) ; encoder . set_depth (bit_depth) ; encoder . set_color (color_type) ; encoder . set_filter (filter) ; encoder . set_compression (compression) ; if let ColorType :: Indexed = color_type { encoder . set_palette (palette) } let mut writer = encoder . write_header () . ok () ? ; writer . write_image_data (data_to_encode) . expect (\"Encoding failed\") ; } Some ((data_to_encode , output)) }", "test": "fn test_33() {\n    let data = (96, 209, 255, 0, 96, [209], [255, 0, 96]);\n    if let Some((raw, encoded)) =\n        encode_png(data.0, data.1, data.2, data.3, data.4, &data.5, &data.6)\n    {\n        let (_info, raw_decoded) = decode_png(&encoded);\n        let raw_decoded = &raw_decoded[..raw.len()];\n        assert_eq!(raw, raw_decoded);\n    }\n}"}
{"test_id": "cloud-hypervisor-cloud-hypervisor/cloud-hypervisor-cloud-hypervisor-db3a5f3/tests-gen/pmem.inputs.rs::test_48", "code": "pub fn wait_for_epoll_threads(&mut self) {\n        self.common.wait_for_epoll_threads();\n    }", "test": "fn test_48() {\n    let bytes = [10, 255];\n    if bytes.len() < QUEUE_DATA_SIZE || bytes.len() > (QUEUE_DATA_SIZE + MEM_SIZE) {\n        return;\n    }\n    let mut pmem = create_dummy_pmem();\n    let queue_data = &bytes[..QUEUE_DATA_SIZE];\n    let mem_bytes = &bytes[QUEUE_DATA_SIZE..];\n    let q = setup_virt_queue(queue_data.try_into().unwrap());\n    let mem = GuestMemoryMmap::from_ranges(&[(GuestAddress(0), MEM_SIZE)]).unwrap();\n    if mem.write_slice(mem_bytes, GuestAddress(0 as u64)).is_err() {\n        return;\n    }\n    let guest_memory = GuestMemoryAtomic::new(mem);\n    let evt = EventFd::new(0).unwrap();\n    let queue_evt = unsafe { EventFd::from_raw_fd(libc::dup(evt.as_raw_fd())) };\n    queue_evt.write(1).unwrap();\n    pmem.activate(\n        guest_memory,\n        Arc::new(NoopVirtioInterrupt {}),\n        vec![(0, q, evt)],\n    )\n    .ok();\n    pmem.wait_for_epoll_threads();\n}"}
{"test_id": "BurntSushi-memchr/BurntSushi-memchr-f3fde7a/tests-gen/memmem.inputs.rs::test_51", "code": "pub fn count(&self, haystack: &[u8]) -> usize {\n        // SAFETY: All of our pointers are derived directly from a borrowed\n        // slice, which is guaranteed to be valid.\n        unsafe {\n            let start = haystack.as_ptr();\n            let end = start.add(haystack.len());\n            self.count_raw(start, end)\n        }\n    }", "test": "fn test_51() {\n    let data = [10];\n    if data.len() < 2 {\n        return;\n    }\n    let split = std::cmp::max(data[0] as usize, 1) % data.len() as usize;\n    let (needle, haystack) = (&data[..split], &data[split..]);\n    memmem::find_iter(haystack, needle).count();\n}"}
{"test_id": "gfx-rs-naga/gfx-rs-naga-92e41b4/tests-gen/wgsl_parser.inputs.rs::test_90", "code": "pub fn parse(mut self) -> Result<crate::Module, Error> {\n        let mut module = {\n            if self.next()? != spirv::MAGIC_NUMBER {\n                return Err(Error::InvalidHeader);\n            }\n            let version_raw = self.next()?;\n            let generator = self.next()?;\n            let _bound = self.next()?;\n            let _schema = self.next()?;\n            log::info!(\"Generated by {} version {:x}\", generator, version_raw);\n            crate::Module::default()\n        };\n\n        self.layouter.clear();\n        self.dummy_functions = Arena::new();\n        self.lookup_function.clear();\n        self.function_call_graph.clear();\n\n        loop {\n            use spirv::Op;\n\n            let inst = match self.next_inst() {\n                Ok(inst) => inst,\n                Err(Error::IncompleteData) => break,\n                Err(other) => return Err(other),\n            };\n            log::debug!(\"\\t{:?} [{}]\", inst.op, inst.wc);\n\n            match inst.op {\n                Op::Capability => self.parse_capability(inst),\n                Op::Extension => self.parse_extension(inst),\n                Op::ExtInstImport => self.parse_ext_inst_import(inst),\n                Op::MemoryModel => self.parse_memory_model(inst),\n                Op::EntryPoint => self.parse_entry_point(inst),\n                Op::ExecutionMode => self.parse_execution_mode(inst),\n                Op::String => self.parse_string(inst),\n                Op::Source => self.parse_source(inst),\n                Op::SourceExtension => self.parse_source_extension(inst),\n                Op::Name => self.parse_name(inst),\n                Op::MemberName => self.parse_member_name(inst),\n                Op::ModuleProcessed => self.parse_module_processed(inst),\n                Op::Decorate => self.parse_decorate(inst),\n                Op::MemberDecorate => self.parse_member_decorate(inst),\n                Op::TypeVoid => self.parse_type_void(inst),\n                Op::TypeBool => self.parse_type_bool(inst, &mut module),\n                Op::TypeInt => self.parse_type_int(inst, &mut module),\n                Op::TypeFloat => self.parse_type_float(inst, &mut module),\n                Op::TypeVector => self.parse_type_vector(inst, &mut module),\n                Op::TypeMatrix => self.parse_type_matrix(inst, &mut module),\n                Op::TypeFunction => self.parse_type_function(inst),\n                Op::TypePointer => self.parse_type_pointer(inst, &mut module),\n                Op::TypeArray => self.parse_type_array(inst, &mut module),\n                Op::TypeRuntimeArray => self.parse_type_runtime_array(inst, &mut module),\n                Op::TypeStruct => self.parse_type_struct(inst, &mut module),\n                Op::TypeImage => self.parse_type_image(inst, &mut module),\n                Op::TypeSampledImage => self.parse_type_sampled_image(inst),\n                Op::TypeSampler => self.parse_type_sampler(inst, &mut module),\n                Op::Constant | Op::SpecConstant => self.parse_constant(inst, &mut module),\n                Op::ConstantComposite => self.parse_composite_constant(inst, &mut module),\n                Op::ConstantNull | Op::Undef => self.parse_null_constant(inst, &mut module),\n                Op::ConstantTrue => self.parse_bool_constant(inst, true, &mut module),\n                Op::ConstantFalse => self.parse_bool_constant(inst, false, &mut module),\n                Op::Variable => self.parse_global_variable(inst, &mut module),\n                Op::Function => {\n                    self.switch(ModuleState::Function, inst.op)?;\n                    inst.expect(5)?;\n                    self.parse_function(&mut module)\n                }\n                _ => Err(Error::UnsupportedInstruction(self.state, inst.op)), //TODO\n            }?;\n        }\n\n        log::info!(\"Patching...\");\n        {\n            let mut nodes = petgraph::algo::toposort(&self.function_call_graph, None)\n                .map_err(|cycle| Error::FunctionCallCycle(cycle.node_id()))?;\n            nodes.reverse(); // we need dominated first\n            let mut functions = mem::take(&mut module.functions);\n            for fun_id in nodes {\n                if fun_id > !(functions.len() as u32) {\n                    // skip all the fake IDs registered for the entry points\n                    continue;\n                }\n                let lookup = self.lookup_function.get_mut(&fun_id).unwrap();\n                // take out the function from the old array\n                let fun = mem::take(&mut functions[lookup.handle]);\n                // add it to the newly formed arena, and adjust the lookup\n                lookup.handle = module\n                    .functions\n                    .append(fun, functions.get_span(lookup.handle));\n            }\n        }\n        // patch all the functions\n        for (handle, fun) in module.functions.iter_mut() {\n            self.patch_function(Some(handle), fun)?;\n        }\n        for ep in module.entry_points.iter_mut() {\n            self.patch_function(None, &mut ep.function)?;\n        }\n\n        // Check all the images and samplers to have consistent comparison property.\n        for (handle, flags) in self.handle_sampling.drain() {\n            if !image::patch_comparison_type(\n                flags,\n                module.global_variables.get_mut(handle),\n                &mut module.types,\n            ) {\n                return Err(Error::InconsistentComparisonSampling(handle));\n            }\n        }\n\n        if !self.future_decor.is_empty() {\n            log::warn!(\"Unused item decorations: {:?}\", self.future_decor);\n            self.future_decor.clear();\n        }\n        if !self.future_member_decor.is_empty() {\n            log::warn!(\"Unused member decorations: {:?}\", self.future_member_decor);\n            self.future_member_decor.clear();\n        }\n\n        Ok(module)\n    }", "test": "fn test_90() {\n    let data = \"!\\n]\";\n    let _result = Frontend::new().parse(&data);\n}"}
{"test_id": "marshallpierce-rust-base64/marshallpierce-rust-base64-4ef33cc/tests-gen/roundtrip.inputs.rs::test_94", "code": "pub fn decode<T: AsRef<[u8]>>(input: T) -> Result<Vec<u8>, DecodeError> {\n    STANDARD.decode(input)\n}", "test": "fn test_94() {\n    let data = [10, 43, 48];\n    let encoded = STANDARD.encode(data);\n    let decoded = STANDARD.decode(&encoded).unwrap();\n    assert_eq!(data, decoded.as_slice());\n}"}
{"test_id": "rustls-rustls/rustls-rustls-ae583bd/tests-gen/message.inputs.rs::test_80", "code": "pub fn used(&self) -> usize {\n        self.cursor\n    }", "test": "fn test_80() {\n    let data = [\n        22, 3, 3, 0, 16, 20, 0, 0, 12, 69, 253, 124, 44, 168, 229, 83, 85, 218, 252, 136, 223,\n    ];\n    let mut rdr = Reader::init(data);\n    if let Ok(m) = OpaqueMessage::read(&mut rdr) {\n        let msg = match Message::try_from(m.into_plain_message()) {\n            Ok(msg) => msg,\n            Err(_) => return,\n        };\n        let enc = PlainMessage::from(msg)\n            .into_unencrypted_opaque()\n            .encode();\n        assert_eq!(enc, data[..rdr.used()]);\n    }\n}"}
{"test_id": "marshallpierce-rust-base64/marshallpierce-rust-base64-4ef33cc/tests-gen/roundtrip_no_pad.inputs.rs::test_10", "code": "fn decode<T: AsRef<[u8]>>(&self, input: T) -> Result<Vec<u8>, DecodeError> {\n        fn inner<E>(engine: &E, input_bytes: &[u8]) -> Result<Vec<u8>, DecodeError>\n        where\n            E: Engine + ?Sized,\n        {\n            let estimate = engine.internal_decoded_len_estimate(input_bytes.len());\n            let mut buffer = vec![0; estimate.decoded_len_estimate()];\n\n            let bytes_written = engine\n                .internal_decode(input_bytes, &mut buffer, estimate)?\n                .decoded_len;\n\n            buffer.truncate(bytes_written);\n\n            Ok(buffer)\n        }\n\n        inner(self, input.as_ref())\n    }", "test": "fn test_10() {\n    let data = [10];\n    let config = general_purpose::GeneralPurposeConfig::new()\n        .with_encode_padding(false)\n        .with_decode_padding_mode(engine::DecodePaddingMode::RequireNone);\n    let engine = general_purpose::GeneralPurpose::new(&base64::alphabet::STANDARD, config);\n    let encoded = engine.encode(data);\n    let decoded = engine.decode(&encoded).unwrap();\n    assert_eq!(data, decoded.as_slice());\n}"}
{"test_id": "rustls-rustls/rustls-rustls-ae583bd/tests-gen/server.inputs.rs::test_94", "code": "pub fn process_new_packets(&mut self) -> Result<IoState, Error> {\n        match self {\n            Self::Client(conn) => conn.process_new_packets(),\n            Self::Server(conn) => conn.process_new_packets(),\n        }\n    }", "test": "fn test_94() {\n    let data = [\n        22, 3, 1, 0, 187, 1, 0, 0, 183, 3, 3, 220, 22, 51, 168, 177, 163, 9, 68, 53, 77, 77, 39,\n        28, 3, 125, 157, 176, 186, 53, 22, 211, 5, 127, 250, 92, 65, 31, 143, 93, 97, 146, 138, 0,\n        0, 20, 19, 3, 19, 2, 19, 1, 204, 169, 204, 168, 192, 44, 192, 43, 192, 48, 192, 47, 0, 255,\n        1, 0, 0, 122, 0, 43, 0, 5, 4, 127, 18, 3, 3, 0, 0, 0, 11, 0, 9, 0, 0, 6, 106, 98, 112, 46,\n        105, 111, 0, 11, 0, 2, 1, 0, 0, 10, 0, 8, 0, 6, 0, 29, 0, 24, 0, 23, 0, 13, 0, 20, 0, 18,\n        5, 3, 4, 3, 8, 6, 8, 5, 8, 4, 6, 1, 5, 1, 4, 1, 2, 1, 0, 23, 0, 0, 0, 40, 0, 218, 255, 227,\n        0, 29, 0, 32, 15, 198, 110, 208, 67, 98, 44, 245, 131, 181, 192, 152, 44, 176, 179, 3, 145,\n        228, 48, 108, 94, 171, 40, 164, 56, 3, 101, 56, 34, 246, 111, 37, 69, 42, 45, 0, 2, 1, 1,\n        0, 35, 0, 0, 23, 3, 1, 0, 53, 219, 184, 117, 77, 19, 58, 216, 56, 238, 189, 136, 130, 200,\n        75, 166, 179, 221, 205, 76, 177, 233, 190, 144, 63, 232, 169, 106, 107, 196, 128, 137, 238,\n        184, 112, 79, 244, 78, 254, 64, 128, 90, 16, 155, 32, 243, 35, 34, 228, 249, 131, 79, 5,\n        236, 23, 3, 1, 0, 98, 232, 125, 164, 163, 59, 255, 99, 156, 191, 129, 130, 16, 57, 31, 56,\n        64, 0, 192, 24, 151, 61, 57, 10, 81, 47, 192, 94, 212, 116, 62, 40, 209, 146, 147, 24, 216,\n        46, 208, 33, 113, 212, 48, 157, 238, 157, 45, 120, 98, 10, 232, 255, 210, 173, 123, 200,\n        152, 59, 10, 57, 0, 154, 207, 11, 90, 130, 199, 181, 127, 192, 247, 83, 193, 104, 19, 154,\n        127, 6, 156, 172, 21, 121, 0, 0, 250, 196, 88, 45, 208, 213, 175, 154, 154, 143, 29, 49,\n        69, 68, 88,\n    ];\n    let config = Arc::new(\n        ServerConfig::builder()\n            .with_safe_defaults()\n            .with_no_client_auth()\n            .with_cert_resolver(Arc::new(Fail)),\n    );\n    let mut server = ServerConnection::new(config).unwrap();\n    let _ = server.read_tls(&mut io::Cursor::new(data));\n    let _ = server.process_new_packets();\n}"}
{"test_id": "marshallpierce-rust-base64/marshallpierce-rust-base64-4ef33cc/tests-gen/roundtrip.inputs.rs::test_89", "code": "pub fn decode<T: AsRef<[u8]>>(input: T) -> Result<Vec<u8>, DecodeError> {\n    STANDARD.decode(input)\n}", "test": "fn test_89() {\n    let data = [48, 42];\n    let encoded = STANDARD.encode(data);\n    let decoded = STANDARD.decode(&encoded).unwrap();\n    assert_eq!(data, decoded.as_slice());\n}"}
{"test_id": "uutils-coreutils/uutils-coreutils-73b7c46/tests-gen/fuzz_parse_size.inputs.rs::test_50", "code": "pub fn parse_size(size: &str) -> Result<u64, ParseSizeError> {\n    Parser::default().parse(size)\n}", "test": "fn test_50() {\n    let data = [10, 109, 105, 4];\n    if let Ok(s) = std::str::from_utf8(data) {\n        _ = parse_size(s);\n    }\n}"}
{"test_id": "cloud-hypervisor-cloud-hypervisor/cloud-hypervisor-cloud-hypervisor-db3a5f3/tests-gen/watchdog.inputs.rs::test_40", "code": "pub fn wait_for_epoll_threads(&mut self) {\n        self.common.wait_for_epoll_threads();\n    }", "test": "fn test_40() {\n    let bytes = [10, 10, 35];\n    if bytes.len() < QUEUE_DATA_SIZE || bytes.len() > (QUEUE_DATA_SIZE + MEM_SIZE) {\n        return;\n    }\n    let mut watchdog = virtio_devices::Watchdog::new(\n        \"fuzzer_watchdog\".to_owned(),\n        EventFd::new(EFD_NONBLOCK).unwrap(),\n        SeccompAction::Allow,\n        EventFd::new(EFD_NONBLOCK).unwrap(),\n        None,\n    )\n    .unwrap();\n    let queue_data = &bytes[..QUEUE_DATA_SIZE];\n    let mem_bytes = &bytes[QUEUE_DATA_SIZE..];\n    let q = setup_virt_queue(queue_data.try_into().unwrap());\n    let mem = GuestMemoryMmap::from_ranges(&[(GuestAddress(0), MEM_SIZE)]).unwrap();\n    if mem.write_slice(mem_bytes, GuestAddress(0 as u64)).is_err() {\n        return;\n    }\n    let guest_memory = GuestMemoryAtomic::new(mem);\n    let evt = EventFd::new(0).unwrap();\n    let queue_evt = unsafe { EventFd::from_raw_fd(libc::dup(evt.as_raw_fd())) };\n    queue_evt.write(1).unwrap();\n    watchdog\n        .activate(\n            guest_memory,\n            Arc::new(NoopVirtioInterrupt {}),\n            vec![(0, q, evt)],\n        )\n        .ok();\n    watchdog.wait_for_epoll_threads();\n}"}
{"test_id": "BurntSushi-memchr/BurntSushi-memchr-f3fde7a/tests-gen/memrmem.inputs.rs::test_82", "code": "pub fn count(&self, haystack: &[u8]) -> usize {\n        // SAFETY: All of our pointers are derived directly from a borrowed\n        // slice, which is guaranteed to be valid.\n        unsafe {\n            let start = haystack.as_ptr();\n            let end = start.add(haystack.len());\n            self.count_raw(start, end)\n        }\n    }", "test": "fn test_82() {\n    let data = [238, 144, 0, 144];\n    if data.len() < 2 {\n        return;\n    }\n    let split = std::cmp::max(data[0] as usize, 1) % data.len() as usize;\n    let (needle, haystack) = (&data[..split], &data[split..]);\n    memmem::rfind_iter(haystack, needle).count();\n}"}
{"test_id": "XAMPPRocky-tokei/XAMPPRocky-tokei-92ddc2e/tests-gen/parse_from_slice_total.inputs.rs::test_25", "code": "pub fn parse_from_slice (input : FuzzInput , check_total : bool) { let config = & Config { treat_doc_strings_as_comments : Some (input . treat_doc_strings_as_comments) , columns : None , hidden : None , no_ignore : None , no_ignore_parent : None , no_ignore_dot : None , no_ignore_vcs : None , sort : None , types : None , for_each_fn : None , } ; let stats = input . lang . parse_from_slice (input . data , config) ; if check_total { if let Ok (s) = str :: from_utf8 (input . data) { assert ! (stats . lines () <= s . lines () . count () , \"{} got more total lines ({}) than str::lines ({}). Code: {}, Comments: {}, Blanks: {}. treat_doc_strings_as_comments: {}. File contents (as UTF-8):\\n{}\" , input . lang . name () , stats . lines () , s . lines () . count () , stats . code , stats . comments , input . treat_doc_strings_as_comments , stats . blanks , s) } ; } }", "test": "fn test_25() {\n    let data = FuzzInput {\n        lang: Zsh,\n        treat_doc_strings_as_comments: true,\n        data: [255, 10, 255, 255, 254, 255, 255, 255],\n    };\n    parse_from_slice(data, true);\n}"}
{"test_id": "XAMPPRocky-tokei/XAMPPRocky-tokei-92ddc2e/tests-gen/parse_from_slice_total.inputs.rs::test_31", "code": "pub fn parse_from_slice (input : FuzzInput , check_total : bool) { let config = & Config { treat_doc_strings_as_comments : Some (input . treat_doc_strings_as_comments) , columns : None , hidden : None , no_ignore : None , no_ignore_parent : None , no_ignore_dot : None , no_ignore_vcs : None , sort : None , types : None , for_each_fn : None , } ; let stats = input . lang . parse_from_slice (input . data , config) ; if check_total { if let Ok (s) = str :: from_utf8 (input . data) { assert ! (stats . lines () <= s . lines () . count () , \"{} got more total lines ({}) than str::lines ({}). Code: {}, Comments: {}, Blanks: {}. treat_doc_strings_as_comments: {}. File contents (as UTF-8):\\n{}\" , input . lang . name () , stats . lines () , s . lines () . count () , stats . code , stats . comments , input . treat_doc_strings_as_comments , stats . blanks , s) } ; } }", "test": "fn test_31() {\n    let data = FuzzInput {\n        lang: ABNF,\n        treat_doc_strings_as_comments: false,\n        data: [80, 10, 255, 255, 255, 255, 255, 255],\n    };\n    parse_from_slice(data, true);\n}"}
{"test_id": "BurntSushi-memchr/BurntSushi-memchr-f3fde7a/tests-gen/memchr3.inputs.rs::test_15", "code": "fn count(self) -> usize {\n        self.it.count(|s, e| {\n            // SAFETY: We rely on our generic iterator to return valid start\n            // and end pointers.\n            unsafe { count_raw(self.needle1, s, e) }\n        })\n    }", "test": "fn test_15() {\n    let data = [10];\n    if data.len() < 3 {\n        return;\n    }\n    memchr3_iter(data[0], data[1], data[2], &data[3..]).count();\n}"}
{"test_id": "dtolnay-syn/dtolnay-syn-b1a038c/tests-gen/create_token_buffer.inputs.rs::test_91", "code": "fn parse_str(self, s: &str) -> Result<Self::Output> {\n        self.parse2(proc_macro2::TokenStream::from_str(s)?)\n    }", "test": "fn test_91() {\n    let data = [98, 39, 116, 112];\n    if data.len() < 300 {\n        if let Ok(string) = str::from_utf8(data) {\n            let _ = immediate_fail.parse_str(string);\n        }\n    }\n}"}
{"test_id": "dtolnay-semver/dtolnay-semver-750f0ac/tests-gen/sort_version.inputs.rs::test_57", "code": "fn three_versions(bytes: &[u8]) -> Option<[Version; 3]> {\n    let mut inputs = str::from_utf8(bytes).ok()?.split(' ');\n    Some([\n        Version {\n            major: 0,\n            minor: 0,\n            patch: 0,\n            pre: inputs.next().map(Prerelease::new)?.ok()?,\n            build: inputs.next().map(BuildMetadata::new)?.ok()?,\n        },\n        Version {\n            major: 0,\n            minor: 0,\n            patch: 0,\n            pre: inputs.next().map(Prerelease::new)?.ok()?,\n            build: inputs.next().map(BuildMetadata::new)?.ok()?,\n        },\n        Version {\n            major: 0,\n            minor: 0,\n            patch: 0,\n            pre: inputs.next().map(Prerelease::new)?.ok()?,\n            build: inputs.next().map(BuildMetadata::new)?.ok()?,\n        },\n    ])\n}", "test": "fn test_57() {\n    let bytes = [32, 10];\n    if let Some([a, b, c]) = three_versions(bytes) {\n        if a < b && b < c && c < a {\n            panic!(\"{0} < {1} < {2} < {0}\", a, b, c);\n        }\n    }\n}"}
{"test_id": "BurntSushi-memchr/BurntSushi-memchr-f3fde7a/tests-gen/memrchr.inputs.rs::test_79", "code": "fn count(self) -> usize {\n        self.it.count(|s, e| {\n            // SAFETY: We rely on our generic iterator to return valid start\n            // and end pointers.\n            unsafe { count_raw(self.needle1, s, e) }\n        })\n    }", "test": "fn test_79() {\n    let data = [46, 2];\n    if data.is_empty() {\n        return;\n    }\n    memchr_iter(data[0], &data[1..]).rev().count();\n}"}
{"test_id": "cloud-hypervisor-cloud-hypervisor/cloud-hypervisor-cloud-hypervisor-db3a5f3/tests-gen/console.inputs.rs::test_47", "code": "pub fn wait_for_epoll_threads(&mut self) {\n        self.common.wait_for_epoll_threads();\n    }", "test": "fn test_47() {\n    let bytes = [227, 215, 13, 43];\n    if bytes.len() < (QUEUE_DATA_SIZE + QUEUE_BYTES_SIZE) * QUEUE_NUM + CONSOLE_INPUT_SIZE\n        || bytes.len()\n            > (QUEUE_DATA_SIZE + QUEUE_BYTES_SIZE) * QUEUE_NUM + CONSOLE_INPUT_SIZE + MEM_SIZE\n    {\n        return;\n    }\n    let (pipe_rx, mut pipe_tx) = create_pipe().unwrap();\n    let output = unsafe {\n        File::from_raw_fd(\n            memfd_create(&std::ffi::CString::new(\"fuzz_console_output\").unwrap()).unwrap(),\n        )\n    };\n    let endpoint = virtio_devices::Endpoint::FilePair(output, pipe_rx);\n    let (mut console, _) = virtio_devices::Console::new(\n        \"fuzzer_console\".to_owned(),\n        endpoint,\n        None,\n        false,\n        SeccompAction::Allow,\n        EventFd::new(EFD_NONBLOCK).unwrap(),\n        None,\n    )\n    .unwrap();\n    let console_input_bytes = &bytes[..CONSOLE_INPUT_SIZE];\n    let queue_data = &bytes[CONSOLE_INPUT_SIZE..CONSOLE_INPUT_SIZE + QUEUE_DATA_SIZE * QUEUE_NUM];\n    let queue_bytes = &bytes[CONSOLE_INPUT_SIZE + QUEUE_DATA_SIZE * QUEUE_NUM\n        ..CONSOLE_INPUT_SIZE + (QUEUE_DATA_SIZE + QUEUE_BYTES_SIZE) * QUEUE_NUM];\n    let mem_bytes = &bytes[CONSOLE_INPUT_SIZE + (QUEUE_DATA_SIZE + QUEUE_BYTES_SIZE) * QUEUE_NUM..];\n    let mut queues = setup_virt_queues(\n        &[\n            &queue_data[..QUEUE_DATA_SIZE].try_into().unwrap(),\n            &queue_data[QUEUE_DATA_SIZE..QUEUE_DATA_SIZE * 2]\n                .try_into()\n                .unwrap(),\n        ],\n        BASE_VIRT_QUEUE_ADDR,\n    );\n    let mem = GuestMemoryMmap::from_ranges(&[\n        (GuestAddress(0), MEM_SIZE),\n        (GuestAddress(BASE_VIRT_QUEUE_ADDR), queue_bytes.len()),\n    ])\n    .unwrap();\n    if mem\n        .write_slice(queue_bytes, GuestAddress(BASE_VIRT_QUEUE_ADDR))\n        .is_err()\n    {\n        return;\n    }\n    if mem.write_slice(mem_bytes, GuestAddress(0 as u64)).is_err() {\n        return;\n    }\n    let guest_memory = GuestMemoryAtomic::new(mem);\n    let input_queue = queues.remove(0);\n    let input_evt = EventFd::new(0).unwrap();\n    let input_queue_evt = unsafe { EventFd::from_raw_fd(libc::dup(input_evt.as_raw_fd())) };\n    let output_queue = queues.remove(0);\n    let output_evt = EventFd::new(0).unwrap();\n    let output_queue_evt = unsafe { EventFd::from_raw_fd(libc::dup(output_evt.as_raw_fd())) };\n    input_queue_evt.write(1).unwrap();\n    output_queue_evt.write(1).unwrap();\n    pipe_tx.write_all(console_input_bytes).unwrap();\n    console\n        .activate(\n            guest_memory,\n            Arc::new(NoopVirtioInterrupt {}),\n            vec![(0, input_queue, input_evt), (1, output_queue, output_evt)],\n        )\n        .unwrap();\n    console.wait_for_epoll_threads();\n}"}
{"test_id": "BurntSushi-memchr/BurntSushi-memchr-f3fde7a/tests-gen/memrchr.inputs.rs::test_59", "code": "fn count(self) -> usize {\n        self.it.count(|s, e| {\n            // SAFETY: We rely on our generic iterator to return valid start\n            // and end pointers.\n            unsafe { count_raw(self.needle1, s, e) }\n        })\n    }", "test": "fn test_59() {\n    let data = [255, 93, 0, 0];\n    if data.is_empty() {\n        return;\n    }\n    memchr_iter(data[0], &data[1..]).rev().count();\n}"}
{"test_id": "zip-rs-zip/zip-rs-zip-ed187d6/tests-gen/fuzz_read.inputs.rs::test_27", "code": "fn decompress_all (data : & [u8]) -> Result < () , Box < dyn std :: error :: Error > > { let reader = std :: io :: Cursor :: new (data) ; let mut zip = zip :: ZipArchive :: new (reader) ? ; for i in 0 .. zip . len () { let mut file = zip . by_index (i) ? ; if file . size () < 1 << 20 { let _ = std :: io :: copy (& mut file , & mut std :: io :: sink ()) ; } } Ok (()) }", "test": "fn test_27() {\n    let data = [26];\n    let _ = decompress_all(data);\n}"}
{"test_id": "image-rs-image-png/image-rs-image-png-e113d76/tests-gen/buf_independent.inputs.rs::test_74", "code": "fn new (inner : R , cap : usize) -> Self { SmalBuf { inner , cap } }", "test": "fn test_74() {\n    let data = [0, 0, 0, 0];\n    let limits = png::Limits { bytes: 1 << 16 };\n    let reference = png::Decoder::new_with_limits(data, limits);\n    let smal = png::Decoder::new_with_limits(SmalBuf::new(data, 1), limits);\n    let _ = png_compare(reference, smal);\n}"}
{"test_id": "marshallpierce-rust-base64/marshallpierce-rust-base64-4ef33cc/tests-gen/decode_random.inputs.rs::test_61", "code": "fn decode<T: AsRef<[u8]>>(&self, input: T) -> Result<Vec<u8>, DecodeError> {\n        fn inner<E>(engine: &E, input_bytes: &[u8]) -> Result<Vec<u8>, DecodeError>\n        where\n            E: Engine + ?Sized,\n        {\n            let estimate = engine.internal_decoded_len_estimate(input_bytes.len());\n            let mut buffer = vec![0; estimate.decoded_len_estimate()];\n\n            let bytes_written = engine\n                .internal_decode(input_bytes, &mut buffer, estimate)?\n                .decoded_len;\n\n            buffer.truncate(bytes_written);\n\n            Ok(buffer)\n        }\n\n        inner(self, input.as_ref())\n    }", "test": "fn test_61() {\n    let data = [135, 251, 255, 187];\n    let engine = utils::random_engine(data);\n    let _ = engine.decode(data);\n}"}
{"test_id": "bodil-im-rs/bodil-im-rs-2afaf54/tests-gen/hashset.inputs.rs::test_26", "code": "pub fn remove<BA>(&mut self, a: &BA) -> Option<A>\n    where\n        BA: Hash + Eq + ?Sized,\n        A: Borrow<BA>,\n    {\n        let root = PoolRef::make_mut(&self.pool.0, &mut self.root);\n        let result = root.remove(&self.pool.0, hash_key(&*self.hasher, a), 0, a);\n        if result.is_some() {\n            self.size -= 1;\n        }\n        result.map(|v| v.0)\n    }", "test": "fn test_26() {\n    let actions = [Insert(18446744073709551360)];\n    let mut set = HashSet::new();\n    let mut nat = NatSet::new();\n    for action in actions {\n        match action {\n            Action::Insert(value) => {\n                let len = nat.len() + if nat.contains(&value) { 0 } else { 1 };\n                nat.insert(value);\n                set.insert(value);\n                assert_eq!(len, set.len());\n            }\n            Action::Remove(value) => {\n                let len = nat.len() - if nat.contains(&value) { 1 } else { 0 };\n                nat.remove(&value);\n                set.remove(&value);\n                assert_eq!(len, set.len());\n            }\n        }\n        assert_eq!(nat.len(), set.len());\n        assert_eq!(HashSet::from(nat.clone()), set);\n    }\n}"}
{"test_id": "cloud-hypervisor-cloud-hypervisor/cloud-hypervisor-cloud-hypervisor-db3a5f3/tests-gen/pmem.inputs.rs::test_61", "code": "pub fn wait_for_epoll_threads(&mut self) {\n        self.common.wait_for_epoll_threads();\n    }", "test": "fn test_61() {\n    let bytes = [10, 10];\n    if bytes.len() < QUEUE_DATA_SIZE || bytes.len() > (QUEUE_DATA_SIZE + MEM_SIZE) {\n        return;\n    }\n    let mut pmem = create_dummy_pmem();\n    let queue_data = &bytes[..QUEUE_DATA_SIZE];\n    let mem_bytes = &bytes[QUEUE_DATA_SIZE..];\n    let q = setup_virt_queue(queue_data.try_into().unwrap());\n    let mem = GuestMemoryMmap::from_ranges(&[(GuestAddress(0), MEM_SIZE)]).unwrap();\n    if mem.write_slice(mem_bytes, GuestAddress(0 as u64)).is_err() {\n        return;\n    }\n    let guest_memory = GuestMemoryAtomic::new(mem);\n    let evt = EventFd::new(0).unwrap();\n    let queue_evt = unsafe { EventFd::from_raw_fd(libc::dup(evt.as_raw_fd())) };\n    queue_evt.write(1).unwrap();\n    pmem.activate(\n        guest_memory,\n        Arc::new(NoopVirtioInterrupt {}),\n        vec![(0, q, evt)],\n    )\n    .ok();\n    pmem.wait_for_epoll_threads();\n}"}
{"test_id": "image-rs-image/image-rs-image-e5580ec/tests-gen/fuzzer_script_tga.inputs.rs::test_44", "code": "fn decode(encoded: &[u8]) -> Vec<u8> {\n        let decoder = JpegDecoder::new(Cursor::new(encoded)).expect(\"Could not decode image\");\n\n        let mut decoded = vec![0; decoder.total_bytes() as usize];\n        decoder\n            .read_image(&mut decoded)\n            .expect(\"Could not decode image\");\n        decoded\n    }", "test": "fn test_44() {\n    let data = [72, 189, 63, 10];\n    let _ = decode(data);\n}"}
{"test_id": "gimli-rs-gimli/gimli-rs-gimli-3947879/tests-gen/debug_aranges.inputs.rs::test_43", "code": "pub fn next(&mut self) -> Result<Option<UnitHeader<R>>> {\n        if self.input.is_empty() {\n            Ok(None)\n        } else {\n            let len = self.input.len();\n            match parse_unit_header(&mut self.input, self.offset.into()) {\n                Ok(header) => {\n                    self.offset.0 += len - self.input.len();\n                    Ok(Some(header))\n                }\n                Err(e) => {\n                    self.input.empty();\n                    Err(e)\n                }\n            }\n        }\n    }", "test": "fn test_43() {\n    let debug_aranges = [15, 10, 36, 10];\n    let debug_aranges = DebugAranges::new(&debug_aranges, LittleEndian);\n    let mut headers = debug_aranges.headers();\n    while let Ok(Some(header)) = headers.next() {\n        let mut entries = header.entries();\n        while let Ok(Some(_entry)) = entries.next() {\n            continue;\n        }\n    }\n}"}
{"test_id": "dtolnay-semver/dtolnay-semver-750f0ac/tests-gen/sort_version.inputs.rs::test_31", "code": "fn three_versions(bytes: &[u8]) -> Option<[Version; 3]> {\n    let mut inputs = str::from_utf8(bytes).ok()?.split(' ');\n    Some([\n        Version {\n            major: 0,\n            minor: 0,\n            patch: 0,\n            pre: inputs.next().map(Prerelease::new)?.ok()?,\n            build: inputs.next().map(BuildMetadata::new)?.ok()?,\n        },\n        Version {\n            major: 0,\n            minor: 0,\n            patch: 0,\n            pre: inputs.next().map(Prerelease::new)?.ok()?,\n            build: inputs.next().map(BuildMetadata::new)?.ok()?,\n        },\n        Version {\n            major: 0,\n            minor: 0,\n            patch: 0,\n            pre: inputs.next().map(Prerelease::new)?.ok()?,\n            build: inputs.next().map(BuildMetadata::new)?.ok()?,\n        },\n    ])\n}", "test": "fn test_31() {\n    let bytes = [255];\n    if let Some([a, b, c]) = three_versions(bytes) {\n        if a < b && b < c && c < a {\n            panic!(\"{0} < {1} < {2} < {0}\", a, b, c);\n        }\n    }\n}"}
{"test_id": "seanmonstar-httparse/seanmonstar-httparse-638848e/tests-gen/parse_request.inputs.rs::test_71", "code": "pub fn parse(&mut self, buf: &'b [u8]) -> Result<usize> {\n        self.parse_with_config(buf, &Default::default())\n    }", "test": "fn test_71() {\n    let data = [130, 10, 10, 10];\n    let mut headers = [httparse::EMPTY_HEADER; 16];\n    let mut req = httparse::Request::new(&mut headers);\n    req.parse(data);\n}"}
{"test_id": "XAMPPRocky-tokei/XAMPPRocky-tokei-92ddc2e/tests-gen/parse_from_slice_panic.inputs.rs::test_32", "code": "pub fn parse_from_slice (input : FuzzInput , check_total : bool) { let config = & Config { treat_doc_strings_as_comments : Some (input . treat_doc_strings_as_comments) , columns : None , hidden : None , no_ignore : None , no_ignore_parent : None , no_ignore_dot : None , no_ignore_vcs : None , sort : None , types : None , for_each_fn : None , } ; let stats = input . lang . parse_from_slice (input . data , config) ; if check_total { if let Ok (s) = str :: from_utf8 (input . data) { assert ! (stats . lines () <= s . lines () . count () , \"{} got more total lines ({}) than str::lines ({}). Code: {}, Comments: {}, Blanks: {}. treat_doc_strings_as_comments: {}. File contents (as UTF-8):\\n{}\" , input . lang . name () , stats . lines () , s . lines () . count () , stats . code , stats . comments , input . treat_doc_strings_as_comments , stats . blanks , s) } ; } }", "test": "fn test_32() {\n    let data = FuzzInput {\n        lang: AWK,\n        treat_doc_strings_as_comments: false,\n        data: [0, 0, 2, 13, 255, 255, 255, 88],\n    };\n    parse_from_slice(data, false);\n}"}
{"test_id": "BurntSushi-memchr/BurntSushi-memchr-f3fde7a/tests-gen/memrchr3.inputs.rs::test_32", "code": "fn count(self) -> usize {\n        self.it.count(|s, e| {\n            // SAFETY: We rely on our generic iterator to return valid start\n            // and end pointers.\n            unsafe { count_raw(self.needle1, s, e) }\n        })\n    }", "test": "fn test_32() {\n    let data = [96, 10, 182];\n    if data.len() < 3 {\n        return;\n    }\n    memchr3_iter(data[0], data[1], data[2], &data[3..]).rev().count();\n}"}
{"test_id": "bodil-im-rs/bodil-im-rs-2afaf54/tests-gen/ordset.inputs.rs::test_14", "code": "pub fn remove<BA>(&mut self, a: &BA) -> Option<A>\n    where\n        BA: Hash + Eq + ?Sized,\n        A: Borrow<BA>,\n    {\n        let root = PoolRef::make_mut(&self.pool.0, &mut self.root);\n        let result = root.remove(&self.pool.0, hash_key(&*self.hasher, a), 0, a);\n        if result.is_some() {\n            self.size -= 1;\n        }\n        result.map(|v| v.0)\n    }", "test": "fn test_14() {\n    let actions = [Remove(4991471628406095871)];\n    let mut set = OrdSet::new();\n    let mut nat = NatSet::new();\n    for action in actions {\n        match action {\n            Action::Insert(value) => {\n                let len = nat.len() + if nat.contains(&value) { 0 } else { 1 };\n                nat.insert(value);\n                set.insert(value);\n                assert_eq!(len, set.len());\n            }\n            Action::Remove(value) => {\n                let len = nat.len() - if nat.contains(&value) { 1 } else { 0 };\n                nat.remove(&value);\n                set.remove(&value);\n                assert_eq!(len, set.len());\n            }\n        }\n        assert_eq!(nat.len(), set.len());\n        assert_eq!(OrdSet::from(nat.clone()), set);\n    }\n}"}
{"test_id": "gimli-rs-gimli/gimli-rs-gimli-3947879/tests-gen/debug_info.inputs.rs::test_5", "code": "pub fn next(&mut self) -> Result<Option<RawLocListEntry<R>>> {\n        if self.input.is_empty() {\n            return Ok(None);\n        }\n\n        match RawLocListEntry::parse(&mut self.input, self.encoding, self.format) {\n            Ok(entry) => {\n                if entry.is_none() {\n                    self.input.empty();\n                }\n                Ok(entry)\n            }\n            Err(e) => {\n                self.input.empty();\n                Err(e)\n            }\n        }\n    }", "test": "fn test_5() {\n    let sections = (\n        [],\n        [\n            224, 26, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 237, 255,\n        ],\n    );\n    let (debug_abbrev, debug_info) = sections;\n    let debug_abbrev = DebugAbbrev::new(&debug_abbrev, LittleEndian);\n    let debug_info = DebugInfo::new(&debug_info, LittleEndian);\n    let mut units = debug_info.units();\n    while let Ok(Some(unit)) = units.next() {\n        if let Ok(abbrevs) = unit.abbreviations(&debug_abbrev) {\n            let mut cursor = unit.entries(&abbrevs);\n            while let Ok(Some((_delta, entry))) = cursor.next_dfs() {\n                let mut attrs = entry.attrs();\n                while let Ok(Some(_attr)) = attrs.next() {\n                    continue;\n                }\n            }\n        }\n    }\n}"}
{"test_id": "quinn-rs-quinn/quinn-rs-quinn-83e4f46/tests-gen/streamid.inputs.rs::test_5", "code": "pub fn initiator(self) -> Side {\n        if self.0 & 0x1 == 0 {\n            Side::Client\n        } else {\n            Side::Server\n        }\n    }", "test": "fn test_5() {\n    let data = StreamIdParams {\n        side: Server,\n        dir: Uni,\n        index: 12514849900987264429,\n    };\n    let s = StreamId::new(data.side, data.dir, data.index);\n    assert_eq!(s.initiator(), data.side);\n    assert_eq!(s.dir(), data.dir);\n}"}
{"test_id": "winnow-rs-winnow/winnow-rs-winnow-9e88734/tests-gen/fuzz_arithmetic.inputs.rs::test_11", "code": "fn factor(i: &mut &str) -> PResult<Expr> {\n    delimited(\n        multispaces,\n        alt((digits.try_map(FromStr::from_str).map(Expr::Value), parens)),\n        multispaces,\n    )\n    .parse_next(i)\n}", "test": "fn test_11() {\n    let data = [0, 2];\n    reset();\n    let _ = match str::from_utf8(data) {\n        Ok(mut v) => factor(&mut v),\n        Err(_) => factor(&mut \"2\"),\n    };\n}"}
{"test_id": "marshallpierce-rust-base64/marshallpierce-rust-base64-4ef33cc/tests-gen/roundtrip.inputs.rs::test_6", "code": "pub fn decode<T: AsRef<[u8]>>(input: T) -> Result<Vec<u8>, DecodeError> {\n    STANDARD.decode(input)\n}", "test": "fn test_6() {\n    let data = [0, 0, 0, 10];\n    let encoded = STANDARD.encode(data);\n    let decoded = STANDARD.decode(&encoded).unwrap();\n    assert_eq!(data, decoded.as_slice());\n}"}
{"test_id": "BurntSushi-memchr/BurntSushi-memchr-f3fde7a/tests-gen/memrchr2.inputs.rs::test_85", "code": "fn count(self) -> usize {\n        self.it.count(|s, e| {\n            // SAFETY: We rely on our generic iterator to return valid start\n            // and end pointers.\n            unsafe { count_raw(self.needle1, s, e) }\n        })\n    }", "test": "fn test_85() {\n    let data = [177, 10, 14, 14];\n    if data.len() < 2 {\n        return;\n    }\n    memchr2_iter(data[0], data[1], &data[2..]).rev().count();\n}"}
{"test_id": "uutils-coreutils/uutils-coreutils-73b7c46/tests-gen/fuzz_parse_size.inputs.rs::test_45", "code": "pub fn parse_size(size: &str) -> Result<u64, ParseSizeError> {\n    Parser::default().parse(size)\n}", "test": "fn test_45() {\n    let data = [255, 10, 255, 244];\n    if let Ok(s) = std::str::from_utf8(data) {\n        _ = parse_size(s);\n    }\n}"}
{"test_id": "rust-bio-rust-bio/rust-bio-rust-bio-319a0d8/tests-gen/banded_aligner.inputs.rs::test_47", "code": "fn validate_alignment_score(al: &Alignment, x: TextSlice, y: TextSlice, scoring: &Scoring<MatchParams>) -> bool {\n    use AlignmentOperation::*;\n    let path = al.path();\n    let mut score = 0;\n    if al.mode==AlignmentMode::Custom {\n        if al.xstart > 0 {\n            score += scoring.xclip_prefix;\n        }\n        if al.ystart > 0 {\n            score += scoring.yclip_prefix;\n        }\n        if al.xend < al.xlen {\n            score += scoring.xclip_suffix;\n        }\n        if al.yend < al.ylen {\n            score += scoring.yclip_suffix;\n        }\n    }\n    let mut last_op = None;\n    for (i, j, op) in path {\n        score += match op {\n            Match | Subst => scoring.match_fn.score(x[i-1], y[j-1]),\n            Del => if last_op==Some(Del) { scoring.gap_extend } else { scoring.gap_open + scoring.gap_extend },\n            Ins => if last_op==Some(Ins) { scoring.gap_extend } else { scoring.gap_open + scoring.gap_extend },\n            _ => 0,\n        };\n        last_op = Some(op);\n    }\n    al.score==score\n}", "test": "fn test_47() {\n    let data = [11, 38, 40];\n    if data.len() < 50 || data.len() > 300 {\n        return;\n    }\n    let (split_byte, data) = data.split_first().unwrap();\n    let (kmer_byte, data) = data.split_first().unwrap();\n    let (window_byte, data) = data.split_first().unwrap();\n    let (match_score_byte, data) = data.split_first().unwrap();\n    let (mismatch_score_byte, data) = data.split_first().unwrap();\n    let (gap_open_byte, data) = data.split_first().unwrap();\n    let (gap_extend_byte, data) = data.split_first().unwrap();\n    let (xclip_prefix_byte, data) = data.split_first().unwrap();\n    let (xclip_suffix_byte, data) = data.split_first().unwrap();\n    let (yclip_prefix_byte, data) = data.split_first().unwrap();\n    let (yclip_suffix_byte, data) = data.split_first().unwrap();\n    let alphabets = b\"ACGT\";\n    let v: Vec<_> = data\n        .iter()\n        .map(|i| alphabets[(*i as usize) % alphabets.len()])\n        .collect();\n    let kmer_len: usize = 5 + (*kmer_byte as usize) % 10;\n    let window_size: usize = 5 + (*window_byte as usize) % 10;\n    let split_pos: usize = min(data.len() - 1, max(*split_byte as usize, 1));\n    let match_score = 1 + (*match_score_byte as i32) % 5;\n    let mismatch_score = -((*mismatch_score_byte as i32) % 10);\n    let gap_open = -((*gap_open_byte as i32) % 20);\n    let gap_extend = -((*gap_extend_byte as i32) % 10);\n    let (x, y) = v.split_at(split_pos);\n    println!(\n        \"x: {}, y: {}, k: {}, w: {}, scoring ({}, {}, {}, {})\",\n        String::from_utf8(x.to_vec()).unwrap(),\n        String::from_utf8(y.to_vec()).unwrap(),\n        kmer_len,\n        window_size,\n        gap_open,\n        gap_extend,\n        match_score,\n        mismatch_score\n    );\n    let base_score = Scoring::from_scores(gap_open, gap_extend, match_score, mismatch_score);\n    {\n        println!(\n            \"Clip scores ({}, {}, {}, {})\",\n            xclip_prefix_byte, xclip_suffix_byte, yclip_prefix_byte, yclip_suffix_byte\n        );\n        let scoring = Scoring {\n            xclip_prefix: -(*xclip_prefix_byte as i32),\n            xclip_suffix: -(*xclip_suffix_byte as i32),\n            yclip_prefix: -(*yclip_prefix_byte as i32),\n            yclip_suffix: -(*yclip_suffix_byte as i32),\n            ..base_score.clone()\n        };\n        let mut b_aligner = banded::Aligner::with_scoring(scoring.clone(), kmer_len, window_size);\n        let b_alignment = b_aligner.custom(x, y);\n        assert!(validate_alignment_score(&b_alignment, x, y, &scoring));\n        let mut f_aligner = pairwise::Aligner::with_scoring(scoring.clone());\n        let f_alignment = f_aligner.custom(x, y);\n        assert!(validate_alignment_score(&f_alignment, x, y, &scoring));\n        let band_all_alignment = b_aligner.custom_with_matches(x, y, &Vec::new());\n        assert_eq!(band_all_alignment.score, f_alignment.score);\n    }\n    {\n        let scoring = Scoring {\n            xclip_prefix: 0,\n            xclip_suffix: 0,\n            yclip_suffix: 0,\n            ..base_score.clone()\n        };\n        let mut b_aligner = banded::Aligner::with_scoring(scoring.clone(), kmer_len, window_size);\n        let b_alignment = b_aligner.custom(x, y);\n        assert_eq!(b_alignment.ystart, 0);\n        assert!(validate_alignment_score(&b_alignment, x, y, &scoring));\n        let mut f_aligner = pairwise::Aligner::with_scoring(scoring.clone());\n        let f_alignment = f_aligner.custom(x, y);\n        assert_eq!(f_alignment.ystart, 0);\n        assert!(validate_alignment_score(&f_alignment, x, y, &scoring));\n        let band_all_alignment = b_aligner.custom_with_matches(x, y, &Vec::new());\n        assert_eq!(band_all_alignment.score, f_alignment.score);\n    }\n    {\n        let scoring = Scoring {\n            xclip_prefix: 0,\n            xclip_suffix: 0,\n            yclip_prefix: 0,\n            ..base_score.clone()\n        };\n        let mut b_aligner = banded::Aligner::with_scoring(scoring.clone(), kmer_len, window_size);\n        let b_alignment = b_aligner.custom(x, y);\n        assert_eq!(b_alignment.yend, b_alignment.ylen);\n        assert!(validate_alignment_score(&b_alignment, x, y, &scoring));\n        let mut f_aligner = pairwise::Aligner::with_scoring(scoring.clone());\n        let f_alignment = f_aligner.custom(x, y);\n        assert_eq!(f_alignment.yend, f_alignment.ylen);\n        assert!(validate_alignment_score(&f_alignment, x, y, &scoring));\n        let band_all_alignment = b_aligner.custom_with_matches(x, y, &Vec::new());\n        assert_eq!(band_all_alignment.score, f_alignment.score);\n    }\n    {\n        let scoring = Scoring {\n            xclip_suffix: 0,\n            yclip_prefix: 0,\n            yclip_suffix: 0,\n            ..base_score.clone()\n        };\n        let mut b_aligner = banded::Aligner::with_scoring(scoring.clone(), kmer_len, window_size);\n        let b_alignment = b_aligner.custom(x, y);\n        assert_eq!(b_alignment.xstart, 0);\n        assert!(validate_alignment_score(&b_alignment, x, y, &scoring));\n        let mut f_aligner = pairwise::Aligner::with_scoring(scoring.clone());\n        let f_alignment = f_aligner.custom(x, y);\n        assert_eq!(f_alignment.xstart, 0);\n        assert!(validate_alignment_score(&f_alignment, x, y, &scoring));\n        let band_all_alignment = b_aligner.custom_with_matches(x, y, &Vec::new());\n        assert_eq!(band_all_alignment.score, f_alignment.score);\n    }\n    {\n        let scoring = Scoring {\n            xclip_prefix: 0,\n            yclip_prefix: 0,\n            yclip_suffix: 0,\n            ..base_score.clone()\n        };\n        let mut b_aligner = banded::Aligner::with_scoring(scoring.clone(), kmer_len, window_size);\n        let b_alignment = b_aligner.custom(x, y);\n        assert_eq!(b_alignment.xend, b_alignment.xlen);\n        assert!(validate_alignment_score(&b_alignment, x, y, &scoring));\n        let mut f_aligner = pairwise::Aligner::with_scoring(scoring.clone());\n        let f_alignment = f_aligner.custom(x, y);\n        assert_eq!(f_alignment.xend, f_alignment.xlen);\n        assert!(validate_alignment_score(&f_alignment, x, y, &scoring));\n        let band_all_alignment = b_aligner.custom_with_matches(x, y, &Vec::new());\n        assert_eq!(band_all_alignment.score, f_alignment.score);\n    }\n    {\n        let mut aligner = banded::Aligner::with_scoring(base_score.clone(), kmer_len, window_size);\n        let alignment = aligner.local(x, y);\n        assert!(alignment.score >= 0);\n        assert!(validate_alignment_score(&alignment, x, y, &base_score));\n        let alignment = aligner.semiglobal(x, y);\n        assert_eq!(alignment.xstart, 0);\n        assert_eq!(alignment.xend, alignment.xlen);\n        assert!(validate_alignment_score(&alignment, x, y, &base_score));\n        let alignment = aligner.global(x, y);\n        assert_eq!(alignment.xstart, 0);\n        assert_eq!(alignment.xend, alignment.xlen);\n        assert_eq!(alignment.ystart, 0);\n        assert_eq!(alignment.yend, alignment.ylen);\n        assert!(validate_alignment_score(&alignment, x, y, &base_score));\n    }\n    {\n        let mut aligner = pairwise::Aligner::with_scoring(base_score.clone());\n        let alignment = aligner.local(x, y);\n        assert!(alignment.score >= 0);\n        assert!(validate_alignment_score(&alignment, x, y, &base_score));\n        let alignment = aligner.semiglobal(x, y);\n        assert_eq!(alignment.xstart, 0);\n        assert_eq!(alignment.xend, alignment.xlen);\n        assert!(validate_alignment_score(&alignment, x, y, &base_score));\n        let alignment = aligner.global(x, y);\n        assert_eq!(alignment.xstart, 0);\n        assert_eq!(alignment.xend, alignment.xlen);\n        assert_eq!(alignment.ystart, 0);\n        assert_eq!(alignment.yend, alignment.ylen);\n        assert!(validate_alignment_score(&alignment, x, y, &base_score));\n    }\n}"}
{"test_id": "zip-rs-zip/zip-rs-zip-ed187d6/tests-gen/fuzz_read.inputs.rs::test_56", "code": "fn decompress_all (data : & [u8]) -> Result < () , Box < dyn std :: error :: Error > > { let reader = std :: io :: Cursor :: new (data) ; let mut zip = zip :: ZipArchive :: new (reader) ? ; for i in 0 .. zip . len () { let mut file = zip . by_index (i) ? ; if file . size () < 1 << 20 { let _ = std :: io :: copy (& mut file , & mut std :: io :: sink ()) ; } } Ok (()) }", "test": "fn test_56() {\n    let data = [136, 10];\n    let _ = decompress_all(data);\n}"}
{"test_id": "gimli-rs-gimli/gimli-rs-gimli-3947879/tests-gen/debug_line.inputs.rs::test_90", "code": "pub fn next_row(&mut self) -> Result<Option<(&LineProgramHeader<R, Offset>, &LineRow)>> {\n        // Perform any reset that was required after copying the previous row.\n        self.row.reset(self.program.header());\n\n        loop {\n            // Split the borrow here, rather than calling `self.header()`.\n            match self.instructions.next_instruction(self.program.header()) {\n                Err(err) => return Err(err),\n                Ok(None) => return Ok(None),\n                Ok(Some(instruction)) => {\n                    if self.row.execute(instruction, &mut self.program) {\n                        if self.row.tombstone {\n                            // Perform any reset that was required for the tombstone row.\n                            // Normally this is done when `next_row` is called again, but for\n                            // tombstones we loop immediately.\n                            self.row.reset(self.program.header());\n                        } else {\n                            return Ok(Some((self.header(), &self.row)));\n                        }\n                    }\n                    // Fall through, parse the next instruction, and see if that\n                    // yields a row.\n                }\n            }\n        }\n    }", "test": "fn test_90() {\n    let debug_line = [19, 19, 39, 39];\n    let debug_line = DebugLine::new(&debug_line, LittleEndian);\n    let offset = DebugLineOffset(0);\n    let address_size = 8;\n    if let Ok(program) = debug_line.program(offset, address_size, None, None) {\n        let mut rows = program.rows();\n        while let Ok(Some(row)) = rows.next_row() {\n            let _ = row;\n        }\n    }\n}"}
{"test_id": "BurntSushi-memchr/BurntSushi-memchr-f3fde7a/tests-gen/memchr.inputs.rs::test_99", "code": "fn count(self) -> usize {\n        self.it.count(|s, e| {\n            // SAFETY: We rely on our generic iterator to return valid start\n            // and end pointers.\n            unsafe { count_raw(self.needle1, s, e) }\n        })\n    }", "test": "fn test_99() {\n    let data = [48, 48, 5, 48];\n    if data.is_empty() {\n        return;\n    }\n    memchr_iter(data[0], &data[1..]).count();\n}"}
{"test_id": "marshallpierce-rust-base64/marshallpierce-rust-base64-4ef33cc/tests-gen/roundtrip.inputs.rs::test_17", "code": "pub fn decode<T: AsRef<[u8]>>(input: T) -> Result<Vec<u8>, DecodeError> {\n    STANDARD.decode(input)\n}", "test": "fn test_17() {\n    let data = [48, 10, 59];\n    let encoded = STANDARD.encode(data);\n    let decoded = STANDARD.decode(&encoded).unwrap();\n    assert_eq!(data, decoded.as_slice());\n}"}
{"test_id": "image-rs-image-png/image-rs-image-png-e113d76/tests-gen/buf_independent.inputs.rs::test_93", "code": "fn new (inner : R , cap : usize) -> Self { SmalBuf { inner , cap } }", "test": "fn test_93() {\n    let data = [0, 0];\n    let limits = png::Limits { bytes: 1 << 16 };\n    let reference = png::Decoder::new_with_limits(data, limits);\n    let smal = png::Decoder::new_with_limits(SmalBuf::new(data, 1), limits);\n    let _ = png_compare(reference, smal);\n}"}
{"test_id": "image-rs-image/image-rs-image-e5580ec/tests-gen/fuzzer_script_tga.inputs.rs::test_81", "code": "fn decode(encoded: &[u8]) -> Vec<u8> {\n        let decoder = JpegDecoder::new(Cursor::new(encoded)).expect(\"Could not decode image\");\n\n        let mut decoded = vec![0; decoder.total_bytes() as usize];\n        decoder\n            .read_image(&mut decoded)\n            .expect(\"Could not decode image\");\n        decoded\n    }", "test": "fn test_81() {\n    let data = [10, 10, 38, 43];\n    let _ = decode(data);\n}"}
{"test_id": "BurntSushi-memchr/BurntSushi-memchr-f3fde7a/tests-gen/memmem.inputs.rs::test_6", "code": "pub fn count(&self, haystack: &[u8]) -> usize {\n        // SAFETY: All of our pointers are derived directly from a borrowed\n        // slice, which is guaranteed to be valid.\n        unsafe {\n            let start = haystack.as_ptr();\n            let end = start.add(haystack.len());\n            self.count_raw(start, end)\n        }\n    }", "test": "fn test_6() {\n    let data = [4, 37, 91];\n    if data.len() < 2 {\n        return;\n    }\n    let split = std::cmp::max(data[0] as usize, 1) % data.len() as usize;\n    let (needle, haystack) = (&data[..split], &data[split..]);\n    memmem::find_iter(haystack, needle).count();\n}"}
{"test_id": "rust-bio-rust-bio/rust-bio-rust-bio-319a0d8/tests-gen/banded_aligner.inputs.rs::test_71", "code": "fn validate_alignment_score(al: &Alignment, x: TextSlice, y: TextSlice, scoring: &Scoring<MatchParams>) -> bool {\n    use AlignmentOperation::*;\n    let path = al.path();\n    let mut score = 0;\n    if al.mode==AlignmentMode::Custom {\n        if al.xstart > 0 {\n            score += scoring.xclip_prefix;\n        }\n        if al.ystart > 0 {\n            score += scoring.yclip_prefix;\n        }\n        if al.xend < al.xlen {\n            score += scoring.xclip_suffix;\n        }\n        if al.yend < al.ylen {\n            score += scoring.yclip_suffix;\n        }\n    }\n    let mut last_op = None;\n    for (i, j, op) in path {\n        score += match op {\n            Match | Subst => scoring.match_fn.score(x[i-1], y[j-1]),\n            Del => if last_op==Some(Del) { scoring.gap_extend } else { scoring.gap_open + scoring.gap_extend },\n            Ins => if last_op==Some(Ins) { scoring.gap_extend } else { scoring.gap_open + scoring.gap_extend },\n            _ => 0,\n        };\n        last_op = Some(op);\n    }\n    al.score==score\n}", "test": "fn test_71() {\n    let data = [2, 0, 1, 0];\n    if data.len() < 50 || data.len() > 300 {\n        return;\n    }\n    let (split_byte, data) = data.split_first().unwrap();\n    let (kmer_byte, data) = data.split_first().unwrap();\n    let (window_byte, data) = data.split_first().unwrap();\n    let (match_score_byte, data) = data.split_first().unwrap();\n    let (mismatch_score_byte, data) = data.split_first().unwrap();\n    let (gap_open_byte, data) = data.split_first().unwrap();\n    let (gap_extend_byte, data) = data.split_first().unwrap();\n    let (xclip_prefix_byte, data) = data.split_first().unwrap();\n    let (xclip_suffix_byte, data) = data.split_first().unwrap();\n    let (yclip_prefix_byte, data) = data.split_first().unwrap();\n    let (yclip_suffix_byte, data) = data.split_first().unwrap();\n    let alphabets = b\"ACGT\";\n    let v: Vec<_> = data\n        .iter()\n        .map(|i| alphabets[(*i as usize) % alphabets.len()])\n        .collect();\n    let kmer_len: usize = 5 + (*kmer_byte as usize) % 10;\n    let window_size: usize = 5 + (*window_byte as usize) % 10;\n    let split_pos: usize = min(data.len() - 1, max(*split_byte as usize, 1));\n    let match_score = 1 + (*match_score_byte as i32) % 5;\n    let mismatch_score = -((*mismatch_score_byte as i32) % 10);\n    let gap_open = -((*gap_open_byte as i32) % 20);\n    let gap_extend = -((*gap_extend_byte as i32) % 10);\n    let (x, y) = v.split_at(split_pos);\n    println!(\n        \"x: {}, y: {}, k: {}, w: {}, scoring ({}, {}, {}, {})\",\n        String::from_utf8(x.to_vec()).unwrap(),\n        String::from_utf8(y.to_vec()).unwrap(),\n        kmer_len,\n        window_size,\n        gap_open,\n        gap_extend,\n        match_score,\n        mismatch_score\n    );\n    let base_score = Scoring::from_scores(gap_open, gap_extend, match_score, mismatch_score);\n    {\n        println!(\n            \"Clip scores ({}, {}, {}, {})\",\n            xclip_prefix_byte, xclip_suffix_byte, yclip_prefix_byte, yclip_suffix_byte\n        );\n        let scoring = Scoring {\n            xclip_prefix: -(*xclip_prefix_byte as i32),\n            xclip_suffix: -(*xclip_suffix_byte as i32),\n            yclip_prefix: -(*yclip_prefix_byte as i32),\n            yclip_suffix: -(*yclip_suffix_byte as i32),\n            ..base_score.clone()\n        };\n        let mut b_aligner = banded::Aligner::with_scoring(scoring.clone(), kmer_len, window_size);\n        let b_alignment = b_aligner.custom(x, y);\n        assert!(validate_alignment_score(&b_alignment, x, y, &scoring));\n        let mut f_aligner = pairwise::Aligner::with_scoring(scoring.clone());\n        let f_alignment = f_aligner.custom(x, y);\n        assert!(validate_alignment_score(&f_alignment, x, y, &scoring));\n        let band_all_alignment = b_aligner.custom_with_matches(x, y, &Vec::new());\n        assert_eq!(band_all_alignment.score, f_alignment.score);\n    }\n    {\n        let scoring = Scoring {\n            xclip_prefix: 0,\n            xclip_suffix: 0,\n            yclip_suffix: 0,\n            ..base_score.clone()\n        };\n        let mut b_aligner = banded::Aligner::with_scoring(scoring.clone(), kmer_len, window_size);\n        let b_alignment = b_aligner.custom(x, y);\n        assert_eq!(b_alignment.ystart, 0);\n        assert!(validate_alignment_score(&b_alignment, x, y, &scoring));\n        let mut f_aligner = pairwise::Aligner::with_scoring(scoring.clone());\n        let f_alignment = f_aligner.custom(x, y);\n        assert_eq!(f_alignment.ystart, 0);\n        assert!(validate_alignment_score(&f_alignment, x, y, &scoring));\n        let band_all_alignment = b_aligner.custom_with_matches(x, y, &Vec::new());\n        assert_eq!(band_all_alignment.score, f_alignment.score);\n    }\n    {\n        let scoring = Scoring {\n            xclip_prefix: 0,\n            xclip_suffix: 0,\n            yclip_prefix: 0,\n            ..base_score.clone()\n        };\n        let mut b_aligner = banded::Aligner::with_scoring(scoring.clone(), kmer_len, window_size);\n        let b_alignment = b_aligner.custom(x, y);\n        assert_eq!(b_alignment.yend, b_alignment.ylen);\n        assert!(validate_alignment_score(&b_alignment, x, y, &scoring));\n        let mut f_aligner = pairwise::Aligner::with_scoring(scoring.clone());\n        let f_alignment = f_aligner.custom(x, y);\n        assert_eq!(f_alignment.yend, f_alignment.ylen);\n        assert!(validate_alignment_score(&f_alignment, x, y, &scoring));\n        let band_all_alignment = b_aligner.custom_with_matches(x, y, &Vec::new());\n        assert_eq!(band_all_alignment.score, f_alignment.score);\n    }\n    {\n        let scoring = Scoring {\n            xclip_suffix: 0,\n            yclip_prefix: 0,\n            yclip_suffix: 0,\n            ..base_score.clone()\n        };\n        let mut b_aligner = banded::Aligner::with_scoring(scoring.clone(), kmer_len, window_size);\n        let b_alignment = b_aligner.custom(x, y);\n        assert_eq!(b_alignment.xstart, 0);\n        assert!(validate_alignment_score(&b_alignment, x, y, &scoring));\n        let mut f_aligner = pairwise::Aligner::with_scoring(scoring.clone());\n        let f_alignment = f_aligner.custom(x, y);\n        assert_eq!(f_alignment.xstart, 0);\n        assert!(validate_alignment_score(&f_alignment, x, y, &scoring));\n        let band_all_alignment = b_aligner.custom_with_matches(x, y, &Vec::new());\n        assert_eq!(band_all_alignment.score, f_alignment.score);\n    }\n    {\n        let scoring = Scoring {\n            xclip_prefix: 0,\n            yclip_prefix: 0,\n            yclip_suffix: 0,\n            ..base_score.clone()\n        };\n        let mut b_aligner = banded::Aligner::with_scoring(scoring.clone(), kmer_len, window_size);\n        let b_alignment = b_aligner.custom(x, y);\n        assert_eq!(b_alignment.xend, b_alignment.xlen);\n        assert!(validate_alignment_score(&b_alignment, x, y, &scoring));\n        let mut f_aligner = pairwise::Aligner::with_scoring(scoring.clone());\n        let f_alignment = f_aligner.custom(x, y);\n        assert_eq!(f_alignment.xend, f_alignment.xlen);\n        assert!(validate_alignment_score(&f_alignment, x, y, &scoring));\n        let band_all_alignment = b_aligner.custom_with_matches(x, y, &Vec::new());\n        assert_eq!(band_all_alignment.score, f_alignment.score);\n    }\n    {\n        let mut aligner = banded::Aligner::with_scoring(base_score.clone(), kmer_len, window_size);\n        let alignment = aligner.local(x, y);\n        assert!(alignment.score >= 0);\n        assert!(validate_alignment_score(&alignment, x, y, &base_score));\n        let alignment = aligner.semiglobal(x, y);\n        assert_eq!(alignment.xstart, 0);\n        assert_eq!(alignment.xend, alignment.xlen);\n        assert!(validate_alignment_score(&alignment, x, y, &base_score));\n        let alignment = aligner.global(x, y);\n        assert_eq!(alignment.xstart, 0);\n        assert_eq!(alignment.xend, alignment.xlen);\n        assert_eq!(alignment.ystart, 0);\n        assert_eq!(alignment.yend, alignment.ylen);\n        assert!(validate_alignment_score(&alignment, x, y, &base_score));\n    }\n    {\n        let mut aligner = pairwise::Aligner::with_scoring(base_score.clone());\n        let alignment = aligner.local(x, y);\n        assert!(alignment.score >= 0);\n        assert!(validate_alignment_score(&alignment, x, y, &base_score));\n        let alignment = aligner.semiglobal(x, y);\n        assert_eq!(alignment.xstart, 0);\n        assert_eq!(alignment.xend, alignment.xlen);\n        assert!(validate_alignment_score(&alignment, x, y, &base_score));\n        let alignment = aligner.global(x, y);\n        assert_eq!(alignment.xstart, 0);\n        assert_eq!(alignment.xend, alignment.xlen);\n        assert_eq!(alignment.ystart, 0);\n        assert_eq!(alignment.yend, alignment.ylen);\n        assert!(validate_alignment_score(&alignment, x, y, &base_score));\n    }\n}"}
{"test_id": "cloud-hypervisor-cloud-hypervisor/cloud-hypervisor-cloud-hypervisor-db3a5f3/tests-gen/rng.inputs.rs::test_34", "code": "pub fn wait_for_epoll_threads(&mut self) {\n        self.common.wait_for_epoll_threads();\n    }", "test": "fn test_34() {\n    let bytes = [156];\n    if bytes.len() < (QUEUE_DATA_SIZE + QUEUE_BYTES_SIZE)\n        || bytes.len() > (QUEUE_DATA_SIZE + QUEUE_BYTES_SIZE + MEM_SIZE)\n    {\n        return;\n    }\n    let mut rng = virtio_devices::Rng::new(\n        \"fuzzer_rng\".to_owned(),\n        \"/dev/urandom\",\n        false,\n        SeccompAction::Allow,\n        EventFd::new(EFD_NONBLOCK).unwrap(),\n        None,\n    )\n    .unwrap();\n    let queue_data = &bytes[..QUEUE_DATA_SIZE];\n    let queue_bytes = &bytes[QUEUE_DATA_SIZE..QUEUE_DATA_SIZE + QUEUE_BYTES_SIZE];\n    let mem_bytes = &bytes[QUEUE_DATA_SIZE + QUEUE_BYTES_SIZE..];\n    let q = setup_virt_queue(queue_data.try_into().unwrap());\n    let mem = GuestMemoryMmap::from_ranges(&[\n        (GuestAddress(0), MEM_SIZE),\n        (GuestAddress(DESC_TABLE_ADDR), QUEUE_BYTES_SIZE),\n    ])\n    .unwrap();\n    if mem\n        .write_slice(queue_bytes, GuestAddress(DESC_TABLE_ADDR))\n        .is_err()\n    {\n        return;\n    }\n    if mem.write_slice(mem_bytes, GuestAddress(0 as u64)).is_err() {\n        return;\n    }\n    let guest_memory = GuestMemoryAtomic::new(mem);\n    let evt = EventFd::new(0).unwrap();\n    let queue_evt = unsafe { EventFd::from_raw_fd(libc::dup(evt.as_raw_fd())) };\n    queue_evt.write(1).unwrap();\n    rng.activate(\n        guest_memory,\n        Arc::new(NoopVirtioInterrupt {}),\n        vec![(0, q, evt)],\n    )\n    .ok();\n    rng.wait_for_epoll_threads();\n}"}
{"test_id": "image-rs-image/image-rs-image-e5580ec/tests-gen/fuzzer_script_tga.inputs.rs::test_88", "code": "fn decode(encoded: &[u8]) -> Vec<u8> {\n        let decoder = JpegDecoder::new(Cursor::new(encoded)).expect(\"Could not decode image\");\n\n        let mut decoded = vec![0; decoder.total_bytes() as usize];\n        decoder\n            .read_image(&mut decoded)\n            .expect(\"Could not decode image\");\n        decoded\n    }", "test": "fn test_88() {\n    let data = [246, 251, 225, 224];\n    let _ = decode(data);\n}"}
{"test_id": "image-rs-image/image-rs-image-e5580ec/tests-gen/fuzzer_script_exr.inputs.rs::test_65", "code": "fn roundtrip (bytes : & [u8]) -> ImageResult < () > { # [doc = \" Read the file from the specified path into an `Rgba32FImage`.\"] fn read_as_rgba_byte_image (read : impl Read + Seek) -> ImageResult < (u32 , u32 , Vec < u8 >) > { let mut decoder = OpenExrDecoder :: with_alpha_preference (read , Some (true)) ? ; match usize :: try_from (decoder . total_bytes ()) { Ok (decoded_size) if decoded_size <= 256 * 1024 * 1024 => { decoder . set_limits (Limits :: default ()) ? ; let (width , height) = decoder . dimensions () ; let mut buffer = vec ! [0 ; decoded_size] ; decoder . read_image (buffer . as_mut_slice ()) ? ; Ok ((width , height , buffer)) } _ => Err (image :: ImageError :: Limits (image :: error :: LimitError :: from_kind (image :: error :: LimitErrorKind :: InsufficientMemory ,) ,)) , } } # [doc = \" Write an `Rgba32FImage`.\"] # [doc = \" Assumes the writer is buffered. In most cases,\"] # [doc = \" you should wrap your writer in a `BufWriter` for best performance.\"] fn write_rgba_image (write : impl Write + Seek , (width , height , data) : & (u32 , u32 , Vec < u8 >) ,) -> ImageResult < () > { OpenExrEncoder :: new (write) . write_image (data . as_slice () , * width , * height , ColorType :: Rgba32F) } let decoded_image = read_as_rgba_byte_image (Cursor :: new (bytes)) ? ; let mut bytes = Vec :: with_capacity (bytes . len () + 20) ; write_rgba_image (Cursor :: new (& mut bytes) , & decoded_image) ? ; let redecoded_image = read_as_rgba_byte_image (Cursor :: new (bytes)) ? ; assert_eq ! (decoded_image , redecoded_image , \"image was valid but was not reproducible\") ; Ok (()) }", "test": "fn test_65() {\n    let data = [10, 10, 10];\n    let _img = roundtrip(data);\n}"}
{"test_id": "quinn-rs-quinn/quinn-rs-quinn-83e4f46/tests-gen/streamid.inputs.rs::test_43", "code": "pub fn initiator(self) -> Side {\n        if self.0 & 0x1 == 0 {\n            Side::Client\n        } else {\n            Side::Server\n        }\n    }", "test": "fn test_43() {\n    let data = StreamIdParams {\n        side: Server,\n        dir: Uni,\n        index: 12514878488289584583,\n    };\n    let s = StreamId::new(data.side, data.dir, data.index);\n    assert_eq!(s.initiator(), data.side);\n    assert_eq!(s.dir(), data.dir);\n}"}
{"test_id": "cloud-hypervisor-cloud-hypervisor/cloud-hypervisor-cloud-hypervisor-db3a5f3/tests-gen/console.inputs.rs::test_41", "code": "pub fn wait_for_epoll_threads(&mut self) {\n        self.common.wait_for_epoll_threads();\n    }", "test": "fn test_41() {\n    let bytes = [169, 44, 186];\n    if bytes.len() < (QUEUE_DATA_SIZE + QUEUE_BYTES_SIZE) * QUEUE_NUM + CONSOLE_INPUT_SIZE\n        || bytes.len()\n            > (QUEUE_DATA_SIZE + QUEUE_BYTES_SIZE) * QUEUE_NUM + CONSOLE_INPUT_SIZE + MEM_SIZE\n    {\n        return;\n    }\n    let (pipe_rx, mut pipe_tx) = create_pipe().unwrap();\n    let output = unsafe {\n        File::from_raw_fd(\n            memfd_create(&std::ffi::CString::new(\"fuzz_console_output\").unwrap()).unwrap(),\n        )\n    };\n    let endpoint = virtio_devices::Endpoint::FilePair(output, pipe_rx);\n    let (mut console, _) = virtio_devices::Console::new(\n        \"fuzzer_console\".to_owned(),\n        endpoint,\n        None,\n        false,\n        SeccompAction::Allow,\n        EventFd::new(EFD_NONBLOCK).unwrap(),\n        None,\n    )\n    .unwrap();\n    let console_input_bytes = &bytes[..CONSOLE_INPUT_SIZE];\n    let queue_data = &bytes[CONSOLE_INPUT_SIZE..CONSOLE_INPUT_SIZE + QUEUE_DATA_SIZE * QUEUE_NUM];\n    let queue_bytes = &bytes[CONSOLE_INPUT_SIZE + QUEUE_DATA_SIZE * QUEUE_NUM\n        ..CONSOLE_INPUT_SIZE + (QUEUE_DATA_SIZE + QUEUE_BYTES_SIZE) * QUEUE_NUM];\n    let mem_bytes = &bytes[CONSOLE_INPUT_SIZE + (QUEUE_DATA_SIZE + QUEUE_BYTES_SIZE) * QUEUE_NUM..];\n    let mut queues = setup_virt_queues(\n        &[\n            &queue_data[..QUEUE_DATA_SIZE].try_into().unwrap(),\n            &queue_data[QUEUE_DATA_SIZE..QUEUE_DATA_SIZE * 2]\n                .try_into()\n                .unwrap(),\n        ],\n        BASE_VIRT_QUEUE_ADDR,\n    );\n    let mem = GuestMemoryMmap::from_ranges(&[\n        (GuestAddress(0), MEM_SIZE),\n        (GuestAddress(BASE_VIRT_QUEUE_ADDR), queue_bytes.len()),\n    ])\n    .unwrap();\n    if mem\n        .write_slice(queue_bytes, GuestAddress(BASE_VIRT_QUEUE_ADDR))\n        .is_err()\n    {\n        return;\n    }\n    if mem.write_slice(mem_bytes, GuestAddress(0 as u64)).is_err() {\n        return;\n    }\n    let guest_memory = GuestMemoryAtomic::new(mem);\n    let input_queue = queues.remove(0);\n    let input_evt = EventFd::new(0).unwrap();\n    let input_queue_evt = unsafe { EventFd::from_raw_fd(libc::dup(input_evt.as_raw_fd())) };\n    let output_queue = queues.remove(0);\n    let output_evt = EventFd::new(0).unwrap();\n    let output_queue_evt = unsafe { EventFd::from_raw_fd(libc::dup(output_evt.as_raw_fd())) };\n    input_queue_evt.write(1).unwrap();\n    output_queue_evt.write(1).unwrap();\n    pipe_tx.write_all(console_input_bytes).unwrap();\n    console\n        .activate(\n            guest_memory,\n            Arc::new(NoopVirtioInterrupt {}),\n            vec![(0, input_queue, input_evt), (1, output_queue, output_evt)],\n        )\n        .unwrap();\n    console.wait_for_epoll_threads();\n}"}
{"test_id": "cloud-hypervisor-cloud-hypervisor/cloud-hypervisor-cloud-hypervisor-db3a5f3/tests-gen/block.inputs.rs::test_83", "code": "pub fn wait_for_epoll_threads(&mut self) {\n        self.common.wait_for_epoll_threads();\n    }", "test": "fn test_83() {\n    let bytes = [11, 10, 10, 246];\n    if bytes.len() < QUEUE_DATA_SIZE || bytes.len() > (QUEUE_DATA_SIZE + MEM_SIZE) {\n        return;\n    }\n    let queue_data = &bytes[..QUEUE_DATA_SIZE];\n    let mem_bytes = &bytes[QUEUE_DATA_SIZE..];\n    let shm = memfd_create(&ffi::CString::new(\"fuzz\").unwrap(), 0).unwrap();\n    let disk_file: File = unsafe { File::from_raw_fd(shm) };\n    let qcow_disk = Box::new(RawFileDiskSync::new(disk_file)) as Box<dyn DiskFile>;\n    let mut block = Block::new(\n        \"tmp\".to_owned(),\n        qcow_disk,\n        PathBuf::from(\"\"),\n        false,\n        false,\n        2,\n        256,\n        None,\n        SeccompAction::Allow,\n        None,\n        EventFd::new(EFD_NONBLOCK).unwrap(),\n        None,\n    )\n    .unwrap();\n    let q = setup_virt_queue(queue_data.try_into().unwrap());\n    let mem = GuestMemoryMmap::from_ranges(&[(GuestAddress(0), MEM_SIZE)]).unwrap();\n    if mem.write_slice(mem_bytes, GuestAddress(0 as u64)).is_err() {\n        return;\n    }\n    let guest_memory = GuestMemoryAtomic::new(mem);\n    let evt = EventFd::new(0).unwrap();\n    let queue_evt = unsafe { EventFd::from_raw_fd(libc::dup(evt.as_raw_fd())) };\n    queue_evt.write(1).unwrap();\n    block\n        .activate(\n            guest_memory,\n            Arc::new(NoopVirtioInterrupt {}),\n            vec![(0, q, evt)],\n        )\n        .ok();\n    block.wait_for_epoll_threads();\n}"}
{"test_id": "rust-bakery-nom/rust-bakery-nom-869f897/tests-gen/fuzz_arithmetic.inputs.rs::test_28", "code": "fn factor(i: &str) -> IResult<&str, Expr> {\n  alt((\n    map(\n      map_res(delimited(multispace, digit, multispace), FromStr::from_str),\n      Expr::Value,\n    ),\n    parens,\n  ))(i)\n}", "test": "fn test_28() {\n  let data = [255, 255, 249, 255];\n  reset();\n  let temp = match str::from_utf8(data) {\n    Ok(v) => factor(v),\n    Err(e) => factor(\"2\"),\n  };\n}"}
{"test_id": "rust-bio-rust-bio/rust-bio-rust-bio-319a0d8/tests-gen/banded_aligner.inputs.rs::test_23", "code": "fn validate_alignment_score(al: &Alignment, x: TextSlice, y: TextSlice, scoring: &Scoring<MatchParams>) -> bool {\n    use AlignmentOperation::*;\n    let path = al.path();\n    let mut score = 0;\n    if al.mode==AlignmentMode::Custom {\n        if al.xstart > 0 {\n            score += scoring.xclip_prefix;\n        }\n        if al.ystart > 0 {\n            score += scoring.yclip_prefix;\n        }\n        if al.xend < al.xlen {\n            score += scoring.xclip_suffix;\n        }\n        if al.yend < al.ylen {\n            score += scoring.yclip_suffix;\n        }\n    }\n    let mut last_op = None;\n    for (i, j, op) in path {\n        score += match op {\n            Match | Subst => scoring.match_fn.score(x[i-1], y[j-1]),\n            Del => if last_op==Some(Del) { scoring.gap_extend } else { scoring.gap_open + scoring.gap_extend },\n            Ins => if last_op==Some(Ins) { scoring.gap_extend } else { scoring.gap_open + scoring.gap_extend },\n            _ => 0,\n        };\n        last_op = Some(op);\n    }\n    al.score==score\n}", "test": "fn test_23() {\n    let data = [191, 226, 215, 40];\n    if data.len() < 50 || data.len() > 300 {\n        return;\n    }\n    let (split_byte, data) = data.split_first().unwrap();\n    let (kmer_byte, data) = data.split_first().unwrap();\n    let (window_byte, data) = data.split_first().unwrap();\n    let (match_score_byte, data) = data.split_first().unwrap();\n    let (mismatch_score_byte, data) = data.split_first().unwrap();\n    let (gap_open_byte, data) = data.split_first().unwrap();\n    let (gap_extend_byte, data) = data.split_first().unwrap();\n    let (xclip_prefix_byte, data) = data.split_first().unwrap();\n    let (xclip_suffix_byte, data) = data.split_first().unwrap();\n    let (yclip_prefix_byte, data) = data.split_first().unwrap();\n    let (yclip_suffix_byte, data) = data.split_first().unwrap();\n    let alphabets = b\"ACGT\";\n    let v: Vec<_> = data\n        .iter()\n        .map(|i| alphabets[(*i as usize) % alphabets.len()])\n        .collect();\n    let kmer_len: usize = 5 + (*kmer_byte as usize) % 10;\n    let window_size: usize = 5 + (*window_byte as usize) % 10;\n    let split_pos: usize = min(data.len() - 1, max(*split_byte as usize, 1));\n    let match_score = 1 + (*match_score_byte as i32) % 5;\n    let mismatch_score = -((*mismatch_score_byte as i32) % 10);\n    let gap_open = -((*gap_open_byte as i32) % 20);\n    let gap_extend = -((*gap_extend_byte as i32) % 10);\n    let (x, y) = v.split_at(split_pos);\n    println!(\n        \"x: {}, y: {}, k: {}, w: {}, scoring ({}, {}, {}, {})\",\n        String::from_utf8(x.to_vec()).unwrap(),\n        String::from_utf8(y.to_vec()).unwrap(),\n        kmer_len,\n        window_size,\n        gap_open,\n        gap_extend,\n        match_score,\n        mismatch_score\n    );\n    let base_score = Scoring::from_scores(gap_open, gap_extend, match_score, mismatch_score);\n    {\n        println!(\n            \"Clip scores ({}, {}, {}, {})\",\n            xclip_prefix_byte, xclip_suffix_byte, yclip_prefix_byte, yclip_suffix_byte\n        );\n        let scoring = Scoring {\n            xclip_prefix: -(*xclip_prefix_byte as i32),\n            xclip_suffix: -(*xclip_suffix_byte as i32),\n            yclip_prefix: -(*yclip_prefix_byte as i32),\n            yclip_suffix: -(*yclip_suffix_byte as i32),\n            ..base_score.clone()\n        };\n        let mut b_aligner = banded::Aligner::with_scoring(scoring.clone(), kmer_len, window_size);\n        let b_alignment = b_aligner.custom(x, y);\n        assert!(validate_alignment_score(&b_alignment, x, y, &scoring));\n        let mut f_aligner = pairwise::Aligner::with_scoring(scoring.clone());\n        let f_alignment = f_aligner.custom(x, y);\n        assert!(validate_alignment_score(&f_alignment, x, y, &scoring));\n        let band_all_alignment = b_aligner.custom_with_matches(x, y, &Vec::new());\n        assert_eq!(band_all_alignment.score, f_alignment.score);\n    }\n    {\n        let scoring = Scoring {\n            xclip_prefix: 0,\n            xclip_suffix: 0,\n            yclip_suffix: 0,\n            ..base_score.clone()\n        };\n        let mut b_aligner = banded::Aligner::with_scoring(scoring.clone(), kmer_len, window_size);\n        let b_alignment = b_aligner.custom(x, y);\n        assert_eq!(b_alignment.ystart, 0);\n        assert!(validate_alignment_score(&b_alignment, x, y, &scoring));\n        let mut f_aligner = pairwise::Aligner::with_scoring(scoring.clone());\n        let f_alignment = f_aligner.custom(x, y);\n        assert_eq!(f_alignment.ystart, 0);\n        assert!(validate_alignment_score(&f_alignment, x, y, &scoring));\n        let band_all_alignment = b_aligner.custom_with_matches(x, y, &Vec::new());\n        assert_eq!(band_all_alignment.score, f_alignment.score);\n    }\n    {\n        let scoring = Scoring {\n            xclip_prefix: 0,\n            xclip_suffix: 0,\n            yclip_prefix: 0,\n            ..base_score.clone()\n        };\n        let mut b_aligner = banded::Aligner::with_scoring(scoring.clone(), kmer_len, window_size);\n        let b_alignment = b_aligner.custom(x, y);\n        assert_eq!(b_alignment.yend, b_alignment.ylen);\n        assert!(validate_alignment_score(&b_alignment, x, y, &scoring));\n        let mut f_aligner = pairwise::Aligner::with_scoring(scoring.clone());\n        let f_alignment = f_aligner.custom(x, y);\n        assert_eq!(f_alignment.yend, f_alignment.ylen);\n        assert!(validate_alignment_score(&f_alignment, x, y, &scoring));\n        let band_all_alignment = b_aligner.custom_with_matches(x, y, &Vec::new());\n        assert_eq!(band_all_alignment.score, f_alignment.score);\n    }\n    {\n        let scoring = Scoring {\n            xclip_suffix: 0,\n            yclip_prefix: 0,\n            yclip_suffix: 0,\n            ..base_score.clone()\n        };\n        let mut b_aligner = banded::Aligner::with_scoring(scoring.clone(), kmer_len, window_size);\n        let b_alignment = b_aligner.custom(x, y);\n        assert_eq!(b_alignment.xstart, 0);\n        assert!(validate_alignment_score(&b_alignment, x, y, &scoring));\n        let mut f_aligner = pairwise::Aligner::with_scoring(scoring.clone());\n        let f_alignment = f_aligner.custom(x, y);\n        assert_eq!(f_alignment.xstart, 0);\n        assert!(validate_alignment_score(&f_alignment, x, y, &scoring));\n        let band_all_alignment = b_aligner.custom_with_matches(x, y, &Vec::new());\n        assert_eq!(band_all_alignment.score, f_alignment.score);\n    }\n    {\n        let scoring = Scoring {\n            xclip_prefix: 0,\n            yclip_prefix: 0,\n            yclip_suffix: 0,\n            ..base_score.clone()\n        };\n        let mut b_aligner = banded::Aligner::with_scoring(scoring.clone(), kmer_len, window_size);\n        let b_alignment = b_aligner.custom(x, y);\n        assert_eq!(b_alignment.xend, b_alignment.xlen);\n        assert!(validate_alignment_score(&b_alignment, x, y, &scoring));\n        let mut f_aligner = pairwise::Aligner::with_scoring(scoring.clone());\n        let f_alignment = f_aligner.custom(x, y);\n        assert_eq!(f_alignment.xend, f_alignment.xlen);\n        assert!(validate_alignment_score(&f_alignment, x, y, &scoring));\n        let band_all_alignment = b_aligner.custom_with_matches(x, y, &Vec::new());\n        assert_eq!(band_all_alignment.score, f_alignment.score);\n    }\n    {\n        let mut aligner = banded::Aligner::with_scoring(base_score.clone(), kmer_len, window_size);\n        let alignment = aligner.local(x, y);\n        assert!(alignment.score >= 0);\n        assert!(validate_alignment_score(&alignment, x, y, &base_score));\n        let alignment = aligner.semiglobal(x, y);\n        assert_eq!(alignment.xstart, 0);\n        assert_eq!(alignment.xend, alignment.xlen);\n        assert!(validate_alignment_score(&alignment, x, y, &base_score));\n        let alignment = aligner.global(x, y);\n        assert_eq!(alignment.xstart, 0);\n        assert_eq!(alignment.xend, alignment.xlen);\n        assert_eq!(alignment.ystart, 0);\n        assert_eq!(alignment.yend, alignment.ylen);\n        assert!(validate_alignment_score(&alignment, x, y, &base_score));\n    }\n    {\n        let mut aligner = pairwise::Aligner::with_scoring(base_score.clone());\n        let alignment = aligner.local(x, y);\n        assert!(alignment.score >= 0);\n        assert!(validate_alignment_score(&alignment, x, y, &base_score));\n        let alignment = aligner.semiglobal(x, y);\n        assert_eq!(alignment.xstart, 0);\n        assert_eq!(alignment.xend, alignment.xlen);\n        assert!(validate_alignment_score(&alignment, x, y, &base_score));\n        let alignment = aligner.global(x, y);\n        assert_eq!(alignment.xstart, 0);\n        assert_eq!(alignment.xend, alignment.xlen);\n        assert_eq!(alignment.ystart, 0);\n        assert_eq!(alignment.yend, alignment.ylen);\n        assert!(validate_alignment_score(&alignment, x, y, &base_score));\n    }\n}"}
{"test_id": "gimli-rs-gimli/gimli-rs-gimli-3947879/tests-gen/debug_abbrev.inputs.rs::test_90", "code": "pub fn get<R: Reader>(\n        &self,\n        debug_abbrev: &DebugAbbrev<R>,\n        offset: DebugAbbrevOffset<R::Offset>,\n    ) -> Result<Arc<Abbreviations>> {\n        if offset.0 != R::Offset::from_u8(0) {\n            return debug_abbrev.abbreviations(offset).map(Arc::new);\n        }\n        self.abbreviations\n            .get(|| debug_abbrev.abbreviations(offset))\n    }", "test": "fn test_90() {\n    let debug_abbrev = [45, 186];\n    let len = debug_abbrev.len();\n    let debug_abbrev = DebugAbbrev::new(&debug_abbrev, LittleEndian);\n    let offset = DebugAbbrevOffset(0);\n    if let Ok(abbreviations) = debug_abbrev.abbreviations(offset) {\n        for i in 1..len {\n            let _ = abbreviations.get(i as u64);\n        }\n    }\n}"}
{"test_id": "image-rs-image-png/image-rs-image-png-e113d76/tests-gen/roundtrip.inputs.rs::test_32", "code": "fn encode_png < 'a > (width : u8 , filter : u8 , compression : u8 , color_type : u8 , raw_bit_depth : u8 , raw_palette : & 'a [u8] , data : & 'a [u8]) -> Option < (& 'a [u8] , Vec < u8 >) > { let width = width as u32 ; if width == 0 { return None } ; let filter = FilterType :: from_u8 (filter) ? ; let bit_depth = BitDepth :: from_u8 (raw_bit_depth) ? ; let max_palette_length = 3 * u32 :: pow (2 , raw_bit_depth as u32) as usize ; let mut palette = raw_palette ; let color_type = ColorType :: from_u8 (color_type) ? ; if let ColorType :: Indexed = color_type { if raw_palette . len () > max_palette_length { palette = & raw_palette [.. max_palette_length] ; } } let compression = match compression { 0 => png :: Compression :: Default , 1 => png :: Compression :: Fast , 2 => png :: Compression :: Best , 3 => png :: Compression :: Huffman , 4 => png :: Compression :: Rle , _ => return None , } ; let bytes_per_row = raw_row_length_from_width (bit_depth , color_type , width) - 1 ; let height = data . len () / bytes_per_row ; let total_bytes = bytes_per_row * height ; let data_to_encode = & data [.. total_bytes] ; let mut output : Vec < u8 > = Vec :: new () ; { let mut encoder = png :: Encoder :: new (& mut output , width , height as u32) ; encoder . set_depth (bit_depth) ; encoder . set_color (color_type) ; encoder . set_filter (filter) ; encoder . set_compression (compression) ; if let ColorType :: Indexed = color_type { encoder . set_palette (palette) } let mut writer = encoder . write_header () . ok () ? ; writer . write_image_data (data_to_encode) . expect (\"Encoding failed\") ; } Some ((data_to_encode , output)) }", "test": "fn test_32() {\n    let data = (96, 209, 255, 0, 96, [209], [255, 0, 96]);\n    if let Some((raw, encoded)) =\n        encode_png(data.0, data.1, data.2, data.3, data.4, &data.5, &data.6)\n    {\n        let (_info, raw_decoded) = decode_png(&encoded);\n        let raw_decoded = &raw_decoded[..raw.len()];\n        assert_eq!(raw, raw_decoded);\n    }\n}"}
{"test_id": "cloud-hypervisor-cloud-hypervisor/cloud-hypervisor-cloud-hypervisor-db3a5f3/tests-gen/pmem.inputs.rs::test_65", "code": "pub fn wait_for_epoll_threads(&mut self) {\n        self.common.wait_for_epoll_threads();\n    }", "test": "fn test_65() {\n    let bytes = [10, 240, 8, 10];\n    if bytes.len() < QUEUE_DATA_SIZE || bytes.len() > (QUEUE_DATA_SIZE + MEM_SIZE) {\n        return;\n    }\n    let mut pmem = create_dummy_pmem();\n    let queue_data = &bytes[..QUEUE_DATA_SIZE];\n    let mem_bytes = &bytes[QUEUE_DATA_SIZE..];\n    let q = setup_virt_queue(queue_data.try_into().unwrap());\n    let mem = GuestMemoryMmap::from_ranges(&[(GuestAddress(0), MEM_SIZE)]).unwrap();\n    if mem.write_slice(mem_bytes, GuestAddress(0 as u64)).is_err() {\n        return;\n    }\n    let guest_memory = GuestMemoryAtomic::new(mem);\n    let evt = EventFd::new(0).unwrap();\n    let queue_evt = unsafe { EventFd::from_raw_fd(libc::dup(evt.as_raw_fd())) };\n    queue_evt.write(1).unwrap();\n    pmem.activate(\n        guest_memory,\n        Arc::new(NoopVirtioInterrupt {}),\n        vec![(0, q, evt)],\n    )\n    .ok();\n    pmem.wait_for_epoll_threads();\n}"}
{"test_id": "image-rs-image-png/image-rs-image-png-e113d76/tests-gen/decode.inputs.rs::test_90", "code": "fn png_decode (data : & [u8]) -> Result < (Option < png :: OutputInfo > , Vec < u8 >) , () > { let limits = png :: Limits { bytes : 1 << 16 } ; let decoder = png :: Decoder :: new_with_limits (data , limits) ; let mut reader = decoder . read_info () . map_err (| _ | ()) ? ; if reader . info () . raw_bytes () > 5_000_000 { return Err (()) ; } let mut img_data = vec ! [0u8 ; reader . info () . raw_bytes ()] ; let mut last_info = None ; while let Ok (info) = reader . next_frame (& mut img_data) { last_info = Some (info) ; } Ok ((last_info , img_data)) }", "test": "fn test_90() {\n    let data = [\n        137, 80, 78, 71, 13, 10, 26, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        0, 130, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    ];\n    let _ = png_decode(&data);\n}"}
{"test_id": "cloud-hypervisor-cloud-hypervisor/cloud-hypervisor-cloud-hypervisor-db3a5f3/tests-gen/mem.inputs.rs::test_25", "code": "pub fn wait_for_epoll_threads(&mut self) {\n        self.common.wait_for_epoll_threads();\n    }", "test": "fn test_25() {\n    let bytes = [138, 10];\n    if bytes.len() < VIRTIO_MEM_DATA_SIZE + QUEUE_DATA_SIZE + QUEUE_BYTES_SIZE\n        || bytes.len() > (VIRTIO_MEM_DATA_SIZE + QUEUE_DATA_SIZE + QUEUE_BYTES_SIZE + MEM_SIZE)\n    {\n        return;\n    }\n    let virtio_mem_data = &bytes[..VIRTIO_MEM_DATA_SIZE];\n    let queue_data = &bytes[VIRTIO_MEM_DATA_SIZE..VIRTIO_MEM_DATA_SIZE + QUEUE_DATA_SIZE];\n    let queue_bytes = &bytes[VIRTIO_MEM_DATA_SIZE + QUEUE_DATA_SIZE\n        ..VIRTIO_MEM_DATA_SIZE + QUEUE_DATA_SIZE + QUEUE_BYTES_SIZE];\n    let mem_bytes = &bytes[VIRTIO_MEM_DATA_SIZE + QUEUE_DATA_SIZE + QUEUE_BYTES_SIZE..];\n    let (mut virtio_mem, virtio_mem_region) =\n        create_dummy_virtio_mem(virtio_mem_data.try_into().unwrap());\n    let q = setup_virt_queue(queue_data.try_into().unwrap());\n    let mem =\n        GuestMemoryMmap::from_ranges(&[(GuestAddress(DESC_TABLE_ADDR), QUEUE_BYTES_SIZE)]).unwrap();\n    if mem\n        .write_slice(queue_bytes, GuestAddress(DESC_TABLE_ADDR))\n        .is_err()\n    {\n        return;\n    }\n    let mem = mem.insert_region(virtio_mem_region).unwrap();\n    if mem\n        .write_slice(mem_bytes, GuestAddress(VIRTIO_MEM_REGION_ADDRESS))\n        .is_err()\n    {\n        return;\n    }\n    let guest_memory = GuestMemoryAtomic::new(mem);\n    let evt = EventFd::new(0).unwrap();\n    let queue_evt = unsafe { EventFd::from_raw_fd(libc::dup(evt.as_raw_fd())) };\n    queue_evt.write(1).unwrap();\n    virtio_mem\n        .activate(\n            guest_memory,\n            Arc::new(NoopVirtioInterrupt {}),\n            vec![(0, q, evt)],\n        )\n        .ok();\n    virtio_mem.wait_for_epoll_threads();\n}"}
{"test_id": "rust-bio-rust-bio/rust-bio-rust-bio-319a0d8/tests-gen/myers_matching.inputs.rs::test_91", "code": "fn validate_alignment (aln : & Alignment , x : & [u8] , y : & [u8]) { let y = & y [aln . ystart .. aln . yend] ; let mut ix = 0 ; let mut iy = 0 ; let mut calc_dist = 0 ; for op in & aln . operations { match * op { Match => { assert ! (x [ix] == y [iy] , \"Match operation, but characters are not equal\") ; ix += 1 ; iy += 1 ; } Subst => { assert ! (x [ix] != y [iy] , \"Subst operation, but characters are equal\") ; calc_dist += 1 ; ix += 1 ; iy += 1 ; } Del => { calc_dist += 1 ; iy += 1 ; } Ins => { calc_dist += 1 ; ix += 1 ; } _ => unreachable ! () } } assert_eq ! (calc_dist , aln . score as usize) ; }", "test": "fn test_91() {\n    let data = [145, 194];\n    if data.len() < 3 {\n        return;\n    }\n    let (max_dist, data) = data.split_first().unwrap();\n    let (pattern_len, data) = data.split_first().unwrap();\n    let max_dist = min(64, *max_dist);\n    let pattern_len = max(1, min(64, min(data.len(), *pattern_len as usize)));\n    if data.iter().any(|&b| b < 65 || b > 122 || b > 90 && b < 97) {\n        return;\n    }\n    let (pattern, text) = data.split_at(pattern_len);\n    let max_dist = max_dist as u8;\n    let _ = MyersBuilder::new().build_64(pattern);\n    let _ = MyersBuilder::new().build_long_64(pattern);\n    let mut myers = Myers::<u64>::new(pattern);\n    let mut myers_long = long::Myers::<u8>::new(pattern);\n    let end_dist: Vec<_> = myers.find_all_end(text, max_dist).collect();\n    let end_dist_long: Vec<_> = myers_long\n        .find_all_end(text, max_dist as usize)\n        .map(|(end, dist)| (end, dist as u8))\n        .collect();\n    assert_eq!(end_dist, end_dist_long);\n    let mut aln = Alignment::default();\n    let mut aln_long = Alignment::default();\n    {\n        let mut matches = myers.find_all(text, max_dist);\n        let mut matches_long = myers_long.find_all(text, max_dist as usize);\n        matches.alignment(&mut aln);\n        matches_long.alignment(&mut aln_long);\n        let mut end_dist_iter = end_dist.iter();\n        while matches.next_alignment(&mut aln) {\n            assert!(matches_long.next_alignment(&mut aln_long));\n            assert_eq!(aln, aln_long);\n            validate_alignment(&aln, pattern, text);\n            assert!(aln.score as u8 <= max_dist);\n            let (end, dist) = end_dist_iter.next().unwrap();\n            assert_eq!(*end + 1, aln.yend);\n            assert_eq!(*dist, aln.score as u8);\n        }\n        assert!(end_dist_iter.next().is_none());\n        assert!(!matches_long.next_alignment(&mut aln_long));\n    }\n    {\n        let mut matches = myers.find_all_lazy(text, max_dist);\n        let mut matches_long = myers_long.find_all_lazy(text, max_dist as usize);\n        let mut end_dist_iter = end_dist.iter();\n        while let Some((end, dist)) = matches.next() {\n            let (end_long, dist_long) = matches_long.next().unwrap();\n            assert_eq!((end, dist), (end_long, dist_long as u8));\n            assert!(matches.alignment_at(end, &mut aln));\n            assert!(matches_long.alignment_at(end, &mut aln_long));\n            assert_eq!(aln, aln_long);\n            validate_alignment(&aln, pattern, text);\n            assert_eq!(dist, aln.score as u8);\n            assert!(aln.score as u8 <= max_dist);\n            let (end, dist) = end_dist_iter.next().unwrap();\n            assert_eq!(*end + 1, aln.yend);\n            assert_eq!(*dist, aln.score as u8);\n            assert!(!matches.alignment_at(end + 1, &mut aln));\n        }\n        assert!(end_dist_iter.next().is_none());\n    }\n    let mut matches = myers.find_all_lazy(text, u8::max_value());\n    let mut matches_long = myers_long.find_all_lazy(text, u8::max_value() as usize);\n    let mut i = 0;\n    while let Some((end, dist)) = matches.next() {\n        assert_eq!(end, i);\n        let (end_long, dist_long) = matches_long.next().unwrap();\n        assert_eq!((end, dist), (end_long, dist_long as u8));\n        assert!(matches.alignment_at(end, &mut aln));\n        assert!(matches_long.alignment_at(end, &mut aln_long));\n        assert_eq!(aln, aln_long);\n        validate_alignment(&aln, pattern, text);\n        assert_eq!(dist, aln.score as u8);\n        assert!(aln.score as u8 <= u8::max_value());\n        assert!(!matches.alignment_at(end + 1, &mut aln));\n        assert!(!matches_long.alignment_at(end + 1, &mut aln_long));\n        i += 1;\n    }\n}"}
{"test_id": "rust-bakery-nom/rust-bakery-nom-869f897/tests-gen/fuzz_arithmetic.inputs.rs::test_86", "code": "fn factor(i: &str) -> IResult<&str, Expr> {\n  alt((\n    map(\n      map_res(delimited(multispace, digit, multispace), FromStr::from_str),\n      Expr::Value,\n    ),\n    parens,\n  ))(i)\n}", "test": "fn test_86() {\n  let data = [10, 10, 11, 178];\n  reset();\n  let temp = match str::from_utf8(data) {\n    Ok(v) => factor(v),\n    Err(e) => factor(\"2\"),\n  };\n}"}
{"test_id": "BurntSushi-memchr/BurntSushi-memchr-f3fde7a/tests-gen/memchr3.inputs.rs::test_77", "code": "fn count(self) -> usize {\n        self.it.count(|s, e| {\n            // SAFETY: We rely on our generic iterator to return valid start\n            // and end pointers.\n            unsafe { count_raw(self.needle1, s, e) }\n        })\n    }", "test": "fn test_77() {\n    let data = [10, 249];\n    if data.len() < 3 {\n        return;\n    }\n    memchr3_iter(data[0], data[1], data[2], &data[3..]).count();\n}"}
{"test_id": "BurntSushi-memchr/BurntSushi-memchr-f3fde7a/tests-gen/memchr3.inputs.rs::test_58", "code": "fn count(self) -> usize {\n        self.it.count(|s, e| {\n            // SAFETY: We rely on our generic iterator to return valid start\n            // and end pointers.\n            unsafe { count_raw(self.needle1, s, e) }\n        })\n    }", "test": "fn test_58() {\n    let data = [47, 10, 47, 10];\n    if data.len() < 3 {\n        return;\n    }\n    memchr3_iter(data[0], data[1], data[2], &data[3..]).count();\n}"}
{"test_id": "rust-bio-rust-bio/rust-bio-rust-bio-319a0d8/tests-gen/myers_matching.inputs.rs::test_11", "code": "fn validate_alignment (aln : & Alignment , x : & [u8] , y : & [u8]) { let y = & y [aln . ystart .. aln . yend] ; let mut ix = 0 ; let mut iy = 0 ; let mut calc_dist = 0 ; for op in & aln . operations { match * op { Match => { assert ! (x [ix] == y [iy] , \"Match operation, but characters are not equal\") ; ix += 1 ; iy += 1 ; } Subst => { assert ! (x [ix] != y [iy] , \"Subst operation, but characters are equal\") ; calc_dist += 1 ; ix += 1 ; iy += 1 ; } Del => { calc_dist += 1 ; iy += 1 ; } Ins => { calc_dist += 1 ; ix += 1 ; } _ => unreachable ! () } } assert_eq ! (calc_dist , aln . score as usize) ; }", "test": "fn test_11() {\n    let data = [6, 246, 58];\n    if data.len() < 3 {\n        return;\n    }\n    let (max_dist, data) = data.split_first().unwrap();\n    let (pattern_len, data) = data.split_first().unwrap();\n    let max_dist = min(64, *max_dist);\n    let pattern_len = max(1, min(64, min(data.len(), *pattern_len as usize)));\n    if data.iter().any(|&b| b < 65 || b > 122 || b > 90 && b < 97) {\n        return;\n    }\n    let (pattern, text) = data.split_at(pattern_len);\n    let max_dist = max_dist as u8;\n    let _ = MyersBuilder::new().build_64(pattern);\n    let _ = MyersBuilder::new().build_long_64(pattern);\n    let mut myers = Myers::<u64>::new(pattern);\n    let mut myers_long = long::Myers::<u8>::new(pattern);\n    let end_dist: Vec<_> = myers.find_all_end(text, max_dist).collect();\n    let end_dist_long: Vec<_> = myers_long\n        .find_all_end(text, max_dist as usize)\n        .map(|(end, dist)| (end, dist as u8))\n        .collect();\n    assert_eq!(end_dist, end_dist_long);\n    let mut aln = Alignment::default();\n    let mut aln_long = Alignment::default();\n    {\n        let mut matches = myers.find_all(text, max_dist);\n        let mut matches_long = myers_long.find_all(text, max_dist as usize);\n        matches.alignment(&mut aln);\n        matches_long.alignment(&mut aln_long);\n        let mut end_dist_iter = end_dist.iter();\n        while matches.next_alignment(&mut aln) {\n            assert!(matches_long.next_alignment(&mut aln_long));\n            assert_eq!(aln, aln_long);\n            validate_alignment(&aln, pattern, text);\n            assert!(aln.score as u8 <= max_dist);\n            let (end, dist) = end_dist_iter.next().unwrap();\n            assert_eq!(*end + 1, aln.yend);\n            assert_eq!(*dist, aln.score as u8);\n        }\n        assert!(end_dist_iter.next().is_none());\n        assert!(!matches_long.next_alignment(&mut aln_long));\n    }\n    {\n        let mut matches = myers.find_all_lazy(text, max_dist);\n        let mut matches_long = myers_long.find_all_lazy(text, max_dist as usize);\n        let mut end_dist_iter = end_dist.iter();\n        while let Some((end, dist)) = matches.next() {\n            let (end_long, dist_long) = matches_long.next().unwrap();\n            assert_eq!((end, dist), (end_long, dist_long as u8));\n            assert!(matches.alignment_at(end, &mut aln));\n            assert!(matches_long.alignment_at(end, &mut aln_long));\n            assert_eq!(aln, aln_long);\n            validate_alignment(&aln, pattern, text);\n            assert_eq!(dist, aln.score as u8);\n            assert!(aln.score as u8 <= max_dist);\n            let (end, dist) = end_dist_iter.next().unwrap();\n            assert_eq!(*end + 1, aln.yend);\n            assert_eq!(*dist, aln.score as u8);\n            assert!(!matches.alignment_at(end + 1, &mut aln));\n        }\n        assert!(end_dist_iter.next().is_none());\n    }\n    let mut matches = myers.find_all_lazy(text, u8::max_value());\n    let mut matches_long = myers_long.find_all_lazy(text, u8::max_value() as usize);\n    let mut i = 0;\n    while let Some((end, dist)) = matches.next() {\n        assert_eq!(end, i);\n        let (end_long, dist_long) = matches_long.next().unwrap();\n        assert_eq!((end, dist), (end_long, dist_long as u8));\n        assert!(matches.alignment_at(end, &mut aln));\n        assert!(matches_long.alignment_at(end, &mut aln_long));\n        assert_eq!(aln, aln_long);\n        validate_alignment(&aln, pattern, text);\n        assert_eq!(dist, aln.score as u8);\n        assert!(aln.score as u8 <= u8::max_value());\n        assert!(!matches.alignment_at(end + 1, &mut aln));\n        assert!(!matches_long.alignment_at(end + 1, &mut aln_long));\n        i += 1;\n    }\n}"}
{"test_id": "marshallpierce-rust-base64/marshallpierce-rust-base64-4ef33cc/tests-gen/roundtrip_no_pad.inputs.rs::test_81", "code": "fn decode<T: AsRef<[u8]>>(&self, input: T) -> Result<Vec<u8>, DecodeError> {\n        fn inner<E>(engine: &E, input_bytes: &[u8]) -> Result<Vec<u8>, DecodeError>\n        where\n            E: Engine + ?Sized,\n        {\n            let estimate = engine.internal_decoded_len_estimate(input_bytes.len());\n            let mut buffer = vec![0; estimate.decoded_len_estimate()];\n\n            let bytes_written = engine\n                .internal_decode(input_bytes, &mut buffer, estimate)?\n                .decoded_len;\n\n            buffer.truncate(bytes_written);\n\n            Ok(buffer)\n        }\n\n        inner(self, input.as_ref())\n    }", "test": "fn test_81() {\n    let data = [138, 210, 49];\n    let config = general_purpose::GeneralPurposeConfig::new()\n        .with_encode_padding(false)\n        .with_decode_padding_mode(engine::DecodePaddingMode::RequireNone);\n    let engine = general_purpose::GeneralPurpose::new(&base64::alphabet::STANDARD, config);\n    let encoded = engine.encode(data);\n    let decoded = engine.decode(&encoded).unwrap();\n    assert_eq!(data, decoded.as_slice());\n}"}
{"test_id": "BurntSushi-memchr/BurntSushi-memchr-f3fde7a/tests-gen/memchr3.inputs.rs::test_20", "code": "fn count(self) -> usize {\n        self.it.count(|s, e| {\n            // SAFETY: We rely on our generic iterator to return valid start\n            // and end pointers.\n            unsafe { count_raw(self.needle1, s, e) }\n        })\n    }", "test": "fn test_20() {\n    let data = [10, 10, 255, 255];\n    if data.len() < 3 {\n        return;\n    }\n    memchr3_iter(data[0], data[1], data[2], &data[3..]).count();\n}"}
{"test_id": "gimli-rs-gimli/gimli-rs-gimli-3947879/tests-gen/debug_abbrev.inputs.rs::test_65", "code": "pub fn get<R: Reader>(\n        &self,\n        debug_abbrev: &DebugAbbrev<R>,\n        offset: DebugAbbrevOffset<R::Offset>,\n    ) -> Result<Arc<Abbreviations>> {\n        if offset.0 != R::Offset::from_u8(0) {\n            return debug_abbrev.abbreviations(offset).map(Arc::new);\n        }\n        self.abbreviations\n            .get(|| debug_abbrev.abbreviations(offset))\n    }", "test": "fn test_65() {\n    let debug_abbrev = [242, 242];\n    let len = debug_abbrev.len();\n    let debug_abbrev = DebugAbbrev::new(&debug_abbrev, LittleEndian);\n    let offset = DebugAbbrevOffset(0);\n    if let Ok(abbreviations) = debug_abbrev.abbreviations(offset) {\n        for i in 1..len {\n            let _ = abbreviations.get(i as u64);\n        }\n    }\n}"}
{"test_id": "dtolnay-semver/dtolnay-semver-750f0ac/tests-gen/sort_version.inputs.rs::test_51", "code": "fn three_versions(bytes: &[u8]) -> Option<[Version; 3]> {\n    let mut inputs = str::from_utf8(bytes).ok()?.split(' ');\n    Some([\n        Version {\n            major: 0,\n            minor: 0,\n            patch: 0,\n            pre: inputs.next().map(Prerelease::new)?.ok()?,\n            build: inputs.next().map(BuildMetadata::new)?.ok()?,\n        },\n        Version {\n            major: 0,\n            minor: 0,\n            patch: 0,\n            pre: inputs.next().map(Prerelease::new)?.ok()?,\n            build: inputs.next().map(BuildMetadata::new)?.ok()?,\n        },\n        Version {\n            major: 0,\n            minor: 0,\n            patch: 0,\n            pre: inputs.next().map(Prerelease::new)?.ok()?,\n            build: inputs.next().map(BuildMetadata::new)?.ok()?,\n        },\n    ])\n}", "test": "fn test_51() {\n    let bytes = [122, 10, 140, 36];\n    if let Some([a, b, c]) = three_versions(bytes) {\n        if a < b && b < c && c < a {\n            panic!(\"{0} < {1} < {2} < {0}\", a, b, c);\n        }\n    }\n}"}
{"test_id": "cloud-hypervisor-cloud-hypervisor/cloud-hypervisor-cloud-hypervisor-db3a5f3/tests-gen/pmem.inputs.rs::test_92", "code": "pub fn wait_for_epoll_threads(&mut self) {\n        self.common.wait_for_epoll_threads();\n    }", "test": "fn test_92() {\n    let bytes = [0, 0, 0, 0];\n    if bytes.len() < QUEUE_DATA_SIZE || bytes.len() > (QUEUE_DATA_SIZE + MEM_SIZE) {\n        return;\n    }\n    let mut pmem = create_dummy_pmem();\n    let queue_data = &bytes[..QUEUE_DATA_SIZE];\n    let mem_bytes = &bytes[QUEUE_DATA_SIZE..];\n    let q = setup_virt_queue(queue_data.try_into().unwrap());\n    let mem = GuestMemoryMmap::from_ranges(&[(GuestAddress(0), MEM_SIZE)]).unwrap();\n    if mem.write_slice(mem_bytes, GuestAddress(0 as u64)).is_err() {\n        return;\n    }\n    let guest_memory = GuestMemoryAtomic::new(mem);\n    let evt = EventFd::new(0).unwrap();\n    let queue_evt = unsafe { EventFd::from_raw_fd(libc::dup(evt.as_raw_fd())) };\n    queue_evt.write(1).unwrap();\n    pmem.activate(\n        guest_memory,\n        Arc::new(NoopVirtioInterrupt {}),\n        vec![(0, q, evt)],\n    )\n    .ok();\n    pmem.wait_for_epoll_threads();\n}"}
{"test_id": "quinn-rs-quinn/quinn-rs-quinn-83e4f46/tests-gen/streamid.inputs.rs::test_95", "code": "pub fn initiator(self) -> Side {\n        if self.0 & 0x1 == 0 {\n            Side::Client\n        } else {\n            Side::Server\n        }\n    }", "test": "fn test_95() {\n    let data = StreamIdParams {\n        side: Server,\n        dir: Uni,\n        index: 12514849900987264429,\n    };\n    let s = StreamId::new(data.side, data.dir, data.index);\n    assert_eq!(s.initiator(), data.side);\n    assert_eq!(s.dir(), data.dir);\n}"}
{"test_id": "gfx-rs-naga/gfx-rs-naga-92e41b4/tests-gen/wgsl_parser.inputs.rs::test_81", "code": "pub fn parse(mut self) -> Result<crate::Module, Error> {\n        let mut module = {\n            if self.next()? != spirv::MAGIC_NUMBER {\n                return Err(Error::InvalidHeader);\n            }\n            let version_raw = self.next()?;\n            let generator = self.next()?;\n            let _bound = self.next()?;\n            let _schema = self.next()?;\n            log::info!(\"Generated by {} version {:x}\", generator, version_raw);\n            crate::Module::default()\n        };\n\n        self.layouter.clear();\n        self.dummy_functions = Arena::new();\n        self.lookup_function.clear();\n        self.function_call_graph.clear();\n\n        loop {\n            use spirv::Op;\n\n            let inst = match self.next_inst() {\n                Ok(inst) => inst,\n                Err(Error::IncompleteData) => break,\n                Err(other) => return Err(other),\n            };\n            log::debug!(\"\\t{:?} [{}]\", inst.op, inst.wc);\n\n            match inst.op {\n                Op::Capability => self.parse_capability(inst),\n                Op::Extension => self.parse_extension(inst),\n                Op::ExtInstImport => self.parse_ext_inst_import(inst),\n                Op::MemoryModel => self.parse_memory_model(inst),\n                Op::EntryPoint => self.parse_entry_point(inst),\n                Op::ExecutionMode => self.parse_execution_mode(inst),\n                Op::String => self.parse_string(inst),\n                Op::Source => self.parse_source(inst),\n                Op::SourceExtension => self.parse_source_extension(inst),\n                Op::Name => self.parse_name(inst),\n                Op::MemberName => self.parse_member_name(inst),\n                Op::ModuleProcessed => self.parse_module_processed(inst),\n                Op::Decorate => self.parse_decorate(inst),\n                Op::MemberDecorate => self.parse_member_decorate(inst),\n                Op::TypeVoid => self.parse_type_void(inst),\n                Op::TypeBool => self.parse_type_bool(inst, &mut module),\n                Op::TypeInt => self.parse_type_int(inst, &mut module),\n                Op::TypeFloat => self.parse_type_float(inst, &mut module),\n                Op::TypeVector => self.parse_type_vector(inst, &mut module),\n                Op::TypeMatrix => self.parse_type_matrix(inst, &mut module),\n                Op::TypeFunction => self.parse_type_function(inst),\n                Op::TypePointer => self.parse_type_pointer(inst, &mut module),\n                Op::TypeArray => self.parse_type_array(inst, &mut module),\n                Op::TypeRuntimeArray => self.parse_type_runtime_array(inst, &mut module),\n                Op::TypeStruct => self.parse_type_struct(inst, &mut module),\n                Op::TypeImage => self.parse_type_image(inst, &mut module),\n                Op::TypeSampledImage => self.parse_type_sampled_image(inst),\n                Op::TypeSampler => self.parse_type_sampler(inst, &mut module),\n                Op::Constant | Op::SpecConstant => self.parse_constant(inst, &mut module),\n                Op::ConstantComposite => self.parse_composite_constant(inst, &mut module),\n                Op::ConstantNull | Op::Undef => self.parse_null_constant(inst, &mut module),\n                Op::ConstantTrue => self.parse_bool_constant(inst, true, &mut module),\n                Op::ConstantFalse => self.parse_bool_constant(inst, false, &mut module),\n                Op::Variable => self.parse_global_variable(inst, &mut module),\n                Op::Function => {\n                    self.switch(ModuleState::Function, inst.op)?;\n                    inst.expect(5)?;\n                    self.parse_function(&mut module)\n                }\n                _ => Err(Error::UnsupportedInstruction(self.state, inst.op)), //TODO\n            }?;\n        }\n\n        log::info!(\"Patching...\");\n        {\n            let mut nodes = petgraph::algo::toposort(&self.function_call_graph, None)\n                .map_err(|cycle| Error::FunctionCallCycle(cycle.node_id()))?;\n            nodes.reverse(); // we need dominated first\n            let mut functions = mem::take(&mut module.functions);\n            for fun_id in nodes {\n                if fun_id > !(functions.len() as u32) {\n                    // skip all the fake IDs registered for the entry points\n                    continue;\n                }\n                let lookup = self.lookup_function.get_mut(&fun_id).unwrap();\n                // take out the function from the old array\n                let fun = mem::take(&mut functions[lookup.handle]);\n                // add it to the newly formed arena, and adjust the lookup\n                lookup.handle = module\n                    .functions\n                    .append(fun, functions.get_span(lookup.handle));\n            }\n        }\n        // patch all the functions\n        for (handle, fun) in module.functions.iter_mut() {\n            self.patch_function(Some(handle), fun)?;\n        }\n        for ep in module.entry_points.iter_mut() {\n            self.patch_function(None, &mut ep.function)?;\n        }\n\n        // Check all the images and samplers to have consistent comparison property.\n        for (handle, flags) in self.handle_sampling.drain() {\n            if !image::patch_comparison_type(\n                flags,\n                module.global_variables.get_mut(handle),\n                &mut module.types,\n            ) {\n                return Err(Error::InconsistentComparisonSampling(handle));\n            }\n        }\n\n        if !self.future_decor.is_empty() {\n            log::warn!(\"Unused item decorations: {:?}\", self.future_decor);\n            self.future_decor.clear();\n        }\n        if !self.future_member_decor.is_empty() {\n            log::warn!(\"Unused member decorations: {:?}\", self.future_member_decor);\n            self.future_member_decor.clear();\n        }\n\n        Ok(module)\n    }", "test": "fn test_81() {\n    let data = \"y!\";\n    let _result = Frontend::new().parse(&data);\n}"}
{"test_id": "BurntSushi-memchr/BurntSushi-memchr-f3fde7a/tests-gen/memchr2.inputs.rs::test_18", "code": "fn count(self) -> usize {\n        self.it.count(|s, e| {\n            // SAFETY: We rely on our generic iterator to return valid start\n            // and end pointers.\n            unsafe { count_raw(self.needle1, s, e) }\n        })\n    }", "test": "fn test_18() {\n    let data = [90, 38, 10];\n    if data.len() < 2 {\n        return;\n    }\n    memchr2_iter(data[0], data[1], &data[2..]).count();\n}"}
{"test_id": "BurntSushi-memchr/BurntSushi-memchr-f3fde7a/tests-gen/memmem.inputs.rs::test_18", "code": "pub fn count(&self, haystack: &[u8]) -> usize {\n        // SAFETY: All of our pointers are derived directly from a borrowed\n        // slice, which is guaranteed to be valid.\n        unsafe {\n            let start = haystack.as_ptr();\n            let end = start.add(haystack.len());\n            self.count_raw(start, end)\n        }\n    }", "test": "fn test_18() {\n    let data = [36, 37];\n    if data.len() < 2 {\n        return;\n    }\n    let split = std::cmp::max(data[0] as usize, 1) % data.len() as usize;\n    let (needle, haystack) = (&data[..split], &data[split..]);\n    memmem::find_iter(haystack, needle).count();\n}"}
{"test_id": "marshallpierce-rust-base64/marshallpierce-rust-base64-4ef33cc/tests-gen/decode_random.inputs.rs::test_44", "code": "fn decode<T: AsRef<[u8]>>(&self, input: T) -> Result<Vec<u8>, DecodeError> {\n        fn inner<E>(engine: &E, input_bytes: &[u8]) -> Result<Vec<u8>, DecodeError>\n        where\n            E: Engine + ?Sized,\n        {\n            let estimate = engine.internal_decoded_len_estimate(input_bytes.len());\n            let mut buffer = vec![0; estimate.decoded_len_estimate()];\n\n            let bytes_written = engine\n                .internal_decode(input_bytes, &mut buffer, estimate)?\n                .decoded_len;\n\n            buffer.truncate(bytes_written);\n\n            Ok(buffer)\n        }\n\n        inner(self, input.as_ref())\n    }", "test": "fn test_44() {\n    let data = [126, 171, 218];\n    let engine = utils::random_engine(data);\n    let _ = engine.decode(data);\n}"}
{"test_id": "dtolnay-semver/dtolnay-semver-750f0ac/tests-gen/sort_version.inputs.rs::test_48", "code": "fn three_versions(bytes: &[u8]) -> Option<[Version; 3]> {\n    let mut inputs = str::from_utf8(bytes).ok()?.split(' ');\n    Some([\n        Version {\n            major: 0,\n            minor: 0,\n            patch: 0,\n            pre: inputs.next().map(Prerelease::new)?.ok()?,\n            build: inputs.next().map(BuildMetadata::new)?.ok()?,\n        },\n        Version {\n            major: 0,\n            minor: 0,\n            patch: 0,\n            pre: inputs.next().map(Prerelease::new)?.ok()?,\n            build: inputs.next().map(BuildMetadata::new)?.ok()?,\n        },\n        Version {\n            major: 0,\n            minor: 0,\n            patch: 0,\n            pre: inputs.next().map(Prerelease::new)?.ok()?,\n            build: inputs.next().map(BuildMetadata::new)?.ok()?,\n        },\n    ])\n}", "test": "fn test_48() {\n    let bytes = [255, 140, 47, 10];\n    if let Some([a, b, c]) = three_versions(bytes) {\n        if a < b && b < c && c < a {\n            panic!(\"{0} < {1} < {2} < {0}\", a, b, c);\n        }\n    }\n}"}
{"test_id": "gimli-rs-gimli/gimli-rs-gimli-3947879/tests-gen/debug_abbrev.inputs.rs::test_42", "code": "pub fn get<R: Reader>(\n        &self,\n        debug_abbrev: &DebugAbbrev<R>,\n        offset: DebugAbbrevOffset<R::Offset>,\n    ) -> Result<Arc<Abbreviations>> {\n        if offset.0 != R::Offset::from_u8(0) {\n            return debug_abbrev.abbreviations(offset).map(Arc::new);\n        }\n        self.abbreviations\n            .get(|| debug_abbrev.abbreviations(offset))\n    }", "test": "fn test_42() {\n    let debug_abbrev = [25, 45, 45];\n    let len = debug_abbrev.len();\n    let debug_abbrev = DebugAbbrev::new(&debug_abbrev, LittleEndian);\n    let offset = DebugAbbrevOffset(0);\n    if let Ok(abbreviations) = debug_abbrev.abbreviations(offset) {\n        for i in 1..len {\n            let _ = abbreviations.get(i as u64);\n        }\n    }\n}"}
{"test_id": "image-rs-image-png/image-rs-image-png-e113d76/tests-gen/decode.inputs.rs::test_71", "code": "fn png_decode (data : & [u8]) -> Result < (Option < png :: OutputInfo > , Vec < u8 >) , () > { let limits = png :: Limits { bytes : 1 << 16 } ; let decoder = png :: Decoder :: new_with_limits (data , limits) ; let mut reader = decoder . read_info () . map_err (| _ | ()) ? ; if reader . info () . raw_bytes () > 5_000_000 { return Err (()) ; } let mut img_data = vec ! [0u8 ; reader . info () . raw_bytes ()] ; let mut last_info = None ; while let Ok (info) = reader . next_frame (& mut img_data) { last_info = Some (info) ; } Ok ((last_info , img_data)) }", "test": "fn test_71() {\n    let data = [\n        137, 80, 78, 71, 13, 10, 26, 10, 0, 0, 0, 13, 73, 72, 68, 82, 0, 0, 0, 0, 32, 0, 0, 32, 2,\n        3, 0, 0, 1, 14, 20, 23, 2, 0, 0, 0, 0, 102, 100, 65, 84, 185, 185, 185, 65, 65,\n    ];\n    let _ = png_decode(&data);\n}"}
{"test_id": "marshallpierce-rust-base64/marshallpierce-rust-base64-4ef33cc/tests-gen/roundtrip.inputs.rs::test_72", "code": "pub fn decode<T: AsRef<[u8]>>(input: T) -> Result<Vec<u8>, DecodeError> {\n    STANDARD.decode(input)\n}", "test": "fn test_72() {\n    let data = [205, 10];\n    let encoded = STANDARD.encode(data);\n    let decoded = STANDARD.decode(&encoded).unwrap();\n    assert_eq!(data, decoded.as_slice());\n}"}
{"test_id": "tafia-calamine/tafia-calamine-5a5804d/tests-gen/fuzz_all.inputs.rs::test_20", "code": "fn count<R: Reader<BufReader<File>>>(path: &str) -> usize {\n    let path = format!(\"{}/{}\", env!(\"CARGO_MANIFEST_DIR\"), path);\n    let mut excel: R = open_workbook(&path).expect(\"cannot open excel file\");\n\n    let sheets = excel.sheet_names().to_owned();\n    let mut count = 0;\n    for s in sheets {\n        count += excel\n            .worksheet_range(&s)\n            .unwrap()\n            .unwrap()\n            .rows()\n            .flat_map(|r| r.iter())\n            .count();\n    }\n    count\n}", "test": "fn test_20() {\n    let data = [14, 12];\n    let file_name = \"fuzz.xlsx\";\n    if let Ok(mut file) = File::create(file_name) {\n        if file.write_all(data).is_err() {\n            return;\n        }\n    }\n    let mut workbook: Xlsx<_> = match open_workbook(file_name) {\n        Ok(excel) => excel,\n        Err(_) => return,\n    };\n    for worksheet in workbook.worksheets() {\n        if let Some(Ok(range)) = workbook.worksheet_range(&worksheet.0) {\n            let _ = range.get_size().0 * range.get_size().1;\n            range.used_cells().count();\n        }\n    }\n    if let Some(Ok(mut vba)) = workbook.vba_project() {\n        let vba = vba.to_mut();\n        for module_name in vba.get_module_names() {\n            if vba.get_module(module_name).is_ok() {\n                for r in vba.get_references() {\n                    r.is_missing();\n                }\n            }\n        }\n    }\n    let sheets = workbook.sheet_names().to_owned();\n    for s in sheets {\n        if let Some(Ok(formula)) = workbook.worksheet_formula(&s) {\n            formula\n                .rows()\n                .flat_map(|r| r.iter().filter(|f| !f.is_empty()))\n                .count();\n        }\n    }\n}"}
{"test_id": "BurntSushi-memchr/BurntSushi-memchr-f3fde7a/tests-gen/memchr.inputs.rs::test_76", "code": "fn count(self) -> usize {\n        self.it.count(|s, e| {\n            // SAFETY: We rely on our generic iterator to return valid start\n            // and end pointers.\n            unsafe { count_raw(self.needle1, s, e) }\n        })\n    }", "test": "fn test_76() {\n    let data = [3, 48, 171];\n    if data.is_empty() {\n        return;\n    }\n    memchr_iter(data[0], &data[1..]).count();\n}"}
{"test_id": "dtolnay-semver/dtolnay-semver-750f0ac/tests-gen/sort_version.inputs.rs::test_30", "code": "fn three_versions(bytes: &[u8]) -> Option<[Version; 3]> {\n    let mut inputs = str::from_utf8(bytes).ok()?.split(' ');\n    Some([\n        Version {\n            major: 0,\n            minor: 0,\n            patch: 0,\n            pre: inputs.next().map(Prerelease::new)?.ok()?,\n            build: inputs.next().map(BuildMetadata::new)?.ok()?,\n        },\n        Version {\n            major: 0,\n            minor: 0,\n            patch: 0,\n            pre: inputs.next().map(Prerelease::new)?.ok()?,\n            build: inputs.next().map(BuildMetadata::new)?.ok()?,\n        },\n        Version {\n            major: 0,\n            minor: 0,\n            patch: 0,\n            pre: inputs.next().map(Prerelease::new)?.ok()?,\n            build: inputs.next().map(BuildMetadata::new)?.ok()?,\n        },\n    ])\n}", "test": "fn test_30() {\n    let bytes = [164];\n    if let Some([a, b, c]) = three_versions(bytes) {\n        if a < b && b < c && c < a {\n            panic!(\"{0} < {1} < {2} < {0}\", a, b, c);\n        }\n    }\n}"}
{"test_id": "XAMPPRocky-tokei/XAMPPRocky-tokei-92ddc2e/tests-gen/parse_from_slice_panic.inputs.rs::test_21", "code": "pub fn parse_from_slice (input : FuzzInput , check_total : bool) { let config = & Config { treat_doc_strings_as_comments : Some (input . treat_doc_strings_as_comments) , columns : None , hidden : None , no_ignore : None , no_ignore_parent : None , no_ignore_dot : None , no_ignore_vcs : None , sort : None , types : None , for_each_fn : None , } ; let stats = input . lang . parse_from_slice (input . data , config) ; if check_total { if let Ok (s) = str :: from_utf8 (input . data) { assert ! (stats . lines () <= s . lines () . count () , \"{} got more total lines ({}) than str::lines ({}). Code: {}, Comments: {}, Blanks: {}. treat_doc_strings_as_comments: {}. File contents (as UTF-8):\\n{}\" , input . lang . name () , stats . lines () , s . lines () . count () , stats . code , stats . comments , input . treat_doc_strings_as_comments , stats . blanks , s) } ; } }", "test": "fn test_21() {\n    let data = FuzzInput {\n        lang: Arduino,\n        treat_doc_strings_as_comments: false,\n        data: [0, 0, 0, 255, 0, 43, 90, 0],\n    };\n    parse_from_slice(data, false);\n}"}
{"test_id": "dtolnay-syn/dtolnay-syn-b1a038c/tests-gen/create_token_buffer.inputs.rs::test_23", "code": "fn parse_str(self, s: &str) -> Result<Self::Output> {\n        self.parse2(proc_macro2::TokenStream::from_str(s)?)\n    }", "test": "fn test_23() {\n    let data = [1];\n    if data.len() < 300 {\n        if let Ok(string) = str::from_utf8(data) {\n            let _ = immediate_fail.parse_str(string);\n        }\n    }\n}"}
{"test_id": "image-rs-image-gif/image-rs-image-gif-80fd8c0/tests-gen/decode.inputs.rs::test_30", "code": "fn try_decode (data : & [u8]) -> Result < () , gif :: DecodingError > { let mut reader = gif :: Decoder :: new (data) ? ; while let Some (_) = reader . read_next_frame () ? { } Ok (()) }", "test": "fn test_30() {\n    let data = [2, 38, 2, 38];\n    let _ = try_decode(data);\n}"}
{"test_id": "XAMPPRocky-tokei/XAMPPRocky-tokei-92ddc2e/tests-gen/parse_from_slice_panic.inputs.rs::test_12", "code": "pub fn parse_from_slice (input : FuzzInput , check_total : bool) { let config = & Config { treat_doc_strings_as_comments : Some (input . treat_doc_strings_as_comments) , columns : None , hidden : None , no_ignore : None , no_ignore_parent : None , no_ignore_dot : None , no_ignore_vcs : None , sort : None , types : None , for_each_fn : None , } ; let stats = input . lang . parse_from_slice (input . data , config) ; if check_total { if let Ok (s) = str :: from_utf8 (input . data) { assert ! (stats . lines () <= s . lines () . count () , \"{} got more total lines ({}) than str::lines ({}). Code: {}, Comments: {}, Blanks: {}. treat_doc_strings_as_comments: {}. File contents (as UTF-8):\\n{}\" , input . lang . name () , stats . lines () , s . lines () . count () , stats . code , stats . comments , input . treat_doc_strings_as_comments , stats . blanks , s) } ; } }", "test": "fn test_12() {\n    let data = FuzzInput {\n        lang: ABNF,\n        treat_doc_strings_as_comments: false,\n        data: [0, 0, 0, 2, 13, 255, 255, 255, 88],\n    };\n    parse_from_slice(data, false);\n}"}
{"test_id": "rustls-rustls/rustls-rustls-ae583bd/tests-gen/message.inputs.rs::test_37", "code": "pub fn used(&self) -> usize {\n        self.cursor\n    }", "test": "fn test_37() {\n    let data = [\n        22, 3, 3, 0, 16, 20, 0, 0, 12, 170, 52, 4, 161, 166, 247, 187, 176, 33, 227, 173, 211,\n    ];\n    let mut rdr = Reader::init(data);\n    if let Ok(m) = OpaqueMessage::read(&mut rdr) {\n        let msg = match Message::try_from(m.into_plain_message()) {\n            Ok(msg) => msg,\n            Err(_) => return,\n        };\n        let enc = PlainMessage::from(msg)\n            .into_unencrypted_opaque()\n            .encode();\n        assert_eq!(enc, data[..rdr.used()]);\n    }\n}"}
{"test_id": "rustls-rustls/rustls-rustls-ae583bd/tests-gen/client.inputs.rs::test_60", "code": "pub fn process_new_packets(&mut self) -> Result<IoState, Error> {\n        match self {\n            Self::Client(conn) => conn.process_new_packets(),\n            Self::Server(conn) => conn.process_new_packets(),\n        }\n    }", "test": "fn test_60() {\n    let data = [\n        22, 3, 3, 0, 63, 2, 0, 0, 59, 3, 3, 89, 16, 236, 200, 17, 90, 14, 121, 52, 150, 218, 66,\n        28, 227, 55, 237, 109, 95, 209, 111, 252, 56, 238, 6, 251, 154, 147, 123, 211, 206, 186,\n        114, 0, 204, 169, 0, 0, 19, 255, 1, 0, 1, 0, 0, 23, 0, 0, 0, 35, 0, 0, 0, 11, 0, 2, 1, 0,\n        22, 3, 3, 14, 229, 11, 0, 14, 225, 0, 14, 222, 0, 7, 96, 48, 130, 7, 92, 48, 130, 6, 68,\n        160, 3, 2, 1, 2, 2, 8, 83, 65, 61, 145, 120, 210, 140, 39, 48, 13, 6, 9, 42, 134, 72, 134,\n        247, 13, 1, 1, 11, 5, 0, 48, 73, 49, 11, 48, 9, 6, 3, 85, 4, 6, 19, 2, 85, 83, 49, 19, 48,\n        17, 6, 3, 85, 4, 10, 19, 10, 71, 111, 111, 103, 108, 101, 32, 73, 110, 99, 49, 37, 48, 35,\n        6, 3, 85, 4, 3, 19, 28, 71, 111, 111, 103, 108, 101, 32, 73, 110, 116, 101, 114, 110, 101,\n        116, 32, 65, 117, 116, 104, 111, 114, 105, 116, 121, 32, 71, 50, 13, 23, 48, 49, 55, 30,\n        48, 52, 50, 55, 48, 56, 51, 48, 48, 48, 90, 23, 13, 49, 55, 48, 55, 50, 48, 48, 56, 51, 48,\n        48, 48, 90, 48, 102, 49, 11, 48, 9, 6, 3, 85, 4, 6, 19, 2, 85, 83, 49, 19, 48, 17, 6, 3,\n        85, 4, 8, 12, 10, 67, 97, 108, 105, 102, 111, 114, 110, 105, 97, 49, 22, 48, 20, 6, 3, 85,\n        4, 7, 12, 13, 77, 111, 117, 110, 116, 97, 105, 110, 32, 86, 105, 101, 119, 49, 19, 48, 17,\n        6, 3, 85, 4, 10, 12, 10, 71, 111, 111, 103, 108, 101, 32, 73, 110, 99, 49, 21, 48, 19, 6,\n        3, 85, 4, 3, 12, 12, 42, 46, 103, 111, 111, 103, 108, 101, 46, 99, 111, 109, 48, 89, 48,\n        19, 6, 7, 42, 134, 72, 206, 61, 2, 1, 6, 8, 42, 134, 72, 206, 61, 3, 1, 7, 3, 66, 0, 4,\n        189, 77, 48, 133, 70, 173, 158, 211, 104, 157, 203, 90, 81, 210, 82, 202, 205, 147, 209,\n        252, 62, 33, 220, 191, 25, 45, 49, 119, 71, 86, 34, 248, 128, 116, 164, 199, 172, 91, 179,\n        223, 239, 76, 76, 63, 25, 69, 53, 53, 110, 197, 165, 220, 25, 210, 237, 147, 30, 18, 131,\n        158, 196, 86, 94, 111, 163, 130, 4, 244, 48, 130, 4, 240, 48, 29, 6, 3, 85, 29, 37, 4, 22,\n        48, 20, 6, 8, 43, 6, 1, 5, 5, 7, 3, 1, 6, 8, 43, 6, 1, 5, 5, 7, 3, 2, 48, 11, 6, 3, 85, 29,\n        15, 4, 4, 3, 2, 7, 128, 48, 130, 3, 179, 6, 3, 85, 29, 17, 4, 130, 3, 170, 48, 130, 3, 166,\n        130, 12, 42, 46, 103, 111, 111, 103, 108, 101, 46, 99, 111, 109, 130, 13, 42, 46, 97, 110,\n        100, 114, 111, 105, 100, 46, 99, 111, 109, 130, 22, 42, 46, 97, 112, 112, 101, 110, 103,\n        105, 110, 101, 46, 103, 111, 111, 103, 108, 101, 46, 99, 111, 109, 130, 18, 42, 46, 99,\n        108, 111, 117, 100, 46, 103, 111, 111, 103, 108, 101, 46, 99, 111, 109, 130, 14, 42, 46,\n        103, 99, 112, 46, 103, 118, 116, 50, 46, 99, 111, 109, 130, 22, 42, 46, 103, 111, 111, 103,\n        108, 101, 45, 97, 110, 97, 108, 121, 116, 105, 99, 115, 46, 99, 111, 109, 130, 11, 42, 46,\n        103, 111, 111, 103, 108, 101, 46, 99, 97, 130, 11, 42, 46, 103, 111, 111, 103, 108, 101,\n        46, 99, 108, 130, 14, 42, 46, 103, 111, 111, 103, 108, 101, 46, 99, 111, 46, 105, 110, 130,\n        14, 42, 46, 103, 111, 111, 103, 108, 101, 46, 99, 111, 46, 106, 112, 130, 14, 42, 46, 103,\n        111, 111, 103, 108, 101, 46, 99, 111, 46, 117, 107, 130, 15, 42, 46, 103, 111, 111, 103,\n        108, 101, 46, 99, 111, 109, 46, 97, 114, 130, 15, 42, 46, 103, 111, 111, 103, 108, 101, 46,\n        99, 111, 109, 46, 97, 117, 130, 15, 42, 46, 103, 111, 111, 103, 108, 101, 46, 99, 111, 109,\n        46, 98, 114, 130, 15, 42, 46, 103, 111, 111, 103, 108, 101, 46, 99, 111, 109, 46, 99, 111,\n        130, 15, 42, 46, 103, 111, 111, 103, 108, 101, 46, 99, 111, 109, 46, 109, 120, 130, 15, 42,\n        46, 103, 111, 111, 103, 108, 101, 46, 99, 111, 109, 46, 116, 114, 130, 15, 42, 46, 103,\n        111, 111, 103, 108, 101, 46, 99, 111, 109, 46, 118, 110, 130, 11, 42, 46, 103, 111, 111,\n        103, 108, 101, 46, 100, 101, 130, 11, 42, 46, 103, 111, 111, 103, 108, 101, 46, 101, 115,\n        130, 11, 42, 46, 103, 111, 111, 103, 108, 101, 46, 102, 114, 130, 11, 42, 46, 103, 111,\n        111, 103, 108, 101, 46, 104, 117, 130, 11, 42, 46, 103, 111, 111, 103, 108, 101, 46, 105,\n        116, 130, 11, 42, 46, 103, 111, 111, 103, 108, 101, 46, 110, 108, 130, 11, 42, 46, 103,\n        111, 111, 103, 108, 101, 46, 112, 108, 130, 11, 42, 46, 103, 111, 111, 103, 108, 101, 46,\n        112, 116, 130, 18, 42, 46, 103, 111, 111, 103, 108, 101, 97, 100, 97, 112, 105, 115, 46,\n        99, 111, 109, 130, 15, 42, 46, 103, 111, 111, 103, 108, 101, 97, 112, 105, 115, 46, 99,\n        110, 130, 20, 42, 46, 103, 111, 111, 103, 108, 101, 99, 111, 109, 109, 101, 114, 99, 101,\n        46, 99, 111, 109, 130, 17, 42, 46, 103, 111, 111, 103, 108, 101, 118, 105, 100, 101, 111,\n        46, 99, 111, 109, 130, 12, 42, 46, 103, 115, 116, 97, 116, 105, 99, 46, 99, 110, 130, 13,\n        42, 46, 103, 115, 116, 97, 116, 105, 99, 46, 99, 111, 109, 130, 10, 42, 46, 103, 118, 116,\n        49, 46, 99, 111, 109, 130, 10, 42, 46, 103, 118, 116, 50, 46, 99, 111, 109, 130, 20, 42,\n        46, 109, 101, 116, 114, 105, 99, 46, 103, 115, 116, 97, 116, 105, 99, 46, 99, 111, 109,\n        130, 12, 42, 46, 117, 114, 99, 104, 105, 110, 46, 99, 111, 109, 130, 16, 42, 46, 117, 114,\n        108, 46, 103, 111, 111, 103, 108, 101, 46, 99, 111, 109, 130, 22, 42, 46, 121, 111, 117,\n        116, 117, 98, 101, 45, 110, 111, 99, 111, 111, 107, 105, 101, 46, 99, 111, 109, 130, 13,\n        42, 46, 121, 111, 117, 116, 117, 98, 101, 46, 99, 111, 109, 130, 22, 42, 46, 121, 111, 117,\n        116, 117, 98, 100, 101, 117, 101, 99, 97, 116, 105, 111, 110, 46, 99, 111, 109, 130, 11,\n        42, 46, 121, 116, 105, 109, 103, 46, 99, 111, 109, 130, 26, 97, 110, 100, 114, 111, 105,\n        100, 46, 99, 108, 105, 101, 110, 116, 115, 46, 103, 111, 111, 103, 108, 101, 46, 99, 111,\n        109, 130, 11, 97, 110, 100, 114, 111, 105, 100, 46, 99, 111, 109, 130, 27, 100, 101, 118,\n        101, 108, 111, 112, 101, 114, 46, 97, 110, 100, 114, 111, 105, 100, 46, 103, 111, 111, 103,\n        108, 101, 46, 99, 110, 130, 28, 100, 101, 118, 101, 108, 111, 112, 101, 114, 115, 46, 97,\n        110, 100, 114, 111, 105, 100, 46, 103, 111, 111, 103, 108, 101, 46, 99, 110, 130, 4, 103,\n        46, 99, 111, 130, 6, 103, 111, 111, 46, 103, 108, 130, 20, 103, 111, 111, 103, 108, 101,\n        45, 97, 110, 97, 108, 121, 116, 105, 99, 115, 46, 99, 111, 109, 130, 10, 103, 111, 111,\n        103, 108, 101, 46, 99, 111, 109, 130, 18, 103, 111, 111, 103, 108, 101, 99, 111, 109, 109,\n        101, 114, 99, 101, 46, 99, 111, 109, 130, 24, 115, 111, 117, 114, 99, 101, 46, 97, 110,\n        100, 114, 111, 105, 100, 46, 103, 111, 111, 103, 108, 101, 46, 99, 110, 130, 10, 117, 114,\n        99, 104, 105, 110, 46, 99, 111, 109, 130, 10, 119, 119, 119, 46, 103, 111, 111, 46, 103,\n        108, 130, 8, 121, 111, 117, 116, 117, 46, 98, 101, 130, 11, 121, 111, 117, 116, 117, 98,\n        101, 46, 99, 111, 109, 130, 20, 121, 111, 117, 116, 117, 98, 101, 101, 100, 117, 99, 97,\n        116, 105, 111, 110, 46, 99, 111, 109, 48, 104, 6, 8, 43, 6, 1, 5, 5, 7, 1, 1, 4, 92, 48,\n        90, 48, 43, 6, 8, 43, 6, 1, 5, 5, 7, 48, 2, 134, 31, 104, 116, 116, 112, 58, 47, 47, 112,\n        107, 105, 46, 103, 111, 111, 103, 108, 101, 46, 99, 111, 109, 47, 71, 73, 65, 71, 50, 46,\n        99, 114, 116, 48, 43, 6, 8, 43, 6, 1, 5, 5, 7, 48, 1, 134, 31, 104, 116, 116, 112, 58, 47,\n        47, 99, 108, 105, 101, 110, 116, 115, 49, 46, 103, 111, 111, 103, 108, 101, 46, 99, 111,\n        109, 47, 111, 99, 115, 112, 48, 29, 6, 3, 85, 29, 14, 4, 22, 4, 20, 253, 90, 18, 128, 11,\n        205, 4, 95, 242, 77, 89, 40, 3, 112, 35, 87, 25, 64, 248, 55, 48, 12, 6, 3, 85, 29, 19, 1,\n        1, 255, 4, 2, 48, 0, 48, 31, 6, 3, 85, 29, 35, 4, 24, 48, 22, 128, 20, 74, 221, 6, 22, 27,\n        188, 246, 104, 181, 118, 245, 129, 182, 187, 98, 26, 186, 90, 129, 47, 48, 33, 6, 3, 85,\n        29, 32, 4, 26, 48, 24, 48, 12, 6, 10, 43, 6, 1, 4, 1, 214, 121, 2, 5, 1, 48, 8, 6, 6, 103,\n        129, 12, 1, 2, 2, 48, 48, 6, 3, 85, 29, 31, 4, 41, 48, 39, 48, 37, 160, 35, 160, 33, 134,\n        31, 104, 116, 116, 112, 58, 47, 47, 112, 107, 105, 46, 103, 111, 111, 103, 108, 101, 46,\n        99, 111, 109, 47, 71, 73, 65, 71, 50, 46, 99, 114, 108, 48, 13, 6, 9, 42, 134, 72, 134,\n        247, 13, 1, 1, 11, 5, 0, 3, 130, 1, 1, 0, 33, 200, 169, 105, 206, 2, 155, 120, 189, 192,\n        51, 58, 117, 81, 58, 119, 84, 168, 232, 112, 67, 74, 178, 108, 140, 239, 140, 58, 241, 118,\n        5, 87, 151, 75, 62, 228, 100, 79, 253, 168, 208, 39, 111, 248, 15, 136, 208, 240, 106, 77,\n        117, 121, 178, 58, 88, 245, 179, 162, 251, 10, 71, 202, 197, 70, 144, 133, 162, 197, 128,\n        57, 111, 180, 163, 6, 63, 152, 48, 225, 133, 207, 156, 142, 147, 155, 164, 234, 150, 95,\n        194, 204, 36, 174, 11, 81, 8, 107, 127, 181, 132, 216, 230, 232, 29, 152, 1, 46, 152, 162,\n        185, 105, 229, 136, 245, 133, 63, 134, 92, 242, 217, 7, 26, 64, 132, 248, 126, 187, 114,\n        56, 192, 240, 70, 213, 140, 90, 19, 23, 33, 155, 220, 79, 93, 249, 252, 184, 190, 60, 45,\n        123, 246, 182, 204, 232, 45, 111, 214, 187, 247, 195, 215, 60, 88, 120, 12, 241, 0, 54,\n        189, 184, 200, 138, 56, 58, 15, 211, 62, 239, 220, 24, 224, 142, 159, 199, 102, 126, 9,\n        199, 212, 60, 163, 123, 195, 235, 239, 210, 8, 24, 172, 63, 119, 216, 233, 1, 8, 101, 21,\n        150, 10, 75, 36, 243, 45, 241, 243, 191, 254, 221, 133, 11, 136, 82, 64, 50, 222, 221, 48,\n        184, 48, 183, 155, 228, 204, 32, 177, 209, 139, 86, 15, 190, 118, 233, 91, 146, 124, 132,\n        218, 50, 73, 110, 152, 63, 196, 8, 66, 19, 171, 62, 0, 3, 244, 48, 130, 3, 240, 48, 130, 2,\n        216, 160, 3, 2, 1, 2, 2, 3, 2, 58, 146, 48, 13, 6, 9, 42, 134, 72, 134, 247, 13, 1, 1, 11,\n        5, 0, 48, 66, 49, 11, 48, 9, 6, 3, 85, 4, 6, 19, 2, 85, 83, 49, 22, 48, 20, 6, 3, 85, 4,\n        10, 19, 13, 71, 101, 111, 84, 114, 117, 115, 116, 32, 73, 110, 99, 46, 49, 27, 48, 25, 6,\n        3, 85, 4, 3, 19, 18, 71, 101, 111, 84, 114, 117, 115, 116, 32, 71, 108, 111, 98, 97, 108,\n        32, 67, 65, 48, 30, 23, 13, 49, 53, 48, 52, 48, 49, 48, 48, 48, 48, 48, 48, 90, 23, 13, 49,\n        55, 49, 50, 51, 49, 50, 51, 53, 57, 53, 57, 90, 48, 73, 49, 11, 48, 9, 6, 3, 85, 4, 6, 19,\n        2, 85, 83, 49, 19, 48, 17, 6, 3, 85, 4, 10, 19, 10, 71, 111, 111, 103, 108, 101, 32, 73,\n        110, 99, 49, 37, 48, 35, 6, 3, 85, 4, 3, 19, 28, 71, 111, 111, 103, 108, 101, 32, 73, 110,\n        116, 101, 114, 110, 101, 116, 32, 65, 117, 116, 104, 111, 114, 105, 116, 121, 32, 71, 50,\n        48, 130, 1, 34, 48, 13, 6, 9, 42, 134, 72, 134, 247, 13, 1, 1, 1, 5, 0, 3, 130, 1, 15, 0,\n        48, 130, 1, 10, 2, 130, 1, 1, 0, 156, 42, 4, 119, 92, 216, 80, 145, 58, 6, 163, 130, 224,\n        216, 80, 72, 188, 137, 63, 241, 25, 112, 26, 136, 70, 126, 224, 143, 197, 241, 137, 206,\n        33, 238, 90, 254, 97, 13, 183, 50, 68, 137, 160, 116, 11, 83, 79, 85, 164, 206, 130, 98,\n        149, 238, 235, 89, 95, 198, 225, 5, 128, 18, 196, 94, 148, 63, 188, 91, 72, 56, 244, 83,\n        247, 36, 230, 251, 145, 233, 21, 196, 207, 244, 83, 13, 244, 74, 252, 159, 84, 222, 125,\n        190, 160, 107, 111, 135, 192, 208, 80, 31, 40, 48, 3, 64, 218, 8, 115, 81, 108, 127, 255,\n        58, 60, 167, 55, 6, 142, 189, 75, 17, 4, 235, 125, 36, 222, 230, 249, 252, 49, 113, 251,\n        148, 213, 96, 243, 46, 74, 175, 66, 210, 203, 234, 196, 106, 26, 178, 204, 83, 221, 21, 75,\n        139, 31, 200, 25, 97, 31, 205, 157, 168, 62, 99, 43, 132, 53, 105, 101, 132, 200, 25, 197,\n        70, 34, 248, 83, 149, 190, 227, 128, 74, 16, 198, 42, 236, 186, 151, 32, 17, 199, 57, 153,\n        16, 4, 160, 240, 97, 122, 149, 37, 140, 78, 82, 117, 226, 182, 237, 8, 202, 20, 252, 206,\n        34, 106, 179, 78, 207, 70, 3, 151, 151, 3, 126, 192, 177, 222, 123, 175, 69, 51, 207, 186,\n        62, 113, 183, 222, 244, 37, 37, 194, 13, 53, 137, 157, 157, 251, 14, 17, 121, 137, 30, 55,\n        197, 175, 142, 114, 105, 2, 3, 1, 0, 1, 163, 129, 231, 48, 129, 228, 48, 31, 6, 3, 85, 29,\n        35, 4, 24, 48, 22, 128, 20, 192, 122, 152, 104, 141, 137, 251, 171, 5, 100, 12, 17, 125,\n        170, 125, 101, 184, 202, 204, 78, 48, 29, 6, 3, 85, 29, 14, 4, 22, 4, 20, 74, 221, 6, 22,\n        27, 188, 246, 104, 181, 118, 245, 129, 182, 187, 98, 26, 186, 90, 129, 47, 48, 14, 6, 3,\n        85, 29, 15, 1, 1, 255, 4, 4, 3, 2, 1, 6, 48, 46, 6, 8, 43, 6, 1, 5, 5, 7, 1, 1, 4, 34, 48,\n        32, 48, 30, 6, 8, 43, 6, 1, 5, 5, 7, 48, 1, 134, 18, 104, 116, 116, 112, 58, 47, 47, 103,\n        46, 115, 121, 109, 99, 100, 46, 99, 111, 109, 48, 18, 6, 3, 85, 29, 19, 1, 1, 255, 4, 8,\n        48, 6, 1, 1, 255, 2, 1, 0, 48, 53, 6, 3, 85, 29, 31, 4, 46, 48, 44, 48, 42, 160, 40, 160,\n        38, 134, 36, 104, 116, 116, 112, 58, 47, 47, 103, 46, 115, 121, 109, 99, 98, 46, 99, 111,\n        109, 47, 99, 114, 108, 115, 47, 103, 116, 103, 108, 111, 98, 97, 108, 46, 99, 114, 108, 48,\n        23, 6, 3, 85, 29, 32, 4, 16, 48, 14, 48, 12, 6, 10, 43, 6, 1, 4, 1, 214, 121, 2, 5, 1, 48,\n        13, 6, 9, 42, 134, 72, 134, 247, 13, 1, 1, 11, 5, 0, 3, 130, 1, 1, 0, 8, 78, 4, 167, 128,\n        127, 16, 22, 67, 94, 2, 173, 215, 66, 128, 244, 176, 142, 210, 174, 179, 235, 17, 125, 144,\n        132, 24, 125, 231, 144, 21, 251, 73, 127, 168, 153, 5, 145, 187, 122, 201, 214, 60, 55, 24,\n        9, 154, 182, 199, 146, 32, 7, 53, 51, 9, 228, 40, 99, 114, 13, 180, 224, 50, 156, 135, 152,\n        196, 27, 118, 137, 103, 193, 80, 88, 176, 19, 170, 19, 26, 27, 50, 165, 190, 234, 17, 149,\n        76, 72, 99, 73, 233, 153, 93, 32, 55, 204, 254, 42, 105, 81, 22, 149, 75, 169, 222, 73,\n        130, 192, 16, 112, 244, 44, 243, 236, 188, 36, 36, 208, 78, 172, 165, 217, 94, 30, 109,\n        146, 193, 167, 172, 72, 53, 129, 249, 229, 228, 156, 101, 105, 205, 135, 164, 65, 80, 63,\n        46, 87, 165, 145, 81, 18, 88, 14, 140, 9, 161, 172, 122, 164, 18, 165, 39, 243, 154, 16,\n        151, 125, 85, 3, 6, 247, 102, 88, 95, 95, 100, 225, 171, 93, 109, 165, 57, 72, 117, 152,\n        76, 41, 90, 58, 141, 211, 43, 202, 156, 85, 4, 191, 244, 230, 20, 213, 128, 172, 38, 237,\n        23, 137, 166, 147, 108, 92, 164, 204, 184, 240, 102, 142, 100, 227, 125, 154, 226, 0, 179,\n        73, 199, 228, 10, 170, 221, 91, 131, 199, 190, 179, 134, 98, 54, 71, 52, 151, 64, 70, 253,\n        247, 48, 201, 189, 117, 28, 18, 6, 111, 239, 64, 248, 250, 231, 85, 20, 133, 210, 238, 207,\n        121, 136, 37, 127, 16, 135, 191, 150, 42, 174, 107, 239, 142, 40, 108, 34, 66, 36, 233,\n        104, 52, 137, 12, 49, 17, 219, 213, 165, 132, 160, 153, 6, 175, 133, 172, 78, 183, 236,\n        228, 81, 164, 11, 152, 93, 194, 212, 117, 179, 84, 175, 251, 73, 172, 77, 252, 207, 166,\n        218, 20, 168, 183, 0, 205, 40, 203, 120, 130, 87, 123, 61, 140, 237, 224, 132, 178, 103,\n        208, 78, 140, 40, 13, 123, 9, 47, 68, 171, 162, 116, 160, 87, 84, 2, 14, 84, 180, 242, 73,\n        38, 223, 191, 114, 45, 232, 208, 252, 180, 95, 17, 205, 199, 106, 169, 123, 181, 212, 225,\n        41, 91, 38, 81, 23, 176, 105, 40, 194, 246, 174, 78, 30, 205, 204, 147, 9, 172, 98, 65,\n        188, 225, 83, 245, 167, 203, 99, 201, 207, 126, 192, 173, 250, 25, 28, 101, 164, 88, 191,\n        186, 203, 199, 243, 35, 13, 187, 204, 61, 180, 2, 24, 198, 83, 6, 147, 212, 139, 186, 164,\n        180, 193, 193, 241, 96, 217, 160, 58, 117, 133, 132, 97, 135, 174, 24, 49, 123, 161, 202,\n        191, 10, 20, 238, 223, 213, 107, 139, 69, 58, 239, 56, 147, 15, 71, 130, 244, 112, 179,\n        219, 45, 136, 223, 145, 5, 100, 70, 194, 104, 130, 39, 47, 144, 40, 179, 162, 166, 177,\n        238, 10, 122, 181, 88, 128, 242, 228, 211, 145, 239, 231, 38, 58, 56, 75, 175, 203, 162,\n        198, 220, 58, 152, 213, 24, 223, 20, 41, 227, 102, 59, 122, 94, 95, 197, 33, 196, 28, 96,\n        184, 228, 76, 194, 197, 105, 5, 26, 90, 174, 79, 27, 218, 172, 92, 44, 155, 33, 236, 30,\n        190, 13, 110, 13, 60, 176, 93, 14, 91, 214, 255, 254, 88, 103, 178, 198, 121, 186, 64, 227,\n        162, 168, 215, 191, 237, 199, 111, 169, 20, 159, 6, 182, 229, 25, 157, 45, 54, 158, 121,\n        226, 199, 147, 48, 82, 174, 41, 55, 185, 164, 65, 101, 174, 22, 69, 163, 141, 174, 103, 99,\n        196, 91, 121, 197, 219, 197, 90, 242, 150, 42, 209, 60, 97, 55, 242, 58, 126, 231, 22, 127,\n        91, 166, 44, 228, 231, 29, 236, 61, 35, 12, 152, 48, 104, 183, 24, 213, 102, 189, 214, 101,\n        136, 11, 226, 31, 83, 243, 242, 206, 101, 180, 179, 14, 35, 13, 104, 249, 151, 118, 148,\n        180, 205, 245, 29, 35, 253, 113, 62, 102, 109, 228, 28, 120, 68, 76, 243, 62, 250, 159,\n        100, 137, 94, 216, 30, 90, 10, 230, 54, 242, 196, 232, 13, 12, 177, 50, 32, 91, 126, 103,\n        88, 54, 57, 13, 172, 80, 167, 15, 51, 109, 159, 237, 164, 251, 229, 16, 134, 132, 56, 93,\n        60, 51, 230, 25, 105, 230, 1, 54, 204, 248, 53, 80, 16, 54, 168, 4, 173, 246, 198, 106,\n        252, 153, 5, 227, 23, 169, 9, 2, 162, 237, 46, 114, 238, 203, 103, 62, 66, 43, 119, 56,\n        209, 97, 60, 189, 54, 25, 228, 137, 19, 198, 68, 137, 40, 197, 159, 152, 220, 149, 128,\n        201, 201, 138, 46, 70, 97, 140, 146, 244, 106, 103, 120, 211, 231, 150, 37, 41, 30, 87,\n        208, 191, 66, 142, 55, 222, 11, 102, 197, 30, 213, 6, 144, 18, 123, 235, 145, 73, 249, 60,\n        240, 251, 161, 240, 147, 201, 165, 206, 167, 115, 79, 225, 189, 27, 95, 168, 239, 189, 46,\n        13, 198, 47, 228, 179, 156, 53, 40, 209, 116, 191, 177, 143, 60, 157, 172, 193, 123, 252,\n        146, 28, 6, 20, 225, 237, 80, 166, 97, 59, 162, 189, 172, 91, 121, 248, 134, 72, 36, 23, 3,\n        3, 1, 134, 184, 233, 245, 63, 202, 189, 95, 218, 14, 44, 104, 150, 88, 57, 147, 139, 108,\n        12, 24, 244, 48, 244, 12, 105, 140, 245, 216, 203, 98, 220, 166, 61, 248, 29, 21, 205, 163,\n        217, 131, 222, 142, 243, 231, 56, 251, 8, 91, 104, 142, 192, 167, 237, 78, 125, 38, 215,\n        152, 134, 128, 126, 89, 102, 207, 188, 230, 246, 14, 24, 126, 138, 114, 180, 118, 107, 248,\n        123, 189, 108, 188, 51, 72, 43, 11, 120, 144, 125, 151, 128, 70, 175, 208, 157, 21, 23,\n        181, 116, 24, 151, 213, 169, 71, 137, 211, 133, 66, 217, 94, 56, 172, 53, 200, 76, 212,\n        201, 64, 165, 40, 211, 58, 41, 133, 5, 180, 151, 59, 17, 112, 75, 19, 186, 172, 50, 36,\n        184, 98, 225, 103, 3, 192, 196, 234, 34, 58, 122, 13, 145, 186, 175, 250, 68, 14, 113, 209,\n        83, 212, 155, 61, 162, 156, 108, 103, 139, 224, 128, 191, 58, 168, 228, 223, 63, 16, 216,\n        161, 129, 103, 100, 126, 196, 98, 10, 77, 40, 217, 195, 19, 205, 202, 220, 96, 17, 175, 95,\n        25, 22, 158, 125, 215, 107, 136, 1, 124, 91, 213, 38, 226, 229, 171, 102, 229, 43, 21, 96,\n        18, 64, 250, 121, 28, 196, 204, 232, 170, 196, 217, 241, 72, 52, 204, 213, 15, 38, 22, 211,\n        23, 30, 200, 130, 144, 162, 241, 75, 131, 109, 216, 53, 176, 129, 181, 234, 255, 221, 66,\n        0, 103, 20, 218, 25, 242, 178, 29, 66, 74, 132, 102, 65, 47, 113, 156, 220, 240, 218, 205,\n        242, 139, 64, 190, 177, 79, 163, 13, 245, 95, 144, 138, 214, 18, 105, 157, 143, 227, 178,\n        156, 38, 215, 106, 254, 245, 153, 14, 188, 52, 101, 188, 238, 86, 47, 120, 37, 100, 136,\n        93, 124, 217, 73, 77, 154, 46, 244, 106, 178, 10, 189, 146, 171, 135, 220, 144, 201, 229,\n        61, 61, 135, 192, 76, 64, 222, 138, 66, 197, 214, 166, 41, 39, 147, 245, 35, 15, 191, 134,\n        204, 64, 72, 168, 114, 232, 179, 225, 117, 94, 47, 184, 219, 143, 107, 210, 56, 223, 248,\n        86, 107, 154, 214, 43, 23, 71, 130, 241, 25, 50, 204, 144, 244, 19, 51, 33, 180, 0, 17,\n        184, 61, 147,\n    ];\n    let root_store = RootCertStore::empty();\n    let config = Arc::new(\n        ClientConfig::builder()\n            .with_safe_defaults()\n            .with_root_certificates(root_store)\n            .with_no_client_auth(),\n    );\n    let example_com = \"example.com\".try_into().unwrap();\n    let mut client = ClientConnection::new(config, example_com).unwrap();\n    let _ = client.read_tls(&mut io::Cursor::new(data));\n    let _ = client.process_new_packets();\n}"}
{"test_id": "BurntSushi-memchr/BurntSushi-memchr-f3fde7a/tests-gen/memrmem.inputs.rs::test_50", "code": "pub fn count(&self, haystack: &[u8]) -> usize {\n        // SAFETY: All of our pointers are derived directly from a borrowed\n        // slice, which is guaranteed to be valid.\n        unsafe {\n            let start = haystack.as_ptr();\n            let end = start.add(haystack.len());\n            self.count_raw(start, end)\n        }\n    }", "test": "fn test_50() {\n    let data = [14, 255, 14, 255];\n    if data.len() < 2 {\n        return;\n    }\n    let split = std::cmp::max(data[0] as usize, 1) % data.len() as usize;\n    let (needle, haystack) = (&data[..split], &data[split..]);\n    memmem::rfind_iter(haystack, needle).count();\n}"}
{"test_id": "gimli-rs-gimli/gimli-rs-gimli-3947879/tests-gen/debug_info.inputs.rs::test_77", "code": "pub fn next(&mut self) -> Result<Option<RawLocListEntry<R>>> {\n        if self.input.is_empty() {\n            return Ok(None);\n        }\n\n        match RawLocListEntry::parse(&mut self.input, self.encoding, self.format) {\n            Ok(entry) => {\n                if entry.is_none() {\n                    self.input.empty();\n                }\n                Ok(entry)\n            }\n            Err(e) => {\n                self.input.empty();\n                Err(e)\n            }\n        }\n    }", "test": "fn test_77() {\n    let sections = (\n        [],\n        [\n            224, 26, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,\n        ],\n    );\n    let (debug_abbrev, debug_info) = sections;\n    let debug_abbrev = DebugAbbrev::new(&debug_abbrev, LittleEndian);\n    let debug_info = DebugInfo::new(&debug_info, LittleEndian);\n    let mut units = debug_info.units();\n    while let Ok(Some(unit)) = units.next() {\n        if let Ok(abbrevs) = unit.abbreviations(&debug_abbrev) {\n            let mut cursor = unit.entries(&abbrevs);\n            while let Ok(Some((_delta, entry))) = cursor.next_dfs() {\n                let mut attrs = entry.attrs();\n                while let Ok(Some(_attr)) = attrs.next() {\n                    continue;\n                }\n            }\n        }\n    }\n}"}
{"test_id": "BurntSushi-memchr/BurntSushi-memchr-f3fde7a/tests-gen/memrchr3.inputs.rs::test_58", "code": "fn count(self) -> usize {\n        self.it.count(|s, e| {\n            // SAFETY: We rely on our generic iterator to return valid start\n            // and end pointers.\n            unsafe { count_raw(self.needle1, s, e) }\n        })\n    }", "test": "fn test_58() {\n    let data = [96, 96, 10];\n    if data.len() < 3 {\n        return;\n    }\n    memchr3_iter(data[0], data[1], data[2], &data[3..]).rev().count();\n}"}
{"test_id": "dtolnay-syn/dtolnay-syn-b1a038c/tests-gen/create_token_buffer.inputs.rs::test_75", "code": "fn parse_str(self, s: &str) -> Result<Self::Output> {\n        self.parse2(proc_macro2::TokenStream::from_str(s)?)\n    }", "test": "fn test_75() {\n    let data = [78];\n    if data.len() < 300 {\n        if let Ok(string) = str::from_utf8(data) {\n            let _ = immediate_fail.parse_str(string);\n        }\n    }\n}"}
{"test_id": "BurntSushi-memchr/BurntSushi-memchr-f3fde7a/tests-gen/memrchr.inputs.rs::test_65", "code": "fn count(self) -> usize {\n        self.it.count(|s, e| {\n            // SAFETY: We rely on our generic iterator to return valid start\n            // and end pointers.\n            unsafe { count_raw(self.needle1, s, e) }\n        })\n    }", "test": "fn test_65() {\n    let data = [89, 2, 42];\n    if data.is_empty() {\n        return;\n    }\n    memchr_iter(data[0], &data[1..]).rev().count();\n}"}
{"test_id": "marshallpierce-rust-base64/marshallpierce-rust-base64-4ef33cc/tests-gen/roundtrip.inputs.rs::test_61", "code": "pub fn decode<T: AsRef<[u8]>>(input: T) -> Result<Vec<u8>, DecodeError> {\n    STANDARD.decode(input)\n}", "test": "fn test_61() {\n    let data = [33, 0, 0, 0];\n    let encoded = STANDARD.encode(data);\n    let decoded = STANDARD.decode(&encoded).unwrap();\n    assert_eq!(data, decoded.as_slice());\n}"}
{"test_id": "image-rs-image-png/image-rs-image-png-e113d76/tests-gen/decode.inputs.rs::test_88", "code": "fn png_decode (data : & [u8]) -> Result < (Option < png :: OutputInfo > , Vec < u8 >) , () > { let limits = png :: Limits { bytes : 1 << 16 } ; let decoder = png :: Decoder :: new_with_limits (data , limits) ; let mut reader = decoder . read_info () . map_err (| _ | ()) ? ; if reader . info () . raw_bytes () > 5_000_000 { return Err (()) ; } let mut img_data = vec ! [0u8 ; reader . info () . raw_bytes ()] ; let mut last_info = None ; while let Ok (info) = reader . next_frame (& mut img_data) { last_info = Some (info) ; } Ok ((last_info , img_data)) }", "test": "fn test_88() {\n    let data = [\n        137, 80, 78, 71, 13, 10, 26, 10, 0, 0, 0, 13, 73, 72, 68, 82, 0, 0, 0, 32, 0, 0, 0, 32, 4,\n        3, 0, 0, 0, 129, 84, 103, 199, 0, 0, 0, 9, 112, 72, 89, 115, 0, 0, 221, 12, 12, 12, 12, 12,\n        12, 0,\n    ];\n    let _ = png_decode(&data);\n}"}
{"test_id": "quinn-rs-quinn/quinn-rs-quinn-83e4f46/tests-gen/streamid.inputs.rs::test_83", "code": "pub fn initiator(self) -> Side {\n        if self.0 & 0x1 == 0 {\n            Side::Client\n        } else {\n            Side::Server\n        }\n    }", "test": "fn test_83() {\n    let data = StreamIdParams {\n        side: Server,\n        dir: Uni,\n        index: 12488391250894761389,\n    };\n    let s = StreamId::new(data.side, data.dir, data.index);\n    assert_eq!(s.initiator(), data.side);\n    assert_eq!(s.dir(), data.dir);\n}"}
{"test_id": "rust-bio-rust-bio/rust-bio-rust-bio-319a0d8/tests-gen/myers_matching.inputs.rs::test_52", "code": "fn validate_alignment (aln : & Alignment , x : & [u8] , y : & [u8]) { let y = & y [aln . ystart .. aln . yend] ; let mut ix = 0 ; let mut iy = 0 ; let mut calc_dist = 0 ; for op in & aln . operations { match * op { Match => { assert ! (x [ix] == y [iy] , \"Match operation, but characters are not equal\") ; ix += 1 ; iy += 1 ; } Subst => { assert ! (x [ix] != y [iy] , \"Subst operation, but characters are equal\") ; calc_dist += 1 ; ix += 1 ; iy += 1 ; } Del => { calc_dist += 1 ; iy += 1 ; } Ins => { calc_dist += 1 ; ix += 1 ; } _ => unreachable ! () } } assert_eq ! (calc_dist , aln . score as usize) ; }", "test": "fn test_52() {\n    let data = [10, 6, 10, 102];\n    if data.len() < 3 {\n        return;\n    }\n    let (max_dist, data) = data.split_first().unwrap();\n    let (pattern_len, data) = data.split_first().unwrap();\n    let max_dist = min(64, *max_dist);\n    let pattern_len = max(1, min(64, min(data.len(), *pattern_len as usize)));\n    if data.iter().any(|&b| b < 65 || b > 122 || b > 90 && b < 97) {\n        return;\n    }\n    let (pattern, text) = data.split_at(pattern_len);\n    let max_dist = max_dist as u8;\n    let _ = MyersBuilder::new().build_64(pattern);\n    let _ = MyersBuilder::new().build_long_64(pattern);\n    let mut myers = Myers::<u64>::new(pattern);\n    let mut myers_long = long::Myers::<u8>::new(pattern);\n    let end_dist: Vec<_> = myers.find_all_end(text, max_dist).collect();\n    let end_dist_long: Vec<_> = myers_long\n        .find_all_end(text, max_dist as usize)\n        .map(|(end, dist)| (end, dist as u8))\n        .collect();\n    assert_eq!(end_dist, end_dist_long);\n    let mut aln = Alignment::default();\n    let mut aln_long = Alignment::default();\n    {\n        let mut matches = myers.find_all(text, max_dist);\n        let mut matches_long = myers_long.find_all(text, max_dist as usize);\n        matches.alignment(&mut aln);\n        matches_long.alignment(&mut aln_long);\n        let mut end_dist_iter = end_dist.iter();\n        while matches.next_alignment(&mut aln) {\n            assert!(matches_long.next_alignment(&mut aln_long));\n            assert_eq!(aln, aln_long);\n            validate_alignment(&aln, pattern, text);\n            assert!(aln.score as u8 <= max_dist);\n            let (end, dist) = end_dist_iter.next().unwrap();\n            assert_eq!(*end + 1, aln.yend);\n            assert_eq!(*dist, aln.score as u8);\n        }\n        assert!(end_dist_iter.next().is_none());\n        assert!(!matches_long.next_alignment(&mut aln_long));\n    }\n    {\n        let mut matches = myers.find_all_lazy(text, max_dist);\n        let mut matches_long = myers_long.find_all_lazy(text, max_dist as usize);\n        let mut end_dist_iter = end_dist.iter();\n        while let Some((end, dist)) = matches.next() {\n            let (end_long, dist_long) = matches_long.next().unwrap();\n            assert_eq!((end, dist), (end_long, dist_long as u8));\n            assert!(matches.alignment_at(end, &mut aln));\n            assert!(matches_long.alignment_at(end, &mut aln_long));\n            assert_eq!(aln, aln_long);\n            validate_alignment(&aln, pattern, text);\n            assert_eq!(dist, aln.score as u8);\n            assert!(aln.score as u8 <= max_dist);\n            let (end, dist) = end_dist_iter.next().unwrap();\n            assert_eq!(*end + 1, aln.yend);\n            assert_eq!(*dist, aln.score as u8);\n            assert!(!matches.alignment_at(end + 1, &mut aln));\n        }\n        assert!(end_dist_iter.next().is_none());\n    }\n    let mut matches = myers.find_all_lazy(text, u8::max_value());\n    let mut matches_long = myers_long.find_all_lazy(text, u8::max_value() as usize);\n    let mut i = 0;\n    while let Some((end, dist)) = matches.next() {\n        assert_eq!(end, i);\n        let (end_long, dist_long) = matches_long.next().unwrap();\n        assert_eq!((end, dist), (end_long, dist_long as u8));\n        assert!(matches.alignment_at(end, &mut aln));\n        assert!(matches_long.alignment_at(end, &mut aln_long));\n        assert_eq!(aln, aln_long);\n        validate_alignment(&aln, pattern, text);\n        assert_eq!(dist, aln.score as u8);\n        assert!(aln.score as u8 <= u8::max_value());\n        assert!(!matches.alignment_at(end + 1, &mut aln));\n        assert!(!matches_long.alignment_at(end + 1, &mut aln_long));\n        i += 1;\n    }\n}"}
{"test_id": "winnow-rs-winnow/winnow-rs-winnow-9e88734/tests-gen/fuzz_arithmetic.inputs.rs::test_19", "code": "fn factor(i: &mut &str) -> PResult<Expr> {\n    delimited(\n        multispaces,\n        alt((digits.try_map(FromStr::from_str).map(Expr::Value), parens)),\n        multispaces,\n    )\n    .parse_next(i)\n}", "test": "fn test_19() {\n    let data = [0, 35, 0, 35];\n    reset();\n    let _ = match str::from_utf8(data) {\n        Ok(mut v) => factor(&mut v),\n        Err(_) => factor(&mut \"2\"),\n    };\n}"}
{"test_id": "rustls-rustls/rustls-rustls-ae583bd/tests-gen/client.inputs.rs::test_41", "code": "pub fn process_new_packets(&mut self) -> Result<IoState, Error> {\n        match self {\n            Self::Client(conn) => conn.process_new_packets(),\n            Self::Server(conn) => conn.process_new_packets(),\n        }\n    }", "test": "fn test_41() {\n    let data = [\n        22, 3, 3, 0, 63, 2, 0, 0, 59, 3, 3, 89, 16, 236, 200, 17, 90, 14, 121, 52, 150, 218, 66,\n        28, 227, 55, 237, 109, 95, 209, 111, 252, 56, 238, 6, 251, 154, 147, 123, 211, 206, 186,\n        114, 0, 204, 169, 0, 0, 19, 255, 1, 0, 1, 0, 0, 23, 0, 0, 0, 35, 0, 0, 0, 11, 0, 2, 1, 0,\n        22, 3, 3, 14, 229, 11, 0, 14, 225, 0, 14, 222, 0, 7, 96, 48, 130, 7, 92, 48, 130, 6, 68,\n        160, 3, 2, 1, 2, 2, 8, 83, 65, 61, 145, 120, 210, 140, 39, 48, 13, 6, 9, 42, 134, 72, 134,\n        247, 13, 1, 1, 11, 5, 0, 48, 73, 49, 11, 48, 9, 6, 3, 85, 4, 6, 19, 2, 85, 83, 49, 19, 48,\n        17, 6, 3, 85, 4, 10, 19, 10, 71, 111, 111, 103, 108, 101, 32, 73, 110, 99, 49, 37, 48, 35,\n        6, 3, 85, 4, 3, 19, 28, 71, 111, 111, 103, 108, 101, 32, 73, 110, 116, 101, 114, 110, 101,\n        116, 32, 65, 117, 116, 104, 111, 114, 105, 116, 121, 32, 71, 50, 48, 30, 23, 13, 49, 55,\n        48, 52, 50, 55, 48, 56, 51, 48, 48, 48, 90, 23, 13, 49, 55, 48, 55, 50, 48, 48, 56, 51, 48,\n        48, 48, 90, 48, 102, 49, 11, 48, 9, 6, 3, 85, 4, 6, 19, 2, 85, 83, 49, 19, 48, 17, 6, 3,\n        85, 4, 8, 12, 10, 67, 97, 108, 105, 102, 111, 114, 110, 105, 97, 49, 22, 48, 20, 6, 3, 85,\n        4, 7, 12, 13, 77, 111, 117, 110, 116, 97, 105, 110, 32, 86, 105, 101, 119, 49, 19, 48, 17,\n        6, 3, 85, 4, 10, 12, 10, 71, 111, 111, 103, 108, 101, 32, 73, 110, 99, 49, 21, 48, 19, 6,\n        3, 85, 4, 3, 12, 12, 42, 46, 103, 111, 111, 103, 108, 101, 46, 99, 111, 109, 48, 89, 48,\n        19, 6, 7, 42, 134, 72, 206, 61, 2, 1, 6, 8, 42, 134, 72, 206, 61, 3, 1, 7, 3, 66, 0, 4,\n        189, 77, 48, 133, 70, 173, 158, 211, 104, 157, 203, 90, 81, 210, 82, 202, 205, 147, 209,\n        252, 62, 33, 220, 191, 25, 45, 49, 119, 71, 86, 34, 248, 128, 116, 164, 199, 172, 91, 179,\n        223, 239, 76, 76, 63, 25, 69, 53, 53, 110, 197, 165, 220, 25, 210, 237, 147, 30, 18, 131,\n        158, 196, 86, 94, 111, 163, 130, 4, 244, 48, 130, 4, 240, 48, 29, 6, 3, 85, 29, 37, 4, 22,\n        48, 20, 6, 8, 43, 6, 1, 5, 5, 7, 3, 1, 6, 8, 43, 6, 1, 5, 5, 7, 3, 2, 48, 11, 6, 3, 85, 29,\n        15, 4, 4, 3, 2, 7, 128, 48, 130, 3, 179, 6, 3, 85, 29, 17, 4, 130, 3, 170, 48, 130, 3, 166,\n        130, 12, 42, 46, 103, 111, 111, 103, 108, 101, 46, 99, 111, 109, 130, 13, 42, 46, 97, 110,\n        100, 114, 111, 105, 100, 46, 99, 111, 109, 130, 22, 42, 46, 97, 112, 112, 101, 110, 103,\n        105, 110, 101, 46, 103, 111, 111, 103, 108, 101, 46, 99, 111, 109, 130, 18, 42, 46, 99,\n        108, 111, 117, 100, 46, 103, 111, 111, 103, 108, 101, 46, 99, 111, 109, 130, 14, 42, 46,\n        103, 99, 112, 46, 103, 118, 116, 50, 46, 99, 111, 109, 130, 22, 42, 46, 103, 111, 111, 103,\n        108, 101, 45, 97, 110, 97, 108, 121, 116, 105, 99, 115, 46, 99, 111, 109, 130, 11, 42, 46,\n        103, 111, 111, 103, 108, 101, 46, 99, 97, 130, 11, 42, 46, 103, 111, 111, 103, 108, 101,\n        46, 99, 108, 130, 14, 42, 46, 103, 111, 111, 103, 108, 101, 46, 99, 111, 46, 105, 110, 130,\n        14, 42, 46, 103, 111, 111, 103, 108, 101, 46, 99, 111, 46, 106, 112, 130, 14, 42, 46, 103,\n        111, 111, 103, 108, 101, 46, 99, 111, 46, 117, 107, 130, 15, 42, 46, 103, 111, 111, 103,\n        108, 101, 46, 99, 111, 109, 46, 97, 114, 130, 15, 42, 46, 103, 111, 111, 103, 108, 101, 46,\n        99, 111, 109, 46, 97, 117, 130, 15, 42, 46, 103, 111, 111, 103, 108, 101, 46, 99, 111, 109,\n        46, 98, 114, 130, 15, 42, 46, 103, 111, 111, 103, 108, 101, 46, 99, 111, 109, 46, 99, 111,\n        130, 15, 42, 46, 103, 111, 111, 103, 108, 101, 46, 99, 111, 109, 46, 109, 120, 130, 15, 42,\n        46, 103, 111, 111, 103, 108, 101, 46, 99, 111, 109, 46, 116, 114, 130, 15, 42, 46, 103,\n        111, 111, 103, 108, 101, 46, 99, 111, 109, 46, 118, 110, 130, 11, 42, 46, 103, 111, 111,\n        103, 108, 101, 46, 100, 101, 130, 11, 42, 46, 103, 111, 111, 103, 108, 101, 46, 101, 115,\n        130, 11, 42, 46, 103, 111, 111, 103, 108, 101, 46, 102, 114, 130, 11, 42, 46, 103, 111,\n        111, 103, 108, 101, 46, 104, 117, 130, 11, 42, 46, 103, 111, 111, 103, 108, 101, 46, 105,\n        116, 130, 11, 42, 46, 103, 111, 111, 103, 108, 101, 46, 110, 108, 130, 11, 42, 46, 103,\n        111, 111, 103, 108, 101, 46, 112, 108, 130, 11, 42, 46, 103, 111, 111, 103, 108, 101, 46,\n        112, 116, 130, 18, 42, 46, 103, 111, 111, 103, 108, 101, 97, 100, 97, 112, 105, 115, 46,\n        99, 111, 109, 130, 15, 42, 46, 103, 111, 111, 103, 108, 101, 97, 112, 105, 115, 46, 99,\n        110, 130, 20, 42, 46, 103, 111, 111, 103, 108, 101, 99, 111, 109, 109, 101, 114, 99, 101,\n        46, 99, 111, 109, 130, 17, 42, 46, 103, 111, 111, 103, 108, 101, 118, 105, 100, 101, 111,\n        46, 99, 111, 109, 130, 12, 42, 46, 103, 115, 116, 97, 116, 105, 99, 46, 99, 110, 130, 13,\n        42, 46, 103, 115, 116, 97, 116, 105, 99, 46, 99, 111, 109, 130, 10, 42, 46, 103, 118, 116,\n        49, 46, 99, 111, 109, 130, 10, 42, 46, 103, 118, 116, 50, 46, 99, 111, 109, 130, 20, 42,\n        46, 109, 101, 116, 114, 105, 99, 46, 103, 115, 116, 97, 116, 105, 99, 46, 99, 111, 109,\n        130, 12, 42, 46, 117, 114, 99, 104, 105, 110, 46, 99, 111, 109, 130, 16, 42, 46, 117, 114,\n        108, 46, 103, 111, 111, 103, 108, 101, 46, 99, 111, 109, 130, 22, 42, 46, 121, 111, 117,\n        116, 117, 98, 101, 45, 110, 111, 99, 111, 111, 107, 105, 101, 46, 99, 111, 109, 130, 13,\n        42, 46, 121, 111, 117, 116, 117, 98, 101, 46, 99, 111, 109, 130, 22, 42, 46, 121, 111, 117,\n        116, 117, 98, 101, 101, 100, 117, 99, 97, 116, 105, 111, 110, 46, 99, 111, 109, 130, 11,\n        42, 46, 121, 116, 105, 109, 103, 46, 99, 111, 109, 130, 26, 97, 110, 100, 114, 111, 105,\n        100, 46, 99, 108, 105, 101, 110, 116, 115, 46, 103, 111, 111, 103, 108, 101, 46, 99, 111,\n        109, 130, 11, 97, 110, 100, 114, 111, 105, 100, 46, 99, 111, 109, 130, 27, 100, 101, 118,\n        101, 108, 111, 112, 101, 114, 46, 97, 110, 100, 114, 111, 105, 100, 46, 103, 111, 111, 103,\n        108, 101, 46, 99, 110, 130, 28, 100, 101, 118, 101, 108, 111, 112, 101, 114, 115, 46, 97,\n        110, 100, 114, 111, 105, 100, 46, 103, 111, 111, 103, 108, 101, 46, 99, 110, 130, 4, 103,\n        46, 99, 111, 130, 6, 103, 111, 111, 46, 103, 108, 130, 20, 103, 111, 111, 103, 108, 101,\n        45, 97, 110, 97, 108, 121, 116, 105, 99, 115, 46, 99, 111, 109, 130, 10, 103, 111, 111,\n        103, 108, 101, 46, 99, 111, 109, 130, 18, 103, 111, 111, 103, 108, 101, 99, 111, 109, 109,\n        101, 114, 99, 101, 46, 99, 111, 109, 130, 24, 115, 111, 117, 114, 99, 101, 46, 97, 110,\n        100, 114, 111, 105, 100, 46, 103, 111, 111, 103, 108, 101, 46, 99, 110, 130, 10, 117, 114,\n        99, 104, 105, 110, 46, 99, 111, 109, 130, 10, 119, 119, 119, 46, 103, 111, 111, 46, 103,\n        108, 130, 8, 121, 111, 117, 116, 117, 46, 98, 101, 130, 11, 121, 111, 117, 116, 117, 98,\n        101, 46, 99, 111, 109, 130, 20, 121, 111, 117, 116, 117, 98, 101, 101, 100, 117, 99, 97,\n        116, 105, 111, 110, 46, 99, 111, 109, 48, 104, 6, 8, 43, 6, 1, 5, 5, 7, 1, 1, 4, 92, 48,\n        90, 48, 43, 6, 8, 43, 6, 1, 5, 5, 7, 48, 2, 134, 31, 104, 116, 116, 112, 58, 47, 47, 112,\n        107, 105, 46, 103, 111, 111, 103, 108, 101, 46, 99, 111, 109, 47, 71, 73, 65, 71, 50, 46,\n        99, 114, 116, 48, 43, 6, 8, 43, 6, 1, 5, 5, 7, 48, 1, 134, 31, 104, 116, 116, 112, 58, 47,\n        47, 99, 108, 105, 101, 110, 116, 115, 49, 46, 103, 111, 111, 103, 108, 101, 46, 99, 111,\n        109, 47, 111, 99, 115, 112, 48, 29, 6, 3, 85, 29, 14, 4, 22, 4, 20, 253, 90, 18, 128, 11,\n        205, 4, 95, 242, 77, 89, 40, 3, 112, 35, 87, 25, 64, 248, 55, 48, 12, 6, 3, 85, 29, 19, 1,\n        1, 255, 4, 2, 48, 0, 48, 31, 6, 3, 85, 29, 35, 4, 24, 48, 22, 128, 20, 74, 221, 6, 22, 27,\n        188, 246, 104, 181, 118, 245, 129, 182, 187, 98, 26, 186, 90, 129, 47, 48, 33, 6, 3, 85,\n        29, 32, 4, 26, 48, 24, 48, 12, 6, 10, 43, 6, 1, 4, 1, 214, 121, 2, 5, 1, 48, 8, 6, 6, 103,\n        129, 12, 1, 2, 2, 48, 48, 6, 3, 85, 29, 31, 4, 41, 48, 39, 48, 37, 160, 35, 160, 33, 134,\n        31, 104, 116, 116, 112, 58, 47, 47, 112, 107, 105, 46, 103, 111, 111, 103, 108, 101, 46,\n        99, 111, 109, 47, 71, 73, 65, 71, 50, 46, 99, 114, 108, 48, 13, 6, 9, 42, 134, 72, 134,\n        247, 13, 1, 1, 11, 5, 0, 3, 130, 1, 1, 0, 33, 200, 169, 105, 206, 2, 155, 120, 189, 192,\n        51, 58, 117, 81, 58, 119, 84, 168, 232, 112, 67, 74, 178, 108, 140, 239, 140, 58, 241, 118,\n        5, 87, 151, 75, 62, 228, 100, 79, 253, 168, 208, 39, 111, 248, 15, 136, 208, 240, 106, 77,\n        117, 121, 178, 58, 88, 245, 179, 162, 251, 10, 71, 202, 197, 70, 144, 133, 162, 197, 128,\n        57, 111, 180, 163, 6, 63, 152, 48, 225, 133, 207, 156, 142, 147, 155, 164, 234, 150, 95,\n        194, 204, 36, 174, 11, 81, 8, 107, 127, 181, 132, 216, 230, 232, 29, 152, 1, 46, 152, 162,\n        185, 105, 229, 136, 245, 133, 63, 134, 92, 242, 217, 7, 26, 64, 132, 248, 126, 187, 114,\n        56, 192, 240, 70, 213, 140, 90, 19, 23, 33, 155, 220, 79, 93, 249, 252, 184, 190, 60, 45,\n        123, 246, 182, 204, 232, 45, 111, 214, 187, 247, 195, 215, 60, 88, 120, 12, 241, 0, 54,\n        189, 184, 200, 138, 56, 58, 15, 211, 62, 239, 220, 24, 224, 142, 159, 199, 102, 126, 9,\n        199, 212, 60, 163, 123, 195, 235, 239, 210, 8, 24, 172, 63, 119, 216, 233, 1, 8, 101, 21,\n        150, 10, 75, 36, 243, 45, 241, 243, 191, 254, 221, 133, 11, 136, 82, 64, 50, 222, 221, 48,\n        184, 48, 183, 155, 228, 204, 32, 177, 209, 139, 86, 15, 190, 118, 233, 91, 146, 124, 132,\n        218, 50, 73, 110, 152, 63, 196, 8, 66, 19, 171, 62, 0, 3, 244, 48, 130, 3, 240, 48, 130, 2,\n        216, 160, 3, 2, 1, 2, 2, 3, 2, 58, 146, 48, 13, 6, 9, 42, 134, 72, 134, 247, 13, 1, 1, 11,\n        5, 0, 48, 66, 49, 11, 48, 9, 6, 3, 85, 4, 6, 19, 2, 85, 83, 49, 22, 48, 20, 6, 3, 85, 4,\n        10, 19, 13, 71, 101, 111, 84, 114, 117, 115, 116, 32, 73, 110, 99, 46, 49, 27, 48, 25, 6,\n        3, 85, 4, 3, 19, 18, 71, 101, 111, 84, 114, 117, 115, 116, 32, 71, 108, 111, 98, 97, 108,\n        32, 67, 65, 48, 30, 23, 13, 49, 53, 48, 52, 48, 49, 48, 48, 48, 48, 48, 48, 90, 23, 13, 49,\n        55, 49, 50, 51, 49, 50, 51, 53, 57, 53, 57, 90, 48, 73, 49, 11, 48, 9, 6, 3, 85, 4, 6, 19,\n        2, 85, 83, 49, 19, 48, 17, 6, 3, 85, 4, 10, 19, 10, 71, 111, 111, 103, 108, 101, 32, 73,\n        110, 99, 49, 37, 48, 35, 6, 3, 85, 4, 3, 19, 28, 71, 111, 111, 103, 108, 101, 32, 73, 110,\n        116, 101, 114, 110, 101, 116, 32, 65, 117, 116, 104, 111, 114, 105, 116, 121, 32, 71, 50,\n        48, 130, 1, 34, 48, 13, 6, 9, 42, 134, 72, 134, 247, 13, 1, 1, 1, 5, 0, 3, 130, 1, 15, 0,\n        48, 130, 1, 10, 2, 130, 1, 1, 0, 156, 42, 4, 119, 92, 216, 80, 145, 58, 6, 163, 130, 224,\n        216, 80, 72, 188, 137, 63, 241, 25, 112, 26, 136, 70, 126, 224, 143, 197, 241, 137, 206,\n        33, 238, 90, 254, 97, 13, 183, 50, 68, 137, 160, 116, 11, 83, 79, 85, 164, 206, 130, 98,\n        149, 238, 235, 89, 95, 198, 225, 5, 128, 18, 196, 94, 148, 63, 188, 91, 72, 56, 244, 83,\n        247, 36, 230, 251, 145, 233, 21, 196, 207, 244, 83, 13, 244, 74, 252, 159, 84, 222, 125,\n        190, 160, 107, 111, 135, 192, 208, 80, 31, 40, 48, 3, 64, 218, 8, 115, 81, 108, 127, 255,\n        58, 60, 167, 55, 6, 142, 189, 75, 17, 4, 235, 125, 36, 222, 230, 249, 252, 49, 113, 251,\n        148, 213, 96, 243, 46, 74, 175, 66, 210, 203, 234, 196, 106, 26, 178, 204, 83, 221, 21, 75,\n        139, 31, 200, 25, 97, 31, 205, 157, 168, 62, 99, 43, 132, 53, 105, 101, 132, 200, 25, 197,\n        70, 34, 248, 83, 149, 190, 227, 128, 74, 16, 198, 42, 236, 186, 151, 32, 17, 199, 57, 153,\n        16, 4, 160, 240, 97, 122, 149, 37, 140, 78, 82, 117, 226, 182, 237, 8, 202, 20, 252, 206,\n        34, 106, 179, 78, 207, 70, 3, 151, 151, 3, 126, 192, 177, 222, 123, 175, 69, 51, 207, 186,\n        62, 113, 183, 222, 244, 37, 37, 194, 13, 53, 137, 157, 157, 251, 14, 17, 121, 137, 30, 55,\n        197, 175, 142, 114, 105, 2, 3, 1, 0, 1, 163, 129, 231, 48, 129, 228, 48, 31, 6, 3, 85, 29,\n        35, 4, 24, 48, 22, 128, 20, 192, 122, 152, 104, 141, 137, 251, 171, 5, 100, 12, 17, 125,\n        170, 125, 101, 184, 202, 204, 78, 48, 29, 6, 3, 85, 29, 14, 4, 22, 4, 20, 74, 221, 6, 22,\n        27, 188, 246, 104, 181, 118, 245, 129, 182, 187, 98, 26, 186, 90, 129, 47, 48, 14, 6, 3,\n        85, 29, 15, 1, 1, 255, 4, 4, 3, 2, 1, 6, 48, 46, 6, 8, 43, 6, 1, 5, 5, 7, 1, 1, 4, 34, 48,\n        32, 48, 30, 6, 8, 43, 6, 1, 5, 5, 7, 48, 1, 134, 18, 104, 116, 116, 112, 58, 47, 47, 103,\n        46, 115, 121, 109, 99, 100, 46, 99, 111, 109, 48, 18, 6, 3, 85, 29, 19, 1, 1, 255, 4, 8,\n        48, 6, 1, 1, 255, 2, 1, 0, 48, 53, 6, 3, 85, 29, 31, 4, 46, 48, 44, 48, 42, 160, 40, 160,\n        38, 134, 36, 104, 116, 116, 112, 58, 47, 47, 103, 46, 115, 121, 109, 99, 98, 46, 99, 111,\n        109, 47, 99, 114, 108, 115, 47, 103, 116, 103, 108, 111, 98, 97, 108, 46, 99, 114, 108, 48,\n        23, 6, 3, 85, 29, 32, 4, 16, 48, 14, 48, 12, 6, 10, 43, 6, 1, 4, 1, 214, 121, 2, 5, 1, 48,\n        13, 6, 9, 42, 134, 72, 134, 247, 13, 1, 1, 11, 5, 0, 3, 130, 1, 1, 0, 8, 78, 4, 167, 128,\n        127, 16, 22, 67, 94, 2, 173, 215, 66, 128, 244, 176, 142, 210, 174, 179, 235, 17, 125, 144,\n        132, 24, 125, 231, 144, 21, 251, 73, 127, 168, 153, 5, 145, 187, 122, 201, 214, 60, 55, 24,\n        9, 154, 182, 199, 146, 32, 7, 53, 51, 9, 228, 40, 99, 114, 13, 180, 224, 50, 156, 135, 152,\n        196, 27, 118, 137, 103, 193, 80, 88, 176, 19, 170, 19, 26, 27, 50, 165, 190, 234, 17, 149,\n        76, 72, 99, 73, 233, 153, 93, 32, 55, 204, 254, 42, 105, 81, 22, 149, 75, 169, 222, 73,\n        130, 192, 16, 112, 244, 44, 243, 236, 188, 36, 36, 208, 78, 172, 165, 217, 94, 30, 109,\n        146, 193, 167, 172, 72, 53, 129, 249, 229, 228, 156, 101, 105, 205, 135, 164, 65, 80, 63,\n        46, 87, 165, 145, 81, 18, 88, 14, 140, 9, 161, 172, 122, 164, 18, 165, 39, 243, 154, 16,\n        151, 125, 85, 3, 6, 247, 102, 88, 95, 95, 100, 225, 171, 93, 109, 165, 57, 72, 117, 152,\n        76, 41, 90, 58, 141, 211, 43, 202, 156, 85, 4, 191, 244, 230, 20, 213, 128, 172, 38, 237,\n        23, 137, 166, 147, 108, 92, 164, 204, 184, 240, 102, 142, 100, 227, 125, 154, 226, 0, 179,\n        73, 199, 228, 10, 170, 221, 91, 131, 199, 112, 144, 70, 78, 190, 208, 219, 89, 150, 108,\n        46, 245, 22, 54, 222, 113, 204, 1, 194, 18, 193, 33, 198, 22, 0, 3, 129, 48, 130, 3, 125,\n        48, 130, 2, 230, 160, 3, 2, 1, 2, 2, 3, 18, 187, 230, 48, 13, 6, 9, 42, 134, 72, 134, 247,\n        13, 1, 1, 5, 5, 0, 48, 78, 49, 11, 48, 9, 6, 3, 85, 4, 6, 19, 2, 85, 83, 49, 16, 48, 14, 6,\n        3, 85, 4, 10, 19, 7, 69, 113, 117, 105, 102, 97, 120, 49, 45, 48, 43, 6, 3, 85, 4, 11, 19,\n        36, 69, 113, 117, 105, 102, 97, 120, 32, 83, 101, 99, 117, 114, 101, 32, 67, 101, 114, 116,\n        105, 102, 105, 99, 97, 116, 101, 32, 65, 117, 116, 104, 111, 114, 105, 116, 121, 48, 30,\n        23, 13, 48, 50, 48, 53, 50, 49, 48, 52, 48, 48, 48, 48, 90, 23, 13, 49, 56, 48, 56, 50, 49,\n        48, 52, 48, 48, 48, 48, 90, 48, 66, 49, 11, 48, 9, 6, 3, 85, 4, 6, 19, 2, 85, 83, 49, 22,\n        48, 20, 6, 3, 85, 4, 10, 19, 13, 71, 101, 111, 84, 114, 117, 115, 116, 32, 73, 110, 99, 46,\n        49, 27, 48, 25, 6, 3, 85, 4, 3, 19, 18, 71, 101, 111, 84, 114, 117, 115, 116, 32, 71, 108,\n        111, 98, 97, 108, 32, 67, 65, 48, 130, 1, 34, 48, 13, 6, 9, 42, 134, 72, 134, 247, 13, 1,\n        1, 1, 5, 0, 3, 130, 1, 15, 0, 48, 130, 1, 10, 2, 130, 1, 1, 0, 218, 204, 24, 99, 48, 253,\n        244, 23, 35, 26, 86, 126, 91, 223, 60, 108, 56, 228, 113, 183, 120, 145, 212, 188, 161,\n        216, 76, 248, 168, 67, 182, 3, 233, 77, 33, 7, 8, 136, 218, 88, 47, 102, 57, 41, 189, 5,\n        120, 139, 157, 56, 232, 5, 183, 106, 126, 113, 164, 230, 196, 96, 166, 176, 239, 128, 228,\n        137, 40, 15, 158, 37, 214, 237, 131, 243, 173, 166, 145, 199, 152, 201, 66, 24, 53, 20,\n        157, 173, 152, 70, 146, 46, 79, 202, 241, 135, 67, 193, 22, 149, 87, 45, 80, 239, 137, 45,\n        128, 122, 87, 173, 242, 238, 95, 107, 210, 0, 141, 185, 20, 248, 20, 21, 53, 217, 192, 70,\n        163, 123, 114, 200, 145, 191, 201, 85, 43, 205, 208, 151, 62, 156, 38, 100, 204, 223, 206,\n        131, 25, 113, 202, 78, 230, 212, 213, 123, 169, 25, 205, 85, 222, 200, 236, 210, 94, 56,\n        83, 229, 92, 79, 140, 45, 254, 80, 35, 54, 252, 102, 230, 203, 142, 164, 57, 25, 0, 183,\n        149, 2, 57, 145, 11, 14, 254, 56, 46, 209, 29, 5, 154, 246, 77, 62, 111, 15, 7, 29, 175,\n        44, 30, 143, 96, 57, 226, 250, 54, 83, 19, 57, 212, 94, 38, 43, 219, 61, 168, 20, 189, 50,\n        235, 24, 3, 40, 82, 4, 113, 229, 171, 51, 61, 225, 56, 187, 7, 54, 132, 98, 156, 121, 234,\n        22, 48, 244, 95, 192, 43, 232, 113, 107, 228, 249, 2, 3, 1, 0, 1, 163, 129, 240, 48, 129,\n        237, 48, 31, 6, 3, 85, 29, 35, 4, 24, 48, 22, 128, 20, 72, 230, 104, 249, 43, 210, 178,\n        149, 215, 71, 216, 35, 32, 16, 79, 51, 152, 144, 159, 212, 48, 29, 6, 3, 85, 29, 14, 4, 22,\n        4, 20, 192, 122, 152, 104, 141, 137, 251, 171, 5, 100, 12, 17, 125, 170, 125, 101, 184,\n        202, 204, 78, 48, 15, 6, 3, 85, 29, 19, 1, 1, 255, 4, 5, 48, 3, 1, 1, 255, 48, 14, 6, 3,\n        85, 29, 15, 1, 1, 255, 4, 4, 3, 2, 1, 6, 48, 58, 6, 3, 85, 29, 31, 4, 51, 48, 49, 48, 47,\n        160, 45, 160, 43, 134, 41, 104, 116, 116, 112, 58, 47, 47, 99, 114, 108, 46, 103, 101, 111,\n        116, 114, 117, 115, 116, 46, 99, 111, 109, 47, 99, 114, 108, 115, 47, 115, 101, 99, 117,\n        114, 101, 99, 97, 46, 99, 114, 108, 48, 78, 6, 3, 85, 29, 32, 4, 71, 48, 69, 48, 67, 6, 4,\n        85, 29, 32, 0, 48, 59, 48, 57, 6, 8, 43, 6, 1, 5, 5, 7, 2, 1, 22, 45, 104, 116, 116, 112,\n        115, 58, 47, 47, 119, 119, 119, 46, 103, 101, 111, 116, 114, 117, 115, 116, 46, 99, 111,\n        109, 47, 114, 101, 115, 111, 117, 114, 99, 101, 115, 47, 114, 101, 112, 111, 115, 105, 116,\n        111, 114, 121, 48, 13, 6, 9, 42, 134, 72, 134, 247, 13, 1, 1, 5, 5, 0, 3, 129, 129, 0, 118,\n        225, 18, 110, 78, 75, 22, 18, 134, 48, 6, 178, 129, 8, 207, 240, 8, 199, 199, 113, 126,\n        102, 238, 194, 237, 212, 59, 31, 255, 240, 240, 200, 78, 214, 67, 56, 176, 185, 48, 125,\n        24, 208, 85, 131, 162, 106, 203, 54, 17, 156, 232, 72, 102, 163, 109, 127, 184, 19, 212,\n        71, 254, 139, 90, 92, 115, 252, 174, 217, 27, 50, 25, 56, 171, 151, 52, 20, 170, 150, 210,\n        235, 163, 28, 20, 8, 73, 182, 187, 229, 145, 239, 131, 54, 235, 29, 86, 111, 202, 218, 188,\n        115, 99, 144, 228, 127, 123, 62, 34, 203, 61, 7, 237, 95, 56, 116, 156, 227, 3, 80, 78,\n        161, 175, 152, 238, 97, 242, 132, 63, 18, 22, 3, 3, 0, 114, 12, 0, 0, 110, 3, 0, 29, 32,\n        75, 217, 44, 1, 117, 219, 122, 48, 71, 161, 89, 28, 185, 211, 203, 104, 197, 72, 172, 58,\n        227, 76, 100, 140, 23, 97, 211, 83, 70, 10, 176, 5, 4, 3, 0, 70, 48, 68, 2, 32, 118, 77,\n        25, 193, 184, 245, 209, 235, 233, 73, 206, 164, 213, 214, 217, 58, 189, 77, 153, 98, 68,\n        51, 73, 61, 86, 46, 224, 166, 129, 143, 233, 99, 2, 32, 124, 140, 108, 231, 222, 178, 70,\n        254, 130, 96, 249, 202, 22, 73, 30, 105, 180, 48, 177, 254, 92, 206, 16, 218, 0, 232, 189,\n        151, 157, 245, 39, 28, 22, 3, 3, 0, 4, 14, 0, 0, 0, 22, 3, 3, 0, 190, 4, 0, 0, 186, 0, 1,\n        137, 192, 0, 180, 20, 223, 122, 124, 254, 176, 24, 87, 129, 188, 25, 248, 233, 202, 114,\n        232, 117, 171, 162, 35, 223, 70, 217, 201, 60, 235, 114, 254, 181, 102, 199, 213, 157, 219,\n        90, 42, 235, 135, 84, 255, 194, 219, 249, 247, 214, 54, 54, 229, 79, 220, 3, 190, 161, 210,\n        47, 16, 37, 64, 211, 213, 90, 152, 193, 224, 185, 50, 214, 247, 202, 43, 114, 244, 225,\n        125, 149, 103, 150, 160, 133, 107, 60, 123, 80, 172, 188, 210, 189, 252, 195, 26, 25, 7,\n        251, 196, 130, 237, 57, 195, 62, 96, 219, 233, 108, 223, 21, 183, 44, 247, 233, 117, 14,\n        205, 189, 245, 126, 108, 249, 188, 52, 226, 115, 236, 151, 168, 171, 226, 99, 204, 123, 77,\n        237, 165, 38, 196, 158, 196, 163, 39, 31, 219, 195, 16, 152, 4, 135, 131, 197, 26, 192,\n        175, 73, 208, 102, 224, 50, 80, 230, 29, 5, 207, 178, 98, 39, 107, 230, 1, 197, 170, 5, 64,\n        181, 56, 55, 178, 122, 4, 178, 114, 110, 79, 20, 3, 3, 0, 1, 1, 22, 3, 3, 0, 32, 183, 30,\n        234, 49, 21, 153, 244, 50, 141, 222, 123, 52, 1, 109, 64, 238, 29, 191, 187, 51, 222, 29,\n        236, 211, 51, 142, 115, 248, 228, 41, 223, 232, 23, 3, 3, 5, 145, 183, 198, 127, 233, 133,\n        132, 204, 255, 193, 240, 165, 168, 179, 134, 137, 28, 111, 57, 20, 103, 109, 40, 93, 116,\n        27, 183, 6, 173, 163, 53, 13, 72, 122, 43, 63, 229, 34, 239, 206, 238, 224, 219, 154, 89,\n        232, 199, 231, 76, 220, 48, 166, 150, 198, 187, 179, 212, 170, 99, 14, 86, 71, 119, 180,\n        116, 170, 223, 163, 40, 114, 100, 115, 113, 43, 44, 114, 235, 76, 52, 47, 163, 154, 106,\n        75, 206, 13, 169, 35, 146, 186, 235, 26, 215, 226, 25, 96, 82, 134, 106, 165, 127, 165,\n        151, 155, 237, 16, 83, 188, 25, 119, 139, 21, 127, 119, 176, 100, 73, 39, 111, 86, 232, 52,\n        9, 66, 93, 115, 223, 106, 49, 206, 238, 160, 132, 136, 64, 102, 43, 74, 71, 121, 174, 29,\n        24, 97, 80, 95, 52, 218, 59, 92, 197, 127, 255, 57, 181, 131, 22, 44, 103, 181, 255, 147,\n        102, 90, 15, 183, 116, 87, 9, 234, 149, 220, 97, 185, 51, 15, 48, 192, 77, 192, 92, 6, 25,\n        231, 98, 183, 247, 191, 91, 35, 232, 21, 25, 172, 40, 237, 60, 161, 137, 231, 74, 255, 83,\n        254, 36, 142, 212, 17, 244, 228, 22, 175, 11, 18, 28, 10, 13, 59, 153, 59, 167, 135, 132,\n        139, 137, 113, 140, 127, 144, 118, 200, 162, 233, 78, 190, 163, 76, 226, 254, 141, 23, 103,\n        104, 130, 9, 249, 38, 224, 186, 81, 202, 138, 93, 91, 204, 157, 215, 80, 29, 100, 172, 90,\n        238, 198, 240, 210, 187, 19, 62, 115, 118, 162, 168, 216, 71, 112, 46, 23, 133, 22, 189,\n        210, 149, 133, 48, 200, 136, 154, 38, 232, 39, 155, 118, 193, 34, 213, 153, 254, 27, 118,\n        184, 252, 128, 4, 175, 4, 84, 119, 78, 252, 154, 99, 252, 142, 108, 170, 171, 108, 4, 181,\n        42, 121, 214, 195, 219, 86, 242, 192, 126, 196, 223, 239, 42, 199, 225, 212, 234, 10, 122,\n        3, 193, 28, 84, 12, 112, 161, 253, 10, 169, 105, 164, 63, 97, 189, 164, 233, 134, 45, 115,\n        68, 28, 24, 245, 177, 156, 59, 119, 158, 169, 190, 92, 55, 25, 81, 131, 16, 97, 164, 233,\n        188, 6, 13, 197, 35, 180, 215, 5, 222, 218, 153, 211, 204, 140, 43, 16, 66, 70, 37, 188,\n        245, 142, 91, 181, 176, 50, 210, 247, 126, 210, 254, 254, 56, 58, 202, 187, 189, 198, 247,\n        74, 189, 80, 143, 231, 208, 22, 188, 255, 184, 79, 239, 101, 153, 38, 185, 223, 119, 141,\n        143, 241, 93, 236, 72, 153, 185, 119, 215, 135, 123, 202, 66, 204, 12, 243, 246, 48, 43,\n        154, 83, 0, 100, 146, 157, 230, 233, 147, 209, 45, 106, 170, 231, 113, 162, 217, 136, 142,\n        254, 179, 55, 216, 202, 171, 112, 33, 169, 211, 27, 69, 131, 131, 186, 210, 79, 186, 244,\n        223, 25, 153, 0, 204, 17, 150, 183, 82, 33, 40, 165, 178, 214, 212, 185, 215, 118, 116,\n        192, 121, 23, 111, 14, 148, 118, 17, 195, 123, 98, 96, 227, 160, 203, 98, 44, 10, 17, 73,\n        153, 8, 104, 225, 126, 28, 62, 50, 167, 146, 93, 246, 148, 222, 56, 235, 205, 189, 222,\n        186, 74, 242, 195, 91, 54, 135, 245, 245, 139, 235, 233, 43, 125, 89, 87, 250, 179, 228,\n        228, 166, 141, 238, 53, 245, 80, 235, 32, 142, 81, 180, 51, 107, 117, 28, 197, 62, 15, 107,\n        40, 167, 63, 119, 215, 239, 4, 53, 26, 254, 55, 153, 8, 89, 253, 156, 98, 25, 51, 54, 205,\n        255, 183, 37, 76, 39, 153, 92, 240, 79, 178, 157, 153, 205, 242, 91, 133, 204, 26, 107, 7,\n        105, 59, 186, 37, 217, 61, 171, 159, 165, 68, 171, 10, 91, 29, 236, 136, 188, 153, 202, 63,\n        99, 47, 38, 246, 92, 156, 111, 100, 241, 142, 19, 98, 204, 171, 188, 6, 5, 117, 91, 47, 16,\n        227, 100, 43, 77, 56, 70, 231, 10, 161, 170, 195, 142, 34, 154, 173, 32, 78, 93, 39, 56,\n        185, 38, 249, 59, 219, 48, 15, 106, 245, 187, 64, 82, 47, 144, 134, 130, 154, 54, 87, 70,\n        166, 72, 234, 147, 121, 227, 24, 77, 204, 246, 109, 49, 57, 104, 114, 128, 35, 40, 34, 113,\n        75, 116, 91, 6, 43, 28, 123, 123, 43, 180, 82, 237, 1, 250, 108, 126, 244, 40, 186, 108,\n        59, 59, 1, 232, 50, 14, 248, 26, 158, 112, 110, 245, 133, 40, 44, 38, 130, 187, 34, 190,\n        179, 134, 98, 54, 71, 52, 151, 64, 70, 253, 247, 48, 201, 189, 117, 28, 18, 6, 111, 239,\n        64, 248, 250, 231, 85, 20, 133, 210, 238, 207, 121, 136, 37, 127, 16, 135, 191, 150, 42,\n        174, 107, 239, 142, 40, 108, 34, 66, 36, 233, 104, 52, 137, 12, 49, 17, 219, 213, 165, 132,\n        160, 153, 6, 175, 133, 172, 78, 183, 236, 228, 81, 164, 11, 152, 93, 194, 212, 117, 179,\n        84, 175, 251, 73, 172, 77, 252, 207, 166, 218, 20, 168, 183, 0, 205, 40, 203, 120, 130, 87,\n        123, 61, 140, 237, 224, 132, 178, 103, 208, 78, 140, 40, 13, 123, 9, 47, 68, 171, 162, 116,\n        160, 87, 84, 2, 14, 84, 180, 242, 73, 38, 223, 191, 114, 45, 232, 208, 252, 180, 95, 17,\n        205, 199, 106, 169, 123, 181, 212, 225, 41, 91, 38, 81, 23, 176, 105, 40, 194, 246, 174,\n        78, 30, 205, 204, 147, 9, 172, 98, 65, 188, 225, 83, 245, 167, 203, 99, 201, 207, 126, 192,\n        173, 250, 25, 28, 101, 164, 88, 191, 186, 203, 199, 243, 35, 13, 187, 204, 61, 180, 2, 24,\n        198, 83, 6, 147, 212, 139, 186, 164, 180, 193, 193, 241, 96, 217, 160, 58, 117, 133, 132,\n        97, 135, 174, 24, 49, 123, 161, 202, 191, 10, 20, 238, 223, 213, 107, 139, 69, 58, 239, 56,\n        147, 15, 71, 130, 244, 112, 179, 219, 45, 136, 223, 145, 5, 100, 70, 194, 104, 130, 39, 47,\n        144, 40, 179, 162, 166, 177, 238, 10, 122, 181, 88, 128, 242, 228, 211, 145, 239, 231, 38,\n        58, 56, 75, 175, 203, 162, 198, 220, 58, 152, 213, 24, 223, 20, 41, 227, 102, 59, 122, 94,\n        95, 197, 33, 196, 28, 96, 184, 228, 76, 194, 197, 105, 5, 26, 90, 174, 79, 27, 218, 172,\n        92, 44, 155, 33, 236, 30, 190, 13, 110, 13, 60, 176, 93, 14, 91, 214, 255, 254, 88, 103,\n        178, 198, 121, 186, 64, 227, 162, 168, 215, 191, 237, 199, 111, 169, 20, 159, 6, 182, 229,\n        25, 157, 45, 54, 158, 121, 226, 199, 147, 48, 82, 174, 41, 55, 185, 164, 65, 101, 174, 22,\n        69, 163, 141, 174, 103, 99, 196, 91, 121, 197, 219, 197, 90, 242, 150, 42, 209, 60, 97, 55,\n        242, 58, 126, 231, 22, 127, 91, 166, 44, 228, 231, 29, 236, 61, 35, 12, 152, 48, 104, 183,\n        24, 213, 102, 189, 214, 101, 136, 11, 226, 31, 83, 243, 242, 206, 101, 180, 179, 14, 35,\n        13, 104, 249, 151, 118, 148, 180, 205, 245, 29, 35, 253, 113, 62, 102, 109, 228, 28, 120,\n        68, 76, 243, 62, 250, 159, 100, 137, 94, 216, 30, 90, 10, 230, 54, 242, 196, 232, 13, 12,\n        177, 50, 32, 91, 126, 103, 88, 54, 57, 13, 172, 80, 167, 15, 51, 109, 159, 237, 164, 251,\n        229, 16, 134, 132, 56, 93, 60, 51, 230, 25, 105, 230, 1, 54, 204, 248, 53, 80, 16, 54, 168,\n        4, 173, 246, 198, 106, 252, 153, 5, 227, 23, 169, 9, 2, 162, 237, 46, 114, 238, 203, 103,\n        62, 66, 43, 119, 56, 209, 97, 60, 189, 54, 25, 228, 137, 19, 198, 68, 137, 40, 197, 159,\n        152, 220, 149, 128, 201, 201, 138, 46, 70, 97, 140, 146, 244, 106, 103, 120, 211, 231, 150,\n        37, 41, 30, 87, 208, 191, 66, 142, 55, 222, 11, 102, 197, 30, 213, 6, 144, 18, 123, 235,\n        145, 73, 249, 60, 240, 251, 161, 240, 147, 201, 165, 206, 167, 115, 79, 225, 189, 27, 95,\n        168, 239, 189, 46, 13, 198, 47, 228, 179, 156, 53, 40, 209, 116, 191, 177, 143, 60, 157,\n        172, 193, 123, 252, 146, 28, 6, 20, 225, 237, 80, 166, 97, 59, 162, 189, 172, 91, 121, 248,\n        134, 72, 36, 23, 3, 3, 1, 134, 184, 233, 245, 63, 202, 189, 95, 218, 14, 44, 104, 150, 88,\n        57, 147, 139, 108, 12, 24, 244, 48, 244, 12, 105, 140, 216, 220, 203, 61, 245, 166, 98,\n        248, 29, 21, 205, 163, 217, 131, 222, 142, 243, 231, 56, 251, 8, 91, 104, 142, 192, 167,\n        237, 78, 125, 38, 215, 152, 134, 128, 126, 89, 102, 207, 188, 230, 246, 14, 24, 126, 138,\n        114, 180, 118, 107, 248, 123, 189, 108, 188, 51, 72, 43, 11, 120, 144, 125, 151, 128, 70,\n        175, 208, 157, 21, 23, 181, 116, 24, 151, 213, 169, 71, 137, 211, 133, 66, 217, 94, 57,\n        172, 53, 200, 76, 212, 201, 64, 165, 40, 211, 58, 41, 133, 5, 180, 151, 59, 17, 112, 75,\n        19, 186, 172, 50, 36, 184, 98, 225, 103, 3, 192, 196, 234, 34, 58, 122, 13, 145, 186, 175,\n        6, 194, 14, 113, 209, 83, 212, 155, 61, 162, 156, 108, 103, 139, 224, 128, 191, 58, 168,\n        228, 223, 63, 16, 216, 161, 129, 103, 100, 126, 196, 98, 10, 77, 40, 217, 195, 19, 205,\n        202, 220, 96, 17, 175, 95, 25, 22, 158, 125, 215, 107, 136, 1, 124, 91, 213, 38, 226, 229,\n        171, 102, 229, 43, 21, 96, 18, 64, 250, 121, 28, 196, 204, 232, 170, 196, 217, 241, 72, 52,\n        204, 213, 15, 38, 22, 211, 23, 30, 200, 130, 144, 162, 241, 75, 131, 109, 216, 53, 176,\n        129, 181, 234, 255, 221, 66, 0, 103, 20, 218, 25, 242, 178, 29, 66, 74, 132, 102, 65, 47,\n        113, 156, 220, 240, 218, 205, 242, 139, 64, 190, 177, 79, 163, 13, 245, 95, 144, 138, 214,\n        18, 105, 157, 143, 227, 178, 156, 38, 215, 106, 254, 245, 153, 14, 188, 52, 101, 188, 238,\n        86, 47, 120, 37, 100, 136, 93, 124, 217, 73, 77, 154, 46, 244, 106, 178, 10, 189, 146, 171,\n        135, 220, 144, 201, 229, 61, 61, 135, 192, 76, 64, 222, 138, 66, 197, 214, 166, 41, 39,\n        147, 245, 35, 15, 191, 134, 204, 64, 72, 168, 114, 232, 179, 225, 117, 94, 47, 184, 219,\n        143, 107, 210, 56, 223, 248, 86, 107, 154, 214, 43, 23, 71, 130, 241, 25, 50, 204, 144,\n        244, 19, 51, 33, 180, 0, 17, 184, 61, 147,\n    ];\n    let root_store = RootCertStore::empty();\n    let config = Arc::new(\n        ClientConfig::builder()\n            .with_safe_defaults()\n            .with_root_certificates(root_store)\n            .with_no_client_auth(),\n    );\n    let example_com = \"example.com\".try_into().unwrap();\n    let mut client = ClientConnection::new(config, example_com).unwrap();\n    let _ = client.read_tls(&mut io::Cursor::new(data));\n    let _ = client.process_new_packets();\n}"}
{"test_id": "seanmonstar-httparse/seanmonstar-httparse-638848e/tests-gen/parse_request.inputs.rs::test_7", "code": "pub fn parse(&mut self, buf: &'b [u8]) -> Result<usize> {\n        self.parse_with_config(buf, &Default::default())\n    }", "test": "fn test_7() {\n    let data = [8];\n    let mut headers = [httparse::EMPTY_HEADER; 16];\n    let mut req = httparse::Request::new(&mut headers);\n    req.parse(data);\n}"}
{"test_id": "gfx-rs-naga/gfx-rs-naga-92e41b4/tests-gen/wgsl_parser.inputs.rs::test_5", "code": "pub fn parse(mut self) -> Result<crate::Module, Error> {\n        let mut module = {\n            if self.next()? != spirv::MAGIC_NUMBER {\n                return Err(Error::InvalidHeader);\n            }\n            let version_raw = self.next()?;\n            let generator = self.next()?;\n            let _bound = self.next()?;\n            let _schema = self.next()?;\n            log::info!(\"Generated by {} version {:x}\", generator, version_raw);\n            crate::Module::default()\n        };\n\n        self.layouter.clear();\n        self.dummy_functions = Arena::new();\n        self.lookup_function.clear();\n        self.function_call_graph.clear();\n\n        loop {\n            use spirv::Op;\n\n            let inst = match self.next_inst() {\n                Ok(inst) => inst,\n                Err(Error::IncompleteData) => break,\n                Err(other) => return Err(other),\n            };\n            log::debug!(\"\\t{:?} [{}]\", inst.op, inst.wc);\n\n            match inst.op {\n                Op::Capability => self.parse_capability(inst),\n                Op::Extension => self.parse_extension(inst),\n                Op::ExtInstImport => self.parse_ext_inst_import(inst),\n                Op::MemoryModel => self.parse_memory_model(inst),\n                Op::EntryPoint => self.parse_entry_point(inst),\n                Op::ExecutionMode => self.parse_execution_mode(inst),\n                Op::String => self.parse_string(inst),\n                Op::Source => self.parse_source(inst),\n                Op::SourceExtension => self.parse_source_extension(inst),\n                Op::Name => self.parse_name(inst),\n                Op::MemberName => self.parse_member_name(inst),\n                Op::ModuleProcessed => self.parse_module_processed(inst),\n                Op::Decorate => self.parse_decorate(inst),\n                Op::MemberDecorate => self.parse_member_decorate(inst),\n                Op::TypeVoid => self.parse_type_void(inst),\n                Op::TypeBool => self.parse_type_bool(inst, &mut module),\n                Op::TypeInt => self.parse_type_int(inst, &mut module),\n                Op::TypeFloat => self.parse_type_float(inst, &mut module),\n                Op::TypeVector => self.parse_type_vector(inst, &mut module),\n                Op::TypeMatrix => self.parse_type_matrix(inst, &mut module),\n                Op::TypeFunction => self.parse_type_function(inst),\n                Op::TypePointer => self.parse_type_pointer(inst, &mut module),\n                Op::TypeArray => self.parse_type_array(inst, &mut module),\n                Op::TypeRuntimeArray => self.parse_type_runtime_array(inst, &mut module),\n                Op::TypeStruct => self.parse_type_struct(inst, &mut module),\n                Op::TypeImage => self.parse_type_image(inst, &mut module),\n                Op::TypeSampledImage => self.parse_type_sampled_image(inst),\n                Op::TypeSampler => self.parse_type_sampler(inst, &mut module),\n                Op::Constant | Op::SpecConstant => self.parse_constant(inst, &mut module),\n                Op::ConstantComposite => self.parse_composite_constant(inst, &mut module),\n                Op::ConstantNull | Op::Undef => self.parse_null_constant(inst, &mut module),\n                Op::ConstantTrue => self.parse_bool_constant(inst, true, &mut module),\n                Op::ConstantFalse => self.parse_bool_constant(inst, false, &mut module),\n                Op::Variable => self.parse_global_variable(inst, &mut module),\n                Op::Function => {\n                    self.switch(ModuleState::Function, inst.op)?;\n                    inst.expect(5)?;\n                    self.parse_function(&mut module)\n                }\n                _ => Err(Error::UnsupportedInstruction(self.state, inst.op)), //TODO\n            }?;\n        }\n\n        log::info!(\"Patching...\");\n        {\n            let mut nodes = petgraph::algo::toposort(&self.function_call_graph, None)\n                .map_err(|cycle| Error::FunctionCallCycle(cycle.node_id()))?;\n            nodes.reverse(); // we need dominated first\n            let mut functions = mem::take(&mut module.functions);\n            for fun_id in nodes {\n                if fun_id > !(functions.len() as u32) {\n                    // skip all the fake IDs registered for the entry points\n                    continue;\n                }\n                let lookup = self.lookup_function.get_mut(&fun_id).unwrap();\n                // take out the function from the old array\n                let fun = mem::take(&mut functions[lookup.handle]);\n                // add it to the newly formed arena, and adjust the lookup\n                lookup.handle = module\n                    .functions\n                    .append(fun, functions.get_span(lookup.handle));\n            }\n        }\n        // patch all the functions\n        for (handle, fun) in module.functions.iter_mut() {\n            self.patch_function(Some(handle), fun)?;\n        }\n        for ep in module.entry_points.iter_mut() {\n            self.patch_function(None, &mut ep.function)?;\n        }\n\n        // Check all the images and samplers to have consistent comparison property.\n        for (handle, flags) in self.handle_sampling.drain() {\n            if !image::patch_comparison_type(\n                flags,\n                module.global_variables.get_mut(handle),\n                &mut module.types,\n            ) {\n                return Err(Error::InconsistentComparisonSampling(handle));\n            }\n        }\n\n        if !self.future_decor.is_empty() {\n            log::warn!(\"Unused item decorations: {:?}\", self.future_decor);\n            self.future_decor.clear();\n        }\n        if !self.future_member_decor.is_empty() {\n            log::warn!(\"Unused member decorations: {:?}\", self.future_member_decor);\n            self.future_member_decor.clear();\n        }\n\n        Ok(module)\n    }", "test": "fn test_5() {\n    let data = \"\\r\\0\\n\";\n    let _result = Frontend::new().parse(&data);\n}"}
{"test_id": "BurntSushi-memchr/BurntSushi-memchr-f3fde7a/tests-gen/memmem.inputs.rs::test_28", "code": "pub fn count(&self, haystack: &[u8]) -> usize {\n        // SAFETY: All of our pointers are derived directly from a borrowed\n        // slice, which is guaranteed to be valid.\n        unsafe {\n            let start = haystack.as_ptr();\n            let end = start.add(haystack.len());\n            self.count_raw(start, end)\n        }\n    }", "test": "fn test_28() {\n    let data = [58, 91];\n    if data.len() < 2 {\n        return;\n    }\n    let split = std::cmp::max(data[0] as usize, 1) % data.len() as usize;\n    let (needle, haystack) = (&data[..split], &data[split..]);\n    memmem::find_iter(haystack, needle).count();\n}"}
{"test_id": "cloud-hypervisor-cloud-hypervisor/cloud-hypervisor-cloud-hypervisor-db3a5f3/tests-gen/console.inputs.rs::test_30", "code": "pub fn wait_for_epoll_threads(&mut self) {\n        self.common.wait_for_epoll_threads();\n    }", "test": "fn test_30() {\n    let bytes = [10, 10];\n    if bytes.len() < (QUEUE_DATA_SIZE + QUEUE_BYTES_SIZE) * QUEUE_NUM + CONSOLE_INPUT_SIZE\n        || bytes.len()\n            > (QUEUE_DATA_SIZE + QUEUE_BYTES_SIZE) * QUEUE_NUM + CONSOLE_INPUT_SIZE + MEM_SIZE\n    {\n        return;\n    }\n    let (pipe_rx, mut pipe_tx) = create_pipe().unwrap();\n    let output = unsafe {\n        File::from_raw_fd(\n            memfd_create(&std::ffi::CString::new(\"fuzz_console_output\").unwrap()).unwrap(),\n        )\n    };\n    let endpoint = virtio_devices::Endpoint::FilePair(output, pipe_rx);\n    let (mut console, _) = virtio_devices::Console::new(\n        \"fuzzer_console\".to_owned(),\n        endpoint,\n        None,\n        false,\n        SeccompAction::Allow,\n        EventFd::new(EFD_NONBLOCK).unwrap(),\n        None,\n    )\n    .unwrap();\n    let console_input_bytes = &bytes[..CONSOLE_INPUT_SIZE];\n    let queue_data = &bytes[CONSOLE_INPUT_SIZE..CONSOLE_INPUT_SIZE + QUEUE_DATA_SIZE * QUEUE_NUM];\n    let queue_bytes = &bytes[CONSOLE_INPUT_SIZE + QUEUE_DATA_SIZE * QUEUE_NUM\n        ..CONSOLE_INPUT_SIZE + (QUEUE_DATA_SIZE + QUEUE_BYTES_SIZE) * QUEUE_NUM];\n    let mem_bytes = &bytes[CONSOLE_INPUT_SIZE + (QUEUE_DATA_SIZE + QUEUE_BYTES_SIZE) * QUEUE_NUM..];\n    let mut queues = setup_virt_queues(\n        &[\n            &queue_data[..QUEUE_DATA_SIZE].try_into().unwrap(),\n            &queue_data[QUEUE_DATA_SIZE..QUEUE_DATA_SIZE * 2]\n                .try_into()\n                .unwrap(),\n        ],\n        BASE_VIRT_QUEUE_ADDR,\n    );\n    let mem = GuestMemoryMmap::from_ranges(&[\n        (GuestAddress(0), MEM_SIZE),\n        (GuestAddress(BASE_VIRT_QUEUE_ADDR), queue_bytes.len()),\n    ])\n    .unwrap();\n    if mem\n        .write_slice(queue_bytes, GuestAddress(BASE_VIRT_QUEUE_ADDR))\n        .is_err()\n    {\n        return;\n    }\n    if mem.write_slice(mem_bytes, GuestAddress(0 as u64)).is_err() {\n        return;\n    }\n    let guest_memory = GuestMemoryAtomic::new(mem);\n    let input_queue = queues.remove(0);\n    let input_evt = EventFd::new(0).unwrap();\n    let input_queue_evt = unsafe { EventFd::from_raw_fd(libc::dup(input_evt.as_raw_fd())) };\n    let output_queue = queues.remove(0);\n    let output_evt = EventFd::new(0).unwrap();\n    let output_queue_evt = unsafe { EventFd::from_raw_fd(libc::dup(output_evt.as_raw_fd())) };\n    input_queue_evt.write(1).unwrap();\n    output_queue_evt.write(1).unwrap();\n    pipe_tx.write_all(console_input_bytes).unwrap();\n    console\n        .activate(\n            guest_memory,\n            Arc::new(NoopVirtioInterrupt {}),\n            vec![(0, input_queue, input_evt), (1, output_queue, output_evt)],\n        )\n        .unwrap();\n    console.wait_for_epoll_threads();\n}"}
{"test_id": "dtolnay-semver/dtolnay-semver-750f0ac/tests-gen/sort_version.inputs.rs::test_16", "code": "fn three_versions(bytes: &[u8]) -> Option<[Version; 3]> {\n    let mut inputs = str::from_utf8(bytes).ok()?.split(' ');\n    Some([\n        Version {\n            major: 0,\n            minor: 0,\n            patch: 0,\n            pre: inputs.next().map(Prerelease::new)?.ok()?,\n            build: inputs.next().map(BuildMetadata::new)?.ok()?,\n        },\n        Version {\n            major: 0,\n            minor: 0,\n            patch: 0,\n            pre: inputs.next().map(Prerelease::new)?.ok()?,\n            build: inputs.next().map(BuildMetadata::new)?.ok()?,\n        },\n        Version {\n            major: 0,\n            minor: 0,\n            patch: 0,\n            pre: inputs.next().map(Prerelease::new)?.ok()?,\n            build: inputs.next().map(BuildMetadata::new)?.ok()?,\n        },\n    ])\n}", "test": "fn test_16() {\n    let bytes = [8, 10, 140];\n    if let Some([a, b, c]) = three_versions(bytes) {\n        if a < b && b < c && c < a {\n            panic!(\"{0} < {1} < {2} < {0}\", a, b, c);\n        }\n    }\n}"}
{"test_id": "quinn-rs-quinn/quinn-rs-quinn-83e4f46/tests-gen/packet.inputs.rs::test_87", "code": "fn to_vec(params: &TransportParameters) -> Vec<u8> {\n    let mut bytes = Vec::new();\n    params.write(&mut bytes);\n    bytes\n}", "test": "fn test_87() {\n    let data = PacketParams {\n        local_cid_len: 6,\n        buf: b\"\\n\",\n        grease_quic_bit: false,\n    };\n    let len = data.buf.len();\n    let supported_versions = DEFAULT_SUPPORTED_VERSIONS.to_vec();\n    if let Ok(decoded) = PartialDecode::new(\n        data.buf,\n        data.local_cid_len,\n        &supported_versions,\n        data.grease_quic_bit,\n    ) {\n        match decoded.1 {\n            Some(x) => assert_eq!(len, decoded.0.len() + x.len()),\n            None => assert_eq!(len, decoded.0.len()),\n        }\n    }\n}"}
{"test_id": "BurntSushi-memchr/BurntSushi-memchr-f3fde7a/tests-gen/memmem.inputs.rs::test_2", "code": "pub fn count(&self, haystack: &[u8]) -> usize {\n        // SAFETY: All of our pointers are derived directly from a borrowed\n        // slice, which is guaranteed to be valid.\n        unsafe {\n            let start = haystack.as_ptr();\n            let end = start.add(haystack.len());\n            self.count_raw(start, end)\n        }\n    }", "test": "fn test_2() {\n    let data = [10, 10];\n    if data.len() < 2 {\n        return;\n    }\n    let split = std::cmp::max(data[0] as usize, 1) % data.len() as usize;\n    let (needle, haystack) = (&data[..split], &data[split..]);\n    memmem::find_iter(haystack, needle).count();\n}"}
{"test_id": "BurntSushi-memchr/BurntSushi-memchr-f3fde7a/tests-gen/memchr3.inputs.rs::test_62", "code": "fn count(self) -> usize {\n        self.it.count(|s, e| {\n            // SAFETY: We rely on our generic iterator to return valid start\n            // and end pointers.\n            unsafe { count_raw(self.needle1, s, e) }\n        })\n    }", "test": "fn test_62() {\n    let data = [47, 253, 58, 10];\n    if data.len() < 3 {\n        return;\n    }\n    memchr3_iter(data[0], data[1], data[2], &data[3..]).count();\n}"}
{"test_id": "quinn-rs-quinn/quinn-rs-quinn-83e4f46/tests-gen/streamid.inputs.rs::test_56", "code": "pub fn initiator(self) -> Side {\n        if self.0 & 0x1 == 0 {\n            Side::Client\n        } else {\n            Side::Server\n        }\n    }", "test": "fn test_56() {\n    let data = StreamIdParams {\n        side: Server,\n        dir: Uni,\n        index: 12514849900987264429,\n    };\n    let s = StreamId::new(data.side, data.dir, data.index);\n    assert_eq!(s.initiator(), data.side);\n    assert_eq!(s.dir(), data.dir);\n}"}
{"test_id": "BurntSushi-memchr/BurntSushi-memchr-f3fde7a/tests-gen/memrchr.inputs.rs::test_87", "code": "fn count(self) -> usize {\n        self.it.count(|s, e| {\n            // SAFETY: We rely on our generic iterator to return valid start\n            // and end pointers.\n            unsafe { count_raw(self.needle1, s, e) }\n        })\n    }", "test": "fn test_87() {\n    let data = [10, 37];\n    if data.is_empty() {\n        return;\n    }\n    memchr_iter(data[0], &data[1..]).rev().count();\n}"}
{"test_id": "cloud-hypervisor-cloud-hypervisor/cloud-hypervisor-cloud-hypervisor-db3a5f3/tests-gen/console.inputs.rs::test_93", "code": "pub fn wait_for_epoll_threads(&mut self) {\n        self.common.wait_for_epoll_threads();\n    }", "test": "fn test_93() {\n    let bytes = [10, 40, 242, 40];\n    if bytes.len() < (QUEUE_DATA_SIZE + QUEUE_BYTES_SIZE) * QUEUE_NUM + CONSOLE_INPUT_SIZE\n        || bytes.len()\n            > (QUEUE_DATA_SIZE + QUEUE_BYTES_SIZE) * QUEUE_NUM + CONSOLE_INPUT_SIZE + MEM_SIZE\n    {\n        return;\n    }\n    let (pipe_rx, mut pipe_tx) = create_pipe().unwrap();\n    let output = unsafe {\n        File::from_raw_fd(\n            memfd_create(&std::ffi::CString::new(\"fuzz_console_output\").unwrap()).unwrap(),\n        )\n    };\n    let endpoint = virtio_devices::Endpoint::FilePair(output, pipe_rx);\n    let (mut console, _) = virtio_devices::Console::new(\n        \"fuzzer_console\".to_owned(),\n        endpoint,\n        None,\n        false,\n        SeccompAction::Allow,\n        EventFd::new(EFD_NONBLOCK).unwrap(),\n        None,\n    )\n    .unwrap();\n    let console_input_bytes = &bytes[..CONSOLE_INPUT_SIZE];\n    let queue_data = &bytes[CONSOLE_INPUT_SIZE..CONSOLE_INPUT_SIZE + QUEUE_DATA_SIZE * QUEUE_NUM];\n    let queue_bytes = &bytes[CONSOLE_INPUT_SIZE + QUEUE_DATA_SIZE * QUEUE_NUM\n        ..CONSOLE_INPUT_SIZE + (QUEUE_DATA_SIZE + QUEUE_BYTES_SIZE) * QUEUE_NUM];\n    let mem_bytes = &bytes[CONSOLE_INPUT_SIZE + (QUEUE_DATA_SIZE + QUEUE_BYTES_SIZE) * QUEUE_NUM..];\n    let mut queues = setup_virt_queues(\n        &[\n            &queue_data[..QUEUE_DATA_SIZE].try_into().unwrap(),\n            &queue_data[QUEUE_DATA_SIZE..QUEUE_DATA_SIZE * 2]\n                .try_into()\n                .unwrap(),\n        ],\n        BASE_VIRT_QUEUE_ADDR,\n    );\n    let mem = GuestMemoryMmap::from_ranges(&[\n        (GuestAddress(0), MEM_SIZE),\n        (GuestAddress(BASE_VIRT_QUEUE_ADDR), queue_bytes.len()),\n    ])\n    .unwrap();\n    if mem\n        .write_slice(queue_bytes, GuestAddress(BASE_VIRT_QUEUE_ADDR))\n        .is_err()\n    {\n        return;\n    }\n    if mem.write_slice(mem_bytes, GuestAddress(0 as u64)).is_err() {\n        return;\n    }\n    let guest_memory = GuestMemoryAtomic::new(mem);\n    let input_queue = queues.remove(0);\n    let input_evt = EventFd::new(0).unwrap();\n    let input_queue_evt = unsafe { EventFd::from_raw_fd(libc::dup(input_evt.as_raw_fd())) };\n    let output_queue = queues.remove(0);\n    let output_evt = EventFd::new(0).unwrap();\n    let output_queue_evt = unsafe { EventFd::from_raw_fd(libc::dup(output_evt.as_raw_fd())) };\n    input_queue_evt.write(1).unwrap();\n    output_queue_evt.write(1).unwrap();\n    pipe_tx.write_all(console_input_bytes).unwrap();\n    console\n        .activate(\n            guest_memory,\n            Arc::new(NoopVirtioInterrupt {}),\n            vec![(0, input_queue, input_evt), (1, output_queue, output_evt)],\n        )\n        .unwrap();\n    console.wait_for_epoll_threads();\n}"}
{"test_id": "image-rs-image-gif/image-rs-image-gif-80fd8c0/tests-gen/decode.inputs.rs::test_14", "code": "fn try_decode (data : & [u8]) -> Result < () , gif :: DecodingError > { let mut reader = gif :: Decoder :: new (data) ? ; while let Some (_) = reader . read_next_frame () ? { } Ok (()) }", "test": "fn test_14() {\n    let data = [15, 10, 251, 38];\n    let _ = try_decode(data);\n}"}
{"test_id": "quinn-rs-quinn/quinn-rs-quinn-83e4f46/tests-gen/streamid.inputs.rs::test_51", "code": "pub fn initiator(self) -> Side {\n        if self.0 & 0x1 == 0 {\n            Side::Client\n        } else {\n            Side::Server\n        }\n    }", "test": "fn test_51() {\n    let data = StreamIdParams {\n        side: Server,\n        dir: Uni,\n        index: 12514849900987271085,\n    };\n    let s = StreamId::new(data.side, data.dir, data.index);\n    assert_eq!(s.initiator(), data.side);\n    assert_eq!(s.dir(), data.dir);\n}"}
{"test_id": "BurntSushi-memchr/BurntSushi-memchr-f3fde7a/tests-gen/memrchr.inputs.rs::test_5", "code": "fn count(self) -> usize {\n        self.it.count(|s, e| {\n            // SAFETY: We rely on our generic iterator to return valid start\n            // and end pointers.\n            unsafe { count_raw(self.needle1, s, e) }\n        })\n    }", "test": "fn test_5() {\n    let data = [221];\n    if data.is_empty() {\n        return;\n    }\n    memchr_iter(data[0], &data[1..]).rev().count();\n}"}
{"test_id": "gfx-rs-naga/gfx-rs-naga-92e41b4/tests-gen/wgsl_parser.inputs.rs::test_75", "code": "pub fn parse(mut self) -> Result<crate::Module, Error> {\n        let mut module = {\n            if self.next()? != spirv::MAGIC_NUMBER {\n                return Err(Error::InvalidHeader);\n            }\n            let version_raw = self.next()?;\n            let generator = self.next()?;\n            let _bound = self.next()?;\n            let _schema = self.next()?;\n            log::info!(\"Generated by {} version {:x}\", generator, version_raw);\n            crate::Module::default()\n        };\n\n        self.layouter.clear();\n        self.dummy_functions = Arena::new();\n        self.lookup_function.clear();\n        self.function_call_graph.clear();\n\n        loop {\n            use spirv::Op;\n\n            let inst = match self.next_inst() {\n                Ok(inst) => inst,\n                Err(Error::IncompleteData) => break,\n                Err(other) => return Err(other),\n            };\n            log::debug!(\"\\t{:?} [{}]\", inst.op, inst.wc);\n\n            match inst.op {\n                Op::Capability => self.parse_capability(inst),\n                Op::Extension => self.parse_extension(inst),\n                Op::ExtInstImport => self.parse_ext_inst_import(inst),\n                Op::MemoryModel => self.parse_memory_model(inst),\n                Op::EntryPoint => self.parse_entry_point(inst),\n                Op::ExecutionMode => self.parse_execution_mode(inst),\n                Op::String => self.parse_string(inst),\n                Op::Source => self.parse_source(inst),\n                Op::SourceExtension => self.parse_source_extension(inst),\n                Op::Name => self.parse_name(inst),\n                Op::MemberName => self.parse_member_name(inst),\n                Op::ModuleProcessed => self.parse_module_processed(inst),\n                Op::Decorate => self.parse_decorate(inst),\n                Op::MemberDecorate => self.parse_member_decorate(inst),\n                Op::TypeVoid => self.parse_type_void(inst),\n                Op::TypeBool => self.parse_type_bool(inst, &mut module),\n                Op::TypeInt => self.parse_type_int(inst, &mut module),\n                Op::TypeFloat => self.parse_type_float(inst, &mut module),\n                Op::TypeVector => self.parse_type_vector(inst, &mut module),\n                Op::TypeMatrix => self.parse_type_matrix(inst, &mut module),\n                Op::TypeFunction => self.parse_type_function(inst),\n                Op::TypePointer => self.parse_type_pointer(inst, &mut module),\n                Op::TypeArray => self.parse_type_array(inst, &mut module),\n                Op::TypeRuntimeArray => self.parse_type_runtime_array(inst, &mut module),\n                Op::TypeStruct => self.parse_type_struct(inst, &mut module),\n                Op::TypeImage => self.parse_type_image(inst, &mut module),\n                Op::TypeSampledImage => self.parse_type_sampled_image(inst),\n                Op::TypeSampler => self.parse_type_sampler(inst, &mut module),\n                Op::Constant | Op::SpecConstant => self.parse_constant(inst, &mut module),\n                Op::ConstantComposite => self.parse_composite_constant(inst, &mut module),\n                Op::ConstantNull | Op::Undef => self.parse_null_constant(inst, &mut module),\n                Op::ConstantTrue => self.parse_bool_constant(inst, true, &mut module),\n                Op::ConstantFalse => self.parse_bool_constant(inst, false, &mut module),\n                Op::Variable => self.parse_global_variable(inst, &mut module),\n                Op::Function => {\n                    self.switch(ModuleState::Function, inst.op)?;\n                    inst.expect(5)?;\n                    self.parse_function(&mut module)\n                }\n                _ => Err(Error::UnsupportedInstruction(self.state, inst.op)), //TODO\n            }?;\n        }\n\n        log::info!(\"Patching...\");\n        {\n            let mut nodes = petgraph::algo::toposort(&self.function_call_graph, None)\n                .map_err(|cycle| Error::FunctionCallCycle(cycle.node_id()))?;\n            nodes.reverse(); // we need dominated first\n            let mut functions = mem::take(&mut module.functions);\n            for fun_id in nodes {\n                if fun_id > !(functions.len() as u32) {\n                    // skip all the fake IDs registered for the entry points\n                    continue;\n                }\n                let lookup = self.lookup_function.get_mut(&fun_id).unwrap();\n                // take out the function from the old array\n                let fun = mem::take(&mut functions[lookup.handle]);\n                // add it to the newly formed arena, and adjust the lookup\n                lookup.handle = module\n                    .functions\n                    .append(fun, functions.get_span(lookup.handle));\n            }\n        }\n        // patch all the functions\n        for (handle, fun) in module.functions.iter_mut() {\n            self.patch_function(Some(handle), fun)?;\n        }\n        for ep in module.entry_points.iter_mut() {\n            self.patch_function(None, &mut ep.function)?;\n        }\n\n        // Check all the images and samplers to have consistent comparison property.\n        for (handle, flags) in self.handle_sampling.drain() {\n            if !image::patch_comparison_type(\n                flags,\n                module.global_variables.get_mut(handle),\n                &mut module.types,\n            ) {\n                return Err(Error::InconsistentComparisonSampling(handle));\n            }\n        }\n\n        if !self.future_decor.is_empty() {\n            log::warn!(\"Unused item decorations: {:?}\", self.future_decor);\n            self.future_decor.clear();\n        }\n        if !self.future_member_decor.is_empty() {\n            log::warn!(\"Unused member decorations: {:?}\", self.future_member_decor);\n            self.future_member_decor.clear();\n        }\n\n        Ok(module)\n    }", "test": "fn test_75() {\n    let data = \"-z\\0\";\n    let _result = Frontend::new().parse(&data);\n}"}
{"test_id": "BurntSushi-memchr/BurntSushi-memchr-f3fde7a/tests-gen/memrchr3.inputs.rs::test_47", "code": "fn count(self) -> usize {\n        self.it.count(|s, e| {\n            // SAFETY: We rely on our generic iterator to return valid start\n            // and end pointers.\n            unsafe { count_raw(self.needle1, s, e) }\n        })\n    }", "test": "fn test_47() {\n    let data = [95, 10, 95, 142];\n    if data.len() < 3 {\n        return;\n    }\n    memchr3_iter(data[0], data[1], data[2], &data[3..]).rev().count();\n}"}
{"test_id": "rustls-rustls/rustls-rustls-ae583bd/tests-gen/server.inputs.rs::test_2", "code": "pub fn process_new_packets(&mut self) -> Result<IoState, Error> {\n        match self {\n            Self::Client(conn) => conn.process_new_packets(),\n            Self::Server(conn) => conn.process_new_packets(),\n        }\n    }", "test": "fn test_2() {\n    let data = [\n        22, 3, 1, 0, 187, 1, 0, 0, 183, 3, 3, 220, 22, 51, 168, 177, 163, 9, 68, 53, 77, 77, 39,\n        28, 3, 125, 157, 176, 186, 53, 22, 211, 5, 127, 250, 92, 65, 31, 143, 93, 97, 146, 138, 0,\n        0, 20, 19, 3, 19, 2, 19, 1, 204, 169, 204, 168, 192, 44, 192, 43, 192, 48, 192, 47, 0, 255,\n        1, 0, 0, 122, 0, 43, 0, 5, 4, 127, 18, 3, 3, 0, 0, 0, 11, 0, 9, 0, 0, 6, 106, 98, 112, 46,\n        105, 111, 0, 11, 0, 2, 1, 0, 0, 10, 0, 8, 0, 6, 0, 29, 0, 24, 0, 23, 0, 13, 0, 20, 0, 18,\n        5, 3, 4, 3, 8, 6, 8, 5, 8, 4, 6, 1, 5, 1, 4, 1, 2, 1, 0, 23, 0, 0, 0, 40, 0, 38, 0, 36, 0,\n        29, 0, 32, 15, 198, 110, 208, 67, 98, 44, 245, 131, 181, 192, 152, 44, 176, 179, 3, 145,\n        228, 49, 108, 94, 171, 164, 56, 3, 101, 56, 34, 246, 111, 37, 69, 42, 45, 0, 2, 1, 1, 0,\n        35, 0, 0, 23, 3, 1, 0, 53, 219, 184, 117, 77, 19, 58, 216, 56, 206, 189, 136, 130, 200, 75,\n        166, 179, 221, 205, 76, 177, 233, 190, 144, 63, 232, 169, 106, 107, 196, 128, 137, 238,\n        184, 112, 79, 244, 78, 254, 64, 128, 90, 16, 155, 32, 243, 35, 34, 228, 249, 131, 79, 5,\n        236, 23, 3, 1, 0, 98, 232, 125, 164, 163, 59, 255, 99, 156, 191, 129, 130, 16, 57, 31, 56,\n        64, 0, 192, 24, 151, 61, 57, 10, 81, 47, 192, 94, 212, 116, 62, 40, 209, 146, 147, 24, 216,\n        46, 208, 33, 113, 212, 48, 157, 238, 157, 45, 120, 98, 10, 232, 255, 210, 173, 123, 200,\n        152, 59, 10, 57, 0, 154, 207, 11, 90, 130, 199, 181, 127, 192, 247, 83, 193, 104, 19, 154,\n        127, 6, 156, 172, 21, 121, 252, 87, 250, 196, 88, 45, 208, 213, 175, 154, 154, 143, 29, 49,\n        69, 68, 88,\n    ];\n    let config = Arc::new(\n        ServerConfig::builder()\n            .with_safe_defaults()\n            .with_no_client_auth()\n            .with_cert_resolver(Arc::new(Fail)),\n    );\n    let mut server = ServerConnection::new(config).unwrap();\n    let _ = server.read_tls(&mut io::Cursor::new(data));\n    let _ = server.process_new_packets();\n}"}
{"test_id": "rust-bio-rust-bio/rust-bio-rust-bio-319a0d8/tests-gen/banded_aligner.inputs.rs::test_49", "code": "fn validate_alignment_score(al: &Alignment, x: TextSlice, y: TextSlice, scoring: &Scoring<MatchParams>) -> bool {\n    use AlignmentOperation::*;\n    let path = al.path();\n    let mut score = 0;\n    if al.mode==AlignmentMode::Custom {\n        if al.xstart > 0 {\n            score += scoring.xclip_prefix;\n        }\n        if al.ystart > 0 {\n            score += scoring.yclip_prefix;\n        }\n        if al.xend < al.xlen {\n            score += scoring.xclip_suffix;\n        }\n        if al.yend < al.ylen {\n            score += scoring.yclip_suffix;\n        }\n    }\n    let mut last_op = None;\n    for (i, j, op) in path {\n        score += match op {\n            Match | Subst => scoring.match_fn.score(x[i-1], y[j-1]),\n            Del => if last_op==Some(Del) { scoring.gap_extend } else { scoring.gap_open + scoring.gap_extend },\n            Ins => if last_op==Some(Ins) { scoring.gap_extend } else { scoring.gap_open + scoring.gap_extend },\n            _ => 0,\n        };\n        last_op = Some(op);\n    }\n    al.score==score\n}", "test": "fn test_49() {\n    let data = [191, 38, 40];\n    if data.len() < 50 || data.len() > 300 {\n        return;\n    }\n    let (split_byte, data) = data.split_first().unwrap();\n    let (kmer_byte, data) = data.split_first().unwrap();\n    let (window_byte, data) = data.split_first().unwrap();\n    let (match_score_byte, data) = data.split_first().unwrap();\n    let (mismatch_score_byte, data) = data.split_first().unwrap();\n    let (gap_open_byte, data) = data.split_first().unwrap();\n    let (gap_extend_byte, data) = data.split_first().unwrap();\n    let (xclip_prefix_byte, data) = data.split_first().unwrap();\n    let (xclip_suffix_byte, data) = data.split_first().unwrap();\n    let (yclip_prefix_byte, data) = data.split_first().unwrap();\n    let (yclip_suffix_byte, data) = data.split_first().unwrap();\n    let alphabets = b\"ACGT\";\n    let v: Vec<_> = data\n        .iter()\n        .map(|i| alphabets[(*i as usize) % alphabets.len()])\n        .collect();\n    let kmer_len: usize = 5 + (*kmer_byte as usize) % 10;\n    let window_size: usize = 5 + (*window_byte as usize) % 10;\n    let split_pos: usize = min(data.len() - 1, max(*split_byte as usize, 1));\n    let match_score = 1 + (*match_score_byte as i32) % 5;\n    let mismatch_score = -((*mismatch_score_byte as i32) % 10);\n    let gap_open = -((*gap_open_byte as i32) % 20);\n    let gap_extend = -((*gap_extend_byte as i32) % 10);\n    let (x, y) = v.split_at(split_pos);\n    println!(\n        \"x: {}, y: {}, k: {}, w: {}, scoring ({}, {}, {}, {})\",\n        String::from_utf8(x.to_vec()).unwrap(),\n        String::from_utf8(y.to_vec()).unwrap(),\n        kmer_len,\n        window_size,\n        gap_open,\n        gap_extend,\n        match_score,\n        mismatch_score\n    );\n    let base_score = Scoring::from_scores(gap_open, gap_extend, match_score, mismatch_score);\n    {\n        println!(\n            \"Clip scores ({}, {}, {}, {})\",\n            xclip_prefix_byte, xclip_suffix_byte, yclip_prefix_byte, yclip_suffix_byte\n        );\n        let scoring = Scoring {\n            xclip_prefix: -(*xclip_prefix_byte as i32),\n            xclip_suffix: -(*xclip_suffix_byte as i32),\n            yclip_prefix: -(*yclip_prefix_byte as i32),\n            yclip_suffix: -(*yclip_suffix_byte as i32),\n            ..base_score.clone()\n        };\n        let mut b_aligner = banded::Aligner::with_scoring(scoring.clone(), kmer_len, window_size);\n        let b_alignment = b_aligner.custom(x, y);\n        assert!(validate_alignment_score(&b_alignment, x, y, &scoring));\n        let mut f_aligner = pairwise::Aligner::with_scoring(scoring.clone());\n        let f_alignment = f_aligner.custom(x, y);\n        assert!(validate_alignment_score(&f_alignment, x, y, &scoring));\n        let band_all_alignment = b_aligner.custom_with_matches(x, y, &Vec::new());\n        assert_eq!(band_all_alignment.score, f_alignment.score);\n    }\n    {\n        let scoring = Scoring {\n            xclip_prefix: 0,\n            xclip_suffix: 0,\n            yclip_suffix: 0,\n            ..base_score.clone()\n        };\n        let mut b_aligner = banded::Aligner::with_scoring(scoring.clone(), kmer_len, window_size);\n        let b_alignment = b_aligner.custom(x, y);\n        assert_eq!(b_alignment.ystart, 0);\n        assert!(validate_alignment_score(&b_alignment, x, y, &scoring));\n        let mut f_aligner = pairwise::Aligner::with_scoring(scoring.clone());\n        let f_alignment = f_aligner.custom(x, y);\n        assert_eq!(f_alignment.ystart, 0);\n        assert!(validate_alignment_score(&f_alignment, x, y, &scoring));\n        let band_all_alignment = b_aligner.custom_with_matches(x, y, &Vec::new());\n        assert_eq!(band_all_alignment.score, f_alignment.score);\n    }\n    {\n        let scoring = Scoring {\n            xclip_prefix: 0,\n            xclip_suffix: 0,\n            yclip_prefix: 0,\n            ..base_score.clone()\n        };\n        let mut b_aligner = banded::Aligner::with_scoring(scoring.clone(), kmer_len, window_size);\n        let b_alignment = b_aligner.custom(x, y);\n        assert_eq!(b_alignment.yend, b_alignment.ylen);\n        assert!(validate_alignment_score(&b_alignment, x, y, &scoring));\n        let mut f_aligner = pairwise::Aligner::with_scoring(scoring.clone());\n        let f_alignment = f_aligner.custom(x, y);\n        assert_eq!(f_alignment.yend, f_alignment.ylen);\n        assert!(validate_alignment_score(&f_alignment, x, y, &scoring));\n        let band_all_alignment = b_aligner.custom_with_matches(x, y, &Vec::new());\n        assert_eq!(band_all_alignment.score, f_alignment.score);\n    }\n    {\n        let scoring = Scoring {\n            xclip_suffix: 0,\n            yclip_prefix: 0,\n            yclip_suffix: 0,\n            ..base_score.clone()\n        };\n        let mut b_aligner = banded::Aligner::with_scoring(scoring.clone(), kmer_len, window_size);\n        let b_alignment = b_aligner.custom(x, y);\n        assert_eq!(b_alignment.xstart, 0);\n        assert!(validate_alignment_score(&b_alignment, x, y, &scoring));\n        let mut f_aligner = pairwise::Aligner::with_scoring(scoring.clone());\n        let f_alignment = f_aligner.custom(x, y);\n        assert_eq!(f_alignment.xstart, 0);\n        assert!(validate_alignment_score(&f_alignment, x, y, &scoring));\n        let band_all_alignment = b_aligner.custom_with_matches(x, y, &Vec::new());\n        assert_eq!(band_all_alignment.score, f_alignment.score);\n    }\n    {\n        let scoring = Scoring {\n            xclip_prefix: 0,\n            yclip_prefix: 0,\n            yclip_suffix: 0,\n            ..base_score.clone()\n        };\n        let mut b_aligner = banded::Aligner::with_scoring(scoring.clone(), kmer_len, window_size);\n        let b_alignment = b_aligner.custom(x, y);\n        assert_eq!(b_alignment.xend, b_alignment.xlen);\n        assert!(validate_alignment_score(&b_alignment, x, y, &scoring));\n        let mut f_aligner = pairwise::Aligner::with_scoring(scoring.clone());\n        let f_alignment = f_aligner.custom(x, y);\n        assert_eq!(f_alignment.xend, f_alignment.xlen);\n        assert!(validate_alignment_score(&f_alignment, x, y, &scoring));\n        let band_all_alignment = b_aligner.custom_with_matches(x, y, &Vec::new());\n        assert_eq!(band_all_alignment.score, f_alignment.score);\n    }\n    {\n        let mut aligner = banded::Aligner::with_scoring(base_score.clone(), kmer_len, window_size);\n        let alignment = aligner.local(x, y);\n        assert!(alignment.score >= 0);\n        assert!(validate_alignment_score(&alignment, x, y, &base_score));\n        let alignment = aligner.semiglobal(x, y);\n        assert_eq!(alignment.xstart, 0);\n        assert_eq!(alignment.xend, alignment.xlen);\n        assert!(validate_alignment_score(&alignment, x, y, &base_score));\n        let alignment = aligner.global(x, y);\n        assert_eq!(alignment.xstart, 0);\n        assert_eq!(alignment.xend, alignment.xlen);\n        assert_eq!(alignment.ystart, 0);\n        assert_eq!(alignment.yend, alignment.ylen);\n        assert!(validate_alignment_score(&alignment, x, y, &base_score));\n    }\n    {\n        let mut aligner = pairwise::Aligner::with_scoring(base_score.clone());\n        let alignment = aligner.local(x, y);\n        assert!(alignment.score >= 0);\n        assert!(validate_alignment_score(&alignment, x, y, &base_score));\n        let alignment = aligner.semiglobal(x, y);\n        assert_eq!(alignment.xstart, 0);\n        assert_eq!(alignment.xend, alignment.xlen);\n        assert!(validate_alignment_score(&alignment, x, y, &base_score));\n        let alignment = aligner.global(x, y);\n        assert_eq!(alignment.xstart, 0);\n        assert_eq!(alignment.xend, alignment.xlen);\n        assert_eq!(alignment.ystart, 0);\n        assert_eq!(alignment.yend, alignment.ylen);\n        assert!(validate_alignment_score(&alignment, x, y, &base_score));\n    }\n}"}
{"test_id": "cloud-hypervisor-cloud-hypervisor/cloud-hypervisor-cloud-hypervisor-db3a5f3/tests-gen/watchdog.inputs.rs::test_13", "code": "pub fn wait_for_epoll_threads(&mut self) {\n        self.common.wait_for_epoll_threads();\n    }", "test": "fn test_13() {\n    let bytes = [26, 10, 35];\n    if bytes.len() < QUEUE_DATA_SIZE || bytes.len() > (QUEUE_DATA_SIZE + MEM_SIZE) {\n        return;\n    }\n    let mut watchdog = virtio_devices::Watchdog::new(\n        \"fuzzer_watchdog\".to_owned(),\n        EventFd::new(EFD_NONBLOCK).unwrap(),\n        SeccompAction::Allow,\n        EventFd::new(EFD_NONBLOCK).unwrap(),\n        None,\n    )\n    .unwrap();\n    let queue_data = &bytes[..QUEUE_DATA_SIZE];\n    let mem_bytes = &bytes[QUEUE_DATA_SIZE..];\n    let q = setup_virt_queue(queue_data.try_into().unwrap());\n    let mem = GuestMemoryMmap::from_ranges(&[(GuestAddress(0), MEM_SIZE)]).unwrap();\n    if mem.write_slice(mem_bytes, GuestAddress(0 as u64)).is_err() {\n        return;\n    }\n    let guest_memory = GuestMemoryAtomic::new(mem);\n    let evt = EventFd::new(0).unwrap();\n    let queue_evt = unsafe { EventFd::from_raw_fd(libc::dup(evt.as_raw_fd())) };\n    queue_evt.write(1).unwrap();\n    watchdog\n        .activate(\n            guest_memory,\n            Arc::new(NoopVirtioInterrupt {}),\n            vec![(0, q, evt)],\n        )\n        .ok();\n    watchdog.wait_for_epoll_threads();\n}"}
{"test_id": "rustls-rustls/rustls-rustls-ae583bd/tests-gen/message.inputs.rs::test_21", "code": "pub fn used(&self) -> usize {\n        self.cursor\n    }", "test": "fn test_21() {\n    let data = [\n        22, 3, 3, 0, 11, 104, 101, 108, 108, 111, 32, 119, 111, 114, 108, 100,\n    ];\n    let mut rdr = Reader::init(data);\n    if let Ok(m) = OpaqueMessage::read(&mut rdr) {\n        let msg = match Message::try_from(m.into_plain_message()) {\n            Ok(msg) => msg,\n            Err(_) => return,\n        };\n        let enc = PlainMessage::from(msg)\n            .into_unencrypted_opaque()\n            .encode();\n        assert_eq!(enc, data[..rdr.used()]);\n    }\n}"}
{"test_id": "cloud-hypervisor-cloud-hypervisor/cloud-hypervisor-cloud-hypervisor-db3a5f3/tests-gen/console.inputs.rs::test_79", "code": "pub fn wait_for_epoll_threads(&mut self) {\n        self.common.wait_for_epoll_threads();\n    }", "test": "fn test_79() {\n    let bytes = [10, 36, 242, 14];\n    if bytes.len() < (QUEUE_DATA_SIZE + QUEUE_BYTES_SIZE) * QUEUE_NUM + CONSOLE_INPUT_SIZE\n        || bytes.len()\n            > (QUEUE_DATA_SIZE + QUEUE_BYTES_SIZE) * QUEUE_NUM + CONSOLE_INPUT_SIZE + MEM_SIZE\n    {\n        return;\n    }\n    let (pipe_rx, mut pipe_tx) = create_pipe().unwrap();\n    let output = unsafe {\n        File::from_raw_fd(\n            memfd_create(&std::ffi::CString::new(\"fuzz_console_output\").unwrap()).unwrap(),\n        )\n    };\n    let endpoint = virtio_devices::Endpoint::FilePair(output, pipe_rx);\n    let (mut console, _) = virtio_devices::Console::new(\n        \"fuzzer_console\".to_owned(),\n        endpoint,\n        None,\n        false,\n        SeccompAction::Allow,\n        EventFd::new(EFD_NONBLOCK).unwrap(),\n        None,\n    )\n    .unwrap();\n    let console_input_bytes = &bytes[..CONSOLE_INPUT_SIZE];\n    let queue_data = &bytes[CONSOLE_INPUT_SIZE..CONSOLE_INPUT_SIZE + QUEUE_DATA_SIZE * QUEUE_NUM];\n    let queue_bytes = &bytes[CONSOLE_INPUT_SIZE + QUEUE_DATA_SIZE * QUEUE_NUM\n        ..CONSOLE_INPUT_SIZE + (QUEUE_DATA_SIZE + QUEUE_BYTES_SIZE) * QUEUE_NUM];\n    let mem_bytes = &bytes[CONSOLE_INPUT_SIZE + (QUEUE_DATA_SIZE + QUEUE_BYTES_SIZE) * QUEUE_NUM..];\n    let mut queues = setup_virt_queues(\n        &[\n            &queue_data[..QUEUE_DATA_SIZE].try_into().unwrap(),\n            &queue_data[QUEUE_DATA_SIZE..QUEUE_DATA_SIZE * 2]\n                .try_into()\n                .unwrap(),\n        ],\n        BASE_VIRT_QUEUE_ADDR,\n    );\n    let mem = GuestMemoryMmap::from_ranges(&[\n        (GuestAddress(0), MEM_SIZE),\n        (GuestAddress(BASE_VIRT_QUEUE_ADDR), queue_bytes.len()),\n    ])\n    .unwrap();\n    if mem\n        .write_slice(queue_bytes, GuestAddress(BASE_VIRT_QUEUE_ADDR))\n        .is_err()\n    {\n        return;\n    }\n    if mem.write_slice(mem_bytes, GuestAddress(0 as u64)).is_err() {\n        return;\n    }\n    let guest_memory = GuestMemoryAtomic::new(mem);\n    let input_queue = queues.remove(0);\n    let input_evt = EventFd::new(0).unwrap();\n    let input_queue_evt = unsafe { EventFd::from_raw_fd(libc::dup(input_evt.as_raw_fd())) };\n    let output_queue = queues.remove(0);\n    let output_evt = EventFd::new(0).unwrap();\n    let output_queue_evt = unsafe { EventFd::from_raw_fd(libc::dup(output_evt.as_raw_fd())) };\n    input_queue_evt.write(1).unwrap();\n    output_queue_evt.write(1).unwrap();\n    pipe_tx.write_all(console_input_bytes).unwrap();\n    console\n        .activate(\n            guest_memory,\n            Arc::new(NoopVirtioInterrupt {}),\n            vec![(0, input_queue, input_evt), (1, output_queue, output_evt)],\n        )\n        .unwrap();\n    console.wait_for_epoll_threads();\n}"}
{"test_id": "winnow-rs-winnow/winnow-rs-winnow-9e88734/tests-gen/fuzz_arithmetic.inputs.rs::test_53", "code": "fn factor(i: &mut &str) -> PResult<Expr> {\n    delimited(\n        multispaces,\n        alt((digits.try_map(FromStr::from_str).map(Expr::Value), parens)),\n        multispaces,\n    )\n    .parse_next(i)\n}", "test": "fn test_53() {\n    let data = [35, 0, 10];\n    reset();\n    let _ = match str::from_utf8(data) {\n        Ok(mut v) => factor(&mut v),\n        Err(_) => factor(&mut \"2\"),\n    };\n}"}
{"test_id": "bodil-im-rs/bodil-im-rs-2afaf54/tests-gen/hashset.inputs.rs::test_66", "code": "pub fn remove<BA>(&mut self, a: &BA) -> Option<A>\n    where\n        BA: Hash + Eq + ?Sized,\n        A: Borrow<BA>,\n    {\n        let root = PoolRef::make_mut(&self.pool.0, &mut self.root);\n        let result = root.remove(&self.pool.0, hash_key(&*self.hasher, a), 0, a);\n        if result.is_some() {\n            self.size -= 1;\n        }\n        result.map(|v| v.0)\n    }", "test": "fn test_66() {\n    let actions = [Remove(71911247321563391)];\n    let mut set = HashSet::new();\n    let mut nat = NatSet::new();\n    for action in actions {\n        match action {\n            Action::Insert(value) => {\n                let len = nat.len() + if nat.contains(&value) { 0 } else { 1 };\n                nat.insert(value);\n                set.insert(value);\n                assert_eq!(len, set.len());\n            }\n            Action::Remove(value) => {\n                let len = nat.len() - if nat.contains(&value) { 1 } else { 0 };\n                nat.remove(&value);\n                set.remove(&value);\n                assert_eq!(len, set.len());\n            }\n        }\n        assert_eq!(nat.len(), set.len());\n        assert_eq!(HashSet::from(nat.clone()), set);\n    }\n}"}
{"test_id": "image-rs-image/image-rs-image-e5580ec/tests-gen/fuzzer_script_tga.inputs.rs::test_77", "code": "fn decode(encoded: &[u8]) -> Vec<u8> {\n        let decoder = JpegDecoder::new(Cursor::new(encoded)).expect(\"Could not decode image\");\n\n        let mut decoded = vec![0; decoder.total_bytes() as usize];\n        decoder\n            .read_image(&mut decoded)\n            .expect(\"Could not decode image\");\n        decoded\n    }", "test": "fn test_77() {\n    let data = [11, 49];\n    let _ = decode(data);\n}"}
{"test_id": "dtolnay-semver/dtolnay-semver-750f0ac/tests-gen/sort_version.inputs.rs::test_95", "code": "fn three_versions(bytes: &[u8]) -> Option<[Version; 3]> {\n    let mut inputs = str::from_utf8(bytes).ok()?.split(' ');\n    Some([\n        Version {\n            major: 0,\n            minor: 0,\n            patch: 0,\n            pre: inputs.next().map(Prerelease::new)?.ok()?,\n            build: inputs.next().map(BuildMetadata::new)?.ok()?,\n        },\n        Version {\n            major: 0,\n            minor: 0,\n            patch: 0,\n            pre: inputs.next().map(Prerelease::new)?.ok()?,\n            build: inputs.next().map(BuildMetadata::new)?.ok()?,\n        },\n        Version {\n            major: 0,\n            minor: 0,\n            patch: 0,\n            pre: inputs.next().map(Prerelease::new)?.ok()?,\n            build: inputs.next().map(BuildMetadata::new)?.ok()?,\n        },\n    ])\n}", "test": "fn test_95() {\n    let bytes = [185, 0];\n    if let Some([a, b, c]) = three_versions(bytes) {\n        if a < b && b < c && c < a {\n            panic!(\"{0} < {1} < {2} < {0}\", a, b, c);\n        }\n    }\n}"}
{"test_id": "cloud-hypervisor-cloud-hypervisor/cloud-hypervisor-cloud-hypervisor-db3a5f3/tests-gen/balloon.inputs.rs::test_11", "code": "pub fn wait_for_epoll_threads(&mut self) {\n        self.common.wait_for_epoll_threads();\n    }", "test": "fn test_11() {\n    let bytes = [50, 10];\n    if bytes.len() < QUEUE_DATA_SIZE * QUEUE_NUM\n        || bytes.len() > (QUEUE_DATA_SIZE * QUEUE_NUM + MEM_SIZE)\n    {\n        return;\n    }\n    let mut balloon = virtio_devices::Balloon::new(\n        \"fuzzer_balloon\".to_owned(),\n        BALLOON_SIZE,\n        true,\n        true,\n        SeccompAction::Allow,\n        EventFd::new(EFD_NONBLOCK).unwrap(),\n        None,\n    )\n    .unwrap();\n    let queue_data = &bytes[..QUEUE_DATA_SIZE * QUEUE_NUM];\n    let mem_bytes = &bytes[QUEUE_DATA_SIZE * QUEUE_NUM..];\n    let mem = GuestMemoryMmap::from_ranges(&[(GuestAddress(0), MEM_SIZE)]).unwrap();\n    if mem.write_slice(mem_bytes, GuestAddress(0 as u64)).is_err() {\n        return;\n    }\n    let guest_memory = GuestMemoryAtomic::new(mem);\n    let mut queues = setup_virt_queues(\n        &[\n            &queue_data[..QUEUE_DATA_SIZE].try_into().unwrap(),\n            &queue_data[QUEUE_DATA_SIZE..QUEUE_DATA_SIZE * 2]\n                .try_into()\n                .unwrap(),\n            &queue_data[QUEUE_DATA_SIZE * 2..QUEUE_DATA_SIZE * 3]\n                .try_into()\n                .unwrap(),\n        ],\n        0,\n    );\n    let inflate_q = queues.remove(0);\n    let inflate_evt = EventFd::new(0).unwrap();\n    let inflate_queue_evt = unsafe { EventFd::from_raw_fd(libc::dup(inflate_evt.as_raw_fd())) };\n    let deflate_q = queues.remove(0);\n    let deflate_evt = EventFd::new(0).unwrap();\n    let deflate_queue_evt = unsafe { EventFd::from_raw_fd(libc::dup(deflate_evt.as_raw_fd())) };\n    let reporting_q = queues.remove(0);\n    let reporting_evt = EventFd::new(0).unwrap();\n    let reporting_queue_evt = unsafe { EventFd::from_raw_fd(libc::dup(reporting_evt.as_raw_fd())) };\n    inflate_queue_evt.write(1).unwrap();\n    deflate_queue_evt.write(1).unwrap();\n    reporting_queue_evt.write(1).unwrap();\n    balloon\n        .activate(\n            guest_memory,\n            Arc::new(NoopVirtioInterrupt {}),\n            vec![\n                (0, inflate_q, inflate_evt),\n                (1, deflate_q, deflate_evt),\n                (2, reporting_q, reporting_evt),\n            ],\n        )\n        .ok();\n    balloon.wait_for_epoll_threads();\n}"}
{"test_id": "bodil-im-rs/bodil-im-rs-2afaf54/tests-gen/ordset.inputs.rs::test_39", "code": "pub fn remove<BA>(&mut self, a: &BA) -> Option<A>\n    where\n        BA: Hash + Eq + ?Sized,\n        A: Borrow<BA>,\n    {\n        let root = PoolRef::make_mut(&self.pool.0, &mut self.root);\n        let result = root.remove(&self.pool.0, hash_key(&*self.hasher, a), 0, a);\n        if result.is_some() {\n            self.size -= 1;\n        }\n        result.map(|v| v.0)\n    }", "test": "fn test_39() {\n    let actions = [Remove(720588035007184836)];\n    let mut set = OrdSet::new();\n    let mut nat = NatSet::new();\n    for action in actions {\n        match action {\n            Action::Insert(value) => {\n                let len = nat.len() + if nat.contains(&value) { 0 } else { 1 };\n                nat.insert(value);\n                set.insert(value);\n                assert_eq!(len, set.len());\n            }\n            Action::Remove(value) => {\n                let len = nat.len() - if nat.contains(&value) { 1 } else { 0 };\n                nat.remove(&value);\n                set.remove(&value);\n                assert_eq!(len, set.len());\n            }\n        }\n        assert_eq!(nat.len(), set.len());\n        assert_eq!(OrdSet::from(nat.clone()), set);\n    }\n}"}
{"test_id": "image-rs-image/image-rs-image-e5580ec/tests-gen/fuzzer_script_exr.inputs.rs::test_96", "code": "fn roundtrip (bytes : & [u8]) -> ImageResult < () > { # [doc = \" Read the file from the specified path into an `Rgba32FImage`.\"] fn read_as_rgba_byte_image (read : impl Read + Seek) -> ImageResult < (u32 , u32 , Vec < u8 >) > { let mut decoder = OpenExrDecoder :: with_alpha_preference (read , Some (true)) ? ; match usize :: try_from (decoder . total_bytes ()) { Ok (decoded_size) if decoded_size <= 256 * 1024 * 1024 => { decoder . set_limits (Limits :: default ()) ? ; let (width , height) = decoder . dimensions () ; let mut buffer = vec ! [0 ; decoded_size] ; decoder . read_image (buffer . as_mut_slice ()) ? ; Ok ((width , height , buffer)) } _ => Err (image :: ImageError :: Limits (image :: error :: LimitError :: from_kind (image :: error :: LimitErrorKind :: InsufficientMemory ,) ,)) , } } # [doc = \" Write an `Rgba32FImage`.\"] # [doc = \" Assumes the writer is buffered. In most cases,\"] # [doc = \" you should wrap your writer in a `BufWriter` for best performance.\"] fn write_rgba_image (write : impl Write + Seek , (width , height , data) : & (u32 , u32 , Vec < u8 >) ,) -> ImageResult < () > { OpenExrEncoder :: new (write) . write_image (data . as_slice () , * width , * height , ColorType :: Rgba32F) } let decoded_image = read_as_rgba_byte_image (Cursor :: new (bytes)) ? ; let mut bytes = Vec :: with_capacity (bytes . len () + 20) ; write_rgba_image (Cursor :: new (& mut bytes) , & decoded_image) ? ; let redecoded_image = read_as_rgba_byte_image (Cursor :: new (bytes)) ? ; assert_eq ! (decoded_image , redecoded_image , \"image was valid but was not reproducible\") ; Ok (()) }", "test": "fn test_96() {\n    let data = [4, 0, 39, 63];\n    let _img = roundtrip(data);\n}"}
{"test_id": "cloud-hypervisor-cloud-hypervisor/cloud-hypervisor-cloud-hypervisor-db3a5f3/tests-gen/balloon.inputs.rs::test_5", "code": "pub fn wait_for_epoll_threads(&mut self) {\n        self.common.wait_for_epoll_threads();\n    }", "test": "fn test_5() {\n    let bytes = [11, 8, 153];\n    if bytes.len() < QUEUE_DATA_SIZE * QUEUE_NUM\n        || bytes.len() > (QUEUE_DATA_SIZE * QUEUE_NUM + MEM_SIZE)\n    {\n        return;\n    }\n    let mut balloon = virtio_devices::Balloon::new(\n        \"fuzzer_balloon\".to_owned(),\n        BALLOON_SIZE,\n        true,\n        true,\n        SeccompAction::Allow,\n        EventFd::new(EFD_NONBLOCK).unwrap(),\n        None,\n    )\n    .unwrap();\n    let queue_data = &bytes[..QUEUE_DATA_SIZE * QUEUE_NUM];\n    let mem_bytes = &bytes[QUEUE_DATA_SIZE * QUEUE_NUM..];\n    let mem = GuestMemoryMmap::from_ranges(&[(GuestAddress(0), MEM_SIZE)]).unwrap();\n    if mem.write_slice(mem_bytes, GuestAddress(0 as u64)).is_err() {\n        return;\n    }\n    let guest_memory = GuestMemoryAtomic::new(mem);\n    let mut queues = setup_virt_queues(\n        &[\n            &queue_data[..QUEUE_DATA_SIZE].try_into().unwrap(),\n            &queue_data[QUEUE_DATA_SIZE..QUEUE_DATA_SIZE * 2]\n                .try_into()\n                .unwrap(),\n            &queue_data[QUEUE_DATA_SIZE * 2..QUEUE_DATA_SIZE * 3]\n                .try_into()\n                .unwrap(),\n        ],\n        0,\n    );\n    let inflate_q = queues.remove(0);\n    let inflate_evt = EventFd::new(0).unwrap();\n    let inflate_queue_evt = unsafe { EventFd::from_raw_fd(libc::dup(inflate_evt.as_raw_fd())) };\n    let deflate_q = queues.remove(0);\n    let deflate_evt = EventFd::new(0).unwrap();\n    let deflate_queue_evt = unsafe { EventFd::from_raw_fd(libc::dup(deflate_evt.as_raw_fd())) };\n    let reporting_q = queues.remove(0);\n    let reporting_evt = EventFd::new(0).unwrap();\n    let reporting_queue_evt = unsafe { EventFd::from_raw_fd(libc::dup(reporting_evt.as_raw_fd())) };\n    inflate_queue_evt.write(1).unwrap();\n    deflate_queue_evt.write(1).unwrap();\n    reporting_queue_evt.write(1).unwrap();\n    balloon\n        .activate(\n            guest_memory,\n            Arc::new(NoopVirtioInterrupt {}),\n            vec![\n                (0, inflate_q, inflate_evt),\n                (1, deflate_q, deflate_evt),\n                (2, reporting_q, reporting_evt),\n            ],\n        )\n        .ok();\n    balloon.wait_for_epoll_threads();\n}"}
{"test_id": "image-rs-image-png/image-rs-image-png-e113d76/tests-gen/decode.inputs.rs::test_20", "code": "fn png_decode (data : & [u8]) -> Result < (Option < png :: OutputInfo > , Vec < u8 >) , () > { let limits = png :: Limits { bytes : 1 << 16 } ; let decoder = png :: Decoder :: new_with_limits (data , limits) ; let mut reader = decoder . read_info () . map_err (| _ | ()) ? ; if reader . info () . raw_bytes () > 5_000_000 { return Err (()) ; } let mut img_data = vec ! [0u8 ; reader . info () . raw_bytes ()] ; let mut last_info = None ; while let Ok (info) = reader . next_frame (& mut img_data) { last_info = Some (info) ; } Ok ((last_info , img_data)) }", "test": "fn test_20() {\n    let data = [\n        137, 80, 78, 71, 13, 10, 26, 10, 0, 0, 0, 8, 73, 72, 68, 82, 0, 7, 0, 0, 114, 80, 0, 0, 0,\n    ];\n    let _ = png_decode(&data);\n}"}
{"test_id": "rustls-rustls/rustls-rustls-ae583bd/tests-gen/client.inputs.rs::test_64", "code": "pub fn process_new_packets(&mut self) -> Result<IoState, Error> {\n        match self {\n            Self::Client(conn) => conn.process_new_packets(),\n            Self::Server(conn) => conn.process_new_packets(),\n        }\n    }", "test": "fn test_64() {\n    let data = [\n        22, 3, 3, 0, 63, 2, 0, 0, 59, 3, 3, 89, 16, 236, 200, 17, 90, 14, 121, 52, 150, 218, 66,\n        28, 227, 55, 237, 109, 95, 209, 111, 252, 56, 238, 6, 251, 154, 147, 123, 211, 206, 186,\n        114, 0, 204, 169, 0, 0, 19, 255, 1, 0, 1, 0, 0, 23, 0, 0, 0, 35, 0, 0, 0, 11, 0, 2, 1, 0,\n        22, 3, 3, 14, 229, 11, 0, 14, 225, 0, 14, 222, 0, 7, 96, 48, 130, 7, 92, 48, 130, 6, 68,\n        160, 3, 2, 1, 2, 2, 8, 83, 65, 61, 145, 120, 210, 140, 39, 48, 13, 6, 9, 42, 134, 72, 134,\n        247, 13, 1, 1, 11, 5, 0, 48, 73, 49, 11, 48, 9, 6, 3, 85, 4, 6, 19, 2, 85, 83, 49, 19, 48,\n        17, 6, 3, 85, 4, 10, 19, 10, 71, 111, 111, 103, 108, 101, 32, 73, 110, 99, 49, 37, 48, 35,\n        6, 3, 85, 4, 3, 19, 28, 71, 111, 111, 103, 108, 101, 32, 73, 110, 116, 101, 114, 110, 101,\n        116, 32, 65, 117, 116, 104, 111, 114, 105, 116, 121, 32, 71, 50, 48, 30, 23, 13, 49, 55,\n        48, 52, 50, 55, 48, 56, 51, 48, 48, 48, 90, 23, 13, 49, 55, 48, 55, 50, 48, 48, 56, 51, 48,\n        48, 48, 90, 48, 102, 49, 11, 48, 9, 6, 3, 85, 4, 6, 19, 2, 85, 83, 49, 19, 48, 17, 6, 3,\n        85, 4, 8, 12, 10, 67, 97, 108, 105, 102, 111, 114, 110, 105, 97, 49, 22, 48, 20, 6, 3, 85,\n        4, 7, 12, 13, 77, 111, 117, 110, 116, 97, 105, 110, 32, 86, 105, 101, 119, 49, 19, 48, 17,\n        6, 3, 85, 4, 10, 12, 10, 71, 111, 111, 103, 108, 101, 32, 73, 110, 99, 49, 21, 48, 19, 6,\n        3, 85, 4, 3, 12, 12, 42, 46, 103, 111, 111, 103, 108, 101, 46, 99, 111, 109, 48, 89, 48,\n        19, 6, 7, 42, 134, 72, 206, 61, 2, 1, 6, 8, 42, 134, 72, 206, 61, 3, 1, 7, 3, 66, 0, 4,\n        189, 77, 48, 133, 70, 173, 158, 211, 104, 157, 203, 90, 81, 210, 82, 202, 205, 147, 209,\n        252, 62, 33, 220, 191, 25, 45, 49, 119, 71, 86, 34, 248, 128, 116, 164, 199, 172, 91, 179,\n        223, 239, 76, 76, 63, 25, 69, 53, 53, 110, 197, 165, 220, 25, 210, 237, 147, 30, 18, 131,\n        158, 196, 86, 94, 111, 163, 130, 4, 244, 48, 130, 4, 240, 48, 29, 6, 3, 85, 29, 37, 4, 22,\n        48, 20, 6, 8, 43, 6, 1, 5, 5, 7, 3, 1, 6, 8, 43, 6, 1, 5, 5, 7, 3, 2, 48, 11, 6, 3, 85, 29,\n        15, 4, 4, 3, 2, 7, 128, 48, 130, 3, 179, 6, 3, 85, 29, 17, 4, 130, 3, 170, 48, 130, 3, 166,\n        130, 12, 42, 46, 103, 111, 111, 103, 108, 101, 46, 99, 111, 109, 130, 13, 42, 46, 97, 110,\n        100, 114, 111, 105, 100, 46, 99, 111, 109, 130, 22, 42, 46, 97, 112, 112, 101, 110, 103,\n        105, 110, 101, 46, 103, 111, 111, 103, 108, 101, 46, 99, 111, 109, 130, 18, 42, 46, 99,\n        108, 111, 117, 100, 46, 103, 111, 111, 103, 108, 101, 46, 99, 111, 109, 130, 14, 42, 46,\n        103, 99, 112, 46, 103, 118, 116, 50, 46, 99, 111, 109, 130, 22, 42, 46, 103, 111, 111, 103,\n        108, 101, 45, 97, 110, 97, 108, 121, 116, 105, 99, 115, 46, 99, 111, 109, 130, 11, 42, 46,\n        103, 111, 111, 103, 108, 101, 46, 99, 97, 130, 11, 42, 46, 103, 111, 111, 103, 108, 101,\n        46, 99, 108, 130, 14, 42, 46, 103, 111, 111, 103, 108, 101, 46, 99, 111, 46, 105, 110, 130,\n        14, 42, 46, 103, 111, 111, 103, 108, 101, 46, 99, 111, 46, 106, 112, 130, 14, 42, 46, 103,\n        111, 111, 103, 108, 101, 46, 99, 111, 46, 117, 107, 130, 15, 42, 46, 103, 111, 111, 103,\n        108, 101, 46, 99, 111, 109, 46, 97, 114, 130, 15, 42, 46, 103, 111, 111, 103, 108, 101, 46,\n        99, 111, 109, 46, 97, 117, 130, 15, 42, 46, 103, 111, 111, 103, 108, 101, 46, 99, 111, 109,\n        46, 98, 114, 130, 15, 42, 46, 103, 111, 111, 103, 108, 101, 46, 99, 111, 109, 46, 99, 111,\n        130, 15, 42, 46, 103, 111, 111, 103, 108, 101, 46, 99, 111, 109, 46, 109, 120, 130, 15, 42,\n        46, 103, 111, 111, 103, 108, 101, 46, 99, 111, 109, 46, 116, 114, 130, 15, 42, 46, 103,\n        111, 111, 103, 108, 101, 46, 99, 111, 109, 46, 118, 110, 130, 11, 42, 46, 103, 111, 111,\n        103, 108, 101, 46, 100, 101, 130, 11, 42, 46, 103, 111, 111, 103, 108, 101, 46, 101, 115,\n        130, 11, 42, 46, 103, 111, 111, 103, 108, 101, 46, 102, 114, 130, 11, 42, 46, 103, 111,\n        111, 103, 108, 101, 46, 104, 117, 130, 11, 42, 46, 103, 111, 111, 103, 108, 101, 46, 105,\n        116, 130, 11, 42, 46, 103, 111, 111, 103, 108, 101, 46, 110, 108, 130, 11, 42, 46, 103,\n        111, 111, 103, 108, 101, 46, 112, 108, 130, 11, 42, 46, 103, 111, 111, 103, 108, 101, 46,\n        112, 116, 130, 18, 42, 46, 103, 111, 111, 103, 108, 101, 97, 100, 97, 112, 105, 115, 46,\n        99, 111, 109, 130, 15, 42, 46, 103, 111, 111, 103, 108, 101, 97, 112, 105, 115, 46, 99,\n        110, 130, 20, 42, 46, 103, 111, 111, 103, 108, 101, 99, 111, 109, 109, 101, 114, 99, 101,\n        46, 99, 111, 109, 130, 17, 42, 46, 103, 111, 111, 103, 108, 101, 118, 105, 100, 101, 111,\n        46, 99, 111, 109, 130, 12, 42, 46, 103, 115, 116, 97, 116, 105, 99, 46, 99, 110, 130, 13,\n        42, 46, 103, 115, 116, 97, 116, 105, 99, 46, 99, 111, 109, 130, 10, 42, 46, 103, 118, 116,\n        49, 46, 99, 111, 109, 130, 10, 42, 46, 103, 118, 116, 50, 46, 99, 111, 109, 130, 20, 42,\n        46, 109, 101, 116, 114, 105, 99, 46, 103, 115, 116, 97, 116, 105, 99, 46, 99, 111, 109,\n        130, 12, 42, 46, 117, 114, 99, 104, 105, 110, 46, 99, 111, 109, 130, 16, 42, 46, 117, 114,\n        108, 46, 103, 111, 111, 103, 108, 101, 46, 99, 111, 109, 130, 22, 42, 46, 121, 111, 117,\n        116, 117, 98, 101, 45, 110, 111, 99, 111, 111, 107, 105, 101, 46, 99, 111, 109, 130, 13,\n        42, 46, 121, 111, 117, 116, 117, 98, 101, 46, 99, 111, 109, 130, 22, 42, 46, 121, 111, 117,\n        116, 117, 98, 101, 101, 100, 117, 99, 97, 116, 105, 111, 110, 46, 99, 111, 109, 130, 11,\n        42, 46, 121, 116, 105, 109, 103, 46, 99, 111, 109, 130, 26, 97, 110, 100, 114, 111, 105,\n        100, 46, 99, 108, 105, 101, 110, 116, 115, 46, 103, 111, 111, 103, 108, 101, 46, 99, 111,\n        109, 130, 11, 97, 110, 100, 114, 111, 105, 100, 46, 99, 111, 109, 130, 27, 100, 101, 118,\n        101, 108, 111, 112, 101, 114, 46, 97, 110, 100, 114, 111, 105, 100, 46, 103, 111, 111, 103,\n        108, 101, 46, 99, 110, 130, 28, 100, 101, 118, 101, 108, 111, 112, 101, 114, 115, 46, 97,\n        110, 100, 114, 111, 105, 100, 46, 103, 111, 111, 103, 108, 101, 46, 99, 110, 130, 4, 103,\n        46, 99, 111, 130, 6, 103, 111, 111, 46, 103, 108, 130, 20, 103, 111, 111, 103, 108, 101,\n        45, 97, 110, 97, 108, 121, 116, 105, 99, 115, 46, 99, 111, 109, 130, 10, 103, 111, 111,\n        103, 108, 101, 46, 99, 111, 109, 130, 18, 103, 111, 111, 103, 108, 101, 99, 111, 109, 109,\n        101, 114, 99, 101, 46, 99, 111, 109, 130, 24, 115, 111, 117, 114, 99, 101, 46, 97, 110,\n        100, 114, 111, 105, 100, 46, 103, 111, 111, 103, 108, 101, 46, 99, 110, 130, 10, 117, 114,\n        99, 104, 105, 110, 46, 99, 111, 109, 130, 10, 119, 119, 119, 46, 103, 111, 111, 46, 103,\n        108, 130, 8, 121, 111, 117, 116, 117, 46, 98, 101, 130, 11, 121, 111, 117, 116, 117, 98,\n        101, 46, 99, 111, 109, 130, 20, 121, 111, 117, 116, 117, 98, 101, 101, 100, 117, 99, 97,\n        116, 105, 111, 110, 46, 99, 111, 109, 48, 104, 6, 8, 43, 6, 1, 5, 5, 7, 1, 1, 4, 92, 48,\n        90, 48, 43, 6, 8, 43, 6, 1, 5, 5, 7, 48, 2, 134, 31, 104, 116, 116, 112, 58, 47, 47, 112,\n        107, 105, 46, 103, 111, 111, 103, 108, 101, 46, 99, 111, 109, 47, 71, 73, 65, 71, 50, 46,\n        99, 114, 116, 48, 43, 6, 8, 43, 6, 1, 5, 5, 7, 48, 1, 134, 31, 104, 116, 116, 112, 58, 47,\n        47, 99, 108, 105, 101, 110, 116, 115, 49, 46, 103, 111, 111, 103, 108, 101, 46, 99, 111,\n        109, 47, 111, 99, 115, 112, 48, 29, 6, 3, 85, 29, 14, 4, 22, 4, 20, 253, 90, 18, 128, 11,\n        205, 4, 95, 242, 77, 89, 40, 3, 112, 35, 87, 25, 64, 248, 55, 48, 12, 6, 3, 85, 29, 19, 1,\n        1, 255, 4, 2, 48, 0, 48, 31, 6, 3, 85, 29, 35, 4, 24, 48, 22, 128, 20, 74, 221, 6, 22, 27,\n        188, 246, 104, 181, 118, 245, 129, 182, 187, 98, 26, 186, 90, 129, 47, 48, 33, 6, 3, 85,\n        29, 32, 4, 26, 48, 24, 48, 12, 6, 10, 43, 6, 1, 4, 1, 214, 121, 2, 5, 1, 48, 8, 6, 6, 103,\n        129, 12, 1, 2, 2, 48, 48, 6, 3, 85, 29, 31, 4, 41, 48, 39, 48, 37, 160, 35, 160, 33, 134,\n        31, 104, 116, 116, 112, 58, 47, 47, 112, 107, 105, 46, 103, 111, 111, 103, 108, 101, 46,\n        99, 111, 109, 47, 71, 73, 65, 71, 50, 46, 99, 114, 108, 48, 13, 6, 9, 42, 134, 72, 134,\n        247, 13, 1, 1, 11, 5, 0, 3, 130, 1, 1, 0, 33, 200, 169, 105, 206, 2, 155, 120, 189, 192,\n        51, 58, 117, 81, 58, 119, 84, 168, 232, 112, 67, 74, 178, 108, 140, 239, 140, 58, 241, 118,\n        5, 87, 151, 75, 62, 228, 100, 79, 253, 168, 208, 39, 111, 248, 15, 136, 208, 240, 106, 77,\n        117, 121, 178, 58, 88, 245, 179, 162, 251, 10, 71, 202, 197, 70, 144, 133, 162, 197, 128,\n        57, 111, 180, 163, 6, 63, 152, 48, 225, 133, 207, 156, 142, 147, 155, 164, 234, 150, 95,\n        194, 204, 36, 174, 11, 81, 8, 107, 127, 181, 132, 216, 230, 232, 29, 152, 1, 46, 152, 162,\n        185, 105, 229, 136, 245, 133, 63, 134, 92, 242, 217, 7, 26, 64, 132, 248, 126, 187, 114,\n        56, 192, 240, 70, 213, 140, 90, 19, 23, 33, 155, 220, 79, 93, 249, 252, 184, 190, 60, 45,\n        123, 246, 182, 204, 232, 45, 111, 214, 187, 247, 195, 215, 60, 88, 120, 12, 241, 0, 54,\n        189, 184, 200, 138, 56, 58, 15, 211, 62, 239, 220, 24, 224, 142, 159, 199, 102, 126, 9,\n        199, 212, 60, 163, 123, 195, 235, 239, 210, 8, 24, 172, 63, 119, 216, 233, 1, 8, 101, 21,\n        150, 10, 75, 36, 243, 45, 241, 243, 191, 254, 221, 133, 11, 136, 82, 64, 50, 222, 221, 48,\n        184, 48, 183, 155, 228, 204, 32, 177, 209, 139, 86, 15, 190, 118, 233, 91, 146, 124, 132,\n        218, 50, 73, 110, 152, 63, 196, 8, 66, 19, 171, 62, 0, 3, 244, 48, 130, 3, 240, 48, 130, 2,\n        216, 160, 3, 2, 1, 2, 2, 3, 2, 58, 146, 48, 13, 6, 9, 42, 134, 72, 134, 247, 13, 1, 1, 11,\n        5, 0, 48, 66, 49, 11, 48, 9, 6, 3, 85, 4, 6, 19, 2, 85, 83, 49, 22, 48, 20, 6, 3, 85, 4,\n        10, 19, 13, 71, 101, 111, 84, 114, 117, 115, 116, 32, 73, 110, 99, 46, 49, 27, 48, 25, 6,\n        3, 85, 4, 3, 19, 18, 71, 101, 111, 84, 114, 117, 115, 116, 32, 71, 108, 111, 98, 97, 108,\n        32, 67, 65, 48, 30, 23, 13, 49, 53, 48, 52, 48, 49, 48, 48, 48, 48, 48, 48, 90, 23, 13, 49,\n        55, 49, 50, 51, 49, 50, 51, 53, 57, 53, 57, 90, 48, 73, 49, 11, 48, 9, 6, 3, 85, 4, 6, 19,\n        2, 85, 83, 49, 19, 48, 17, 6, 3, 85, 4, 10, 19, 10, 71, 111, 111, 103, 108, 101, 32, 73,\n        110, 99, 49, 37, 48, 35, 6, 3, 85, 4, 3, 19, 28, 71, 111, 111, 103, 108, 101, 32, 73, 110,\n        116, 101, 114, 110, 101, 116, 32, 65, 117, 116, 104, 111, 114, 105, 116, 121, 32, 71, 50,\n        48, 130, 1, 34, 48, 13, 6, 9, 42, 134, 72, 134, 247, 13, 1, 1, 1, 5, 0, 3, 130, 1, 15, 0,\n        48, 130, 1, 10, 2, 130, 1, 1, 0, 156, 42, 4, 119, 92, 216, 80, 145, 58, 6, 163, 130, 224,\n        216, 80, 72, 188, 137, 63, 241, 25, 112, 26, 136, 70, 126, 224, 143, 197, 241, 137, 206,\n        33, 238, 90, 254, 97, 13, 183, 50, 68, 137, 160, 116, 11, 83, 79, 85, 164, 206, 130, 98,\n        149, 238, 235, 89, 95, 198, 225, 5, 128, 18, 196, 94, 148, 63, 188, 91, 72, 56, 244, 83,\n        247, 36, 230, 251, 145, 233, 21, 196, 207, 244, 83, 13, 244, 74, 252, 159, 84, 222, 125,\n        190, 160, 107, 111, 135, 192, 208, 80, 31, 40, 48, 3, 64, 218, 8, 115, 81, 108, 127, 255,\n        58, 60, 167, 55, 6, 142, 189, 75, 17, 4, 235, 125, 36, 222, 230, 249, 252, 49, 113, 251,\n        148, 213, 96, 243, 46, 74, 175, 66, 210, 203, 234, 196, 106, 26, 178, 204, 83, 221, 21, 75,\n        139, 31, 200, 25, 97, 31, 205, 157, 168, 62, 99, 43, 132, 53, 105, 101, 132, 200, 25, 197,\n        70, 34, 248, 83, 149, 190, 227, 128, 74, 16, 198, 42, 236, 186, 151, 32, 17, 199, 57, 153,\n        16, 4, 160, 240, 97, 122, 149, 37, 140, 78, 82, 117, 226, 182, 237, 8, 202, 20, 252, 206,\n        34, 106, 179, 78, 207, 70, 3, 151, 151, 3, 126, 192, 177, 222, 123, 175, 69, 51, 207, 186,\n        62, 113, 183, 222, 244, 37, 37, 194, 13, 53, 137, 157, 157, 251, 14, 17, 121, 137, 30, 55,\n        197, 175, 142, 114, 105, 2, 3, 1, 0, 1, 163, 129, 231, 48, 129, 228, 48, 31, 6, 3, 85, 29,\n        35, 4, 24, 48, 22, 128, 20, 192, 122, 152, 104, 141, 137, 251, 171, 5, 100, 12, 17, 125,\n        170, 125, 101, 184, 202, 204, 78, 48, 29, 6, 3, 85, 29, 14, 4, 22, 4, 20, 74, 221, 6, 22,\n        27, 188, 246, 104, 181, 118, 245, 129, 182, 187, 98, 26, 186, 90, 129, 47, 48, 14, 6, 3,\n        85, 29, 15, 1, 1, 255, 4, 4, 3, 2, 1, 6, 48, 46, 6, 8, 43, 6, 1, 5, 5, 7, 1, 1, 4, 34, 48,\n        32, 48, 30, 6, 8, 43, 6, 1, 5, 5, 7, 48, 1, 134, 18, 104, 116, 116, 112, 58, 47, 47, 103,\n        46, 115, 121, 109, 99, 100, 46, 99, 111, 109, 48, 18, 6, 3, 85, 29, 19, 1, 1, 255, 4, 8,\n        48, 6, 1, 1, 255, 2, 1, 0, 48, 53, 6, 3, 85, 29, 31, 4, 46, 48, 44, 48, 42, 160, 40, 160,\n        38, 134, 36, 104, 116, 116, 112, 58, 47, 47, 103, 46, 115, 121, 109, 99, 98, 46, 99, 111,\n        109, 47, 99, 114, 108, 115, 47, 103, 116, 103, 108, 111, 98, 97, 108, 46, 99, 114, 108, 48,\n        23, 6, 3, 85, 29, 32, 4, 16, 48, 14, 48, 12, 6, 10, 43, 6, 1, 4, 1, 214, 121, 2, 5, 1, 48,\n        13, 6, 9, 42, 134, 72, 134, 247, 13, 1, 1, 11, 5, 0, 3, 130, 1, 1, 0, 8, 78, 4, 167, 128,\n        127, 16, 22, 67, 94, 2, 173, 215, 66, 128, 244, 176, 142, 210, 174, 179, 235, 17, 125, 144,\n        132, 24, 125, 231, 144, 21, 251, 73, 127, 168, 153, 5, 145, 187, 122, 201, 214, 60, 55, 24,\n        9, 154, 182, 199, 146, 32, 7, 53, 51, 9, 228, 40, 99, 114, 13, 180, 224, 50, 156, 135, 152,\n        196, 27, 118, 137, 103, 193, 80, 88, 176, 19, 170, 19, 26, 27, 50, 165, 190, 234, 17, 149,\n        76, 72, 99, 73, 233, 153, 93, 32, 55, 204, 254, 42, 105, 81, 22, 149, 75, 169, 222, 73,\n        130, 192, 16, 112, 244, 44, 243, 236, 188, 36, 36, 208, 78, 172, 165, 217, 94, 30, 109,\n        146, 193, 167, 172, 72, 53, 129, 249, 229, 228, 156, 101, 105, 205, 135, 164, 65, 80, 63,\n        46, 87, 165, 145, 81, 18, 88, 14, 140, 9, 161, 172, 122, 164, 18, 165, 39, 243, 154, 16,\n        151, 125, 85, 3, 6, 247, 102, 88, 95, 95, 100, 225, 171, 93, 109, 165, 57, 72, 117, 152,\n        76, 41, 90, 58, 141, 211, 43, 202, 156, 85, 4, 191, 244, 230, 20, 213, 128, 172, 38, 237,\n        23, 137, 166, 147, 108, 92, 164, 204, 184, 240, 102, 142, 100, 227, 125, 154, 226, 0, 179,\n        73, 199, 228, 10, 170, 221, 91, 131, 199, 112, 144, 70, 78, 190, 208, 219, 89, 150, 108,\n        46, 245, 22, 54, 222, 113, 204, 1, 194, 18, 193, 33, 198, 22, 0, 3, 129, 48, 130, 3, 125,\n        48, 130, 2, 230, 160, 3, 2, 1, 2, 2, 3, 18, 187, 230, 48, 13, 6, 9, 42, 134, 72, 134, 247,\n        13, 1, 1, 5, 5, 0, 48, 78, 49, 11, 48, 9, 6, 3, 85, 4, 6, 19, 2, 85, 83, 49, 16, 48, 14, 6,\n        3, 85, 4, 10, 19, 7, 69, 113, 117, 105, 102, 97, 120, 49, 45, 48, 43, 6, 3, 85, 4, 11, 19,\n        36, 69, 113, 117, 105, 102, 97, 120, 32, 83, 101, 99, 117, 114, 101, 32, 67, 101, 114, 116,\n        105, 102, 105, 99, 97, 116, 101, 32, 65, 117, 116, 104, 111, 114, 105, 116, 121, 48, 30,\n        23, 13, 48, 50, 48, 53, 50, 49, 48, 52, 48, 48, 48, 48, 90, 23, 13, 49, 56, 48, 56, 50, 49,\n        48, 52, 48, 48, 48, 48, 90, 48, 66, 49, 11, 48, 9, 6, 3, 85, 4, 6, 19, 2, 85, 83, 49, 22,\n        48, 20, 6, 3, 85, 4, 10, 19, 13, 71, 101, 111, 84, 114, 117, 115, 116, 32, 73, 110, 99, 46,\n        49, 27, 48, 25, 6, 3, 85, 4, 3, 19, 18, 71, 101, 111, 84, 114, 117, 115, 116, 32, 71, 108,\n        111, 98, 97, 108, 32, 67, 65, 48, 130, 1, 34, 48, 13, 6, 9, 42, 134, 72, 134, 247, 13, 1,\n        1, 1, 5, 0, 3, 130, 1, 15, 0, 48, 130, 1, 10, 2, 130, 1, 1, 0, 218, 204, 24, 99, 48, 253,\n        244, 23, 35, 26, 86, 126, 91, 223, 60, 108, 56, 228, 113, 183, 120, 145, 212, 188, 161,\n        216, 76, 248, 168, 67, 182, 3, 233, 77, 33, 7, 8, 136, 218, 88, 47, 102, 57, 41, 189, 5,\n        120, 139, 157, 56, 232, 5, 183, 106, 126, 113, 164, 230, 196, 96, 166, 176, 239, 128, 228,\n        137, 40, 15, 158, 37, 214, 237, 131, 243, 173, 166, 145, 199, 152, 201, 66, 24, 53, 20,\n        157, 173, 152, 70, 146, 46, 79, 202, 241, 135, 67, 193, 22, 149, 87, 45, 80, 239, 137, 45,\n        128, 122, 87, 173, 242, 238, 95, 107, 210, 0, 141, 185, 20, 248, 20, 21, 53, 217, 192, 70,\n        163, 123, 114, 200, 145, 191, 201, 85, 43, 205, 208, 151, 62, 156, 38, 100, 204, 223, 206,\n        131, 25, 113, 202, 78, 230, 212, 213, 123, 169, 25, 205, 85, 222, 200, 236, 210, 94, 56,\n        83, 229, 92, 79, 140, 45, 254, 80, 35, 54, 252, 102, 230, 203, 142, 164, 57, 25, 0, 183,\n        149, 2, 57, 145, 11, 14, 254, 56, 46, 209, 29, 5, 154, 246, 77, 62, 111, 15, 7, 29, 175,\n        44, 30, 143, 96, 57, 226, 250, 54, 83, 19, 57, 212, 94, 38, 43, 219, 61, 168, 20, 189, 50,\n        235, 24, 3, 40, 82, 4, 113, 229, 171, 51, 61, 225, 56, 187, 7, 54, 132, 98, 156, 121, 234,\n        22, 48, 244, 95, 192, 43, 232, 113, 107, 228, 249, 2, 3, 1, 0, 1, 163, 129, 240, 48, 129,\n        237, 48, 31, 6, 3, 85, 29, 35, 4, 24, 48, 22, 128, 20, 72, 230, 104, 249, 43, 210, 178,\n        149, 215, 71, 216, 35, 32, 16, 79, 51, 152, 144, 159, 212, 48, 29, 6, 3, 85, 29, 14, 4, 22,\n        4, 20, 192, 122, 152, 104, 141, 137, 251, 171, 5, 100, 12, 17, 125, 170, 125, 101, 184,\n        202, 204, 78, 48, 15, 6, 3, 85, 29, 19, 1, 1, 255, 4, 5, 48, 3, 1, 1, 255, 48, 14, 6, 3,\n        85, 29, 15, 1, 1, 255, 4, 4, 3, 2, 1, 6, 48, 58, 6, 3, 85, 29, 31, 4, 51, 48, 49, 48, 47,\n        160, 45, 160, 43, 134, 41, 104, 116, 116, 112, 58, 47, 47, 99, 114, 108, 46, 103, 101, 111,\n        116, 114, 117, 115, 116, 46, 99, 111, 109, 47, 99, 114, 108, 115, 47, 115, 101, 99, 117,\n        114, 101, 99, 97, 46, 99, 114, 108, 48, 78, 6, 3, 85, 29, 32, 4, 71, 48, 69, 48, 67, 6, 4,\n        85, 29, 32, 0, 48, 59, 48, 57, 6, 8, 43, 6, 1, 5, 5, 7, 2, 1, 22, 45, 104, 116, 116, 112,\n        115, 58, 47, 47, 119, 119, 119, 46, 103, 101, 111, 116, 114, 117, 115, 116, 46, 99, 111,\n        109, 47, 114, 101, 115, 111, 117, 114, 99, 101, 115, 47, 114, 101, 112, 111, 115, 105, 116,\n        111, 114, 121, 48, 13, 6, 9, 42, 134, 72, 134, 247, 13, 1, 1, 5, 5, 0, 3, 129, 129, 0, 118,\n        225, 18, 110, 78, 75, 22, 18, 134, 48, 6, 178, 129, 8, 207, 240, 8, 199, 199, 113, 126,\n        102, 238, 194, 237, 212, 59, 31, 255, 240, 240, 200, 78, 214, 67, 56, 176, 185, 48, 125,\n        24, 208, 85, 131, 162, 106, 203, 54, 17, 156, 232, 72, 102, 163, 109, 127, 184, 19, 212,\n        71, 254, 139, 90, 92, 115, 252, 174, 217, 27, 50, 25, 56, 171, 151, 52, 20, 170, 150, 210,\n        235, 163, 28, 20, 8, 73, 182, 187, 229, 145, 239, 131, 54, 235, 29, 86, 111, 202, 218, 188,\n        115, 99, 144, 228, 127, 123, 62, 34, 203, 61, 7, 237, 95, 56, 116, 156, 227, 3, 80, 78,\n        161, 175, 152, 238, 97, 242, 132, 63, 18, 22, 3, 3, 0, 114, 12, 0, 0, 110, 3, 0, 29, 32,\n        75, 217, 44, 1, 117, 219, 122, 48, 71, 161, 89, 28, 185, 211, 203, 104, 197, 72, 172, 58,\n        227, 76, 100, 140, 23, 97, 211, 83, 70, 10, 176, 5, 4, 3, 0, 70, 48, 68, 2, 32, 118, 77,\n        25, 193, 184, 245, 209, 235, 233, 73, 206, 164, 213, 214, 217, 58, 189, 77, 153, 98, 68,\n        51, 73, 61, 86, 46, 224, 166, 129, 143, 233, 99, 2, 32, 124, 140, 108, 231, 222, 178, 70,\n        254, 130, 96, 249, 202, 22, 73, 30, 105, 180, 48, 177, 254, 92, 206, 16, 218, 0, 232, 189,\n        151, 157, 245, 39, 28, 22, 3, 3, 0, 4, 14, 0, 0, 0, 22, 3, 3, 0, 190, 4, 0, 0, 186, 0, 1,\n        137, 192, 0, 180, 20, 223, 122, 124, 254, 176, 24, 87, 129, 188, 25, 248, 233, 202, 114,\n        232, 117, 171, 162, 35, 223, 70, 217, 201, 60, 235, 114, 254, 181, 102, 199, 213, 157, 219,\n        90, 42, 235, 135, 84, 255, 194, 219, 249, 247, 214, 54, 54, 229, 79, 220, 3, 190, 161, 210,\n        47, 16, 37, 64, 211, 213, 90, 152, 193, 224, 185, 50, 214, 247, 202, 43, 114, 244, 225,\n        125, 149, 103, 150, 160, 133, 107, 60, 123, 80, 172, 188, 210, 189, 252, 195, 26, 25, 7,\n        251, 196, 130, 237, 57, 195, 62, 96, 219, 233, 108, 223, 21, 183, 44, 247, 233, 117, 14,\n        205, 189, 245, 126, 108, 249, 188, 52, 226, 115, 236, 151, 168, 171, 226, 99, 204, 123, 77,\n        237, 165, 38, 196, 158, 196, 163, 39, 31, 219, 195, 16, 152, 4, 135, 131, 197, 26, 192,\n        175, 73, 208, 102, 224, 50, 80, 230, 29, 5, 207, 178, 98, 39, 107, 230, 1, 197, 170, 5, 64,\n        181, 56, 55, 178, 122, 4, 178, 114, 110, 79, 20, 3, 3, 0, 1, 1, 22, 3, 3, 0, 32, 183, 30,\n        234, 49, 21, 153, 244, 50, 141, 222, 123, 52, 1, 109, 64, 238, 29, 191, 187, 51, 222, 29,\n        236, 211, 51, 142, 115, 248, 228, 41, 223, 232, 23, 3, 3, 5, 145, 183, 198, 127, 233, 133,\n        132, 204, 255, 193, 240, 165, 168, 179, 134, 137, 28, 111, 57, 20, 103, 109, 40, 93, 116,\n        27, 183, 6, 173, 163, 53, 13, 72, 122, 43, 63, 229, 34, 239, 206, 238, 224, 219, 154, 89,\n        232, 199, 231, 76, 220, 48, 166, 150, 198, 187, 179, 212, 170, 99, 14, 86, 71, 119, 180,\n        116, 170, 223, 163, 40, 114, 100, 115, 113, 43, 44, 114, 235, 76, 52, 47, 163, 154, 106,\n        75, 206, 13, 169, 35, 146, 186, 235, 26, 215, 226, 25, 96, 82, 134, 106, 165, 127, 165,\n        151, 155, 237, 16, 83, 188, 25, 119, 139, 21, 127, 119, 176, 100, 73, 39, 111, 86, 232, 52,\n        9, 66, 93, 115, 223, 106, 49, 206, 238, 160, 132, 136, 64, 102, 43, 74, 71, 121, 174, 29,\n        24, 97, 80, 95, 52, 218, 59, 92, 197, 127, 255, 57, 181, 131, 22, 44, 103, 181, 255, 147,\n        102, 90, 15, 183, 116, 87, 9, 234, 149, 220, 97, 185, 51, 15, 48, 192, 77, 192, 92, 6, 25,\n        231, 98, 183, 247, 191, 91, 35, 232, 21, 25, 172, 40, 237, 60, 161, 137, 231, 74, 255, 83,\n        254, 36, 142, 212, 17, 244, 228, 22, 175, 11, 18, 28, 10, 13, 59, 153, 59, 167, 135, 132,\n        139, 137, 113, 140, 127, 144, 118, 200, 162, 233, 78, 190, 163, 76, 226, 254, 141, 23, 103,\n        104, 130, 9, 249, 38, 224, 186, 81, 202, 138, 93, 91, 204, 157, 215, 80, 29, 100, 172, 90,\n        238, 198, 240, 210, 187, 19, 62, 115, 118, 162, 168, 216, 71, 112, 46, 23, 133, 22, 189,\n        210, 149, 133, 48, 200, 136, 154, 38, 232, 39, 155, 118, 193, 34, 213, 153, 254, 27, 118,\n        184, 252, 128, 4, 175, 4, 84, 119, 78, 252, 154, 99, 252, 142, 108, 170, 171, 108, 4, 181,\n        42, 121, 214, 195, 219, 86, 242, 192, 126, 196, 223, 239, 42, 199, 225, 212, 234, 10, 122,\n        3, 193, 28, 84, 12, 112, 161, 253, 10, 169, 105, 164, 63, 97, 189, 164, 233, 134, 45, 115,\n        68, 28, 24, 245, 177, 156, 59, 119, 158, 169, 190, 92, 55, 25, 81, 131, 16, 97, 164, 233,\n        188, 6, 13, 197, 35, 180, 215, 5, 222, 218, 153, 211, 204, 140, 43, 16, 66, 70, 37, 188,\n        245, 142, 91, 181, 176, 50, 210, 247, 126, 210, 254, 254, 56, 58, 202, 187, 189, 198, 247,\n        74, 189, 80, 143, 231, 208, 22, 188, 255, 184, 79, 239, 101, 153, 38, 185, 223, 119, 141,\n        143, 241, 93, 236, 72, 153, 185, 119, 215, 135, 123, 202, 66, 204, 12, 243, 246, 48, 43,\n        154, 83, 0, 100, 146, 157, 230, 233, 147, 209, 45, 106, 170, 231, 113, 162, 217, 136, 142,\n        254, 179, 55, 216, 202, 171, 112, 33, 169, 211, 27, 69, 131, 131, 186, 210, 79, 186, 244,\n        223, 25, 153, 0, 204, 17, 150, 183, 82, 33, 40, 165, 178, 214, 212, 185, 215, 118, 116,\n        192, 121, 23, 111, 14, 148, 118, 17, 195, 123, 98, 96, 227, 160, 203, 98, 44, 10, 17, 73,\n        153, 8, 104, 225, 126, 28, 62, 50, 167, 146, 93, 246, 148, 222, 56, 235, 205, 189, 222,\n        186, 74, 242, 195, 91, 54, 135, 245, 245, 139, 235, 233, 43, 125, 89, 87, 250, 179, 228,\n        228, 166, 141, 238, 53, 245, 80, 235, 32, 142, 81, 180, 51, 107, 117, 28, 197, 62, 15, 107,\n        40, 167, 63, 119, 215, 239, 4, 53, 26, 254, 55, 153, 8, 89, 253, 156, 98, 25, 51, 54, 205,\n        255, 183, 37, 76, 39, 153, 92, 240, 79, 178, 157, 153, 205, 242, 91, 133, 204, 26, 107, 7,\n        105, 59, 186, 37, 217, 93, 171, 159, 165, 68, 171, 10, 91, 29, 236, 136, 188, 153, 202, 63,\n        99, 47, 38, 246, 92, 156, 111, 100, 241, 142, 19, 98, 204, 171, 188, 6, 5, 117, 91, 47, 16,\n        227, 100, 43, 77, 56, 70, 231, 10, 161, 170, 195, 142, 34, 154, 173, 32, 78, 93, 39, 56,\n        185, 38, 249, 59, 219, 48, 15, 106, 245, 187, 64, 82, 47, 144, 134, 130, 154, 54, 87, 70,\n        166, 72, 234, 147, 121, 227, 24, 77, 204, 246, 109, 49, 57, 104, 114, 128, 35, 40, 34, 113,\n        75, 116, 91, 6, 43, 28, 123, 123, 43, 180, 82, 237, 1, 250, 108, 126, 244, 40, 186, 108,\n        59, 59, 1, 232, 50, 14, 248, 26, 158, 112, 110, 245, 133, 40, 44, 38, 130, 187, 34, 190,\n        179, 134, 98, 54, 71, 52, 151, 64, 70, 253, 247, 48, 201, 189, 117, 28, 18, 6, 111, 239,\n        64, 248, 250, 231, 85, 20, 133, 210, 238, 207, 121, 136, 37, 127, 16, 135, 191, 150, 42,\n        174, 107, 239, 142, 40, 108, 34, 66, 36, 233, 104, 52, 137, 12, 49, 17, 219, 213, 165, 132,\n        160, 153, 6, 175, 133, 172, 78, 183, 236, 228, 81, 164, 11, 152, 93, 194, 212, 117, 179,\n        84, 175, 251, 73, 172, 77, 252, 207, 166, 218, 20, 168, 183, 0, 205, 40, 203, 120, 130, 87,\n        123, 61, 140, 237, 224, 132, 178, 103, 208, 78, 140, 40, 13, 123, 9, 47, 68, 171, 162, 116,\n        160, 87, 84, 2, 14, 84, 180, 242, 73, 38, 223, 191, 114, 45, 232, 208, 252, 180, 95, 17,\n        205, 199, 106, 169, 123, 181, 212, 225, 41, 91, 38, 81, 23, 176, 105, 40, 194, 246, 174,\n        78, 30, 205, 204, 147, 9, 172, 98, 65, 188, 225, 83, 245, 167, 203, 99, 201, 207, 126, 192,\n        173, 250, 25, 28, 101, 164, 88, 191, 186, 203, 199, 243, 35, 13, 187, 204, 61, 180, 2, 24,\n        198, 83, 6, 147, 212, 139, 186, 164, 180, 193, 193, 241, 96, 217, 160, 58, 117, 133, 132,\n        97, 135, 174, 24, 49, 123, 161, 202, 191, 10, 20, 238, 223, 213, 107, 139, 69, 58, 239, 56,\n        147, 15, 71, 130, 244, 112, 179, 219, 45, 136, 223, 145, 5, 100, 70, 194, 104, 130, 39, 47,\n        144, 40, 179, 162, 166, 177, 238, 10, 122, 181, 88, 128, 242, 228, 211, 145, 239, 231, 38,\n        58, 56, 75, 175, 203, 162, 198, 220, 58, 152, 213, 24, 223, 20, 41, 227, 102, 59, 122, 94,\n        95, 197, 33, 196, 28, 96, 184, 228, 76, 194, 197, 105, 5, 26, 90, 174, 79, 27, 218, 172,\n        92, 44, 155, 33, 236, 30, 190, 13, 110, 13, 60, 176, 93, 14, 91, 214, 255, 254, 88, 103,\n        178, 198, 121, 186, 64, 227, 162, 168, 215, 191, 237, 199, 111, 169, 20, 159, 6, 182, 229,\n        25, 157, 45, 54, 158, 121, 226, 199, 147, 48, 82, 174, 41, 55, 185, 164, 65, 101, 174, 22,\n        69, 163, 141, 174, 103, 99, 196, 91, 121, 197, 219, 197, 90, 242, 150, 42, 209, 60, 97, 55,\n        242, 58, 126, 231, 22, 127, 91, 166, 44, 228, 231, 29, 236, 61, 35, 12, 152, 48, 104, 183,\n        24, 213, 102, 189, 214, 101, 136, 11, 226, 31, 83, 243, 242, 206, 101, 180, 179, 14, 35,\n        13, 104, 249, 151, 118, 148, 180, 205, 245, 29, 35, 253, 113, 62, 102, 109, 228, 28, 120,\n        68, 76, 243, 62, 250, 159, 100, 137, 94, 216, 30, 90, 10, 230, 54, 242, 196, 232, 13, 12,\n        177, 50, 32, 91, 126, 103, 88, 54, 57, 13, 172, 80, 167, 15, 51, 109, 159, 237, 164, 251,\n        229, 16, 134, 132, 56, 93, 60, 51, 230, 25, 105, 230, 1, 54, 204, 248, 53, 80, 16, 54, 168,\n        4, 173, 246, 198, 106, 252, 153, 5, 227, 23, 169, 9, 2, 162, 237, 46, 114, 238, 203, 103,\n        62, 66, 43, 119, 56, 209, 97, 60, 189, 54, 25, 228, 137, 19, 198, 68, 137, 40, 197, 159,\n        152, 220, 149, 128, 201, 201, 138, 46, 70, 97, 140, 146, 244, 106, 103, 120, 211, 231, 150,\n        37, 41, 30, 87, 208, 191, 66, 142, 55, 222, 11, 102, 197, 30, 213, 6, 144, 18, 123, 235,\n        145, 73, 249, 60, 240, 251, 161, 240, 147, 201, 165, 206, 167, 115, 79, 225, 189, 27, 95,\n        168, 239, 189, 46, 13, 198, 47, 228, 179, 156, 53, 40, 209, 116, 191, 177, 143, 60, 157,\n        172, 193, 123, 252, 146, 28, 6, 20, 225, 237, 80, 166, 97, 59, 162, 189, 172, 91, 121, 248,\n        134, 72, 36, 23, 3, 3, 1, 134, 184, 233, 245, 63, 202, 189, 95, 218, 14, 44, 104, 150, 88,\n        57, 147, 139, 108, 12, 24, 244, 48, 244, 12, 105, 140, 216, 220, 203, 61, 245, 166, 98,\n        248, 29, 21, 205, 163, 217, 131, 222, 142, 243, 231, 56, 251, 8, 91, 104, 142, 192, 167,\n        237, 78, 125, 38, 215, 152, 134, 128, 126, 89, 102, 207, 188, 230, 246, 14, 24, 126, 138,\n        114, 180, 118, 107, 248, 123, 189, 108, 188, 51, 72, 43, 11, 120, 144, 125, 151, 128, 70,\n        175, 208, 157, 21, 23, 181, 116, 24, 151, 213, 169, 71, 137, 211, 133, 66, 217, 94, 57,\n        172, 53, 200, 76, 212, 201, 64, 165, 40, 211, 58, 41, 133, 5, 180, 151, 59, 17, 112, 75,\n        19, 186, 172, 50, 36, 184, 98, 225, 103, 3, 192, 196, 234, 34, 58, 122, 13, 145, 186, 175,\n        6, 194, 14, 113, 209, 83, 212, 155, 61, 162, 156, 108, 103, 139, 224, 128, 191, 58, 168,\n        228, 223, 63, 16, 216, 161, 129, 103, 100, 126, 196, 98, 10, 77, 40, 217, 195, 19, 205,\n        202, 220, 96, 17, 175, 95, 25, 22, 158, 125, 215, 107, 136, 1, 124, 91, 213, 38, 226, 229,\n        171, 102, 229, 43, 21, 96, 18, 64, 250, 121, 28, 196, 204, 232, 170, 196, 217, 241, 72, 52,\n        204, 213, 15, 38, 22, 211, 23, 30, 200, 130, 144, 162, 241, 75, 131, 109, 216, 53, 176,\n        129, 181, 234, 255, 221, 66, 0, 103, 20, 218, 25, 242, 178, 29, 66, 74, 132, 102, 65, 47,\n        113, 156, 220, 240, 218, 205, 242, 139, 64, 190, 177, 79, 163, 13, 245, 95, 144, 138, 214,\n        18, 105, 157, 143, 227, 178, 156, 38, 215, 106, 254, 245, 153, 14, 188, 52, 101, 188, 238,\n        86, 47, 120, 37, 100, 136, 93, 124, 217, 73, 77, 154, 46, 244, 106, 178, 10, 189, 146, 171,\n        135, 220, 144, 201, 229, 61, 61, 135, 192, 76, 64, 222, 138, 66, 197, 214, 166, 41, 39,\n        147, 245, 35, 15, 191, 134, 204, 64, 72, 168, 114, 232, 179, 225, 117, 94, 47, 184, 219,\n        143, 107, 210, 56, 223, 248, 86, 107, 154, 214, 43, 23, 71, 130, 241, 25, 50, 204, 144,\n        244, 19, 51, 33, 180, 0, 17, 184, 61, 147,\n    ];\n    let root_store = RootCertStore::empty();\n    let config = Arc::new(\n        ClientConfig::builder()\n            .with_safe_defaults()\n            .with_root_certificates(root_store)\n            .with_no_client_auth(),\n    );\n    let example_com = \"example.com\".try_into().unwrap();\n    let mut client = ClientConnection::new(config, example_com).unwrap();\n    let _ = client.read_tls(&mut io::Cursor::new(data));\n    let _ = client.process_new_packets();\n}"}
{"test_id": "rustls-rustls/rustls-rustls-ae583bd/tests-gen/message.inputs.rs::test_46", "code": "pub fn used(&self) -> usize {\n        self.cursor\n    }", "test": "fn test_46() {\n    let data = [\n        22, 3, 3, 0, 16, 20, 0, 0, 12, 236, 41, 20, 209, 94, 238, 162, 210, 82, 141, 87, 176,\n    ];\n    let mut rdr = Reader::init(data);\n    if let Ok(m) = OpaqueMessage::read(&mut rdr) {\n        let msg = match Message::try_from(m.into_plain_message()) {\n            Ok(msg) => msg,\n            Err(_) => return,\n        };\n        let enc = PlainMessage::from(msg)\n            .into_unencrypted_opaque()\n            .encode();\n        assert_eq!(enc, data[..rdr.used()]);\n    }\n}"}
{"test_id": "XAMPPRocky-tokei/XAMPPRocky-tokei-92ddc2e/tests-gen/parse_from_slice_panic.inputs.rs::test_45", "code": "pub fn parse_from_slice (input : FuzzInput , check_total : bool) { let config = & Config { treat_doc_strings_as_comments : Some (input . treat_doc_strings_as_comments) , columns : None , hidden : None , no_ignore : None , no_ignore_parent : None , no_ignore_dot : None , no_ignore_vcs : None , sort : None , types : None , for_each_fn : None , } ; let stats = input . lang . parse_from_slice (input . data , config) ; if check_total { if let Ok (s) = str :: from_utf8 (input . data) { assert ! (stats . lines () <= s . lines () . count () , \"{} got more total lines ({}) than str::lines ({}). Code: {}, Comments: {}, Blanks: {}. treat_doc_strings_as_comments: {}. File contents (as UTF-8):\\n{}\" , input . lang . name () , stats . lines () , s . lines () . count () , stats . code , stats . comments , input . treat_doc_strings_as_comments , stats . blanks , s) } ; } }", "test": "fn test_45() {\n    let data = FuzzInput {\n        lang: AWK,\n        treat_doc_strings_as_comments: false,\n        data: [16, 0, 2, 13, 255, 255, 255, 88],\n    };\n    parse_from_slice(data, false);\n}"}
{"test_id": "cloud-hypervisor-cloud-hypervisor/cloud-hypervisor-cloud-hypervisor-db3a5f3/tests-gen/balloon.inputs.rs::test_12", "code": "pub fn wait_for_epoll_threads(&mut self) {\n        self.common.wait_for_epoll_threads();\n    }", "test": "fn test_12() {\n    let bytes = [47, 10];\n    if bytes.len() < QUEUE_DATA_SIZE * QUEUE_NUM\n        || bytes.len() > (QUEUE_DATA_SIZE * QUEUE_NUM + MEM_SIZE)\n    {\n        return;\n    }\n    let mut balloon = virtio_devices::Balloon::new(\n        \"fuzzer_balloon\".to_owned(),\n        BALLOON_SIZE,\n        true,\n        true,\n        SeccompAction::Allow,\n        EventFd::new(EFD_NONBLOCK).unwrap(),\n        None,\n    )\n    .unwrap();\n    let queue_data = &bytes[..QUEUE_DATA_SIZE * QUEUE_NUM];\n    let mem_bytes = &bytes[QUEUE_DATA_SIZE * QUEUE_NUM..];\n    let mem = GuestMemoryMmap::from_ranges(&[(GuestAddress(0), MEM_SIZE)]).unwrap();\n    if mem.write_slice(mem_bytes, GuestAddress(0 as u64)).is_err() {\n        return;\n    }\n    let guest_memory = GuestMemoryAtomic::new(mem);\n    let mut queues = setup_virt_queues(\n        &[\n            &queue_data[..QUEUE_DATA_SIZE].try_into().unwrap(),\n            &queue_data[QUEUE_DATA_SIZE..QUEUE_DATA_SIZE * 2]\n                .try_into()\n                .unwrap(),\n            &queue_data[QUEUE_DATA_SIZE * 2..QUEUE_DATA_SIZE * 3]\n                .try_into()\n                .unwrap(),\n        ],\n        0,\n    );\n    let inflate_q = queues.remove(0);\n    let inflate_evt = EventFd::new(0).unwrap();\n    let inflate_queue_evt = unsafe { EventFd::from_raw_fd(libc::dup(inflate_evt.as_raw_fd())) };\n    let deflate_q = queues.remove(0);\n    let deflate_evt = EventFd::new(0).unwrap();\n    let deflate_queue_evt = unsafe { EventFd::from_raw_fd(libc::dup(deflate_evt.as_raw_fd())) };\n    let reporting_q = queues.remove(0);\n    let reporting_evt = EventFd::new(0).unwrap();\n    let reporting_queue_evt = unsafe { EventFd::from_raw_fd(libc::dup(reporting_evt.as_raw_fd())) };\n    inflate_queue_evt.write(1).unwrap();\n    deflate_queue_evt.write(1).unwrap();\n    reporting_queue_evt.write(1).unwrap();\n    balloon\n        .activate(\n            guest_memory,\n            Arc::new(NoopVirtioInterrupt {}),\n            vec![\n                (0, inflate_q, inflate_evt),\n                (1, deflate_q, deflate_evt),\n                (2, reporting_q, reporting_evt),\n            ],\n        )\n        .ok();\n    balloon.wait_for_epoll_threads();\n}"}
{"test_id": "cloud-hypervisor-cloud-hypervisor/cloud-hypervisor-cloud-hypervisor-db3a5f3/tests-gen/console.inputs.rs::test_97", "code": "pub fn wait_for_epoll_threads(&mut self) {\n        self.common.wait_for_epoll_threads();\n    }", "test": "fn test_97() {\n    let bytes = [242, 40, 10, 236];\n    if bytes.len() < (QUEUE_DATA_SIZE + QUEUE_BYTES_SIZE) * QUEUE_NUM + CONSOLE_INPUT_SIZE\n        || bytes.len()\n            > (QUEUE_DATA_SIZE + QUEUE_BYTES_SIZE) * QUEUE_NUM + CONSOLE_INPUT_SIZE + MEM_SIZE\n    {\n        return;\n    }\n    let (pipe_rx, mut pipe_tx) = create_pipe().unwrap();\n    let output = unsafe {\n        File::from_raw_fd(\n            memfd_create(&std::ffi::CString::new(\"fuzz_console_output\").unwrap()).unwrap(),\n        )\n    };\n    let endpoint = virtio_devices::Endpoint::FilePair(output, pipe_rx);\n    let (mut console, _) = virtio_devices::Console::new(\n        \"fuzzer_console\".to_owned(),\n        endpoint,\n        None,\n        false,\n        SeccompAction::Allow,\n        EventFd::new(EFD_NONBLOCK).unwrap(),\n        None,\n    )\n    .unwrap();\n    let console_input_bytes = &bytes[..CONSOLE_INPUT_SIZE];\n    let queue_data = &bytes[CONSOLE_INPUT_SIZE..CONSOLE_INPUT_SIZE + QUEUE_DATA_SIZE * QUEUE_NUM];\n    let queue_bytes = &bytes[CONSOLE_INPUT_SIZE + QUEUE_DATA_SIZE * QUEUE_NUM\n        ..CONSOLE_INPUT_SIZE + (QUEUE_DATA_SIZE + QUEUE_BYTES_SIZE) * QUEUE_NUM];\n    let mem_bytes = &bytes[CONSOLE_INPUT_SIZE + (QUEUE_DATA_SIZE + QUEUE_BYTES_SIZE) * QUEUE_NUM..];\n    let mut queues = setup_virt_queues(\n        &[\n            &queue_data[..QUEUE_DATA_SIZE].try_into().unwrap(),\n            &queue_data[QUEUE_DATA_SIZE..QUEUE_DATA_SIZE * 2]\n                .try_into()\n                .unwrap(),\n        ],\n        BASE_VIRT_QUEUE_ADDR,\n    );\n    let mem = GuestMemoryMmap::from_ranges(&[\n        (GuestAddress(0), MEM_SIZE),\n        (GuestAddress(BASE_VIRT_QUEUE_ADDR), queue_bytes.len()),\n    ])\n    .unwrap();\n    if mem\n        .write_slice(queue_bytes, GuestAddress(BASE_VIRT_QUEUE_ADDR))\n        .is_err()\n    {\n        return;\n    }\n    if mem.write_slice(mem_bytes, GuestAddress(0 as u64)).is_err() {\n        return;\n    }\n    let guest_memory = GuestMemoryAtomic::new(mem);\n    let input_queue = queues.remove(0);\n    let input_evt = EventFd::new(0).unwrap();\n    let input_queue_evt = unsafe { EventFd::from_raw_fd(libc::dup(input_evt.as_raw_fd())) };\n    let output_queue = queues.remove(0);\n    let output_evt = EventFd::new(0).unwrap();\n    let output_queue_evt = unsafe { EventFd::from_raw_fd(libc::dup(output_evt.as_raw_fd())) };\n    input_queue_evt.write(1).unwrap();\n    output_queue_evt.write(1).unwrap();\n    pipe_tx.write_all(console_input_bytes).unwrap();\n    console\n        .activate(\n            guest_memory,\n            Arc::new(NoopVirtioInterrupt {}),\n            vec![(0, input_queue, input_evt), (1, output_queue, output_evt)],\n        )\n        .unwrap();\n    console.wait_for_epoll_threads();\n}"}
{"test_id": "image-rs-image/image-rs-image-e5580ec/tests-gen/fuzzer_script_tga.inputs.rs::test_8", "code": "fn decode(encoded: &[u8]) -> Vec<u8> {\n        let decoder = JpegDecoder::new(Cursor::new(encoded)).expect(\"Could not decode image\");\n\n        let mut decoded = vec![0; decoder.total_bytes() as usize];\n        decoder\n            .read_image(&mut decoded)\n            .expect(\"Could not decode image\");\n        decoded\n    }", "test": "fn test_8() {\n    let data = [10];\n    let _ = decode(data);\n}"}
{"test_id": "image-rs-image-png/image-rs-image-png-e113d76/tests-gen/decode.inputs.rs::test_27", "code": "fn png_decode (data : & [u8]) -> Result < (Option < png :: OutputInfo > , Vec < u8 >) , () > { let limits = png :: Limits { bytes : 1 << 16 } ; let decoder = png :: Decoder :: new_with_limits (data , limits) ; let mut reader = decoder . read_info () . map_err (| _ | ()) ? ; if reader . info () . raw_bytes () > 5_000_000 { return Err (()) ; } let mut img_data = vec ! [0u8 ; reader . info () . raw_bytes ()] ; let mut last_info = None ; while let Ok (info) = reader . next_frame (& mut img_data) { last_info = Some (info) ; } Ok ((last_info , img_data)) }", "test": "fn test_27() {\n    let data = [\n        137, 80, 78, 71, 13, 10, 26, 10, 0, 0, 0, 0, 0, 71, 13, 10, 26, 10, 0, 0, 0, 0, 0, 159, 73,\n        68, 65, 84,\n    ];\n    let _ = png_decode(&data);\n}"}
{"test_id": "gimli-rs-gimli/gimli-rs-gimli-3947879/tests-gen/debug_abbrev.inputs.rs::test_61", "code": "pub fn get<R: Reader>(\n        &self,\n        debug_abbrev: &DebugAbbrev<R>,\n        offset: DebugAbbrevOffset<R::Offset>,\n    ) -> Result<Arc<Abbreviations>> {\n        if offset.0 != R::Offset::from_u8(0) {\n            return debug_abbrev.abbreviations(offset).map(Arc::new);\n        }\n        self.abbreviations\n            .get(|| debug_abbrev.abbreviations(offset))\n    }", "test": "fn test_61() {\n    let debug_abbrev = [1, 1, 0];\n    let len = debug_abbrev.len();\n    let debug_abbrev = DebugAbbrev::new(&debug_abbrev, LittleEndian);\n    let offset = DebugAbbrevOffset(0);\n    if let Ok(abbreviations) = debug_abbrev.abbreviations(offset) {\n        for i in 1..len {\n            let _ = abbreviations.get(i as u64);\n        }\n    }\n}"}
{"test_id": "bodil-im-rs/bodil-im-rs-2afaf54/tests-gen/hashset.inputs.rs::test_57", "code": "pub fn remove<BA>(&mut self, a: &BA) -> Option<A>\n    where\n        BA: Hash + Eq + ?Sized,\n        A: Borrow<BA>,\n    {\n        let root = PoolRef::make_mut(&self.pool.0, &mut self.root);\n        let result = root.remove(&self.pool.0, hash_key(&*self.hasher, a), 0, a);\n        if result.is_some() {\n            self.size -= 1;\n        }\n        result.map(|v| v.0)\n    }", "test": "fn test_57() {\n    let actions = [Remove(2198821271030)];\n    let mut set = HashSet::new();\n    let mut nat = NatSet::new();\n    for action in actions {\n        match action {\n            Action::Insert(value) => {\n                let len = nat.len() + if nat.contains(&value) { 0 } else { 1 };\n                nat.insert(value);\n                set.insert(value);\n                assert_eq!(len, set.len());\n            }\n            Action::Remove(value) => {\n                let len = nat.len() - if nat.contains(&value) { 1 } else { 0 };\n                nat.remove(&value);\n                set.remove(&value);\n                assert_eq!(len, set.len());\n            }\n        }\n        assert_eq!(nat.len(), set.len());\n        assert_eq!(HashSet::from(nat.clone()), set);\n    }\n}"}
{"test_id": "image-rs-image-gif/image-rs-image-gif-80fd8c0/tests-gen/decode.inputs.rs::test_25", "code": "fn try_decode (data : & [u8]) -> Result < () , gif :: DecodingError > { let mut reader = gif :: Decoder :: new (data) ? ; while let Some (_) = reader . read_next_frame () ? { } Ok (()) }", "test": "fn test_25() {\n    let data = [72];\n    let _ = try_decode(data);\n}"}
{"test_id": "BurntSushi-memchr/BurntSushi-memchr-f3fde7a/tests-gen/memrmem.inputs.rs::test_7", "code": "pub fn count(&self, haystack: &[u8]) -> usize {\n        // SAFETY: All of our pointers are derived directly from a borrowed\n        // slice, which is guaranteed to be valid.\n        unsafe {\n            let start = haystack.as_ptr();\n            let end = start.add(haystack.len());\n            self.count_raw(start, end)\n        }\n    }", "test": "fn test_7() {\n    let data = [212];\n    if data.len() < 2 {\n        return;\n    }\n    let split = std::cmp::max(data[0] as usize, 1) % data.len() as usize;\n    let (needle, haystack) = (&data[..split], &data[split..]);\n    memmem::rfind_iter(haystack, needle).count();\n}"}
{"test_id": "image-rs-image-png/image-rs-image-png-e113d76/tests-gen/roundtrip.inputs.rs::test_18", "code": "fn encode_png < 'a > (width : u8 , filter : u8 , compression : u8 , color_type : u8 , raw_bit_depth : u8 , raw_palette : & 'a [u8] , data : & 'a [u8]) -> Option < (& 'a [u8] , Vec < u8 >) > { let width = width as u32 ; if width == 0 { return None } ; let filter = FilterType :: from_u8 (filter) ? ; let bit_depth = BitDepth :: from_u8 (raw_bit_depth) ? ; let max_palette_length = 3 * u32 :: pow (2 , raw_bit_depth as u32) as usize ; let mut palette = raw_palette ; let color_type = ColorType :: from_u8 (color_type) ? ; if let ColorType :: Indexed = color_type { if raw_palette . len () > max_palette_length { palette = & raw_palette [.. max_palette_length] ; } } let compression = match compression { 0 => png :: Compression :: Default , 1 => png :: Compression :: Fast , 2 => png :: Compression :: Best , 3 => png :: Compression :: Huffman , 4 => png :: Compression :: Rle , _ => return None , } ; let bytes_per_row = raw_row_length_from_width (bit_depth , color_type , width) - 1 ; let height = data . len () / bytes_per_row ; let total_bytes = bytes_per_row * height ; let data_to_encode = & data [.. total_bytes] ; let mut output : Vec < u8 > = Vec :: new () ; { let mut encoder = png :: Encoder :: new (& mut output , width , height as u32) ; encoder . set_depth (bit_depth) ; encoder . set_color (color_type) ; encoder . set_filter (filter) ; encoder . set_compression (compression) ; if let ColorType :: Indexed = color_type { encoder . set_palette (palette) } let mut writer = encoder . write_header () . ok () ? ; writer . write_image_data (data_to_encode) . expect (\"Encoding failed\") ; } Some ((data_to_encode , output)) }", "test": "fn test_18() {\n    let data = (246, 17, 231, 0, 246, [17], [231, 0, 246]);\n    if let Some((raw, encoded)) =\n        encode_png(data.0, data.1, data.2, data.3, data.4, &data.5, &data.6)\n    {\n        let (_info, raw_decoded) = decode_png(&encoded);\n        let raw_decoded = &raw_decoded[..raw.len()];\n        assert_eq!(raw, raw_decoded);\n    }\n}"}
{"test_id": "rust-bakery-nom/rust-bakery-nom-869f897/tests-gen/fuzz_arithmetic.inputs.rs::test_70", "code": "fn factor(i: &str) -> IResult<&str, Expr> {\n  alt((\n    map(\n      map_res(delimited(multispace, digit, multispace), FromStr::from_str),\n      Expr::Value,\n    ),\n    parens,\n  ))(i)\n}", "test": "fn test_70() {\n  let data = [10];\n  reset();\n  let temp = match str::from_utf8(data) {\n    Ok(v) => factor(v),\n    Err(e) => factor(\"2\"),\n  };\n}"}
{"test_id": "gimli-rs-gimli/gimli-rs-gimli-3947879/tests-gen/debug_line.inputs.rs::test_85", "code": "pub fn next_row(&mut self) -> Result<Option<(&LineProgramHeader<R, Offset>, &LineRow)>> {\n        // Perform any reset that was required after copying the previous row.\n        self.row.reset(self.program.header());\n\n        loop {\n            // Split the borrow here, rather than calling `self.header()`.\n            match self.instructions.next_instruction(self.program.header()) {\n                Err(err) => return Err(err),\n                Ok(None) => return Ok(None),\n                Ok(Some(instruction)) => {\n                    if self.row.execute(instruction, &mut self.program) {\n                        if self.row.tombstone {\n                            // Perform any reset that was required for the tombstone row.\n                            // Normally this is done when `next_row` is called again, but for\n                            // tombstones we loop immediately.\n                            self.row.reset(self.program.header());\n                        } else {\n                            return Ok(Some((self.header(), &self.row)));\n                        }\n                    }\n                    // Fall through, parse the next instruction, and see if that\n                    // yields a row.\n                }\n            }\n        }\n    }", "test": "fn test_85() {\n    let debug_line = [178, 26, 26, 26];\n    let debug_line = DebugLine::new(&debug_line, LittleEndian);\n    let offset = DebugLineOffset(0);\n    let address_size = 8;\n    if let Ok(program) = debug_line.program(offset, address_size, None, None) {\n        let mut rows = program.rows();\n        while let Ok(Some(row)) = rows.next_row() {\n            let _ = row;\n        }\n    }\n}"}
{"test_id": "bodil-im-rs/bodil-im-rs-2afaf54/tests-gen/ordset.inputs.rs::test_88", "code": "pub fn remove<BA>(&mut self, a: &BA) -> Option<A>\n    where\n        BA: Hash + Eq + ?Sized,\n        A: Borrow<BA>,\n    {\n        let root = PoolRef::make_mut(&self.pool.0, &mut self.root);\n        let result = root.remove(&self.pool.0, hash_key(&*self.hasher, a), 0, a);\n        if result.is_some() {\n            self.size -= 1;\n        }\n        result.map(|v| v.0)\n    }", "test": "fn test_88() {\n    let actions = [Insert(4991471925827290368)];\n    let mut set = OrdSet::new();\n    let mut nat = NatSet::new();\n    for action in actions {\n        match action {\n            Action::Insert(value) => {\n                let len = nat.len() + if nat.contains(&value) { 0 } else { 1 };\n                nat.insert(value);\n                set.insert(value);\n                assert_eq!(len, set.len());\n            }\n            Action::Remove(value) => {\n                let len = nat.len() - if nat.contains(&value) { 1 } else { 0 };\n                nat.remove(&value);\n                set.remove(&value);\n                assert_eq!(len, set.len());\n            }\n        }\n        assert_eq!(nat.len(), set.len());\n        assert_eq!(OrdSet::from(nat.clone()), set);\n    }\n}"}
{"test_id": "rustls-rustls/rustls-rustls-ae583bd/tests-gen/client.inputs.rs::test_23", "code": "pub fn process_new_packets(&mut self) -> Result<IoState, Error> {\n        match self {\n            Self::Client(conn) => conn.process_new_packets(),\n            Self::Server(conn) => conn.process_new_packets(),\n        }\n    }", "test": "fn test_23() {\n    let data = [\n        106, 20, 26, 254, 130, 226, 71, 240, 108, 144, 192, 85, 34, 16, 20, 188, 121, 177, 84, 140,\n        233, 167, 36, 60, 23, 181, 219, 231, 247, 137, 119, 127, 191, 203, 4, 92, 138, 210, 68, 36,\n        28, 27, 225, 5, 157, 170, 241, 188, 153, 43, 181, 68, 24, 15, 237, 222, 211, 111, 81, 38,\n        148, 127, 157, 239, 32, 124, 152, 42, 47, 180, 53, 174, 89, 13, 39, 81, 224, 219, 91, 255,\n        194, 180, 199, 201, 244, 238, 123, 33, 206, 246, 255, 238, 93, 7, 29, 113, 120, 177, 165,\n        36, 238, 185, 111, 85, 131, 126, 112, 100, 144, 163, 163, 31, 126, 182, 138, 181, 117, 158,\n        206, 248, 221, 99, 87, 225, 131, 8, 247, 92, 115, 24, 124, 238, 215, 225, 118, 250, 84,\n        150, 23, 56, 141, 64, 179, 184, 79, 247, 220, 132, 180, 26, 48, 125, 40, 54, 39, 14, 73,\n        21, 155, 163, 24, 24, 179, 186, 101, 134, 39, 45, 25, 118, 117, 81, 7, 207, 85, 149, 175,\n        206, 34, 89, 71, 120, 90, 178, 110, 79, 250, 251, 68, 19, 161, 9, 153, 222, 185, 154, 84,\n        162, 235, 60, 222, 178, 189, 26, 136, 64, 97, 59, 100, 144, 7, 38, 31, 149, 80, 213, 113,\n        136, 74, 162, 24, 201, 129, 91, 68, 198, 132, 54, 30, 138, 160, 227, 89, 132, 186, 114, 65,\n        203, 145, 152, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17,\n        6, 3, 85, 4, 10, 19, 10, 71, 111, 111, 103, 108, 101, 32, 73, 110, 99, 49, 37, 48, 35, 6,\n        3, 85, 4, 3, 19, 28, 71, 111, 111, 103, 108, 101, 32, 73, 110, 116, 101, 114, 110, 101,\n        116, 32, 65, 117, 116, 104, 111, 114, 105, 116, 121, 32, 71, 50, 48, 130, 1, 34, 48, 13, 6,\n        9, 42, 134, 72, 134, 247, 13, 1, 1, 1, 5, 0, 3, 130, 1, 15, 0, 48, 130, 1, 10, 2, 130, 1,\n        1, 0, 156, 42, 4, 119, 92, 216, 80, 145, 58, 6, 163, 130, 224, 216, 80, 72, 188, 137, 63,\n        241, 25, 112, 26, 136, 70, 126, 224, 143, 197, 241, 137, 206, 33, 238, 90, 254, 97, 13,\n        183, 50, 68, 137, 160, 116, 11, 83, 79, 85, 164, 206, 130, 98, 149, 238, 235, 89, 95, 198,\n        225, 5, 128, 18, 196, 94, 148, 63, 188, 91, 72, 56, 244, 83, 247, 36, 230, 251, 145, 233,\n        21, 196, 207, 244, 83, 13, 244, 74, 252, 159, 84, 222, 125, 190, 160, 107, 111, 135, 192,\n        208, 80, 31, 40, 48, 3, 64, 218, 8, 115, 81, 108, 127, 255, 58, 60, 167, 55, 6, 142, 189,\n        75, 17, 4, 235, 125, 36, 222, 230, 249, 252, 49, 113, 251, 148, 213, 96, 243, 46, 74, 175,\n        66, 210, 203, 234, 196, 106, 26, 178, 204, 83, 221, 21, 75, 139, 31, 200, 25, 97, 31, 205,\n        157, 168, 62, 99, 43, 132, 53, 105, 101, 132, 200, 25, 197, 70, 34, 248, 83, 149, 190, 227,\n        128, 74, 16, 198, 42, 236, 186, 151, 32, 17, 199, 57, 153, 16, 4, 160, 240, 97, 122, 149,\n        37, 140, 78, 82, 117, 226, 182, 237, 8, 202, 20, 252, 206, 34, 106, 179, 78, 207, 70, 3,\n        151, 151, 3, 126, 192, 177, 222, 123, 175, 69, 51, 207, 186, 62, 113, 183, 222, 244, 37,\n        37, 194, 13, 53, 137, 157, 157, 251, 14, 17, 121, 137, 30, 55, 197, 175, 142, 114, 105, 2,\n        3, 1, 0, 1, 163, 129, 231, 48, 129, 228, 48, 31, 6, 3, 85, 29, 35, 4, 24, 48, 22, 128, 20,\n        192, 122, 152, 104, 141, 137, 251, 171, 5, 100, 12, 17, 125, 170, 125, 101, 184, 202, 204,\n        78, 48, 29, 6, 3, 85, 29, 14, 4, 22, 4, 20, 74, 221, 6, 22, 27, 188, 246, 104, 181, 118,\n        245, 129, 182, 187, 98, 26, 186, 90, 129, 47, 48, 14, 6, 3, 85, 29, 15, 1, 1, 255, 4, 4, 3,\n        2, 1, 6, 48, 46, 6, 8, 43, 6, 1, 5, 5, 7, 1, 1, 4, 34, 48, 32, 48, 30, 6, 8, 43, 6, 1, 5,\n        5, 7, 48, 1, 134, 18, 104, 116, 116, 112, 58, 47, 47, 103, 46, 115, 121, 109, 99, 100, 46,\n        99, 111, 109, 48, 18, 6, 3, 85, 29, 19, 1, 1, 255, 4, 8, 48, 6, 1, 1, 255, 2, 1, 0, 48, 53,\n        6, 3, 85, 29, 31, 4, 46, 48, 44, 48, 42, 160, 40, 160, 38, 134, 36, 104, 116, 116, 112, 58,\n        47, 47, 103, 46, 115, 121, 109, 99, 98, 46, 99, 111, 109, 47, 99, 114, 108, 115, 47, 103,\n        116, 103, 108, 111, 98, 97, 108, 46, 99, 114, 108, 48, 23, 6, 3, 85, 29, 32, 4, 16, 48, 14,\n        48, 12, 6, 10, 43, 6, 1, 4, 1, 214, 121, 2, 5, 1, 48, 13, 6, 9, 42, 134, 72, 134, 247, 13,\n        1, 1, 11, 5, 0, 3, 130, 1, 1, 0, 8, 78, 4, 167, 128, 127, 16, 22, 67, 94, 2, 173, 215, 66,\n        128, 244, 176, 142, 210, 174, 179, 235, 17, 125, 144, 132, 24, 125, 231, 144, 21, 251, 73,\n        127, 168, 153, 5, 145, 187, 122, 201, 214, 60, 55, 24, 9, 154, 182, 199, 146, 32, 7, 53,\n        51, 9, 228, 40, 99, 114, 13, 180, 224, 50, 156, 135, 152, 196, 27, 118, 137, 103, 193, 80,\n        88, 176, 19, 170, 19, 26, 27, 50, 165, 190, 234, 17, 149, 76, 72, 99, 73, 233, 153, 93, 32,\n        55, 204, 254, 42, 105, 81, 22, 149, 75, 169, 222, 73, 130, 192, 16, 112, 244, 44, 243, 236,\n        188, 36, 36, 208, 78, 172, 165, 217, 94, 30, 109, 146, 193, 167, 172, 72, 53, 129, 249,\n        229, 228, 156, 101, 105, 205, 135, 164, 65, 80, 63, 46, 87, 165, 145, 81, 18, 88, 14, 140,\n        9, 161, 172, 122, 164, 18, 165, 39, 243, 154, 16, 151, 125, 85, 3, 6, 247, 102, 88, 95, 95,\n        100, 225, 171, 93, 109, 165, 57, 72, 117, 152, 76, 41, 90, 58, 141, 211, 43, 202, 156, 85,\n        4, 191, 244, 230, 20, 213, 128, 172, 38, 237, 23, 137, 166, 147, 108, 92, 164, 204, 184,\n        240, 102, 142, 100, 227, 125, 154, 226, 0, 179, 73, 199, 228, 10, 170, 221, 91, 131, 199,\n        112, 144, 70, 78, 190, 208, 219, 89, 150, 108, 46, 245, 22, 54, 222, 113, 204, 1, 194, 18,\n        193, 33, 198, 22, 0, 3, 129, 48, 130, 3, 125, 48, 130, 2, 230, 160, 3, 2, 1, 2, 2, 3, 18,\n        187, 230, 48, 13, 6, 9, 42, 134, 72, 134, 247, 13, 1, 1, 5, 5, 0, 48, 78, 49, 11, 48, 9, 6,\n        3, 85, 4, 6, 19, 2, 85, 83, 49, 16, 48, 14, 6, 3, 85, 4, 10, 19, 7, 69, 113, 117, 105, 102,\n        97, 120, 49, 45, 48, 43, 6, 3, 85, 4, 11, 19, 36, 69, 113, 117, 105, 102, 97, 120, 32, 83,\n        101, 99, 117, 114, 101, 32, 67, 101, 114, 116, 105, 102, 105, 99, 97, 116, 101, 32, 65,\n        117, 116, 104, 111, 114, 105, 116, 121, 48, 30, 23, 13, 48, 50, 48, 53, 50, 49, 48, 52, 48,\n        48, 48, 48, 90, 23, 13, 49, 56, 48, 56, 50, 49, 48, 52, 48, 48, 48, 48, 90, 48, 66, 49, 11,\n        48, 9, 6, 3, 85, 4, 6, 19, 2, 85, 83, 49, 22, 48, 20, 6, 3, 85, 4, 10, 19, 13, 71, 101,\n        111, 84, 114, 117, 115, 116, 32, 73, 110, 99, 46, 49, 27, 48, 25, 6, 3, 85, 4, 3, 19, 18,\n        71, 101, 111, 84, 114, 117, 115, 116, 32, 71, 108, 111, 98, 97, 108, 32, 67, 65, 48, 130,\n        1, 34, 48, 13, 6, 9, 42, 134, 72, 134, 247, 13, 1, 1, 1, 5, 0, 3, 130, 1, 15, 0, 48, 130,\n        1, 10, 2, 130, 1, 1, 0, 218, 204, 24, 99, 48, 253, 244, 23, 35, 26, 86, 126, 91, 223, 60,\n        108, 56, 228, 113, 183, 120, 145, 212, 188, 161, 216, 76, 248, 168, 67, 182, 3, 233, 77,\n        33, 7, 8, 136, 218, 88, 47, 102, 57, 41, 189, 5, 120, 139, 157, 56, 232, 5, 183, 106, 126,\n        113, 164, 230, 196, 96, 166, 176, 239, 128, 228, 137, 40, 15, 158, 37, 214, 237, 131, 243,\n        173, 166, 145, 199, 152, 201, 66, 24, 53, 20, 157, 173, 152, 70, 146, 46, 79, 202, 241,\n        135, 67, 193, 22, 149, 87, 45, 80, 239, 137, 45, 128, 122, 87, 173, 242, 238, 95, 107, 210,\n        0, 141, 185, 20, 248, 20, 21, 53, 217, 192, 70, 163, 123, 114, 200, 145, 191, 201, 85, 43,\n        205, 208, 151, 62, 156, 38, 100, 204, 223, 206, 131, 25, 113, 202, 78, 230, 212, 213, 123,\n        169, 25, 205, 85, 222, 200, 236, 210, 94, 56, 83, 229, 92, 79, 140, 45, 254, 80, 35, 54,\n        252, 102, 230, 203, 142, 164, 57, 25, 0, 183, 149, 2, 57, 145, 11, 14, 254, 56, 46, 209,\n        29, 5, 154, 246, 77, 62, 111, 15, 7, 29, 175, 44, 30, 143, 96, 57, 226, 250, 54, 83, 19,\n        57, 212, 94, 38, 43, 219, 61, 168, 20, 189, 50, 235, 24, 3, 40, 82, 4, 113, 229, 171, 51,\n        61, 225, 56, 187, 7, 54, 132, 98, 156, 121, 234, 22, 48, 244, 95, 192, 43, 232, 113, 107,\n        228, 249, 2, 3, 1, 0, 1, 163, 129, 240, 48, 129, 237, 48, 31, 6, 3, 85, 29, 35, 4, 24, 48,\n        22, 128, 20, 72, 230, 104, 249, 43, 210, 178, 149, 215, 71, 216, 35, 32, 16, 79, 51, 152,\n        144, 159, 212, 48, 29, 6, 3, 85, 29, 14, 4, 22, 4, 20, 192, 122, 152, 104, 141, 137, 251,\n        171, 5, 100, 12, 17, 125, 170, 125, 101, 184, 202, 204, 78, 48, 15, 6, 3, 85, 29, 19, 1, 1,\n        255, 4, 5, 48, 3, 1, 1, 255, 48, 14, 6, 3, 85, 29, 15, 1, 1, 255, 4, 4, 3, 2, 1, 6, 48, 58,\n        6, 3, 85, 29, 31, 4, 51, 48, 49, 48, 47, 160, 45, 160, 43, 134, 41, 104, 116, 116, 112, 58,\n        47, 47, 99, 114, 108, 46, 103, 101, 111, 116, 114, 117, 115, 116, 46, 99, 111, 109, 47, 99,\n        114, 108, 115, 47, 115, 101, 99, 117, 114, 101, 99, 97, 46, 99, 114, 108, 48, 78, 6, 3, 0,\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    ];\n    let root_store = RootCertStore::empty();\n    let config = Arc::new(\n        ClientConfig::builder()\n            .with_safe_defaults()\n            .with_root_certificates(root_store)\n            .with_no_client_auth(),\n    );\n    let example_com = \"example.com\".try_into().unwrap();\n    let mut client = ClientConnection::new(config, example_com).unwrap();\n    let _ = client.read_tls(&mut io::Cursor::new(data));\n    let _ = client.process_new_packets();\n}"}
{"test_id": "BurntSushi-memchr/BurntSushi-memchr-f3fde7a/tests-gen/memchr3.inputs.rs::test_85", "code": "fn count(self) -> usize {\n        self.it.count(|s, e| {\n            // SAFETY: We rely on our generic iterator to return valid start\n            // and end pointers.\n            unsafe { count_raw(self.needle1, s, e) }\n        })\n    }", "test": "fn test_85() {\n    let data = [10, 10];\n    if data.len() < 3 {\n        return;\n    }\n    memchr3_iter(data[0], data[1], data[2], &data[3..]).count();\n}"}
{"test_id": "zip-rs-zip/zip-rs-zip-ed187d6/tests-gen/fuzz_read.inputs.rs::test_52", "code": "fn decompress_all (data : & [u8]) -> Result < () , Box < dyn std :: error :: Error > > { let reader = std :: io :: Cursor :: new (data) ; let mut zip = zip :: ZipArchive :: new (reader) ? ; for i in 0 .. zip . len () { let mut file = zip . by_index (i) ? ; if file . size () < 1 << 20 { let _ = std :: io :: copy (& mut file , & mut std :: io :: sink ()) ; } } Ok (()) }", "test": "fn test_52() {\n    let data = [241, 136, 10, 4];\n    let _ = decompress_all(data);\n}"}
{"test_id": "cloud-hypervisor-cloud-hypervisor/cloud-hypervisor-cloud-hypervisor-db3a5f3/tests-gen/block.inputs.rs::test_78", "code": "pub fn wait_for_epoll_threads(&mut self) {\n        self.common.wait_for_epoll_threads();\n    }", "test": "fn test_78() {\n    let bytes = [130, 1, 130];\n    if bytes.len() < QUEUE_DATA_SIZE || bytes.len() > (QUEUE_DATA_SIZE + MEM_SIZE) {\n        return;\n    }\n    let queue_data = &bytes[..QUEUE_DATA_SIZE];\n    let mem_bytes = &bytes[QUEUE_DATA_SIZE..];\n    let shm = memfd_create(&ffi::CString::new(\"fuzz\").unwrap(), 0).unwrap();\n    let disk_file: File = unsafe { File::from_raw_fd(shm) };\n    let qcow_disk = Box::new(RawFileDiskSync::new(disk_file)) as Box<dyn DiskFile>;\n    let mut block = Block::new(\n        \"tmp\".to_owned(),\n        qcow_disk,\n        PathBuf::from(\"\"),\n        false,\n        false,\n        2,\n        256,\n        None,\n        SeccompAction::Allow,\n        None,\n        EventFd::new(EFD_NONBLOCK).unwrap(),\n        None,\n    )\n    .unwrap();\n    let q = setup_virt_queue(queue_data.try_into().unwrap());\n    let mem = GuestMemoryMmap::from_ranges(&[(GuestAddress(0), MEM_SIZE)]).unwrap();\n    if mem.write_slice(mem_bytes, GuestAddress(0 as u64)).is_err() {\n        return;\n    }\n    let guest_memory = GuestMemoryAtomic::new(mem);\n    let evt = EventFd::new(0).unwrap();\n    let queue_evt = unsafe { EventFd::from_raw_fd(libc::dup(evt.as_raw_fd())) };\n    queue_evt.write(1).unwrap();\n    block\n        .activate(\n            guest_memory,\n            Arc::new(NoopVirtioInterrupt {}),\n            vec![(0, q, evt)],\n        )\n        .ok();\n    block.wait_for_epoll_threads();\n}"}
{"test_id": "image-rs-image/image-rs-image-e5580ec/tests-gen/fuzzer_script_tga.inputs.rs::test_3", "code": "fn decode(encoded: &[u8]) -> Vec<u8> {\n        let decoder = JpegDecoder::new(Cursor::new(encoded)).expect(\"Could not decode image\");\n\n        let mut decoded = vec![0; decoder.total_bytes() as usize];\n        decoder\n            .read_image(&mut decoded)\n            .expect(\"Could not decode image\");\n        decoded\n    }", "test": "fn test_3() {\n    let data = [1];\n    let _ = decode(data);\n}"}
{"test_id": "dtolnay-syn/dtolnay-syn-b1a038c/tests-gen/create_token_buffer.inputs.rs::test_13", "code": "fn parse_str(self, s: &str) -> Result<Self::Output> {\n        self.parse2(proc_macro2::TokenStream::from_str(s)?)\n    }", "test": "fn test_13() {\n    let data = [72, 112];\n    if data.len() < 300 {\n        if let Ok(string) = str::from_utf8(data) {\n            let _ = immediate_fail.parse_str(string);\n        }\n    }\n}"}
{"test_id": "bodil-im-rs/bodil-im-rs-2afaf54/tests-gen/ordset.inputs.rs::test_2", "code": "pub fn remove<BA>(&mut self, a: &BA) -> Option<A>\n    where\n        BA: Hash + Eq + ?Sized,\n        A: Borrow<BA>,\n    {\n        let root = PoolRef::make_mut(&self.pool.0, &mut self.root);\n        let result = root.remove(&self.pool.0, hash_key(&*self.hasher, a), 0, a);\n        if result.is_some() {\n            self.size -= 1;\n        }\n        result.map(|v| v.0)\n    }", "test": "fn test_2() {\n    let actions = [Insert(47244640254)];\n    let mut set = OrdSet::new();\n    let mut nat = NatSet::new();\n    for action in actions {\n        match action {\n            Action::Insert(value) => {\n                let len = nat.len() + if nat.contains(&value) { 0 } else { 1 };\n                nat.insert(value);\n                set.insert(value);\n                assert_eq!(len, set.len());\n            }\n            Action::Remove(value) => {\n                let len = nat.len() - if nat.contains(&value) { 1 } else { 0 };\n                nat.remove(&value);\n                set.remove(&value);\n                assert_eq!(len, set.len());\n            }\n        }\n        assert_eq!(nat.len(), set.len());\n        assert_eq!(OrdSet::from(nat.clone()), set);\n    }\n}"}
{"test_id": "bodil-im-rs/bodil-im-rs-2afaf54/tests-gen/hashset.inputs.rs::test_0", "code": "pub fn remove<BA>(&mut self, a: &BA) -> Option<A>\n    where\n        BA: Hash + Eq + ?Sized,\n        A: Borrow<BA>,\n    {\n        let root = PoolRef::make_mut(&self.pool.0, &mut self.root);\n        let result = root.remove(&self.pool.0, hash_key(&*self.hasher, a), 0, a);\n        if result.is_some() {\n            self.size -= 1;\n        }\n        result.map(|v| v.0)\n    }", "test": "fn test_0() {\n    let actions = [Remove(4503599811130634)];\n    let mut set = HashSet::new();\n    let mut nat = NatSet::new();\n    for action in actions {\n        match action {\n            Action::Insert(value) => {\n                let len = nat.len() + if nat.contains(&value) { 0 } else { 1 };\n                nat.insert(value);\n                set.insert(value);\n                assert_eq!(len, set.len());\n            }\n            Action::Remove(value) => {\n                let len = nat.len() - if nat.contains(&value) { 1 } else { 0 };\n                nat.remove(&value);\n                set.remove(&value);\n                assert_eq!(len, set.len());\n            }\n        }\n        assert_eq!(nat.len(), set.len());\n        assert_eq!(HashSet::from(nat.clone()), set);\n    }\n}"}
{"test_id": "image-rs-image-png/image-rs-image-png-e113d76/tests-gen/roundtrip.inputs.rs::test_78", "code": "fn encode_png < 'a > (width : u8 , filter : u8 , compression : u8 , color_type : u8 , raw_bit_depth : u8 , raw_palette : & 'a [u8] , data : & 'a [u8]) -> Option < (& 'a [u8] , Vec < u8 >) > { let width = width as u32 ; if width == 0 { return None } ; let filter = FilterType :: from_u8 (filter) ? ; let bit_depth = BitDepth :: from_u8 (raw_bit_depth) ? ; let max_palette_length = 3 * u32 :: pow (2 , raw_bit_depth as u32) as usize ; let mut palette = raw_palette ; let color_type = ColorType :: from_u8 (color_type) ? ; if let ColorType :: Indexed = color_type { if raw_palette . len () > max_palette_length { palette = & raw_palette [.. max_palette_length] ; } } let compression = match compression { 0 => png :: Compression :: Default , 1 => png :: Compression :: Fast , 2 => png :: Compression :: Best , 3 => png :: Compression :: Huffman , 4 => png :: Compression :: Rle , _ => return None , } ; let bytes_per_row = raw_row_length_from_width (bit_depth , color_type , width) - 1 ; let height = data . len () / bytes_per_row ; let total_bytes = bytes_per_row * height ; let data_to_encode = & data [.. total_bytes] ; let mut output : Vec < u8 > = Vec :: new () ; { let mut encoder = png :: Encoder :: new (& mut output , width , height as u32) ; encoder . set_depth (bit_depth) ; encoder . set_color (color_type) ; encoder . set_filter (filter) ; encoder . set_compression (compression) ; if let ColorType :: Indexed = color_type { encoder . set_palette (palette) } let mut writer = encoder . write_header () . ok () ? ; writer . write_image_data (data_to_encode) . expect (\"Encoding failed\") ; } Some ((data_to_encode , output)) }", "test": "fn test_78() {\n    let data = (10, 0, 163, 10, 0, [], [10, 0]);\n    if let Some((raw, encoded)) =\n        encode_png(data.0, data.1, data.2, data.3, data.4, &data.5, &data.6)\n    {\n        let (_info, raw_decoded) = decode_png(&encoded);\n        let raw_decoded = &raw_decoded[..raw.len()];\n        assert_eq!(raw, raw_decoded);\n    }\n}"}
{"test_id": "rustls-rustls/rustls-rustls-ae583bd/tests-gen/message.inputs.rs::test_35", "code": "pub fn used(&self) -> usize {\n        self.cursor\n    }", "test": "fn test_35() {\n    let data = [\n        22, 3, 3, 0, 16, 20, 0, 0, 12, 72, 20, 197, 98, 173, 231, 208, 38, 131, 13, 69, 218,\n    ];\n    let mut rdr = Reader::init(data);\n    if let Ok(m) = OpaqueMessage::read(&mut rdr) {\n        let msg = match Message::try_from(m.into_plain_message()) {\n            Ok(msg) => msg,\n            Err(_) => return,\n        };\n        let enc = PlainMessage::from(msg)\n            .into_unencrypted_opaque()\n            .encode();\n        assert_eq!(enc, data[..rdr.used()]);\n    }\n}"}
{"test_id": "image-rs-image-gif/image-rs-image-gif-80fd8c0/tests-gen/decode.inputs.rs::test_12", "code": "fn try_decode (data : & [u8]) -> Result < () , gif :: DecodingError > { let mut reader = gif :: Decoder :: new (data) ? ; while let Some (_) = reader . read_next_frame () ? { } Ok (()) }", "test": "fn test_12() {\n    let data = [10, 10, 0, 138];\n    let _ = try_decode(data);\n}"}
{"test_id": "cloud-hypervisor-cloud-hypervisor/cloud-hypervisor-cloud-hypervisor-db3a5f3/tests-gen/watchdog.inputs.rs::test_30", "code": "pub fn wait_for_epoll_threads(&mut self) {\n        self.common.wait_for_epoll_threads();\n    }", "test": "fn test_30() {\n    let bytes = [15, 10];\n    if bytes.len() < QUEUE_DATA_SIZE || bytes.len() > (QUEUE_DATA_SIZE + MEM_SIZE) {\n        return;\n    }\n    let mut watchdog = virtio_devices::Watchdog::new(\n        \"fuzzer_watchdog\".to_owned(),\n        EventFd::new(EFD_NONBLOCK).unwrap(),\n        SeccompAction::Allow,\n        EventFd::new(EFD_NONBLOCK).unwrap(),\n        None,\n    )\n    .unwrap();\n    let queue_data = &bytes[..QUEUE_DATA_SIZE];\n    let mem_bytes = &bytes[QUEUE_DATA_SIZE..];\n    let q = setup_virt_queue(queue_data.try_into().unwrap());\n    let mem = GuestMemoryMmap::from_ranges(&[(GuestAddress(0), MEM_SIZE)]).unwrap();\n    if mem.write_slice(mem_bytes, GuestAddress(0 as u64)).is_err() {\n        return;\n    }\n    let guest_memory = GuestMemoryAtomic::new(mem);\n    let evt = EventFd::new(0).unwrap();\n    let queue_evt = unsafe { EventFd::from_raw_fd(libc::dup(evt.as_raw_fd())) };\n    queue_evt.write(1).unwrap();\n    watchdog\n        .activate(\n            guest_memory,\n            Arc::new(NoopVirtioInterrupt {}),\n            vec![(0, q, evt)],\n        )\n        .ok();\n    watchdog.wait_for_epoll_threads();\n}"}
{"test_id": "marshallpierce-rust-base64/marshallpierce-rust-base64-4ef33cc/tests-gen/roundtrip_random_config.inputs.rs::test_78", "code": "fn decode<T: AsRef<[u8]>>(&self, input: T) -> Result<Vec<u8>, DecodeError> {\n        fn inner<E>(engine: &E, input_bytes: &[u8]) -> Result<Vec<u8>, DecodeError>\n        where\n            E: Engine + ?Sized,\n        {\n            let estimate = engine.internal_decoded_len_estimate(input_bytes.len());\n            let mut buffer = vec![0; estimate.decoded_len_estimate()];\n\n            let bytes_written = engine\n                .internal_decode(input_bytes, &mut buffer, estimate)?\n                .decoded_len;\n\n            buffer.truncate(bytes_written);\n\n            Ok(buffer)\n        }\n\n        inner(self, input.as_ref())\n    }", "test": "fn test_78() {\n    let data = [137, 128, 66, 164];\n    let engine = utils::random_engine(data);\n    let encoded = engine.encode(data);\n    let decoded = engine.decode(&encoded).unwrap();\n    assert_eq!(data, decoded.as_slice());\n}"}
{"test_id": "dtolnay-semver/dtolnay-semver-750f0ac/tests-gen/sort_version.inputs.rs::test_73", "code": "fn three_versions(bytes: &[u8]) -> Option<[Version; 3]> {\n    let mut inputs = str::from_utf8(bytes).ok()?.split(' ');\n    Some([\n        Version {\n            major: 0,\n            minor: 0,\n            patch: 0,\n            pre: inputs.next().map(Prerelease::new)?.ok()?,\n            build: inputs.next().map(BuildMetadata::new)?.ok()?,\n        },\n        Version {\n            major: 0,\n            minor: 0,\n            patch: 0,\n            pre: inputs.next().map(Prerelease::new)?.ok()?,\n            build: inputs.next().map(BuildMetadata::new)?.ok()?,\n        },\n        Version {\n            major: 0,\n            minor: 0,\n            patch: 0,\n            pre: inputs.next().map(Prerelease::new)?.ok()?,\n            build: inputs.next().map(BuildMetadata::new)?.ok()?,\n        },\n    ])\n}", "test": "fn test_73() {\n    let bytes = [58];\n    if let Some([a, b, c]) = three_versions(bytes) {\n        if a < b && b < c && c < a {\n            panic!(\"{0} < {1} < {2} < {0}\", a, b, c);\n        }\n    }\n}"}
{"test_id": "gimli-rs-gimli/gimli-rs-gimli-3947879/tests-gen/debug_line.inputs.rs::test_33", "code": "pub fn next_row(&mut self) -> Result<Option<(&LineProgramHeader<R, Offset>, &LineRow)>> {\n        // Perform any reset that was required after copying the previous row.\n        self.row.reset(self.program.header());\n\n        loop {\n            // Split the borrow here, rather than calling `self.header()`.\n            match self.instructions.next_instruction(self.program.header()) {\n                Err(err) => return Err(err),\n                Ok(None) => return Ok(None),\n                Ok(Some(instruction)) => {\n                    if self.row.execute(instruction, &mut self.program) {\n                        if self.row.tombstone {\n                            // Perform any reset that was required for the tombstone row.\n                            // Normally this is done when `next_row` is called again, but for\n                            // tombstones we loop immediately.\n                            self.row.reset(self.program.header());\n                        } else {\n                            return Ok(Some((self.header(), &self.row)));\n                        }\n                    }\n                    // Fall through, parse the next instruction, and see if that\n                    // yields a row.\n                }\n            }\n        }\n    }", "test": "fn test_33() {\n    let debug_line = [10, 91, 10];\n    let debug_line = DebugLine::new(&debug_line, LittleEndian);\n    let offset = DebugLineOffset(0);\n    let address_size = 8;\n    if let Ok(program) = debug_line.program(offset, address_size, None, None) {\n        let mut rows = program.rows();\n        while let Ok(Some(row)) = rows.next_row() {\n            let _ = row;\n        }\n    }\n}"}
{"test_id": "gimli-rs-gimli/gimli-rs-gimli-3947879/tests-gen/debug_info.inputs.rs::test_2", "code": "pub fn next(&mut self) -> Result<Option<RawLocListEntry<R>>> {\n        if self.input.is_empty() {\n            return Ok(None);\n        }\n\n        match RawLocListEntry::parse(&mut self.input, self.encoding, self.format) {\n            Ok(entry) => {\n                if entry.is_none() {\n                    self.input.empty();\n                }\n                Ok(entry)\n            }\n            Err(e) => {\n                self.input.empty();\n                Err(e)\n            }\n        }\n    }", "test": "fn test_2() {\n    let sections = (\n        [],\n        [\n            224, 26, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,\n        ],\n    );\n    let (debug_abbrev, debug_info) = sections;\n    let debug_abbrev = DebugAbbrev::new(&debug_abbrev, LittleEndian);\n    let debug_info = DebugInfo::new(&debug_info, LittleEndian);\n    let mut units = debug_info.units();\n    while let Ok(Some(unit)) = units.next() {\n        if let Ok(abbrevs) = unit.abbreviations(&debug_abbrev) {\n            let mut cursor = unit.entries(&abbrevs);\n            while let Ok(Some((_delta, entry))) = cursor.next_dfs() {\n                let mut attrs = entry.attrs();\n                while let Ok(Some(_attr)) = attrs.next() {\n                    continue;\n                }\n            }\n        }\n    }\n}"}
{"test_id": "bodil-im-rs/bodil-im-rs-2afaf54/tests-gen/ordset.inputs.rs::test_45", "code": "pub fn remove<BA>(&mut self, a: &BA) -> Option<A>\n    where\n        BA: Hash + Eq + ?Sized,\n        A: Borrow<BA>,\n    {\n        let root = PoolRef::make_mut(&self.pool.0, &mut self.root);\n        let result = root.remove(&self.pool.0, hash_key(&*self.hasher, a), 0, a);\n        if result.is_some() {\n            self.size -= 1;\n        }\n        result.map(|v| v.0)\n    }", "test": "fn test_45() {\n    let actions = [Remove(72057594021871615)];\n    let mut set = OrdSet::new();\n    let mut nat = NatSet::new();\n    for action in actions {\n        match action {\n            Action::Insert(value) => {\n                let len = nat.len() + if nat.contains(&value) { 0 } else { 1 };\n                nat.insert(value);\n                set.insert(value);\n                assert_eq!(len, set.len());\n            }\n            Action::Remove(value) => {\n                let len = nat.len() - if nat.contains(&value) { 1 } else { 0 };\n                nat.remove(&value);\n                set.remove(&value);\n                assert_eq!(len, set.len());\n            }\n        }\n        assert_eq!(nat.len(), set.len());\n        assert_eq!(OrdSet::from(nat.clone()), set);\n    }\n}"}
{"test_id": "cloud-hypervisor-cloud-hypervisor/cloud-hypervisor-cloud-hypervisor-db3a5f3/tests-gen/balloon.inputs.rs::test_70", "code": "pub fn wait_for_epoll_threads(&mut self) {\n        self.common.wait_for_epoll_threads();\n    }", "test": "fn test_70() {\n    let bytes = [148];\n    if bytes.len() < QUEUE_DATA_SIZE * QUEUE_NUM\n        || bytes.len() > (QUEUE_DATA_SIZE * QUEUE_NUM + MEM_SIZE)\n    {\n        return;\n    }\n    let mut balloon = virtio_devices::Balloon::new(\n        \"fuzzer_balloon\".to_owned(),\n        BALLOON_SIZE,\n        true,\n        true,\n        SeccompAction::Allow,\n        EventFd::new(EFD_NONBLOCK).unwrap(),\n        None,\n    )\n    .unwrap();\n    let queue_data = &bytes[..QUEUE_DATA_SIZE * QUEUE_NUM];\n    let mem_bytes = &bytes[QUEUE_DATA_SIZE * QUEUE_NUM..];\n    let mem = GuestMemoryMmap::from_ranges(&[(GuestAddress(0), MEM_SIZE)]).unwrap();\n    if mem.write_slice(mem_bytes, GuestAddress(0 as u64)).is_err() {\n        return;\n    }\n    let guest_memory = GuestMemoryAtomic::new(mem);\n    let mut queues = setup_virt_queues(\n        &[\n            &queue_data[..QUEUE_DATA_SIZE].try_into().unwrap(),\n            &queue_data[QUEUE_DATA_SIZE..QUEUE_DATA_SIZE * 2]\n                .try_into()\n                .unwrap(),\n            &queue_data[QUEUE_DATA_SIZE * 2..QUEUE_DATA_SIZE * 3]\n                .try_into()\n                .unwrap(),\n        ],\n        0,\n    );\n    let inflate_q = queues.remove(0);\n    let inflate_evt = EventFd::new(0).unwrap();\n    let inflate_queue_evt = unsafe { EventFd::from_raw_fd(libc::dup(inflate_evt.as_raw_fd())) };\n    let deflate_q = queues.remove(0);\n    let deflate_evt = EventFd::new(0).unwrap();\n    let deflate_queue_evt = unsafe { EventFd::from_raw_fd(libc::dup(deflate_evt.as_raw_fd())) };\n    let reporting_q = queues.remove(0);\n    let reporting_evt = EventFd::new(0).unwrap();\n    let reporting_queue_evt = unsafe { EventFd::from_raw_fd(libc::dup(reporting_evt.as_raw_fd())) };\n    inflate_queue_evt.write(1).unwrap();\n    deflate_queue_evt.write(1).unwrap();\n    reporting_queue_evt.write(1).unwrap();\n    balloon\n        .activate(\n            guest_memory,\n            Arc::new(NoopVirtioInterrupt {}),\n            vec![\n                (0, inflate_q, inflate_evt),\n                (1, deflate_q, deflate_evt),\n                (2, reporting_q, reporting_evt),\n            ],\n        )\n        .ok();\n    balloon.wait_for_epoll_threads();\n}"}
{"test_id": "BurntSushi-memchr/BurntSushi-memchr-f3fde7a/tests-gen/memrchr2.inputs.rs::test_95", "code": "fn count(self) -> usize {\n        self.it.count(|s, e| {\n            // SAFETY: We rely on our generic iterator to return valid start\n            // and end pointers.\n            unsafe { count_raw(self.needle1, s, e) }\n        })\n    }", "test": "fn test_95() {\n    let data = [13];\n    if data.len() < 2 {\n        return;\n    }\n    memchr2_iter(data[0], data[1], &data[2..]).rev().count();\n}"}
{"test_id": "zip-rs-zip/zip-rs-zip-ed187d6/tests-gen/fuzz_read.inputs.rs::test_10", "code": "fn decompress_all (data : & [u8]) -> Result < () , Box < dyn std :: error :: Error > > { let reader = std :: io :: Cursor :: new (data) ; let mut zip = zip :: ZipArchive :: new (reader) ? ; for i in 0 .. zip . len () { let mut file = zip . by_index (i) ? ; if file . size () < 1 << 20 { let _ = std :: io :: copy (& mut file , & mut std :: io :: sink ()) ; } } Ok (()) }", "test": "fn test_10() {\n    let data = [10];\n    let _ = decompress_all(data);\n}"}
{"test_id": "marshallpierce-rust-base64/marshallpierce-rust-base64-4ef33cc/tests-gen/roundtrip.inputs.rs::test_78", "code": "pub fn decode<T: AsRef<[u8]>>(input: T) -> Result<Vec<u8>, DecodeError> {\n    STANDARD.decode(input)\n}", "test": "fn test_78() {\n    let data = [0, 63];\n    let encoded = STANDARD.encode(data);\n    let decoded = STANDARD.decode(&encoded).unwrap();\n    assert_eq!(data, decoded.as_slice());\n}"}
{"test_id": "uutils-coreutils/uutils-coreutils-73b7c46/tests-gen/fuzz_parse_size.inputs.rs::test_81", "code": "pub fn parse_size(size: &str) -> Result<u64, ParseSizeError> {\n    Parser::default().parse(size)\n}", "test": "fn test_81() {\n    let data = [10, 10, 10, 42];\n    if let Ok(s) = std::str::from_utf8(data) {\n        _ = parse_size(s);\n    }\n}"}
{"test_id": "gimli-rs-gimli/gimli-rs-gimli-3947879/tests-gen/eh_frame.inputs.rs::test_7", "code": "pub fn next_row(&mut self) -> Result<Option<(&LineProgramHeader<R, Offset>, &LineRow)>> {\n        // Perform any reset that was required after copying the previous row.\n        self.row.reset(self.program.header());\n\n        loop {\n            // Split the borrow here, rather than calling `self.header()`.\n            match self.instructions.next_instruction(self.program.header()) {\n                Err(err) => return Err(err),\n                Ok(None) => return Ok(None),\n                Ok(Some(instruction)) => {\n                    if self.row.execute(instruction, &mut self.program) {\n                        if self.row.tombstone {\n                            // Perform any reset that was required for the tombstone row.\n                            // Normally this is done when `next_row` is called again, but for\n                            // tombstones we loop immediately.\n                            self.row.reset(self.program.header());\n                        } else {\n                            return Ok(Some((self.header(), &self.row)));\n                        }\n                    }\n                    // Fall through, parse the next instruction, and see if that\n                    // yields a row.\n                }\n            }\n        }\n    }", "test": "fn test_7() {\n    let eh_frame = [41, 206, 96];\n    let eh_frame = EhFrame::new(&eh_frame, LittleEndian);\n    let mut ctx = Box::new(UnwindContext::new());\n    let bases = BaseAddresses::default()\n        .set_eh_frame(0)\n        .set_eh_frame_hdr(0)\n        .set_text(0)\n        .set_got(0);\n    let mut entries = eh_frame.entries(&bases);\n    while let Ok(Some(entry)) = entries.next() {\n        match entry {\n            CieOrFde::Cie(_) => continue,\n            CieOrFde::Fde(partial) => {\n                if let Ok(fde) = partial.parse(EhFrame::cie_from_offset) {\n                    if let Ok(mut table) = fde.rows(&eh_frame, &bases, &mut ctx) {\n                        while let Ok(Some(_row)) = table.next_row() {\n                            continue;\n                        }\n                    }\n                }\n            }\n        };\n    }\n}"}
{"test_id": "zip-rs-zip/zip-rs-zip-ed187d6/tests-gen/fuzz_read.inputs.rs::test_8", "code": "fn decompress_all (data : & [u8]) -> Result < () , Box < dyn std :: error :: Error > > { let reader = std :: io :: Cursor :: new (data) ; let mut zip = zip :: ZipArchive :: new (reader) ? ; for i in 0 .. zip . len () { let mut file = zip . by_index (i) ? ; if file . size () < 1 << 20 { let _ = std :: io :: copy (& mut file , & mut std :: io :: sink ()) ; } } Ok (()) }", "test": "fn test_8() {\n    let data = [200];\n    let _ = decompress_all(data);\n}"}
{"test_id": "cloud-hypervisor-cloud-hypervisor/cloud-hypervisor-cloud-hypervisor-db3a5f3/tests-gen/console.inputs.rs::test_24", "code": "pub fn wait_for_epoll_threads(&mut self) {\n        self.common.wait_for_epoll_threads();\n    }", "test": "fn test_24() {\n    let bytes = [8, 10];\n    if bytes.len() < (QUEUE_DATA_SIZE + QUEUE_BYTES_SIZE) * QUEUE_NUM + CONSOLE_INPUT_SIZE\n        || bytes.len()\n            > (QUEUE_DATA_SIZE + QUEUE_BYTES_SIZE) * QUEUE_NUM + CONSOLE_INPUT_SIZE + MEM_SIZE\n    {\n        return;\n    }\n    let (pipe_rx, mut pipe_tx) = create_pipe().unwrap();\n    let output = unsafe {\n        File::from_raw_fd(\n            memfd_create(&std::ffi::CString::new(\"fuzz_console_output\").unwrap()).unwrap(),\n        )\n    };\n    let endpoint = virtio_devices::Endpoint::FilePair(output, pipe_rx);\n    let (mut console, _) = virtio_devices::Console::new(\n        \"fuzzer_console\".to_owned(),\n        endpoint,\n        None,\n        false,\n        SeccompAction::Allow,\n        EventFd::new(EFD_NONBLOCK).unwrap(),\n        None,\n    )\n    .unwrap();\n    let console_input_bytes = &bytes[..CONSOLE_INPUT_SIZE];\n    let queue_data = &bytes[CONSOLE_INPUT_SIZE..CONSOLE_INPUT_SIZE + QUEUE_DATA_SIZE * QUEUE_NUM];\n    let queue_bytes = &bytes[CONSOLE_INPUT_SIZE + QUEUE_DATA_SIZE * QUEUE_NUM\n        ..CONSOLE_INPUT_SIZE + (QUEUE_DATA_SIZE + QUEUE_BYTES_SIZE) * QUEUE_NUM];\n    let mem_bytes = &bytes[CONSOLE_INPUT_SIZE + (QUEUE_DATA_SIZE + QUEUE_BYTES_SIZE) * QUEUE_NUM..];\n    let mut queues = setup_virt_queues(\n        &[\n            &queue_data[..QUEUE_DATA_SIZE].try_into().unwrap(),\n            &queue_data[QUEUE_DATA_SIZE..QUEUE_DATA_SIZE * 2]\n                .try_into()\n                .unwrap(),\n        ],\n        BASE_VIRT_QUEUE_ADDR,\n    );\n    let mem = GuestMemoryMmap::from_ranges(&[\n        (GuestAddress(0), MEM_SIZE),\n        (GuestAddress(BASE_VIRT_QUEUE_ADDR), queue_bytes.len()),\n    ])\n    .unwrap();\n    if mem\n        .write_slice(queue_bytes, GuestAddress(BASE_VIRT_QUEUE_ADDR))\n        .is_err()\n    {\n        return;\n    }\n    if mem.write_slice(mem_bytes, GuestAddress(0 as u64)).is_err() {\n        return;\n    }\n    let guest_memory = GuestMemoryAtomic::new(mem);\n    let input_queue = queues.remove(0);\n    let input_evt = EventFd::new(0).unwrap();\n    let input_queue_evt = unsafe { EventFd::from_raw_fd(libc::dup(input_evt.as_raw_fd())) };\n    let output_queue = queues.remove(0);\n    let output_evt = EventFd::new(0).unwrap();\n    let output_queue_evt = unsafe { EventFd::from_raw_fd(libc::dup(output_evt.as_raw_fd())) };\n    input_queue_evt.write(1).unwrap();\n    output_queue_evt.write(1).unwrap();\n    pipe_tx.write_all(console_input_bytes).unwrap();\n    console\n        .activate(\n            guest_memory,\n            Arc::new(NoopVirtioInterrupt {}),\n            vec![(0, input_queue, input_evt), (1, output_queue, output_evt)],\n        )\n        .unwrap();\n    console.wait_for_epoll_threads();\n}"}
{"test_id": "BurntSushi-memchr/BurntSushi-memchr-f3fde7a/tests-gen/memchr2.inputs.rs::test_5", "code": "fn count(self) -> usize {\n        self.it.count(|s, e| {\n            // SAFETY: We rely on our generic iterator to return valid start\n            // and end pointers.\n            unsafe { count_raw(self.needle1, s, e) }\n        })\n    }", "test": "fn test_5() {\n    let data = [10, 10];\n    if data.len() < 2 {\n        return;\n    }\n    memchr2_iter(data[0], data[1], &data[2..]).count();\n}"}
{"test_id": "cloud-hypervisor-cloud-hypervisor/cloud-hypervisor-cloud-hypervisor-db3a5f3/tests-gen/console.inputs.rs::test_31", "code": "pub fn wait_for_epoll_threads(&mut self) {\n        self.common.wait_for_epoll_threads();\n    }", "test": "fn test_31() {\n    let bytes = [10, 242, 10];\n    if bytes.len() < (QUEUE_DATA_SIZE + QUEUE_BYTES_SIZE) * QUEUE_NUM + CONSOLE_INPUT_SIZE\n        || bytes.len()\n            > (QUEUE_DATA_SIZE + QUEUE_BYTES_SIZE) * QUEUE_NUM + CONSOLE_INPUT_SIZE + MEM_SIZE\n    {\n        return;\n    }\n    let (pipe_rx, mut pipe_tx) = create_pipe().unwrap();\n    let output = unsafe {\n        File::from_raw_fd(\n            memfd_create(&std::ffi::CString::new(\"fuzz_console_output\").unwrap()).unwrap(),\n        )\n    };\n    let endpoint = virtio_devices::Endpoint::FilePair(output, pipe_rx);\n    let (mut console, _) = virtio_devices::Console::new(\n        \"fuzzer_console\".to_owned(),\n        endpoint,\n        None,\n        false,\n        SeccompAction::Allow,\n        EventFd::new(EFD_NONBLOCK).unwrap(),\n        None,\n    )\n    .unwrap();\n    let console_input_bytes = &bytes[..CONSOLE_INPUT_SIZE];\n    let queue_data = &bytes[CONSOLE_INPUT_SIZE..CONSOLE_INPUT_SIZE + QUEUE_DATA_SIZE * QUEUE_NUM];\n    let queue_bytes = &bytes[CONSOLE_INPUT_SIZE + QUEUE_DATA_SIZE * QUEUE_NUM\n        ..CONSOLE_INPUT_SIZE + (QUEUE_DATA_SIZE + QUEUE_BYTES_SIZE) * QUEUE_NUM];\n    let mem_bytes = &bytes[CONSOLE_INPUT_SIZE + (QUEUE_DATA_SIZE + QUEUE_BYTES_SIZE) * QUEUE_NUM..];\n    let mut queues = setup_virt_queues(\n        &[\n            &queue_data[..QUEUE_DATA_SIZE].try_into().unwrap(),\n            &queue_data[QUEUE_DATA_SIZE..QUEUE_DATA_SIZE * 2]\n                .try_into()\n                .unwrap(),\n        ],\n        BASE_VIRT_QUEUE_ADDR,\n    );\n    let mem = GuestMemoryMmap::from_ranges(&[\n        (GuestAddress(0), MEM_SIZE),\n        (GuestAddress(BASE_VIRT_QUEUE_ADDR), queue_bytes.len()),\n    ])\n    .unwrap();\n    if mem\n        .write_slice(queue_bytes, GuestAddress(BASE_VIRT_QUEUE_ADDR))\n        .is_err()\n    {\n        return;\n    }\n    if mem.write_slice(mem_bytes, GuestAddress(0 as u64)).is_err() {\n        return;\n    }\n    let guest_memory = GuestMemoryAtomic::new(mem);\n    let input_queue = queues.remove(0);\n    let input_evt = EventFd::new(0).unwrap();\n    let input_queue_evt = unsafe { EventFd::from_raw_fd(libc::dup(input_evt.as_raw_fd())) };\n    let output_queue = queues.remove(0);\n    let output_evt = EventFd::new(0).unwrap();\n    let output_queue_evt = unsafe { EventFd::from_raw_fd(libc::dup(output_evt.as_raw_fd())) };\n    input_queue_evt.write(1).unwrap();\n    output_queue_evt.write(1).unwrap();\n    pipe_tx.write_all(console_input_bytes).unwrap();\n    console\n        .activate(\n            guest_memory,\n            Arc::new(NoopVirtioInterrupt {}),\n            vec![(0, input_queue, input_evt), (1, output_queue, output_evt)],\n        )\n        .unwrap();\n    console.wait_for_epoll_threads();\n}"}
{"test_id": "image-rs-image/image-rs-image-e5580ec/tests-gen/fuzzer_script_tga.inputs.rs::test_49", "code": "fn decode(encoded: &[u8]) -> Vec<u8> {\n        let decoder = JpegDecoder::new(Cursor::new(encoded)).expect(\"Could not decode image\");\n\n        let mut decoded = vec![0; decoder.total_bytes() as usize];\n        decoder\n            .read_image(&mut decoded)\n            .expect(\"Could not decode image\");\n        decoded\n    }", "test": "fn test_49() {\n    let data = [10, 10, 37, 178];\n    let _ = decode(data);\n}"}
{"test_id": "rust-bio-rust-bio/rust-bio-rust-bio-319a0d8/tests-gen/banded_aligner.inputs.rs::test_25", "code": "fn validate_alignment_score(al: &Alignment, x: TextSlice, y: TextSlice, scoring: &Scoring<MatchParams>) -> bool {\n    use AlignmentOperation::*;\n    let path = al.path();\n    let mut score = 0;\n    if al.mode==AlignmentMode::Custom {\n        if al.xstart > 0 {\n            score += scoring.xclip_prefix;\n        }\n        if al.ystart > 0 {\n            score += scoring.yclip_prefix;\n        }\n        if al.xend < al.xlen {\n            score += scoring.xclip_suffix;\n        }\n        if al.yend < al.ylen {\n            score += scoring.yclip_suffix;\n        }\n    }\n    let mut last_op = None;\n    for (i, j, op) in path {\n        score += match op {\n            Match | Subst => scoring.match_fn.score(x[i-1], y[j-1]),\n            Del => if last_op==Some(Del) { scoring.gap_extend } else { scoring.gap_open + scoring.gap_extend },\n            Ins => if last_op==Some(Ins) { scoring.gap_extend } else { scoring.gap_open + scoring.gap_extend },\n            _ => 0,\n        };\n        last_op = Some(op);\n    }\n    al.score==score\n}", "test": "fn test_25() {\n    let data = [10, 10];\n    if data.len() < 50 || data.len() > 300 {\n        return;\n    }\n    let (split_byte, data) = data.split_first().unwrap();\n    let (kmer_byte, data) = data.split_first().unwrap();\n    let (window_byte, data) = data.split_first().unwrap();\n    let (match_score_byte, data) = data.split_first().unwrap();\n    let (mismatch_score_byte, data) = data.split_first().unwrap();\n    let (gap_open_byte, data) = data.split_first().unwrap();\n    let (gap_extend_byte, data) = data.split_first().unwrap();\n    let (xclip_prefix_byte, data) = data.split_first().unwrap();\n    let (xclip_suffix_byte, data) = data.split_first().unwrap();\n    let (yclip_prefix_byte, data) = data.split_first().unwrap();\n    let (yclip_suffix_byte, data) = data.split_first().unwrap();\n    let alphabets = b\"ACGT\";\n    let v: Vec<_> = data\n        .iter()\n        .map(|i| alphabets[(*i as usize) % alphabets.len()])\n        .collect();\n    let kmer_len: usize = 5 + (*kmer_byte as usize) % 10;\n    let window_size: usize = 5 + (*window_byte as usize) % 10;\n    let split_pos: usize = min(data.len() - 1, max(*split_byte as usize, 1));\n    let match_score = 1 + (*match_score_byte as i32) % 5;\n    let mismatch_score = -((*mismatch_score_byte as i32) % 10);\n    let gap_open = -((*gap_open_byte as i32) % 20);\n    let gap_extend = -((*gap_extend_byte as i32) % 10);\n    let (x, y) = v.split_at(split_pos);\n    println!(\n        \"x: {}, y: {}, k: {}, w: {}, scoring ({}, {}, {}, {})\",\n        String::from_utf8(x.to_vec()).unwrap(),\n        String::from_utf8(y.to_vec()).unwrap(),\n        kmer_len,\n        window_size,\n        gap_open,\n        gap_extend,\n        match_score,\n        mismatch_score\n    );\n    let base_score = Scoring::from_scores(gap_open, gap_extend, match_score, mismatch_score);\n    {\n        println!(\n            \"Clip scores ({}, {}, {}, {})\",\n            xclip_prefix_byte, xclip_suffix_byte, yclip_prefix_byte, yclip_suffix_byte\n        );\n        let scoring = Scoring {\n            xclip_prefix: -(*xclip_prefix_byte as i32),\n            xclip_suffix: -(*xclip_suffix_byte as i32),\n            yclip_prefix: -(*yclip_prefix_byte as i32),\n            yclip_suffix: -(*yclip_suffix_byte as i32),\n            ..base_score.clone()\n        };\n        let mut b_aligner = banded::Aligner::with_scoring(scoring.clone(), kmer_len, window_size);\n        let b_alignment = b_aligner.custom(x, y);\n        assert!(validate_alignment_score(&b_alignment, x, y, &scoring));\n        let mut f_aligner = pairwise::Aligner::with_scoring(scoring.clone());\n        let f_alignment = f_aligner.custom(x, y);\n        assert!(validate_alignment_score(&f_alignment, x, y, &scoring));\n        let band_all_alignment = b_aligner.custom_with_matches(x, y, &Vec::new());\n        assert_eq!(band_all_alignment.score, f_alignment.score);\n    }\n    {\n        let scoring = Scoring {\n            xclip_prefix: 0,\n            xclip_suffix: 0,\n            yclip_suffix: 0,\n            ..base_score.clone()\n        };\n        let mut b_aligner = banded::Aligner::with_scoring(scoring.clone(), kmer_len, window_size);\n        let b_alignment = b_aligner.custom(x, y);\n        assert_eq!(b_alignment.ystart, 0);\n        assert!(validate_alignment_score(&b_alignment, x, y, &scoring));\n        let mut f_aligner = pairwise::Aligner::with_scoring(scoring.clone());\n        let f_alignment = f_aligner.custom(x, y);\n        assert_eq!(f_alignment.ystart, 0);\n        assert!(validate_alignment_score(&f_alignment, x, y, &scoring));\n        let band_all_alignment = b_aligner.custom_with_matches(x, y, &Vec::new());\n        assert_eq!(band_all_alignment.score, f_alignment.score);\n    }\n    {\n        let scoring = Scoring {\n            xclip_prefix: 0,\n            xclip_suffix: 0,\n            yclip_prefix: 0,\n            ..base_score.clone()\n        };\n        let mut b_aligner = banded::Aligner::with_scoring(scoring.clone(), kmer_len, window_size);\n        let b_alignment = b_aligner.custom(x, y);\n        assert_eq!(b_alignment.yend, b_alignment.ylen);\n        assert!(validate_alignment_score(&b_alignment, x, y, &scoring));\n        let mut f_aligner = pairwise::Aligner::with_scoring(scoring.clone());\n        let f_alignment = f_aligner.custom(x, y);\n        assert_eq!(f_alignment.yend, f_alignment.ylen);\n        assert!(validate_alignment_score(&f_alignment, x, y, &scoring));\n        let band_all_alignment = b_aligner.custom_with_matches(x, y, &Vec::new());\n        assert_eq!(band_all_alignment.score, f_alignment.score);\n    }\n    {\n        let scoring = Scoring {\n            xclip_suffix: 0,\n            yclip_prefix: 0,\n            yclip_suffix: 0,\n            ..base_score.clone()\n        };\n        let mut b_aligner = banded::Aligner::with_scoring(scoring.clone(), kmer_len, window_size);\n        let b_alignment = b_aligner.custom(x, y);\n        assert_eq!(b_alignment.xstart, 0);\n        assert!(validate_alignment_score(&b_alignment, x, y, &scoring));\n        let mut f_aligner = pairwise::Aligner::with_scoring(scoring.clone());\n        let f_alignment = f_aligner.custom(x, y);\n        assert_eq!(f_alignment.xstart, 0);\n        assert!(validate_alignment_score(&f_alignment, x, y, &scoring));\n        let band_all_alignment = b_aligner.custom_with_matches(x, y, &Vec::new());\n        assert_eq!(band_all_alignment.score, f_alignment.score);\n    }\n    {\n        let scoring = Scoring {\n            xclip_prefix: 0,\n            yclip_prefix: 0,\n            yclip_suffix: 0,\n            ..base_score.clone()\n        };\n        let mut b_aligner = banded::Aligner::with_scoring(scoring.clone(), kmer_len, window_size);\n        let b_alignment = b_aligner.custom(x, y);\n        assert_eq!(b_alignment.xend, b_alignment.xlen);\n        assert!(validate_alignment_score(&b_alignment, x, y, &scoring));\n        let mut f_aligner = pairwise::Aligner::with_scoring(scoring.clone());\n        let f_alignment = f_aligner.custom(x, y);\n        assert_eq!(f_alignment.xend, f_alignment.xlen);\n        assert!(validate_alignment_score(&f_alignment, x, y, &scoring));\n        let band_all_alignment = b_aligner.custom_with_matches(x, y, &Vec::new());\n        assert_eq!(band_all_alignment.score, f_alignment.score);\n    }\n    {\n        let mut aligner = banded::Aligner::with_scoring(base_score.clone(), kmer_len, window_size);\n        let alignment = aligner.local(x, y);\n        assert!(alignment.score >= 0);\n        assert!(validate_alignment_score(&alignment, x, y, &base_score));\n        let alignment = aligner.semiglobal(x, y);\n        assert_eq!(alignment.xstart, 0);\n        assert_eq!(alignment.xend, alignment.xlen);\n        assert!(validate_alignment_score(&alignment, x, y, &base_score));\n        let alignment = aligner.global(x, y);\n        assert_eq!(alignment.xstart, 0);\n        assert_eq!(alignment.xend, alignment.xlen);\n        assert_eq!(alignment.ystart, 0);\n        assert_eq!(alignment.yend, alignment.ylen);\n        assert!(validate_alignment_score(&alignment, x, y, &base_score));\n    }\n    {\n        let mut aligner = pairwise::Aligner::with_scoring(base_score.clone());\n        let alignment = aligner.local(x, y);\n        assert!(alignment.score >= 0);\n        assert!(validate_alignment_score(&alignment, x, y, &base_score));\n        let alignment = aligner.semiglobal(x, y);\n        assert_eq!(alignment.xstart, 0);\n        assert_eq!(alignment.xend, alignment.xlen);\n        assert!(validate_alignment_score(&alignment, x, y, &base_score));\n        let alignment = aligner.global(x, y);\n        assert_eq!(alignment.xstart, 0);\n        assert_eq!(alignment.xend, alignment.xlen);\n        assert_eq!(alignment.ystart, 0);\n        assert_eq!(alignment.yend, alignment.ylen);\n        assert!(validate_alignment_score(&alignment, x, y, &base_score));\n    }\n}"}
{"test_id": "marshallpierce-rust-base64/marshallpierce-rust-base64-4ef33cc/tests-gen/decode_random.inputs.rs::test_38", "code": "fn decode<T: AsRef<[u8]>>(&self, input: T) -> Result<Vec<u8>, DecodeError> {\n        fn inner<E>(engine: &E, input_bytes: &[u8]) -> Result<Vec<u8>, DecodeError>\n        where\n            E: Engine + ?Sized,\n        {\n            let estimate = engine.internal_decoded_len_estimate(input_bytes.len());\n            let mut buffer = vec![0; estimate.decoded_len_estimate()];\n\n            let bytes_written = engine\n                .internal_decode(input_bytes, &mut buffer, estimate)?\n                .decoded_len;\n\n            buffer.truncate(bytes_written);\n\n            Ok(buffer)\n        }\n\n        inner(self, input.as_ref())\n    }", "test": "fn test_38() {\n    let data = [211, 96];\n    let engine = utils::random_engine(data);\n    let _ = engine.decode(data);\n}"}
{"test_id": "rustls-rustls/rustls-rustls-ae583bd/tests-gen/server.inputs.rs::test_72", "code": "pub fn process_new_packets(&mut self) -> Result<IoState, Error> {\n        match self {\n            Self::Client(conn) => conn.process_new_packets(),\n            Self::Server(conn) => conn.process_new_packets(),\n        }\n    }", "test": "fn test_72() {\n    let data = [\n        22, 3, 1, 0, 196, 1, 0, 0, 183, 3, 3, 220, 22, 51, 168, 177, 163, 9, 68, 55, 77, 215, 35,\n        28, 3, 125, 157, 176, 186, 53, 22, 211, 5, 127, 250, 92, 65, 31, 143, 93, 97, 146, 138, 0,\n        0, 20, 19, 3, 19, 2, 19, 1, 204, 169, 204, 168, 192, 44, 192, 43, 3, 1, 0, 53, 219, 184,\n        117, 77, 19, 58, 216, 56, 206, 200, 189, 166, 130, 136, 75, 179, 221, 205, 76, 177, 233,\n        190, 144, 63, 232, 169, 106, 107, 196, 128, 137, 238, 184, 112, 79, 244, 78, 254, 64, 128,\n        90, 154, 127, 6, 156, 172, 21, 87, 252, 250, 121, 196, 88, 45, 208, 213, 175, 154, 154,\n        143, 29, 49, 69, 68, 88,\n    ];\n    let config = Arc::new(\n        ServerConfig::builder()\n            .with_safe_defaults()\n            .with_no_client_auth()\n            .with_cert_resolver(Arc::new(Fail)),\n    );\n    let mut server = ServerConnection::new(config).unwrap();\n    let _ = server.read_tls(&mut io::Cursor::new(data));\n    let _ = server.process_new_packets();\n}"}
{"test_id": "BurntSushi-memchr/BurntSushi-memchr-f3fde7a/tests-gen/memchr.inputs.rs::test_56", "code": "fn count(self) -> usize {\n        self.it.count(|s, e| {\n            // SAFETY: We rely on our generic iterator to return valid start\n            // and end pointers.\n            unsafe { count_raw(self.needle1, s, e) }\n        })\n    }", "test": "fn test_56() {\n    let data = [48, 49];\n    if data.is_empty() {\n        return;\n    }\n    memchr_iter(data[0], &data[1..]).count();\n}"}
{"test_id": "bodil-im-rs/bodil-im-rs-2afaf54/tests-gen/ordset.inputs.rs::test_23", "code": "pub fn remove<BA>(&mut self, a: &BA) -> Option<A>\n    where\n        BA: Hash + Eq + ?Sized,\n        A: Borrow<BA>,\n    {\n        let root = PoolRef::make_mut(&self.pool.0, &mut self.root);\n        let result = root.remove(&self.pool.0, hash_key(&*self.hasher, a), 0, a);\n        if result.is_some() {\n            self.size -= 1;\n        }\n        result.map(|v| v.0)\n    }", "test": "fn test_23() {\n    let actions = [Remove(72057589742993402)];\n    let mut set = OrdSet::new();\n    let mut nat = NatSet::new();\n    for action in actions {\n        match action {\n            Action::Insert(value) => {\n                let len = nat.len() + if nat.contains(&value) { 0 } else { 1 };\n                nat.insert(value);\n                set.insert(value);\n                assert_eq!(len, set.len());\n            }\n            Action::Remove(value) => {\n                let len = nat.len() - if nat.contains(&value) { 1 } else { 0 };\n                nat.remove(&value);\n                set.remove(&value);\n                assert_eq!(len, set.len());\n            }\n        }\n        assert_eq!(nat.len(), set.len());\n        assert_eq!(OrdSet::from(nat.clone()), set);\n    }\n}"}
{"test_id": "BurntSushi-memchr/BurntSushi-memchr-f3fde7a/tests-gen/memrchr3.inputs.rs::test_10", "code": "fn count(self) -> usize {\n        self.it.count(|s, e| {\n            // SAFETY: We rely on our generic iterator to return valid start\n            // and end pointers.\n            unsafe { count_raw(self.needle1, s, e) }\n        })\n    }", "test": "fn test_10() {\n    let data = [41, 35];\n    if data.len() < 3 {\n        return;\n    }\n    memchr3_iter(data[0], data[1], data[2], &data[3..]).rev().count();\n}"}
{"test_id": "cloud-hypervisor-cloud-hypervisor/cloud-hypervisor-cloud-hypervisor-db3a5f3/tests-gen/iommu.inputs.rs::test_4", "code": "pub fn wait_for_epoll_threads(&mut self) {\n        self.common.wait_for_epoll_threads();\n    }", "test": "fn test_4() {\n    let bytes = [58, 4, 10];\n    if bytes.len() < (QUEUE_DATA_SIZE + QUEUE_BYTES_SIZE)\n        || bytes.len() > (QUEUE_DATA_SIZE + QUEUE_BYTES_SIZE + MEM_SIZE)\n    {\n        return;\n    }\n    let (mut iommu, _) = virtio_devices::Iommu::new(\n        \"fuzzer_iommu\".to_owned(),\n        SeccompAction::Allow,\n        EventFd::new(EFD_NONBLOCK).unwrap(),\n        ((MEM_SIZE - IOVA_SPACE_SIZE) as u64, (MEM_SIZE - 1) as u64),\n        None,\n    )\n    .unwrap();\n    let queue_data = &bytes[..QUEUE_DATA_SIZE];\n    let queue_bytes = &bytes[QUEUE_DATA_SIZE..QUEUE_DATA_SIZE + QUEUE_BYTES_SIZE];\n    let mem_bytes = &bytes[QUEUE_DATA_SIZE + QUEUE_BYTES_SIZE..];\n    let request_queue = setup_virt_queue(queue_data.try_into().unwrap());\n    let _event_queue = setup_virt_queue(queue_data.try_into().unwrap());\n    let mem = GuestMemoryMmap::from_ranges(&[\n        (GuestAddress(0), MEM_SIZE),\n        (GuestAddress(DESC_TABLE_ADDR), QUEUE_BYTES_SIZE),\n    ])\n    .unwrap();\n    if mem\n        .write_slice(queue_bytes, GuestAddress(DESC_TABLE_ADDR))\n        .is_err()\n    {\n        return;\n    }\n    if mem.write_slice(mem_bytes, GuestAddress(0 as u64)).is_err() {\n        return;\n    }\n    let guest_memory = GuestMemoryAtomic::new(mem);\n    let request_evt = EventFd::new(0).unwrap();\n    let request_queue_evt = unsafe { EventFd::from_raw_fd(libc::dup(request_evt.as_raw_fd())) };\n    let _event_evt = EventFd::new(0).unwrap();\n    request_queue_evt.write(1).unwrap();\n    iommu\n        .activate(\n            guest_memory,\n            Arc::new(NoopVirtioInterrupt {}),\n            vec![\n                (0, request_queue, request_evt),\n                (0, _event_queue, _event_evt),\n            ],\n        )\n        .ok();\n    iommu.wait_for_epoll_threads();\n}"}
{"test_id": "image-rs-image/image-rs-image-e5580ec/tests-gen/fuzzer_script_tga.inputs.rs::test_94", "code": "fn decode(encoded: &[u8]) -> Vec<u8> {\n        let decoder = JpegDecoder::new(Cursor::new(encoded)).expect(\"Could not decode image\");\n\n        let mut decoded = vec![0; decoder.total_bytes() as usize];\n        decoder\n            .read_image(&mut decoded)\n            .expect(\"Could not decode image\");\n        decoded\n    }", "test": "fn test_94() {\n    let data = [10, 10];\n    let _ = decode(data);\n}"}
{"test_id": "rustls-rustls/rustls-rustls-ae583bd/tests-gen/server.inputs.rs::test_6", "code": "pub fn process_new_packets(&mut self) -> Result<IoState, Error> {\n        match self {\n            Self::Client(conn) => conn.process_new_packets(),\n            Self::Server(conn) => conn.process_new_packets(),\n        }\n    }", "test": "fn test_6() {\n    let data = [\n        22, 3, 1, 0, 191, 1, 0, 0, 187, 3, 3, 116, 201, 219, 206, 244, 81, 172, 68, 161, 77, 114,\n        224, 59, 98, 153, 198, 0, 56, 96, 244, 241, 2, 236, 14, 79, 17, 174, 249, 51, 180, 155, 27,\n        0, 0, 20, 19, 3, 19, 2, 19, 1, 204, 169, 204, 168, 192, 44, 192, 43, 192, 48, 192, 47, 0,\n        255, 1, 0, 0, 126, 0, 43, 0, 5, 4, 127, 18, 3, 3, 0, 0, 0, 15, 0, 13, 0, 0, 10, 103, 111,\n        111, 103, 108, 101, 46, 99, 111, 109, 0, 11, 0, 2, 1, 0, 0, 10, 0, 8, 0, 6, 0, 29, 0, 24,\n        0, 23, 0, 13, 0, 20, 0, 18, 5, 3, 4, 3, 8, 6, 8, 5, 8, 4, 6, 1, 5, 1, 4, 1, 2, 1, 0, 23, 0,\n        0, 0, 40, 0, 38, 0, 36, 0, 29, 0, 32, 54, 50, 250, 159, 54, 152, 227, 159, 53, 55, 94, 176,\n        131, 156, 2, 150, 252, 203, 146, 242, 91, 198, 7, 168, 50, 15, 199, 10, 239, 16, 176, 28,\n        0, 45, 0, 2, 1, 1, 0, 35, 0, 0, 22, 3, 3, 0, 37, 16, 0, 0, 33, 32, 174, 238, 64, 160, 89,\n        49, 176, 161, 116, 71, 184, 117, 131, 29, 119, 30, 254, 193, 66, 215, 34, 226, 85, 150,\n        137, 157, 149, 108, 207, 252, 23, 86, 20, 3, 3, 0, 1, 1, 22, 3, 3, 0, 32, 95, 94, 179, 244,\n        73, 139, 102, 175, 65, 93, 186, 57, 105, 115, 213, 72, 207, 171, 68, 112, 247, 61, 197,\n        101, 209, 80, 21, 197, 16, 192, 38, 207, 23, 3, 3, 0, 97, 120, 117, 231, 50, 21, 63, 29,\n        51, 245, 52, 162, 204, 116, 31, 170, 96, 116, 142, 202, 95, 61, 225, 162, 123, 121, 16,\n        255, 65, 75, 58, 240, 144, 126, 84, 211, 122, 180, 80, 33, 217, 230, 174, 165, 86, 84, 15,\n        81, 33, 185, 130, 213, 253, 25, 71, 114, 234, 252, 121, 45, 228, 152, 129, 143, 46, 242,\n        77, 52, 217, 52, 140, 254, 35, 190, 4, 221, 201, 108, 193, 173, 125, 212, 238, 242, 253,\n        229, 253, 109, 45, 138, 27, 227, 19, 14, 157, 167, 133, 69,\n    ];\n    let config = Arc::new(\n        ServerConfig::builder()\n            .with_safe_defaults()\n            .with_no_client_auth()\n            .with_cert_resolver(Arc::new(Fail)),\n    );\n    let mut server = ServerConnection::new(config).unwrap();\n    let _ = server.read_tls(&mut io::Cursor::new(data));\n    let _ = server.process_new_packets();\n}"}
{"test_id": "BurntSushi-memchr/BurntSushi-memchr-f3fde7a/tests-gen/memrchr3.inputs.rs::test_0", "code": "fn count(self) -> usize {\n        self.it.count(|s, e| {\n            // SAFETY: We rely on our generic iterator to return valid start\n            // and end pointers.\n            unsafe { count_raw(self.needle1, s, e) }\n        })\n    }", "test": "fn test_0() {\n    let data = [10];\n    if data.len() < 3 {\n        return;\n    }\n    memchr3_iter(data[0], data[1], data[2], &data[3..]).rev().count();\n}"}
{"test_id": "rust-bakery-nom/rust-bakery-nom-869f897/tests-gen/fuzz_arithmetic.inputs.rs::test_34", "code": "fn factor(i: &str) -> IResult<&str, Expr> {\n  alt((\n    map(\n      map_res(delimited(multispace, digit, multispace), FromStr::from_str),\n      Expr::Value,\n    ),\n    parens,\n  ))(i)\n}", "test": "fn test_34() {\n  let data = [113, 178];\n  reset();\n  let temp = match str::from_utf8(data) {\n    Ok(v) => factor(v),\n    Err(e) => factor(\"2\"),\n  };\n}"}
{"test_id": "BurntSushi-memchr/BurntSushi-memchr-f3fde7a/tests-gen/memchr2.inputs.rs::test_80", "code": "fn count(self) -> usize {\n        self.it.count(|s, e| {\n            // SAFETY: We rely on our generic iterator to return valid start\n            // and end pointers.\n            unsafe { count_raw(self.needle1, s, e) }\n        })\n    }", "test": "fn test_80() {\n    let data = [93, 10, 10, 39];\n    if data.len() < 2 {\n        return;\n    }\n    memchr2_iter(data[0], data[1], &data[2..]).count();\n}"}
{"test_id": "BurntSushi-memchr/BurntSushi-memchr-f3fde7a/tests-gen/memrmem.inputs.rs::test_59", "code": "pub fn count(&self, haystack: &[u8]) -> usize {\n        // SAFETY: All of our pointers are derived directly from a borrowed\n        // slice, which is guaranteed to be valid.\n        unsafe {\n            let start = haystack.as_ptr();\n            let end = start.add(haystack.len());\n            self.count_raw(start, end)\n        }\n    }", "test": "fn test_59() {\n    let data = [8, 10];\n    if data.len() < 2 {\n        return;\n    }\n    let split = std::cmp::max(data[0] as usize, 1) % data.len() as usize;\n    let (needle, haystack) = (&data[..split], &data[split..]);\n    memmem::rfind_iter(haystack, needle).count();\n}"}
{"test_id": "image-rs-image/image-rs-image-e5580ec/tests-gen/fuzzer_script_exr.inputs.rs::test_70", "code": "fn roundtrip (bytes : & [u8]) -> ImageResult < () > { # [doc = \" Read the file from the specified path into an `Rgba32FImage`.\"] fn read_as_rgba_byte_image (read : impl Read + Seek) -> ImageResult < (u32 , u32 , Vec < u8 >) > { let mut decoder = OpenExrDecoder :: with_alpha_preference (read , Some (true)) ? ; match usize :: try_from (decoder . total_bytes ()) { Ok (decoded_size) if decoded_size <= 256 * 1024 * 1024 => { decoder . set_limits (Limits :: default ()) ? ; let (width , height) = decoder . dimensions () ; let mut buffer = vec ! [0 ; decoded_size] ; decoder . read_image (buffer . as_mut_slice ()) ? ; Ok ((width , height , buffer)) } _ => Err (image :: ImageError :: Limits (image :: error :: LimitError :: from_kind (image :: error :: LimitErrorKind :: InsufficientMemory ,) ,)) , } } # [doc = \" Write an `Rgba32FImage`.\"] # [doc = \" Assumes the writer is buffered. In most cases,\"] # [doc = \" you should wrap your writer in a `BufWriter` for best performance.\"] fn write_rgba_image (write : impl Write + Seek , (width , height , data) : & (u32 , u32 , Vec < u8 >) ,) -> ImageResult < () > { OpenExrEncoder :: new (write) . write_image (data . as_slice () , * width , * height , ColorType :: Rgba32F) } let decoded_image = read_as_rgba_byte_image (Cursor :: new (bytes)) ? ; let mut bytes = Vec :: with_capacity (bytes . len () + 20) ; write_rgba_image (Cursor :: new (& mut bytes) , & decoded_image) ? ; let redecoded_image = read_as_rgba_byte_image (Cursor :: new (bytes)) ? ; assert_eq ! (decoded_image , redecoded_image , \"image was valid but was not reproducible\") ; Ok (()) }", "test": "fn test_70() {\n    let data = [209];\n    let _img = roundtrip(data);\n}"}
{"test_id": "gfx-rs-naga/gfx-rs-naga-92e41b4/tests-gen/wgsl_parser.inputs.rs::test_68", "code": "pub fn parse(mut self) -> Result<crate::Module, Error> {\n        let mut module = {\n            if self.next()? != spirv::MAGIC_NUMBER {\n                return Err(Error::InvalidHeader);\n            }\n            let version_raw = self.next()?;\n            let generator = self.next()?;\n            let _bound = self.next()?;\n            let _schema = self.next()?;\n            log::info!(\"Generated by {} version {:x}\", generator, version_raw);\n            crate::Module::default()\n        };\n\n        self.layouter.clear();\n        self.dummy_functions = Arena::new();\n        self.lookup_function.clear();\n        self.function_call_graph.clear();\n\n        loop {\n            use spirv::Op;\n\n            let inst = match self.next_inst() {\n                Ok(inst) => inst,\n                Err(Error::IncompleteData) => break,\n                Err(other) => return Err(other),\n            };\n            log::debug!(\"\\t{:?} [{}]\", inst.op, inst.wc);\n\n            match inst.op {\n                Op::Capability => self.parse_capability(inst),\n                Op::Extension => self.parse_extension(inst),\n                Op::ExtInstImport => self.parse_ext_inst_import(inst),\n                Op::MemoryModel => self.parse_memory_model(inst),\n                Op::EntryPoint => self.parse_entry_point(inst),\n                Op::ExecutionMode => self.parse_execution_mode(inst),\n                Op::String => self.parse_string(inst),\n                Op::Source => self.parse_source(inst),\n                Op::SourceExtension => self.parse_source_extension(inst),\n                Op::Name => self.parse_name(inst),\n                Op::MemberName => self.parse_member_name(inst),\n                Op::ModuleProcessed => self.parse_module_processed(inst),\n                Op::Decorate => self.parse_decorate(inst),\n                Op::MemberDecorate => self.parse_member_decorate(inst),\n                Op::TypeVoid => self.parse_type_void(inst),\n                Op::TypeBool => self.parse_type_bool(inst, &mut module),\n                Op::TypeInt => self.parse_type_int(inst, &mut module),\n                Op::TypeFloat => self.parse_type_float(inst, &mut module),\n                Op::TypeVector => self.parse_type_vector(inst, &mut module),\n                Op::TypeMatrix => self.parse_type_matrix(inst, &mut module),\n                Op::TypeFunction => self.parse_type_function(inst),\n                Op::TypePointer => self.parse_type_pointer(inst, &mut module),\n                Op::TypeArray => self.parse_type_array(inst, &mut module),\n                Op::TypeRuntimeArray => self.parse_type_runtime_array(inst, &mut module),\n                Op::TypeStruct => self.parse_type_struct(inst, &mut module),\n                Op::TypeImage => self.parse_type_image(inst, &mut module),\n                Op::TypeSampledImage => self.parse_type_sampled_image(inst),\n                Op::TypeSampler => self.parse_type_sampler(inst, &mut module),\n                Op::Constant | Op::SpecConstant => self.parse_constant(inst, &mut module),\n                Op::ConstantComposite => self.parse_composite_constant(inst, &mut module),\n                Op::ConstantNull | Op::Undef => self.parse_null_constant(inst, &mut module),\n                Op::ConstantTrue => self.parse_bool_constant(inst, true, &mut module),\n                Op::ConstantFalse => self.parse_bool_constant(inst, false, &mut module),\n                Op::Variable => self.parse_global_variable(inst, &mut module),\n                Op::Function => {\n                    self.switch(ModuleState::Function, inst.op)?;\n                    inst.expect(5)?;\n                    self.parse_function(&mut module)\n                }\n                _ => Err(Error::UnsupportedInstruction(self.state, inst.op)), //TODO\n            }?;\n        }\n\n        log::info!(\"Patching...\");\n        {\n            let mut nodes = petgraph::algo::toposort(&self.function_call_graph, None)\n                .map_err(|cycle| Error::FunctionCallCycle(cycle.node_id()))?;\n            nodes.reverse(); // we need dominated first\n            let mut functions = mem::take(&mut module.functions);\n            for fun_id in nodes {\n                if fun_id > !(functions.len() as u32) {\n                    // skip all the fake IDs registered for the entry points\n                    continue;\n                }\n                let lookup = self.lookup_function.get_mut(&fun_id).unwrap();\n                // take out the function from the old array\n                let fun = mem::take(&mut functions[lookup.handle]);\n                // add it to the newly formed arena, and adjust the lookup\n                lookup.handle = module\n                    .functions\n                    .append(fun, functions.get_span(lookup.handle));\n            }\n        }\n        // patch all the functions\n        for (handle, fun) in module.functions.iter_mut() {\n            self.patch_function(Some(handle), fun)?;\n        }\n        for ep in module.entry_points.iter_mut() {\n            self.patch_function(None, &mut ep.function)?;\n        }\n\n        // Check all the images and samplers to have consistent comparison property.\n        for (handle, flags) in self.handle_sampling.drain() {\n            if !image::patch_comparison_type(\n                flags,\n                module.global_variables.get_mut(handle),\n                &mut module.types,\n            ) {\n                return Err(Error::InconsistentComparisonSampling(handle));\n            }\n        }\n\n        if !self.future_decor.is_empty() {\n            log::warn!(\"Unused item decorations: {:?}\", self.future_decor);\n            self.future_decor.clear();\n        }\n        if !self.future_member_decor.is_empty() {\n            log::warn!(\"Unused member decorations: {:?}\", self.future_member_decor);\n            self.future_member_decor.clear();\n        }\n\n        Ok(module)\n    }", "test": "fn test_68() {\n    let data = \"\";\n    let _result = Frontend::new().parse(&data);\n}"}
{"test_id": "BurntSushi-memchr/BurntSushi-memchr-f3fde7a/tests-gen/memrmem.inputs.rs::test_62", "code": "pub fn count(&self, haystack: &[u8]) -> usize {\n        // SAFETY: All of our pointers are derived directly from a borrowed\n        // slice, which is guaranteed to be valid.\n        unsafe {\n            let start = haystack.as_ptr();\n            let end = start.add(haystack.len());\n            self.count_raw(start, end)\n        }\n    }", "test": "fn test_62() {\n    let data = [10, 172, 10, 172];\n    if data.len() < 2 {\n        return;\n    }\n    let split = std::cmp::max(data[0] as usize, 1) % data.len() as usize;\n    let (needle, haystack) = (&data[..split], &data[split..]);\n    memmem::rfind_iter(haystack, needle).count();\n}"}
{"test_id": "cloud-hypervisor-cloud-hypervisor/cloud-hypervisor-cloud-hypervisor-db3a5f3/tests-gen/mem.inputs.rs::test_72", "code": "pub fn wait_for_epoll_threads(&mut self) {\n        self.common.wait_for_epoll_threads();\n    }", "test": "fn test_72() {\n    let bytes = [10, 157];\n    if bytes.len() < VIRTIO_MEM_DATA_SIZE + QUEUE_DATA_SIZE + QUEUE_BYTES_SIZE\n        || bytes.len() > (VIRTIO_MEM_DATA_SIZE + QUEUE_DATA_SIZE + QUEUE_BYTES_SIZE + MEM_SIZE)\n    {\n        return;\n    }\n    let virtio_mem_data = &bytes[..VIRTIO_MEM_DATA_SIZE];\n    let queue_data = &bytes[VIRTIO_MEM_DATA_SIZE..VIRTIO_MEM_DATA_SIZE + QUEUE_DATA_SIZE];\n    let queue_bytes = &bytes[VIRTIO_MEM_DATA_SIZE + QUEUE_DATA_SIZE\n        ..VIRTIO_MEM_DATA_SIZE + QUEUE_DATA_SIZE + QUEUE_BYTES_SIZE];\n    let mem_bytes = &bytes[VIRTIO_MEM_DATA_SIZE + QUEUE_DATA_SIZE + QUEUE_BYTES_SIZE..];\n    let (mut virtio_mem, virtio_mem_region) =\n        create_dummy_virtio_mem(virtio_mem_data.try_into().unwrap());\n    let q = setup_virt_queue(queue_data.try_into().unwrap());\n    let mem =\n        GuestMemoryMmap::from_ranges(&[(GuestAddress(DESC_TABLE_ADDR), QUEUE_BYTES_SIZE)]).unwrap();\n    if mem\n        .write_slice(queue_bytes, GuestAddress(DESC_TABLE_ADDR))\n        .is_err()\n    {\n        return;\n    }\n    let mem = mem.insert_region(virtio_mem_region).unwrap();\n    if mem\n        .write_slice(mem_bytes, GuestAddress(VIRTIO_MEM_REGION_ADDRESS))\n        .is_err()\n    {\n        return;\n    }\n    let guest_memory = GuestMemoryAtomic::new(mem);\n    let evt = EventFd::new(0).unwrap();\n    let queue_evt = unsafe { EventFd::from_raw_fd(libc::dup(evt.as_raw_fd())) };\n    queue_evt.write(1).unwrap();\n    virtio_mem\n        .activate(\n            guest_memory,\n            Arc::new(NoopVirtioInterrupt {}),\n            vec![(0, q, evt)],\n        )\n        .ok();\n    virtio_mem.wait_for_epoll_threads();\n}"}
{"test_id": "cloud-hypervisor-cloud-hypervisor/cloud-hypervisor-cloud-hypervisor-db3a5f3/tests-gen/pmem.inputs.rs::test_11", "code": "pub fn wait_for_epoll_threads(&mut self) {\n        self.common.wait_for_epoll_threads();\n    }", "test": "fn test_11() {\n    let bytes = [10, 74, 10];\n    if bytes.len() < QUEUE_DATA_SIZE || bytes.len() > (QUEUE_DATA_SIZE + MEM_SIZE) {\n        return;\n    }\n    let mut pmem = create_dummy_pmem();\n    let queue_data = &bytes[..QUEUE_DATA_SIZE];\n    let mem_bytes = &bytes[QUEUE_DATA_SIZE..];\n    let q = setup_virt_queue(queue_data.try_into().unwrap());\n    let mem = GuestMemoryMmap::from_ranges(&[(GuestAddress(0), MEM_SIZE)]).unwrap();\n    if mem.write_slice(mem_bytes, GuestAddress(0 as u64)).is_err() {\n        return;\n    }\n    let guest_memory = GuestMemoryAtomic::new(mem);\n    let evt = EventFd::new(0).unwrap();\n    let queue_evt = unsafe { EventFd::from_raw_fd(libc::dup(evt.as_raw_fd())) };\n    queue_evt.write(1).unwrap();\n    pmem.activate(\n        guest_memory,\n        Arc::new(NoopVirtioInterrupt {}),\n        vec![(0, q, evt)],\n    )\n    .ok();\n    pmem.wait_for_epoll_threads();\n}"}
{"test_id": "rust-bio-rust-bio/rust-bio-rust-bio-319a0d8/tests-gen/myers_matching.inputs.rs::test_49", "code": "fn validate_alignment (aln : & Alignment , x : & [u8] , y : & [u8]) { let y = & y [aln . ystart .. aln . yend] ; let mut ix = 0 ; let mut iy = 0 ; let mut calc_dist = 0 ; for op in & aln . operations { match * op { Match => { assert ! (x [ix] == y [iy] , \"Match operation, but characters are not equal\") ; ix += 1 ; iy += 1 ; } Subst => { assert ! (x [ix] != y [iy] , \"Subst operation, but characters are equal\") ; calc_dist += 1 ; ix += 1 ; iy += 1 ; } Del => { calc_dist += 1 ; iy += 1 ; } Ins => { calc_dist += 1 ; ix += 1 ; } _ => unreachable ! () } } assert_eq ! (calc_dist , aln . score as usize) ; }", "test": "fn test_49() {\n    let data = [0, 0, 194];\n    if data.len() < 3 {\n        return;\n    }\n    let (max_dist, data) = data.split_first().unwrap();\n    let (pattern_len, data) = data.split_first().unwrap();\n    let max_dist = min(64, *max_dist);\n    let pattern_len = max(1, min(64, min(data.len(), *pattern_len as usize)));\n    if data.iter().any(|&b| b < 65 || b > 122 || b > 90 && b < 97) {\n        return;\n    }\n    let (pattern, text) = data.split_at(pattern_len);\n    let max_dist = max_dist as u8;\n    let _ = MyersBuilder::new().build_64(pattern);\n    let _ = MyersBuilder::new().build_long_64(pattern);\n    let mut myers = Myers::<u64>::new(pattern);\n    let mut myers_long = long::Myers::<u8>::new(pattern);\n    let end_dist: Vec<_> = myers.find_all_end(text, max_dist).collect();\n    let end_dist_long: Vec<_> = myers_long\n        .find_all_end(text, max_dist as usize)\n        .map(|(end, dist)| (end, dist as u8))\n        .collect();\n    assert_eq!(end_dist, end_dist_long);\n    let mut aln = Alignment::default();\n    let mut aln_long = Alignment::default();\n    {\n        let mut matches = myers.find_all(text, max_dist);\n        let mut matches_long = myers_long.find_all(text, max_dist as usize);\n        matches.alignment(&mut aln);\n        matches_long.alignment(&mut aln_long);\n        let mut end_dist_iter = end_dist.iter();\n        while matches.next_alignment(&mut aln) {\n            assert!(matches_long.next_alignment(&mut aln_long));\n            assert_eq!(aln, aln_long);\n            validate_alignment(&aln, pattern, text);\n            assert!(aln.score as u8 <= max_dist);\n            let (end, dist) = end_dist_iter.next().unwrap();\n            assert_eq!(*end + 1, aln.yend);\n            assert_eq!(*dist, aln.score as u8);\n        }\n        assert!(end_dist_iter.next().is_none());\n        assert!(!matches_long.next_alignment(&mut aln_long));\n    }\n    {\n        let mut matches = myers.find_all_lazy(text, max_dist);\n        let mut matches_long = myers_long.find_all_lazy(text, max_dist as usize);\n        let mut end_dist_iter = end_dist.iter();\n        while let Some((end, dist)) = matches.next() {\n            let (end_long, dist_long) = matches_long.next().unwrap();\n            assert_eq!((end, dist), (end_long, dist_long as u8));\n            assert!(matches.alignment_at(end, &mut aln));\n            assert!(matches_long.alignment_at(end, &mut aln_long));\n            assert_eq!(aln, aln_long);\n            validate_alignment(&aln, pattern, text);\n            assert_eq!(dist, aln.score as u8);\n            assert!(aln.score as u8 <= max_dist);\n            let (end, dist) = end_dist_iter.next().unwrap();\n            assert_eq!(*end + 1, aln.yend);\n            assert_eq!(*dist, aln.score as u8);\n            assert!(!matches.alignment_at(end + 1, &mut aln));\n        }\n        assert!(end_dist_iter.next().is_none());\n    }\n    let mut matches = myers.find_all_lazy(text, u8::max_value());\n    let mut matches_long = myers_long.find_all_lazy(text, u8::max_value() as usize);\n    let mut i = 0;\n    while let Some((end, dist)) = matches.next() {\n        assert_eq!(end, i);\n        let (end_long, dist_long) = matches_long.next().unwrap();\n        assert_eq!((end, dist), (end_long, dist_long as u8));\n        assert!(matches.alignment_at(end, &mut aln));\n        assert!(matches_long.alignment_at(end, &mut aln_long));\n        assert_eq!(aln, aln_long);\n        validate_alignment(&aln, pattern, text);\n        assert_eq!(dist, aln.score as u8);\n        assert!(aln.score as u8 <= u8::max_value());\n        assert!(!matches.alignment_at(end + 1, &mut aln));\n        assert!(!matches_long.alignment_at(end + 1, &mut aln_long));\n        i += 1;\n    }\n}"}
{"test_id": "cloud-hypervisor-cloud-hypervisor/cloud-hypervisor-cloud-hypervisor-db3a5f3/tests-gen/cmos.inputs.rs::test_68", "code": "fn write(&mut self, _base: u64, offset: u64, data: &[u8]) -> Option<Arc<Barrier>> {\n        if data.len() != 1 {\n            warn!(\"Invalid write size on CMOS device: {}\", data.len());\n            return None;\n        }\n\n        match offset {\n            INDEX_OFFSET => self.index = data[0],\n            DATA_OFFSET => {\n                if self.index == 0x8f && data[0] == 0 {\n                    info!(\"CMOS reset\");\n                    self.reset_evt.write(1).unwrap();\n                    if let Some(vcpus_kill_signalled) = self.vcpus_kill_signalled.take() {\n                        // Spin until we are sure the reset_evt has been handled and that when\n                        // we return from the KVM_RUN we will exit rather than re-enter the guest.\n                        while !vcpus_kill_signalled.load(Ordering::SeqCst) {\n                            // This is more effective than thread::yield_now() at\n                            // avoiding a priority inversion with the VMM thread\n                            thread::sleep(std::time::Duration::from_millis(1));\n                        }\n                    }\n                } else {\n                    self.data[(self.index & INDEX_MASK) as usize] = data[0]\n                }\n            }\n            o => warn!(\"bad write offset on CMOS device: {}\", o),\n        };\n        None\n    }", "test": "fn test_68() {\n    let bytes = [89];\n    if bytes.len() < 16 {\n        return;\n    }\n    let mut below_4g = [0u8; 8];\n    let mut above_4g = [0u8; 8];\n    below_4g.copy_from_slice(&bytes[0..8]);\n    above_4g.copy_from_slice(&bytes[8..16]);\n    let mut cmos = Cmos::new(\n        u64::from_le_bytes(below_4g),\n        u64::from_le_bytes(above_4g),\n        EventFd::new(EFD_NONBLOCK).unwrap(),\n        None,\n    );\n    let mut i = 16;\n    while i < bytes.len() {\n        let read = bytes.get(i).unwrap_or(&0) % 2 == 0;\n        i += 1;\n        if read {\n            let offset = (bytes.get(i).unwrap_or(&0) % 2) as u64;\n            i += 1;\n            let mut out_bytes = vec![0];\n            cmos.read(0, offset, &mut out_bytes);\n        } else {\n            let offset = (bytes.get(i).unwrap_or(&0) % 2) as u64;\n            i += 1;\n            let data = vec![*bytes.get(i).unwrap_or(&0)];\n            i += 1;\n            cmos.write(0, offset, &data);\n        }\n    }\n}"}
{"test_id": "cloud-hypervisor-cloud-hypervisor/cloud-hypervisor-cloud-hypervisor-db3a5f3/tests-gen/block.inputs.rs::test_4", "code": "pub fn wait_for_epoll_threads(&mut self) {\n        self.common.wait_for_epoll_threads();\n    }", "test": "fn test_4() {\n    let bytes = [130];\n    if bytes.len() < QUEUE_DATA_SIZE || bytes.len() > (QUEUE_DATA_SIZE + MEM_SIZE) {\n        return;\n    }\n    let queue_data = &bytes[..QUEUE_DATA_SIZE];\n    let mem_bytes = &bytes[QUEUE_DATA_SIZE..];\n    let shm = memfd_create(&ffi::CString::new(\"fuzz\").unwrap(), 0).unwrap();\n    let disk_file: File = unsafe { File::from_raw_fd(shm) };\n    let qcow_disk = Box::new(RawFileDiskSync::new(disk_file)) as Box<dyn DiskFile>;\n    let mut block = Block::new(\n        \"tmp\".to_owned(),\n        qcow_disk,\n        PathBuf::from(\"\"),\n        false,\n        false,\n        2,\n        256,\n        None,\n        SeccompAction::Allow,\n        None,\n        EventFd::new(EFD_NONBLOCK).unwrap(),\n        None,\n    )\n    .unwrap();\n    let q = setup_virt_queue(queue_data.try_into().unwrap());\n    let mem = GuestMemoryMmap::from_ranges(&[(GuestAddress(0), MEM_SIZE)]).unwrap();\n    if mem.write_slice(mem_bytes, GuestAddress(0 as u64)).is_err() {\n        return;\n    }\n    let guest_memory = GuestMemoryAtomic::new(mem);\n    let evt = EventFd::new(0).unwrap();\n    let queue_evt = unsafe { EventFd::from_raw_fd(libc::dup(evt.as_raw_fd())) };\n    queue_evt.write(1).unwrap();\n    block\n        .activate(\n            guest_memory,\n            Arc::new(NoopVirtioInterrupt {}),\n            vec![(0, q, evt)],\n        )\n        .ok();\n    block.wait_for_epoll_threads();\n}"}
{"test_id": "quinn-rs-quinn/quinn-rs-quinn-83e4f46/tests-gen/streamid.inputs.rs::test_53", "code": "pub fn initiator(self) -> Side {\n        if self.0 & 0x1 == 0 {\n            Side::Client\n        } else {\n            Side::Server\n        }\n    }", "test": "fn test_53() {\n    let data = StreamIdParams {\n        side: Server,\n        dir: Uni,\n        index: 12514878488289586605,\n    };\n    let s = StreamId::new(data.side, data.dir, data.index);\n    assert_eq!(s.initiator(), data.side);\n    assert_eq!(s.dir(), data.dir);\n}"}
{"test_id": "BurntSushi-memchr/BurntSushi-memchr-f3fde7a/tests-gen/memrchr.inputs.rs::test_77", "code": "fn count(self) -> usize {\n        self.it.count(|s, e| {\n            // SAFETY: We rely on our generic iterator to return valid start\n            // and end pointers.\n            unsafe { count_raw(self.needle1, s, e) }\n        })\n    }", "test": "fn test_77() {\n    let data = [2, 46, 2];\n    if data.is_empty() {\n        return;\n    }\n    memchr_iter(data[0], &data[1..]).rev().count();\n}"}
{"test_id": "cloud-hypervisor-cloud-hypervisor/cloud-hypervisor-cloud-hypervisor-db3a5f3/tests-gen/balloon.inputs.rs::test_83", "code": "pub fn wait_for_epoll_threads(&mut self) {\n        self.common.wait_for_epoll_threads();\n    }", "test": "fn test_83() {\n    let bytes = [11, 8, 10];\n    if bytes.len() < QUEUE_DATA_SIZE * QUEUE_NUM\n        || bytes.len() > (QUEUE_DATA_SIZE * QUEUE_NUM + MEM_SIZE)\n    {\n        return;\n    }\n    let mut balloon = virtio_devices::Balloon::new(\n        \"fuzzer_balloon\".to_owned(),\n        BALLOON_SIZE,\n        true,\n        true,\n        SeccompAction::Allow,\n        EventFd::new(EFD_NONBLOCK).unwrap(),\n        None,\n    )\n    .unwrap();\n    let queue_data = &bytes[..QUEUE_DATA_SIZE * QUEUE_NUM];\n    let mem_bytes = &bytes[QUEUE_DATA_SIZE * QUEUE_NUM..];\n    let mem = GuestMemoryMmap::from_ranges(&[(GuestAddress(0), MEM_SIZE)]).unwrap();\n    if mem.write_slice(mem_bytes, GuestAddress(0 as u64)).is_err() {\n        return;\n    }\n    let guest_memory = GuestMemoryAtomic::new(mem);\n    let mut queues = setup_virt_queues(\n        &[\n            &queue_data[..QUEUE_DATA_SIZE].try_into().unwrap(),\n            &queue_data[QUEUE_DATA_SIZE..QUEUE_DATA_SIZE * 2]\n                .try_into()\n                .unwrap(),\n            &queue_data[QUEUE_DATA_SIZE * 2..QUEUE_DATA_SIZE * 3]\n                .try_into()\n                .unwrap(),\n        ],\n        0,\n    );\n    let inflate_q = queues.remove(0);\n    let inflate_evt = EventFd::new(0).unwrap();\n    let inflate_queue_evt = unsafe { EventFd::from_raw_fd(libc::dup(inflate_evt.as_raw_fd())) };\n    let deflate_q = queues.remove(0);\n    let deflate_evt = EventFd::new(0).unwrap();\n    let deflate_queue_evt = unsafe { EventFd::from_raw_fd(libc::dup(deflate_evt.as_raw_fd())) };\n    let reporting_q = queues.remove(0);\n    let reporting_evt = EventFd::new(0).unwrap();\n    let reporting_queue_evt = unsafe { EventFd::from_raw_fd(libc::dup(reporting_evt.as_raw_fd())) };\n    inflate_queue_evt.write(1).unwrap();\n    deflate_queue_evt.write(1).unwrap();\n    reporting_queue_evt.write(1).unwrap();\n    balloon\n        .activate(\n            guest_memory,\n            Arc::new(NoopVirtioInterrupt {}),\n            vec![\n                (0, inflate_q, inflate_evt),\n                (1, deflate_q, deflate_evt),\n                (2, reporting_q, reporting_evt),\n            ],\n        )\n        .ok();\n    balloon.wait_for_epoll_threads();\n}"}
{"test_id": "image-rs-image-png/image-rs-image-png-e113d76/tests-gen/decode.inputs.rs::test_28", "code": "fn png_decode (data : & [u8]) -> Result < (Option < png :: OutputInfo > , Vec < u8 >) , () > { let limits = png :: Limits { bytes : 1 << 16 } ; let decoder = png :: Decoder :: new_with_limits (data , limits) ; let mut reader = decoder . read_info () . map_err (| _ | ()) ? ; if reader . info () . raw_bytes () > 5_000_000 { return Err (()) ; } let mut img_data = vec ! [0u8 ; reader . info () . raw_bytes ()] ; let mut last_info = None ; while let Ok (info) = reader . next_frame (& mut img_data) { last_info = Some (info) ; } Ok ((last_info , img_data)) }", "test": "fn test_28() {\n    let data = [\n        137, 80, 78, 71, 13, 10, 26, 10, 0, 0, 0, 12, 73, 72, 68, 82, 0, 0, 0, 32, 0, 0, 0, 32, 4,\n        3, 0, 0, 255,\n    ];\n    let _ = png_decode(&data);\n}"}
{"test_id": "cloud-hypervisor-cloud-hypervisor/cloud-hypervisor-cloud-hypervisor-db3a5f3/tests-gen/cmos.inputs.rs::test_3", "code": "fn write(&mut self, _base: u64, offset: u64, data: &[u8]) -> Option<Arc<Barrier>> {\n        if data.len() != 1 {\n            warn!(\"Invalid write size on CMOS device: {}\", data.len());\n            return None;\n        }\n\n        match offset {\n            INDEX_OFFSET => self.index = data[0],\n            DATA_OFFSET => {\n                if self.index == 0x8f && data[0] == 0 {\n                    info!(\"CMOS reset\");\n                    self.reset_evt.write(1).unwrap();\n                    if let Some(vcpus_kill_signalled) = self.vcpus_kill_signalled.take() {\n                        // Spin until we are sure the reset_evt has been handled and that when\n                        // we return from the KVM_RUN we will exit rather than re-enter the guest.\n                        while !vcpus_kill_signalled.load(Ordering::SeqCst) {\n                            // This is more effective than thread::yield_now() at\n                            // avoiding a priority inversion with the VMM thread\n                            thread::sleep(std::time::Duration::from_millis(1));\n                        }\n                    }\n                } else {\n                    self.data[(self.index & INDEX_MASK) as usize] = data[0]\n                }\n            }\n            o => warn!(\"bad write offset on CMOS device: {}\", o),\n        };\n        None\n    }", "test": "fn test_3() {\n    let bytes = [10, 10];\n    if bytes.len() < 16 {\n        return;\n    }\n    let mut below_4g = [0u8; 8];\n    let mut above_4g = [0u8; 8];\n    below_4g.copy_from_slice(&bytes[0..8]);\n    above_4g.copy_from_slice(&bytes[8..16]);\n    let mut cmos = Cmos::new(\n        u64::from_le_bytes(below_4g),\n        u64::from_le_bytes(above_4g),\n        EventFd::new(EFD_NONBLOCK).unwrap(),\n        None,\n    );\n    let mut i = 16;\n    while i < bytes.len() {\n        let read = bytes.get(i).unwrap_or(&0) % 2 == 0;\n        i += 1;\n        if read {\n            let offset = (bytes.get(i).unwrap_or(&0) % 2) as u64;\n            i += 1;\n            let mut out_bytes = vec![0];\n            cmos.read(0, offset, &mut out_bytes);\n        } else {\n            let offset = (bytes.get(i).unwrap_or(&0) % 2) as u64;\n            i += 1;\n            let data = vec![*bytes.get(i).unwrap_or(&0)];\n            i += 1;\n            cmos.write(0, offset, &data);\n        }\n    }\n}"}
{"test_id": "marshallpierce-rust-base64/marshallpierce-rust-base64-4ef33cc/tests-gen/roundtrip.inputs.rs::test_2", "code": "pub fn decode<T: AsRef<[u8]>>(input: T) -> Result<Vec<u8>, DecodeError> {\n    STANDARD.decode(input)\n}", "test": "fn test_2() {\n    let data = [61, 10];\n    let encoded = STANDARD.encode(data);\n    let decoded = STANDARD.decode(&encoded).unwrap();\n    assert_eq!(data, decoded.as_slice());\n}"}
{"test_id": "marshallpierce-rust-base64/marshallpierce-rust-base64-4ef33cc/tests-gen/roundtrip.inputs.rs::test_14", "code": "pub fn decode<T: AsRef<[u8]>>(input: T) -> Result<Vec<u8>, DecodeError> {\n    STANDARD.decode(input)\n}", "test": "fn test_14() {\n    let data = [255, 255, 255, 255];\n    let encoded = STANDARD.encode(data);\n    let decoded = STANDARD.decode(&encoded).unwrap();\n    assert_eq!(data, decoded.as_slice());\n}"}
{"test_id": "gimli-rs-gimli/gimli-rs-gimli-3947879/tests-gen/debug_aranges.inputs.rs::test_27", "code": "pub fn next(&mut self) -> Result<Option<UnitHeader<R>>> {\n        if self.input.is_empty() {\n            Ok(None)\n        } else {\n            let len = self.input.len();\n            match parse_unit_header(&mut self.input, self.offset.into()) {\n                Ok(header) => {\n                    self.offset.0 += len - self.input.len();\n                    Ok(Some(header))\n                }\n                Err(e) => {\n                    self.input.empty();\n                    Err(e)\n                }\n            }\n        }\n    }", "test": "fn test_27() {\n    let debug_aranges = [255, 255, 124];\n    let debug_aranges = DebugAranges::new(&debug_aranges, LittleEndian);\n    let mut headers = debug_aranges.headers();\n    while let Ok(Some(header)) = headers.next() {\n        let mut entries = header.entries();\n        while let Ok(Some(_entry)) = entries.next() {\n            continue;\n        }\n    }\n}"}
{"test_id": "marshallpierce-rust-base64/marshallpierce-rust-base64-4ef33cc/tests-gen/roundtrip_random_config.inputs.rs::test_50", "code": "fn decode<T: AsRef<[u8]>>(&self, input: T) -> Result<Vec<u8>, DecodeError> {\n        fn inner<E>(engine: &E, input_bytes: &[u8]) -> Result<Vec<u8>, DecodeError>\n        where\n            E: Engine + ?Sized,\n        {\n            let estimate = engine.internal_decoded_len_estimate(input_bytes.len());\n            let mut buffer = vec![0; estimate.decoded_len_estimate()];\n\n            let bytes_written = engine\n                .internal_decode(input_bytes, &mut buffer, estimate)?\n                .decoded_len;\n\n            buffer.truncate(bytes_written);\n\n            Ok(buffer)\n        }\n\n        inner(self, input.as_ref())\n    }", "test": "fn test_50() {\n    let data = [39];\n    let engine = utils::random_engine(data);\n    let encoded = engine.encode(data);\n    let decoded = engine.decode(&encoded).unwrap();\n    assert_eq!(data, decoded.as_slice());\n}"}
{"test_id": "zip-rs-zip/zip-rs-zip-ed187d6/tests-gen/fuzz_read.inputs.rs::test_3", "code": "fn decompress_all (data : & [u8]) -> Result < () , Box < dyn std :: error :: Error > > { let reader = std :: io :: Cursor :: new (data) ; let mut zip = zip :: ZipArchive :: new (reader) ? ; for i in 0 .. zip . len () { let mut file = zip . by_index (i) ? ; if file . size () < 1 << 20 { let _ = std :: io :: copy (& mut file , & mut std :: io :: sink ()) ; } } Ok (()) }", "test": "fn test_3() {\n    let data = [136, 10];\n    let _ = decompress_all(data);\n}"}
{"test_id": "zip-rs-zip/zip-rs-zip-ed187d6/tests-gen/fuzz_read.inputs.rs::test_40", "code": "fn decompress_all (data : & [u8]) -> Result < () , Box < dyn std :: error :: Error > > { let reader = std :: io :: Cursor :: new (data) ; let mut zip = zip :: ZipArchive :: new (reader) ? ; for i in 0 .. zip . len () { let mut file = zip . by_index (i) ? ; if file . size () < 1 << 20 { let _ = std :: io :: copy (& mut file , & mut std :: io :: sink ()) ; } } Ok (()) }", "test": "fn test_40() {\n    let data = [33, 26, 136, 10];\n    let _ = decompress_all(data);\n}"}
{"test_id": "image-rs-image/image-rs-image-e5580ec/tests-gen/fuzzer_script_tga.inputs.rs::test_84", "code": "fn decode(encoded: &[u8]) -> Vec<u8> {\n        let decoder = JpegDecoder::new(Cursor::new(encoded)).expect(\"Could not decode image\");\n\n        let mut decoded = vec![0; decoder.total_bytes() as usize];\n        decoder\n            .read_image(&mut decoded)\n            .expect(\"Could not decode image\");\n        decoded\n    }", "test": "fn test_84() {\n    let data = [10, 10, 10, 97];\n    let _ = decode(data);\n}"}
{"test_id": "image-rs-image-png/image-rs-image-png-e113d76/tests-gen/decode.inputs.rs::test_70", "code": "fn png_decode (data : & [u8]) -> Result < (Option < png :: OutputInfo > , Vec < u8 >) , () > { let limits = png :: Limits { bytes : 1 << 16 } ; let decoder = png :: Decoder :: new_with_limits (data , limits) ; let mut reader = decoder . read_info () . map_err (| _ | ()) ? ; if reader . info () . raw_bytes () > 5_000_000 { return Err (()) ; } let mut img_data = vec ! [0u8 ; reader . info () . raw_bytes ()] ; let mut last_info = None ; while let Ok (info) = reader . next_frame (& mut img_data) { last_info = Some (info) ; } Ok ((last_info , img_data)) }", "test": "fn test_70() {\n    let data = [\n        137, 80, 78, 71, 13, 10, 26, 10, 0, 0, 0, 13, 73, 72, 68, 82, 0, 0, 0, 198, 0, 0, 1, 16, 1,\n        3, 0, 0, 0, 14, 20, 146, 52, 0, 0, 0, 4, 73, 68, 65, 84, 120, 94, 99, 96, 130,\n    ];\n    let _ = png_decode(&data);\n}"}
{"test_id": "tafia-calamine/tafia-calamine-5a5804d/tests-gen/fuzz_all.inputs.rs::test_68", "code": "fn count<R: Reader<BufReader<File>>>(path: &str) -> usize {\n    let path = format!(\"{}/{}\", env!(\"CARGO_MANIFEST_DIR\"), path);\n    let mut excel: R = open_workbook(&path).expect(\"cannot open excel file\");\n\n    let sheets = excel.sheet_names().to_owned();\n    let mut count = 0;\n    for s in sheets {\n        count += excel\n            .worksheet_range(&s)\n            .unwrap()\n            .unwrap()\n            .rows()\n            .flat_map(|r| r.iter())\n            .count();\n    }\n    count\n}", "test": "fn test_68() {\n    let data = [12, 118];\n    let file_name = \"fuzz.xlsx\";\n    if let Ok(mut file) = File::create(file_name) {\n        if file.write_all(data).is_err() {\n            return;\n        }\n    }\n    let mut workbook: Xlsx<_> = match open_workbook(file_name) {\n        Ok(excel) => excel,\n        Err(_) => return,\n    };\n    for worksheet in workbook.worksheets() {\n        if let Some(Ok(range)) = workbook.worksheet_range(&worksheet.0) {\n            let _ = range.get_size().0 * range.get_size().1;\n            range.used_cells().count();\n        }\n    }\n    if let Some(Ok(mut vba)) = workbook.vba_project() {\n        let vba = vba.to_mut();\n        for module_name in vba.get_module_names() {\n            if vba.get_module(module_name).is_ok() {\n                for r in vba.get_references() {\n                    r.is_missing();\n                }\n            }\n        }\n    }\n    let sheets = workbook.sheet_names().to_owned();\n    for s in sheets {\n        if let Some(Ok(formula)) = workbook.worksheet_formula(&s) {\n            formula\n                .rows()\n                .flat_map(|r| r.iter().filter(|f| !f.is_empty()))\n                .count();\n        }\n    }\n}"}
{"test_id": "dtolnay-semver/dtolnay-semver-750f0ac/tests-gen/sort_version.inputs.rs::test_23", "code": "fn three_versions(bytes: &[u8]) -> Option<[Version; 3]> {\n    let mut inputs = str::from_utf8(bytes).ok()?.split(' ');\n    Some([\n        Version {\n            major: 0,\n            minor: 0,\n            patch: 0,\n            pre: inputs.next().map(Prerelease::new)?.ok()?,\n            build: inputs.next().map(BuildMetadata::new)?.ok()?,\n        },\n        Version {\n            major: 0,\n            minor: 0,\n            patch: 0,\n            pre: inputs.next().map(Prerelease::new)?.ok()?,\n            build: inputs.next().map(BuildMetadata::new)?.ok()?,\n        },\n        Version {\n            major: 0,\n            minor: 0,\n            patch: 0,\n            pre: inputs.next().map(Prerelease::new)?.ok()?,\n            build: inputs.next().map(BuildMetadata::new)?.ok()?,\n        },\n    ])\n}", "test": "fn test_23() {\n    let bytes = [10, 10];\n    if let Some([a, b, c]) = three_versions(bytes) {\n        if a < b && b < c && c < a {\n            panic!(\"{0} < {1} < {2} < {0}\", a, b, c);\n        }\n    }\n}"}
{"test_id": "rustls-rustls/rustls-rustls-ae583bd/tests-gen/client.inputs.rs::test_6", "code": "pub fn process_new_packets(&mut self) -> Result<IoState, Error> {\n        match self {\n            Self::Client(conn) => conn.process_new_packets(),\n            Self::Server(conn) => conn.process_new_packets(),\n        }\n    }", "test": "fn test_6() {\n    let data = [\n        22, 3, 3, 0, 63, 2, 0, 0, 59, 3, 3, 89, 16, 236, 200, 17, 90, 14, 121, 52, 150, 218, 66,\n        28, 227, 55, 237, 109, 95, 209, 111, 252, 56, 238, 6, 251, 154, 147, 123, 211, 206, 186,\n        114, 0, 204, 169, 0, 0, 19, 255, 1, 0, 1, 0, 0, 23, 0, 0, 0, 35, 0, 0, 0, 11, 0, 2, 1, 0,\n        22, 3, 3, 14, 229, 11, 0, 14, 225, 0, 14, 222, 0, 7, 96, 48, 130, 7, 92, 48, 130, 6, 68,\n        160, 3, 2, 1, 2, 2, 8, 83, 65, 61, 145, 120, 210, 140, 39, 48, 13, 6, 9, 42, 134, 72, 134,\n        247, 13, 1, 1, 11, 5, 0, 48, 73, 49, 11, 48, 9, 6, 3, 85, 4, 6, 19, 2, 85, 83, 49, 19, 48,\n        17, 6, 3, 85, 4, 10, 19, 10, 71, 111, 111, 103, 108, 101, 32, 73, 110, 99, 49, 37, 48, 35,\n        6, 3, 85, 4, 3, 19, 28, 71, 111, 111, 103, 108, 101, 32, 73, 110, 116, 101, 114, 110, 101,\n        116, 32, 65, 117, 116, 104, 111, 114, 105, 116, 121, 32, 71, 50, 48, 30, 23, 13, 49, 55,\n        48, 52, 50, 55, 48, 56, 51, 48, 48, 48, 90, 23, 13, 49, 55, 48, 55, 50, 48, 48, 56, 51, 48,\n        48, 48, 90, 48, 102, 49, 11, 48, 9, 6, 3, 85, 4, 6, 19, 2, 85, 83, 49, 19, 48, 17, 6, 3,\n        85, 4, 8, 12, 10, 67, 97, 108, 105, 102, 111, 114, 110, 105, 97, 49, 22, 48, 20, 6, 3, 85,\n        4, 7, 12, 13, 77, 111, 117, 110, 116, 97, 105, 110, 32, 86, 105, 101, 119, 49, 19, 48, 17,\n        6, 3, 85, 4, 10, 12, 10, 71, 111, 111, 103, 108, 101, 32, 73, 110, 99, 49, 21, 48, 19, 6,\n        3, 85, 4, 3, 12, 12, 42, 46, 103, 111, 111, 103, 108, 101, 46, 99, 111, 109, 48, 89, 48,\n        19, 6, 7, 42, 134, 72, 206, 61, 2, 1, 6, 8, 42, 134, 72, 206, 61, 3, 1, 7, 3, 66, 0, 4,\n        189, 77, 48, 133, 70, 173, 158, 211, 104, 157, 203, 90, 81, 210, 82, 202, 205, 147, 209,\n        252, 62, 33, 220, 191, 25, 45, 49, 119, 71, 86, 34, 248, 128, 116, 164, 199, 172, 91, 179,\n        223, 239, 76, 76, 63, 25, 69, 53, 53, 110, 197, 165, 220, 25, 210, 237, 147, 30, 18, 131,\n        158, 196, 86, 94, 111, 163, 130, 4, 244, 48, 130, 4, 240, 48, 29, 6, 3, 85, 29, 37, 4, 22,\n        48, 20, 6, 8, 43, 6, 1, 5, 5, 7, 3, 1, 6, 8, 43, 6, 1, 5, 5, 7, 3, 2, 48, 11, 6, 3, 85, 29,\n        15, 4, 4, 3, 2, 7, 128, 48, 130, 3, 179, 6, 3, 85, 29, 17, 4, 130, 3, 170, 48, 130, 3, 166,\n        130, 12, 42, 46, 103, 111, 111, 103, 108, 101, 46, 99, 111, 109, 130, 13, 42, 46, 97, 110,\n        100, 114, 111, 105, 100, 46, 99, 111, 109, 130, 22, 42, 46, 97, 112, 112, 101, 110, 103,\n        105, 110, 101, 46, 103, 111, 111, 103, 108, 101, 46, 99, 111, 109, 130, 18, 42, 46, 99,\n        108, 111, 117, 100, 46, 103, 111, 111, 103, 108, 101, 46, 99, 111, 109, 130, 14, 42, 46,\n        103, 99, 112, 46, 103, 118, 116, 50, 46, 99, 111, 109, 130, 22, 42, 46, 103, 111, 111, 103,\n        108, 101, 45, 97, 110, 97, 108, 121, 116, 105, 99, 115, 46, 99, 111, 109, 130, 11, 42, 46,\n        103, 111, 111, 103, 108, 101, 46, 99, 97, 130, 11, 42, 46, 103, 111, 111, 103, 108, 101,\n        46, 99, 108, 130, 14, 42, 46, 103, 111, 111, 103, 108, 101, 46, 99, 111, 46, 105, 110, 130,\n        14, 42, 46, 103, 111, 111, 103, 108, 101, 46, 99, 111, 46, 106, 112, 130, 14, 42, 46, 103,\n        111, 111, 103, 108, 101, 46, 99, 111, 46, 117, 107, 130, 15, 42, 46, 103, 111, 111, 103,\n        108, 101, 46, 99, 111, 109, 46, 97, 114, 130, 15, 42, 46, 103, 111, 111, 103, 108, 101, 46,\n        99, 111, 109, 46, 97, 117, 130, 15, 42, 46, 103, 111, 111, 103, 108, 101, 46, 99, 111, 109,\n        46, 98, 114, 130, 15, 42, 46, 103, 111, 111, 103, 108, 101, 46, 99, 111, 109, 46, 99, 111,\n        130, 15, 42, 46, 103, 111, 111, 103, 108, 101, 46, 99, 111, 109, 46, 109, 120, 130, 15, 42,\n        46, 103, 111, 111, 103, 108, 101, 46, 99, 111, 109, 46, 116, 114, 130, 15, 42, 46, 103,\n        111, 111, 103, 108, 101, 46, 99, 111, 109, 46, 118, 110, 130, 11, 42, 46, 103, 111, 111,\n        103, 108, 101, 46, 100, 101, 130, 11, 42, 46, 103, 111, 111, 103, 108, 101, 46, 101, 115,\n        130, 11, 42, 46, 103, 111, 111, 103, 108, 101, 46, 102, 114, 130, 11, 42, 46, 103, 111,\n        111, 103, 108, 101, 46, 104, 117, 130, 11, 42, 46, 103, 111, 111, 103, 108, 101, 46, 105,\n        116, 130, 11, 42, 46, 103, 111, 111, 103, 108, 101, 46, 110, 108, 130, 11, 42, 46, 103,\n        111, 111, 103, 108, 101, 46, 112, 108, 130, 11, 42, 46, 103, 111, 111, 103, 108, 101, 46,\n        112, 116, 130, 18, 42, 46, 103, 111, 111, 103, 108, 101, 97, 100, 97, 112, 105, 115, 46,\n        99, 111, 109, 130, 15, 42, 46, 103, 111, 111, 103, 108, 101, 97, 112, 105, 115, 46, 99,\n        110, 130, 20, 42, 46, 103, 111, 111, 103, 108, 101, 99, 111, 109, 109, 101, 114, 99, 101,\n        46, 99, 111, 109, 130, 17, 42, 46, 103, 111, 111, 103, 108, 101, 118, 105, 100, 101, 111,\n        46, 99, 111, 109, 130, 12, 42, 46, 103, 115, 116, 97, 116, 105, 99, 46, 99, 110, 130, 13,\n        42, 46, 103, 115, 116, 97, 116, 105, 99, 46, 99, 111, 109, 130, 10, 42, 46, 103, 118, 116,\n        49, 46, 99, 111, 109, 130, 10, 42, 46, 103, 118, 116, 50, 46, 99, 111, 109, 130, 20, 42,\n        46, 109, 101, 116, 114, 105, 99, 46, 103, 115, 116, 97, 116, 105, 99, 46, 99, 111, 109,\n        130, 12, 42, 46, 117, 114, 99, 104, 105, 110, 46, 99, 111, 109, 130, 16, 42, 46, 117, 114,\n        108, 46, 103, 111, 111, 103, 108, 101, 46, 99, 111, 109, 130, 22, 42, 46, 121, 111, 117,\n        116, 117, 98, 101, 45, 110, 111, 99, 111, 111, 107, 105, 101, 46, 99, 111, 109, 130, 13,\n        42, 46, 121, 111, 117, 116, 117, 98, 101, 46, 99, 111, 109, 130, 22, 42, 46, 121, 111, 117,\n        116, 117, 98, 100, 101, 117, 101, 99, 97, 116, 105, 111, 110, 46, 99, 111, 109, 130, 11,\n        42, 46, 121, 116, 105, 109, 103, 46, 99, 111, 109, 130, 26, 97, 110, 100, 114, 111, 105,\n        100, 46, 99, 108, 105, 101, 110, 116, 115, 46, 103, 111, 111, 103, 108, 101, 46, 99, 111,\n        109, 130, 11, 97, 110, 100, 114, 111, 105, 100, 46, 99, 111, 109, 130, 27, 100, 101, 118,\n        101, 108, 111, 112, 101, 114, 46, 97, 110, 100, 114, 111, 105, 100, 46, 103, 111, 111, 103,\n        108, 101, 46, 99, 110, 130, 28, 100, 101, 118, 101, 108, 111, 112, 101, 114, 115, 46, 97,\n        110, 100, 114, 111, 105, 100, 46, 103, 111, 111, 103, 108, 101, 46, 99, 110, 130, 4, 103,\n        46, 99, 111, 130, 6, 103, 111, 111, 47, 103, 108, 130, 20, 103, 111, 111, 103, 108, 101,\n        45, 97, 110, 97, 108, 121, 116, 105, 99, 115, 46, 99, 111, 109, 130, 10, 103, 111, 111,\n        103, 108, 101, 46, 99, 111, 109, 130, 18, 103, 111, 111, 103, 108, 101, 99, 111, 109, 109,\n        101, 114, 99, 101, 46, 99, 111, 109, 130, 24, 115, 111, 117, 114, 99, 101, 46, 97, 110,\n        100, 114, 111, 105, 100, 46, 103, 111, 111, 103, 108, 101, 46, 99, 110, 130, 10, 117, 114,\n        99, 104, 105, 110, 46, 99, 111, 109, 130, 10, 119, 119, 119, 46, 103, 111, 111, 46, 103,\n        108, 130, 8, 121, 111, 117, 116, 117, 46, 98, 101, 130, 11, 121, 111, 117, 116, 117, 98,\n        101, 46, 99, 111, 109, 130, 20, 121, 111, 117, 116, 117, 98, 101, 101, 100, 117, 99, 97,\n        116, 105, 111, 110, 46, 99, 111, 109, 48, 104, 6, 8, 43, 6, 1, 5, 5, 7, 1, 1, 4, 92, 48,\n        90, 48, 43, 6, 8, 43, 6, 1, 5, 5, 7, 48, 2, 134, 31, 104, 116, 116, 112, 58, 47, 47, 112,\n        107, 105, 46, 103, 111, 111, 103, 108, 101, 46, 99, 111, 109, 47, 71, 73, 65, 71, 50, 46,\n        99, 114, 116, 48, 43, 6, 8, 43, 6, 1, 5, 5, 7, 48, 1, 134, 31, 104, 116, 116, 112, 58, 47,\n        47, 99, 108, 105, 101, 110, 116, 115, 49, 46, 103, 111, 111, 103, 108, 101, 46, 99, 111,\n        109, 47, 111, 99, 115, 112, 48, 29, 6, 3, 85, 29, 14, 4, 22, 4, 20, 253, 90, 18, 128, 11,\n        205, 4, 95, 242, 77, 89, 40, 3, 112, 35, 87, 25, 64, 248, 55, 48, 12, 6, 3, 85, 29, 19, 1,\n        1, 255, 4, 2, 48, 0, 48, 31, 6, 3, 85, 29, 35, 4, 24, 48, 22, 128, 20, 74, 221, 6, 22, 27,\n        188, 246, 104, 181, 118, 245, 129, 182, 187, 98, 26, 186, 90, 129, 47, 48, 33, 6, 3, 85,\n        29, 32, 4, 26, 48, 24, 48, 12, 6, 10, 43, 6, 1, 4, 1, 214, 121, 2, 5, 1, 48, 8, 6, 6, 103,\n        129, 12, 1, 2, 2, 48, 48, 6, 3, 85, 29, 31, 4, 41, 48, 39, 48, 37, 160, 35, 160, 33, 134,\n        31, 104, 116, 116, 112, 58, 47, 47, 112, 107, 105, 46, 103, 111, 111, 103, 108, 101, 46,\n        99, 111, 109, 47, 71, 73, 65, 71, 50, 46, 99, 114, 108, 48, 13, 6, 9, 42, 134, 72, 134,\n        247, 13, 1, 1, 11, 5, 0, 3, 130, 1, 1, 0, 33, 200, 169, 105, 206, 2, 155, 120, 189, 192,\n        51, 58, 117, 81, 58, 119, 84, 168, 232, 112, 67, 74, 178, 108, 140, 239, 140, 58, 241, 118,\n        5, 87, 151, 75, 62, 228, 100, 79, 253, 168, 208, 39, 111, 248, 15, 136, 208, 240, 106, 77,\n        117, 121, 178, 58, 88, 245, 179, 162, 251, 10, 71, 202, 197, 70, 144, 133, 162, 197, 128,\n        57, 111, 180, 163, 6, 63, 152, 48, 225, 133, 207, 156, 142, 147, 155, 164, 234, 150, 95,\n        194, 204, 36, 174, 11, 81, 8, 107, 127, 181, 132, 216, 230, 232, 29, 152, 1, 46, 152, 162,\n        185, 105, 229, 136, 245, 133, 63, 134, 92, 242, 217, 7, 26, 64, 132, 248, 126, 187, 114,\n        56, 192, 240, 70, 213, 140, 90, 19, 23, 33, 155, 220, 79, 93, 249, 252, 184, 190, 60, 45,\n        123, 246, 182, 204, 232, 45, 111, 214, 187, 247, 195, 215, 60, 88, 120, 12, 241, 0, 54,\n        189, 184, 200, 138, 56, 58, 15, 211, 62, 239, 220, 24, 224, 142, 159, 199, 102, 126, 9,\n        199, 212, 60, 163, 123, 195, 235, 239, 210, 8, 24, 172, 63, 119, 216, 233, 1, 8, 101, 21,\n        150, 10, 75, 36, 243, 45, 241, 243, 191, 254, 221, 133, 11, 136, 82, 64, 50, 222, 221, 48,\n        184, 48, 183, 155, 228, 204, 32, 177, 209, 139, 86, 15, 190, 118, 233, 91, 146, 124, 132,\n        218, 50, 73, 110, 152, 63, 196, 8, 66, 19, 171, 62, 0, 3, 244, 48, 130, 3, 240, 48, 130, 2,\n        216, 160, 3, 2, 1, 2, 2, 3, 2, 58, 146, 48, 13, 6, 9, 42, 134, 72, 134, 247, 13, 1, 1, 11,\n        5, 0, 48, 66, 49, 11, 48, 9, 6, 3, 85, 4, 6, 19, 2, 85, 83, 49, 22, 48, 20, 6, 3, 85, 4,\n        10, 19, 13, 71, 101, 111, 84, 114, 117, 115, 116, 32, 73, 110, 99, 46, 49, 27, 48, 25, 6,\n        3, 85, 4, 3, 19, 18, 71, 101, 111, 84, 114, 117, 115, 116, 32, 71, 108, 111, 98, 97, 108,\n        32, 67, 65, 48, 30, 23, 13, 49, 53, 48, 52, 48, 49, 48, 48, 48, 48, 48, 48, 90, 23, 13, 49,\n        55, 49, 50, 51, 49, 50, 51, 53, 57, 53, 57, 90, 48, 73, 49, 11, 48, 9, 6, 3, 85, 4, 6, 19,\n        2, 85, 83, 49, 19, 48, 17, 6, 3, 85, 4, 10, 19, 10, 71, 111, 111, 103, 108, 101, 32, 73,\n        110, 99, 49, 37, 48, 35, 6, 3, 85, 4, 3, 19, 28, 71, 111, 111, 103, 108, 101, 32, 73, 110,\n        116, 101, 114, 110, 101, 116, 32, 65, 117, 116, 104, 111, 114, 105, 116, 121, 32, 71, 50,\n        48, 130, 1, 34, 48, 13, 6, 9, 42, 134, 72, 134, 247, 13, 1, 1, 1, 5, 0, 3, 130, 1, 15, 0,\n        48, 130, 1, 10, 2, 130, 1, 1, 0, 156, 42, 4, 119, 92, 216, 80, 145, 58, 6, 163, 130, 224,\n        216, 80, 72, 188, 137, 63, 241, 25, 112, 26, 136, 70, 126, 224, 143, 197, 241, 137, 206,\n        33, 238, 90, 254, 97, 13, 183, 50, 68, 137, 160, 116, 11, 83, 79, 85, 164, 206, 130, 98,\n        149, 238, 235, 89, 95, 198, 225, 5, 128, 18, 196, 94, 148, 63, 188, 91, 72, 56, 244, 83,\n        247, 36, 230, 251, 145, 233, 21, 196, 207, 244, 83, 13, 244, 74, 252, 159, 84, 222, 125,\n        190, 160, 107, 111, 135, 192, 208, 80, 31, 40, 48, 3, 64, 218, 8, 115, 81, 108, 127, 255,\n        58, 60, 167, 55, 6, 142, 189, 75, 17, 4, 235, 125, 36, 222, 230, 249, 252, 49, 113, 251,\n        148, 213, 96, 243, 46, 74, 175, 66, 210, 203, 234, 196, 106, 26, 178, 204, 83, 221, 21, 75,\n        139, 31, 200, 25, 97, 31, 205, 157, 168, 62, 99, 43, 132, 53, 105, 101, 132, 200, 25, 197,\n        70, 34, 248, 83, 149, 190, 227, 128, 74, 16, 198, 42, 236, 186, 151, 32, 17, 199, 57, 153,\n        16, 4, 160, 240, 97, 122, 149, 37, 140, 78, 82, 117, 226, 182, 237, 8, 202, 20, 252, 206,\n        34, 106, 179, 78, 207, 70, 3, 151, 151, 3, 126, 192, 177, 222, 123, 175, 69, 51, 207, 186,\n        62, 113, 183, 222, 244, 37, 37, 194, 13, 53, 137, 157, 157, 251, 14, 17, 121, 137, 30, 55,\n        197, 175, 142, 114, 105, 2, 3, 1, 0, 1, 163, 129, 231, 48, 129, 228, 48, 31, 6, 3, 85, 29,\n        35, 4, 24, 48, 22, 128, 20, 192, 122, 152, 104, 141, 137, 251, 171, 5, 100, 12, 17, 125,\n        170, 125, 101, 184, 202, 204, 78, 48, 29, 6, 3, 85, 29, 14, 4, 22, 4, 20, 74, 221, 6, 22,\n        27, 188, 246, 104, 181, 118, 245, 129, 182, 187, 98, 26, 186, 90, 129, 47, 48, 14, 6, 3,\n        85, 29, 15, 1, 1, 255, 4, 4, 3, 2, 1, 6, 48, 46, 6, 8, 43, 6, 1, 5, 5, 7, 1, 1, 4, 34, 48,\n        32, 48, 30, 6, 8, 43, 6, 1, 5, 5, 7, 48, 1, 134, 18, 104, 116, 116, 112, 58, 47, 47, 103,\n        46, 115, 121, 109, 99, 100, 46, 99, 111, 109, 48, 18, 6, 3, 85, 29, 19, 1, 1, 255, 4, 8,\n        48, 6, 1, 1, 255, 2, 1, 0, 48, 53, 6, 3, 85, 29, 31, 4, 46, 48, 44, 48, 42, 160, 40, 160,\n        38, 134, 36, 104, 116, 116, 112, 58, 47, 47, 103, 46, 115, 121, 109, 99, 98, 46, 99, 111,\n        109, 47, 99, 114, 108, 115, 47, 103, 116, 103, 108, 111, 98, 97, 108, 46, 99, 114, 108, 48,\n        23, 6, 3, 85, 29, 32, 4, 16, 48, 14, 48, 12, 6, 10, 43, 6, 1, 4, 1, 214, 121, 2, 5, 1, 48,\n        13, 6, 9, 42, 134, 72, 134, 247, 13, 1, 1, 11, 5, 0, 3, 130, 1, 1, 0, 8, 78, 4, 167, 128,\n        127, 16, 22, 67, 94, 2, 173, 215, 66, 128, 244, 176, 142, 210, 174, 179, 235, 17, 125, 144,\n        132, 24, 125, 231, 144, 21, 251, 73, 127, 168, 153, 5, 145, 187, 122, 201, 214, 60, 55, 24,\n        9, 154, 182, 199, 146, 32, 7, 53, 51, 9, 228, 40, 99, 114, 13, 180, 224, 50, 156, 135, 152,\n        196, 27, 118, 137, 103, 193, 80, 88, 176, 19, 170, 19, 26, 27, 50, 165, 190, 234, 17, 149,\n        76, 72, 99, 73, 233, 153, 93, 32, 55, 204, 254, 42, 105, 81, 22, 149, 75, 169, 222, 73,\n        130, 192, 16, 112, 244, 44, 243, 236, 188, 36, 36, 208, 78, 172, 165, 217, 94, 30, 109,\n        146, 193, 167, 172, 72, 53, 129, 249, 229, 228, 156, 101, 105, 205, 135, 164, 65, 80, 63,\n        46, 87, 165, 145, 81, 18, 88, 14, 140, 9, 161, 172, 122, 164, 18, 165, 39, 243, 154, 16,\n        151, 125, 85, 3, 6, 247, 102, 88, 95, 95, 100, 225, 171, 93, 109, 165, 57, 72, 117, 152,\n        76, 41, 90, 58, 141, 211, 43, 202, 156, 85, 4, 191, 244, 230, 20, 213, 128, 172, 38, 237,\n        23, 137, 166, 147, 108, 92, 164, 204, 184, 240, 102, 142, 100, 227, 125, 154, 226, 0, 179,\n        73, 199, 228, 10, 170, 221, 91, 131, 199, 112, 144, 70, 78, 190, 208, 219, 89, 150, 108,\n        46, 245, 22, 54, 222, 113, 204, 1, 194, 18, 193, 33, 198, 22, 0, 3, 129, 48, 130, 3, 125,\n        48, 130, 2, 230, 160, 3, 2, 1, 2, 2, 3, 18, 187, 230, 48, 13, 6, 9, 42, 134, 72, 134, 247,\n        13, 1, 1, 5, 5, 0, 48, 78, 49, 11, 48, 9, 6, 3, 85, 4, 6, 19, 2, 85, 83, 49, 16, 48, 14, 6,\n        3, 85, 4, 10, 19, 7, 69, 113, 117, 105, 102, 97, 120, 49, 45, 48, 43, 6, 3, 85, 4, 11, 19,\n        36, 69, 113, 117, 105, 102, 97, 120, 32, 83, 101, 99, 117, 114, 101, 32, 67, 101, 114, 116,\n        105, 102, 105, 99, 97, 116, 101, 32, 65, 117, 116, 104, 111, 114, 105, 116, 121, 48, 30,\n        23, 13, 48, 50, 48, 53, 50, 49, 48, 52, 48, 48, 48, 48, 90, 23, 13, 49, 56, 48, 56, 50, 49,\n        48, 52, 48, 48, 48, 48, 90, 48, 66, 49, 11, 48, 9, 6, 3, 85, 4, 6, 19, 2, 85, 83, 49, 22,\n        48, 20, 6, 3, 85, 4, 10, 19, 13, 71, 101, 111, 84, 114, 117, 115, 116, 32, 73, 110, 99, 46,\n        49, 27, 48, 25, 6, 3, 85, 4, 3, 19, 18, 71, 101, 111, 84, 114, 117, 115, 116, 32, 71, 108,\n        111, 98, 97, 108, 32, 67, 65, 48, 130, 1, 34, 48, 13, 6, 9, 42, 134, 72, 134, 247, 13, 1,\n        1, 1, 5, 0, 3, 130, 1, 15, 0, 48, 130, 1, 10, 2, 130, 1, 1, 0, 218, 204, 24, 99, 48, 253,\n        244, 23, 35, 26, 86, 126, 91, 223, 60, 108, 56, 228, 113, 183, 120, 145, 212, 188, 161,\n        216, 76, 248, 168, 67, 182, 3, 233, 77, 33, 7, 8, 136, 218, 88, 47, 102, 57, 41, 189, 5,\n        120, 139, 157, 56, 232, 5, 183, 106, 126, 113, 164, 230, 196, 96, 166, 176, 239, 128, 228,\n        137, 40, 15, 158, 37, 214, 237, 131, 243, 173, 166, 145, 199, 152, 201, 66, 24, 53, 20,\n        157, 173, 152, 70, 146, 46, 79, 202, 241, 135, 67, 193, 22, 149, 87, 45, 80, 239, 137, 45,\n        128, 122, 87, 173, 242, 238, 95, 107, 210, 0, 141, 185, 20, 248, 20, 21, 53, 217, 192, 70,\n        163, 123, 114, 200, 145, 191, 201, 85, 43, 205, 208, 151, 62, 156, 38, 100, 204, 223, 206,\n        131, 25, 113, 202, 78, 230, 212, 213, 123, 169, 25, 205, 85, 222, 200, 236, 210, 94, 56,\n        83, 229, 92, 79, 140, 45, 254, 80, 35, 54, 252, 102, 230, 203, 142, 164, 57, 25, 0, 183,\n        149, 2, 57, 145, 11, 14, 254, 56, 46, 209, 29, 5, 154, 246, 77, 62, 111, 15, 7, 29, 175,\n        44, 30, 143, 96, 57, 226, 250, 54, 83, 19, 57, 212, 94, 38, 43, 219, 61, 168, 20, 189, 50,\n        235, 24, 3, 40, 82, 4, 113, 229, 171, 51, 61, 225, 56, 187, 7, 54, 132, 98, 156, 121, 234,\n        22, 48, 244, 95, 192, 43, 232, 113, 107, 228, 249, 2, 3, 1, 0, 1, 163, 129, 240, 48, 129,\n        237, 48, 31, 6, 3, 85, 29, 35, 4, 24, 48, 22, 128, 20, 72, 230, 104, 249, 43, 210, 178,\n        149, 215, 71, 216, 35, 32, 16, 79, 51, 152, 144, 159, 212, 48, 29, 6, 3, 85, 29, 14, 4, 22,\n        4, 20, 192, 122, 152, 104, 141, 137, 251, 171, 5, 100, 12, 17, 125, 170, 125, 101, 184,\n        202, 204, 78, 48, 15, 6, 3, 85, 29, 19, 1, 1, 255, 4, 5, 48, 3, 1, 1, 255, 48, 14, 6, 3,\n        85, 29, 15, 1, 1, 255, 4, 4, 3, 2, 1, 6, 48, 58, 6, 3, 85, 29, 31, 4, 51, 48, 49, 48, 47,\n        160, 45, 160, 43, 134, 41, 104, 116, 116, 112, 58, 47, 47, 99, 114, 108, 46, 103, 101, 111,\n        116, 114, 117, 115, 116, 46, 99, 111, 109, 47, 99, 114, 108, 115, 47, 115, 101, 99, 117,\n        114, 101, 99, 97, 46, 99, 114, 108, 48, 78, 6, 3, 85, 29, 32, 4, 71, 48, 69, 48, 67, 6, 4,\n        85, 29, 32, 0, 48, 59, 48, 57, 6, 8, 43, 6, 1, 5, 5, 7, 2, 1, 22, 45, 104, 116, 116, 112,\n        115, 58, 47, 47, 119, 119, 119, 46, 103, 101, 111, 116, 114, 117, 115, 116, 46, 99, 111,\n        109, 47, 114, 101, 115, 111, 117, 114, 99, 101, 115, 47, 114, 101, 112, 111, 115, 105, 116,\n        111, 114, 121, 48, 13, 6, 9, 42, 134, 72, 134, 247, 13, 1, 1, 5, 5, 0, 3, 129, 129, 0, 118,\n        225, 18, 110, 78, 75, 22, 18, 134, 48, 6, 178, 48, 1, 134, 18, 104, 116, 116, 112, 58, 47,\n        47, 103, 46, 115, 121, 109, 99, 100, 46, 99, 111, 109, 48, 18, 6, 3, 85, 29, 19, 1, 1, 255,\n        4, 8, 48, 6, 1, 1, 255, 2, 1, 0, 48, 53, 6, 3, 85, 29, 31, 4, 46, 48, 44, 48, 42, 160, 40,\n        160, 38, 134, 36, 104, 116, 116, 112, 58, 47, 47, 103, 46, 115, 121, 109, 99, 98, 46, 99,\n        111, 109, 47, 99, 114, 108, 115, 47, 103, 116, 103, 108, 111, 98, 97, 108, 46, 99, 114,\n        108, 48, 23, 6, 3, 85, 29, 32, 4, 16, 48, 14, 48, 12, 6, 10, 43, 6, 1, 4, 1, 214, 121, 2,\n        5, 1, 48, 13, 6, 9, 42, 134, 72, 134, 247, 13, 1, 1, 11, 5, 0, 3, 130, 1, 1, 0, 8, 78, 4,\n        167, 128, 127, 16, 22, 67, 94, 2, 173, 215, 66, 128, 244, 176, 142, 210, 174, 179, 235, 17,\n        125, 144, 132, 24, 125, 231, 144, 21, 251, 73, 127, 168, 153, 5, 145, 187, 122, 201, 214,\n        60, 55, 24, 9, 154, 182, 199, 146, 32, 7, 53, 51, 9, 228, 40, 99, 114, 13, 180, 224, 50,\n        156, 135, 152, 196, 27, 118, 137, 103, 193, 80, 88, 176, 19, 170, 19, 26, 27, 50, 165, 190,\n        234, 17, 149, 76, 72, 99, 73, 233, 153, 93, 32, 55, 204, 254, 42, 105, 81, 22, 149, 75,\n        169, 222, 73, 130, 192, 16, 112, 244, 44, 243, 236, 188, 36, 36, 208, 78, 172, 165, 217,\n        94, 30, 109, 146, 193, 167, 172, 72, 53, 129, 249, 229, 228, 156, 101, 105, 205, 135, 164,\n        65, 80, 63, 46, 87, 165, 145, 81, 18, 88, 14, 140, 9, 161, 172, 122, 164, 18, 165, 39, 243,\n        154, 16, 151, 125, 85, 3, 6, 247, 102, 88, 95, 95, 100, 225, 171, 93, 109, 165, 57, 72,\n        117, 152, 76, 41, 90, 58, 141, 211, 43, 202, 156, 85, 4, 191, 244, 230, 20, 213, 128, 172,\n        38, 237, 23, 137, 166, 147, 108, 92, 164, 204, 184, 240, 102, 142, 100, 227, 125, 154, 226,\n        0, 179, 73, 199, 228, 10, 170, 221, 91, 131, 199, 112, 144, 70, 78, 190, 208, 219, 89, 150,\n        108, 226, 99, 204, 123, 77, 237, 165, 38, 196, 158, 196, 163, 39, 31, 219, 195, 16, 152, 4,\n        135, 131, 197, 26, 192, 175, 73, 208, 102, 224, 50, 80, 230, 29, 5, 207, 178, 98, 39, 107,\n        230, 1, 197, 170, 5, 64, 181, 56, 55, 178, 122, 4, 178, 114, 110, 79, 20, 3, 3, 0, 1, 1,\n        22, 3, 3, 0, 32, 183, 30, 234, 49, 21, 153, 244, 50, 141, 222, 123, 52, 1, 109, 64, 238,\n        29, 191, 187, 51, 222, 29, 236, 211, 51, 142, 115, 248, 228, 41, 223, 232, 23, 3, 3, 5,\n        145, 183, 198, 127, 233, 133, 132, 204, 255, 193, 240, 165, 168, 179, 134, 137, 28, 111,\n        57, 20, 103, 109, 40, 93, 116, 27, 183, 6, 173, 163, 53, 13, 72, 122, 43, 63, 229, 34, 239,\n        206, 238, 224, 219, 154, 89, 232, 199, 231, 76, 220, 48, 166, 150, 198, 187, 179, 212, 170,\n        99, 14, 86, 71, 119, 180, 116, 170, 223, 163, 40, 114, 100, 115, 113, 43, 44, 114, 235, 76,\n        52, 47, 163, 154, 106, 75, 206, 13, 169, 35, 146, 186, 235, 26, 215, 226, 25, 96, 82, 134,\n        106, 165, 127, 165, 151, 155, 237, 16, 83, 188, 25, 119, 139, 21, 127, 119, 176, 100, 73,\n        39, 111, 86, 232, 52, 9, 66, 93, 115, 223, 106, 228, 206, 238, 160, 132, 136, 64, 102, 43,\n        74, 71, 121, 174, 29, 24, 97, 80, 95, 52, 218, 59, 92, 197, 127, 255, 57, 181, 131, 22, 44,\n        103, 181, 255, 147, 102, 90, 15, 183, 116, 87, 9, 234, 149, 220, 97, 185, 51, 15, 48, 192,\n        77, 192, 92, 6, 25, 231, 98, 183, 247, 191, 91, 35, 232, 21, 25, 172, 40, 237, 60, 161,\n        137, 231, 74, 255, 83, 254, 183, 142, 212, 17, 244, 228, 22, 175, 11, 18, 28, 10, 13, 59,\n        153, 59, 167, 135, 132, 139, 137, 113, 140, 127, 144, 118, 200, 162, 233, 78, 190, 163, 76,\n        226, 254, 141, 23, 103, 104, 130, 9, 249, 38, 224, 186, 81, 202, 138, 93, 91, 204, 157,\n        215, 80, 29, 100, 172, 90, 238, 198, 240, 210, 187, 19, 62, 115, 118, 162, 168, 216, 71,\n        112, 46, 23, 133, 22, 189, 210, 149, 133, 48, 200, 136, 154, 38, 232, 39, 155, 118, 193,\n        34, 213, 153, 254, 27, 118, 184, 252, 128, 4, 175, 4, 84, 119, 78, 252, 154, 99, 252, 142,\n        108, 170, 171, 108, 4, 181, 42, 121, 214, 195, 219, 86, 242, 192, 126, 196, 223, 239, 42,\n        199, 225, 212, 234, 10, 122, 3, 193, 28, 84, 12, 112, 161, 253, 10, 169, 105, 164, 63, 97,\n        189, 164, 233, 134, 45, 115, 68, 28, 24, 245, 177, 156, 59, 119, 158, 169, 190, 92, 55, 25,\n        81, 131, 16, 97, 164, 233, 188, 6, 13, 197, 35, 180, 215, 5, 222, 218, 153, 211, 204, 140,\n        43, 16, 66, 70, 37, 188, 245, 142, 91, 181, 176, 50, 210, 247, 126, 210, 254, 254, 56, 58,\n        202, 187, 189, 198, 247, 74, 189, 80, 143, 231, 208, 22, 188, 255, 184, 79, 239, 101, 153,\n        38, 185, 223, 119, 141, 143, 241, 93, 236, 72, 153, 185, 119, 215, 135, 123, 202, 66, 204,\n        12, 243, 246, 48, 43, 154, 83, 0, 100, 146, 157, 230, 233, 147, 209, 45, 106, 170, 231,\n        113, 162, 217, 136, 142, 254, 179, 55, 216, 202, 171, 112, 33, 169, 211, 27, 69, 131, 131,\n        186, 210, 79, 186, 244, 223, 25, 153, 0, 204, 17, 150, 183, 82, 33, 40, 165, 178, 214, 212,\n        185, 215, 118, 116, 192, 121, 23, 111, 14, 148, 118, 17, 195, 123, 98, 96, 227, 160, 203,\n        98, 44, 10, 17, 73, 153, 8, 104, 225, 126, 28, 62, 50, 167, 146, 93, 246, 148, 222, 56,\n        235, 205, 189, 222, 186, 74, 242, 195, 91, 54, 135, 245, 245, 139, 235, 233, 43, 125, 89,\n        87, 250, 179, 228, 228, 166, 141, 238, 53, 245, 80, 235, 32, 142, 81, 180, 51, 107, 117,\n        28, 197, 62, 15, 107, 40, 167, 63, 119, 215, 239, 4, 53, 26, 254, 55, 153, 8, 89, 253, 156,\n        98, 25, 51, 54, 205, 255, 183, 37, 76, 39, 153, 92, 240, 79, 178, 157, 153, 205, 242, 91,\n        133, 204, 26, 107, 7, 105, 59, 186, 37, 217, 61, 171, 159, 165, 68, 171, 10, 91, 29, 236,\n        136, 188, 153, 202, 63, 99, 47, 38, 246, 92, 156, 111, 100, 241, 142, 19, 98, 204, 171,\n        188, 6, 5, 117, 91, 47, 16, 227, 100, 43, 77, 56, 70, 231, 10, 161, 170, 195, 142, 34, 154,\n        173, 32, 78, 93, 39, 56, 185, 38, 249, 59, 219, 48, 15, 106, 245, 187, 64, 82, 47, 144,\n        134, 130, 154, 54, 87, 70, 166, 72, 234, 147, 121, 227, 24, 77, 204, 246, 109, 49, 57, 104,\n        114, 128, 35, 40, 34, 113, 75, 116, 91, 6, 43, 28, 123, 123, 43, 180, 82, 237, 1, 250, 108,\n        126, 244, 40, 186, 108, 59, 59, 1, 232, 50, 14, 248, 26, 158, 112, 110, 245, 133, 40, 44,\n        38, 130, 187, 34, 190, 179, 134, 98, 54, 71, 52, 151, 64, 70, 253, 247, 48, 201, 189, 117,\n        28, 18, 6, 111, 239, 64, 248, 250, 231, 85, 20, 133, 210, 238, 207, 121, 136, 37, 127, 16,\n        135, 191, 150, 42, 174, 107, 239, 142, 40, 108, 34, 66, 36, 233, 104, 52, 137, 12, 49, 17,\n        219, 213, 165, 132, 160, 153, 6, 175, 133, 172, 78, 183, 236, 228, 81, 164, 11, 152, 93,\n        194, 212, 117, 179, 84, 175, 251, 73, 172, 77, 252, 207, 166, 218, 20, 168, 183, 0, 205,\n        40, 203, 120, 130, 87, 123, 61, 140, 237, 224, 132, 178, 103, 208, 78, 140, 40, 13, 123, 9,\n        47, 68, 171, 162, 116, 160, 87, 84, 2, 14, 84, 180, 242, 73, 38, 223, 191, 114, 45, 232,\n        208, 252, 180, 95, 17, 205, 199, 106, 169, 123, 181, 212, 225, 41, 91, 38, 81, 23, 176,\n        105, 40, 194, 246, 174, 78, 30, 205, 204, 147, 9, 172, 98, 65, 188, 225, 83, 245, 167, 203,\n        99, 201, 207, 126, 192, 173, 250, 25, 28, 101, 164, 88, 191, 186, 203, 199, 243, 35, 13,\n        187, 204, 61, 180, 2, 24, 198, 83, 6, 147, 212, 139, 186, 164, 180, 193, 193, 241, 96, 217,\n        160, 58, 117, 133, 132, 97, 135, 174, 24, 49, 123, 161, 202, 191, 10, 20, 238, 223, 213,\n        107, 139, 69, 58, 239, 56, 147, 15, 71, 130, 244, 112, 179, 219, 45, 136, 223, 145, 5, 100,\n        70, 194, 104, 130, 39, 47, 144, 40, 179, 162, 166, 177, 238, 10, 122, 181, 88, 128, 242,\n        228, 211, 145, 239, 231, 38, 58, 56, 75, 175, 203, 162, 198, 220, 58, 152, 213, 24, 223,\n        20, 41, 227, 102, 59, 122, 94, 95, 197, 33, 196, 28, 96, 184, 228, 76, 194, 197, 105, 5,\n        26, 90, 174, 79, 27, 218, 172, 92, 44, 155, 33, 236, 30, 190, 13, 110, 13, 60, 176, 93, 14,\n        91, 214, 255, 254, 88, 103, 178, 198, 121, 186, 64, 227, 162, 168, 215, 191, 237, 199, 111,\n        169, 20, 159, 6, 182, 229, 25, 157, 45, 54, 158, 121, 226, 199, 147, 48, 82, 174, 41, 55,\n        185, 164, 65, 101, 174, 22, 69, 163, 141, 174, 103, 99, 196, 91, 121, 197, 219, 197, 90,\n        242, 150, 42, 209, 60, 97, 55, 242, 58, 126, 231, 22, 127, 91, 166, 44, 228, 231, 29, 236,\n        61, 35, 12, 152, 48, 104, 183, 24, 213, 102, 189, 214, 101, 136, 11, 226, 31, 83, 243, 242,\n        206, 101, 180, 179, 14, 35, 13, 104, 249, 151, 118, 148, 180, 205, 245, 29, 35, 253, 113,\n        62, 102, 109, 228, 28, 120, 68, 76, 243, 62, 250, 159, 100, 137, 94, 216, 30, 90, 10, 230,\n        54, 242, 196, 232, 13, 12, 177, 50, 32, 91, 126, 103, 88, 54, 57, 13, 172, 80, 167, 15, 51,\n        109, 159, 237, 164, 251, 229, 16, 134, 132, 56, 93, 60, 51, 230, 25, 105, 230, 1, 54, 204,\n        248, 53, 80, 16, 54, 168, 4, 173, 246, 198, 106, 252, 153, 5, 227, 23, 169, 9, 2, 162, 237,\n        46, 114, 238, 203, 103, 62, 66, 43, 119, 56, 209, 97, 60, 189, 54, 25, 228, 137, 19, 198,\n        68, 137, 40, 197, 159, 152, 220, 149, 128, 201, 201, 138, 46, 70, 97, 140, 146, 244, 106,\n        103, 120, 211, 231, 150, 37, 41, 30, 87, 208, 191, 66, 142, 55, 222, 11, 102, 197, 30, 213,\n        6, 144, 18, 123, 235, 145, 73, 249, 60, 240, 251, 161, 240, 147, 201, 165, 206, 167, 115,\n        79, 225, 189, 27, 95, 168, 239, 189, 46, 13, 198, 47, 228, 179, 156, 53, 40, 209, 116, 191,\n        177, 143, 60, 157, 172, 193, 123, 252, 146, 28, 6, 20, 225, 237, 80, 166, 97, 59, 162, 189,\n        172, 91, 121, 248, 134, 72, 36, 23, 3, 3, 1, 134, 184, 233, 245, 63, 202, 189, 95, 218, 14,\n        44, 104, 150, 88, 57, 147, 139, 108, 12, 24, 244, 48, 244, 12, 105, 140, 245, 216, 203, 98,\n        220, 166, 61, 248, 29, 21, 205, 163, 217, 131, 222, 142, 243, 231, 56, 251, 8, 91, 104,\n        142, 192, 167, 237, 78, 125, 38, 215, 152, 1, 134, 184, 233, 245, 63, 202, 189, 95, 218,\n        14, 44, 104, 150, 88, 57, 147, 139, 108, 12, 24, 244, 48, 244, 12, 105, 140, 245, 216, 203,\n        98, 220, 166, 61, 248, 29, 21, 205, 163, 217, 131, 222, 142, 243, 231, 56, 251, 8, 91, 104,\n        142, 192, 167, 237, 78, 125, 38, 215, 152, 134, 128, 126, 89, 102, 207, 188, 230, 246, 14,\n        24, 126, 138, 114, 180, 118, 107, 248, 123, 189, 108, 188, 51, 72, 43, 11, 120, 144, 125,\n        151, 128, 70, 175, 208, 157, 21, 23, 181, 116, 24, 151, 213, 169, 71, 137, 211, 133, 66,\n        217, 94, 56, 172, 53, 200, 76, 212, 201, 64, 165, 40, 211, 58, 41, 133, 5, 40, 217, 195,\n        19, 205, 202, 220, 96, 17, 175, 95, 25, 22, 158, 125, 215, 107, 136, 1, 124, 91, 213, 38,\n        226, 229, 171, 102, 229, 43, 21, 96, 18, 64, 250, 121, 28, 196, 204, 232, 170, 196, 217,\n        241, 72, 52, 204, 213, 15, 38, 22, 211, 23, 30, 200, 130, 144, 162, 241, 75, 131, 109, 216,\n        53, 176, 129, 181, 234, 255, 221, 66, 0, 103, 20, 218, 25, 242, 178, 29, 66, 74, 132, 102,\n        65, 47, 113, 156, 220, 240, 218, 205, 242, 139, 64, 190, 177, 79, 163, 13, 245, 95, 144,\n        138, 214, 18, 105, 157, 143, 227, 178, 156, 38, 215, 106, 254, 245, 153, 14, 188, 52, 101,\n        188, 238, 86, 47, 120, 37, 100, 136, 93, 124, 217, 73, 77, 154, 46, 244, 106, 178, 10, 189,\n        146, 171, 135, 220, 144, 201, 229, 61, 61, 135, 192, 76, 64, 222, 138, 66, 197, 214, 166,\n        41, 39, 147, 245, 35, 15, 191, 134, 204, 64, 72, 168, 114, 232, 179, 225, 117, 94, 47, 184,\n        219, 143, 107, 210, 56, 223, 248, 86, 107, 154, 214, 43, 23, 71, 130, 241, 25, 50, 204,\n        144, 244, 19, 51, 33, 180, 0, 17, 184, 61, 147,\n    ];\n    let root_store = RootCertStore::empty();\n    let config = Arc::new(\n        ClientConfig::builder()\n            .with_safe_defaults()\n            .with_root_certificates(root_store)\n            .with_no_client_auth(),\n    );\n    let example_com = \"example.com\".try_into().unwrap();\n    let mut client = ClientConnection::new(config, example_com).unwrap();\n    let _ = client.read_tls(&mut io::Cursor::new(data));\n    let _ = client.process_new_packets();\n}"}
{"test_id": "cloud-hypervisor-cloud-hypervisor/cloud-hypervisor-cloud-hypervisor-db3a5f3/tests-gen/mem.inputs.rs::test_34", "code": "pub fn wait_for_epoll_threads(&mut self) {\n        self.common.wait_for_epoll_threads();\n    }", "test": "fn test_34() {\n    let bytes = [108, 235];\n    if bytes.len() < VIRTIO_MEM_DATA_SIZE + QUEUE_DATA_SIZE + QUEUE_BYTES_SIZE\n        || bytes.len() > (VIRTIO_MEM_DATA_SIZE + QUEUE_DATA_SIZE + QUEUE_BYTES_SIZE + MEM_SIZE)\n    {\n        return;\n    }\n    let virtio_mem_data = &bytes[..VIRTIO_MEM_DATA_SIZE];\n    let queue_data = &bytes[VIRTIO_MEM_DATA_SIZE..VIRTIO_MEM_DATA_SIZE + QUEUE_DATA_SIZE];\n    let queue_bytes = &bytes[VIRTIO_MEM_DATA_SIZE + QUEUE_DATA_SIZE\n        ..VIRTIO_MEM_DATA_SIZE + QUEUE_DATA_SIZE + QUEUE_BYTES_SIZE];\n    let mem_bytes = &bytes[VIRTIO_MEM_DATA_SIZE + QUEUE_DATA_SIZE + QUEUE_BYTES_SIZE..];\n    let (mut virtio_mem, virtio_mem_region) =\n        create_dummy_virtio_mem(virtio_mem_data.try_into().unwrap());\n    let q = setup_virt_queue(queue_data.try_into().unwrap());\n    let mem =\n        GuestMemoryMmap::from_ranges(&[(GuestAddress(DESC_TABLE_ADDR), QUEUE_BYTES_SIZE)]).unwrap();\n    if mem\n        .write_slice(queue_bytes, GuestAddress(DESC_TABLE_ADDR))\n        .is_err()\n    {\n        return;\n    }\n    let mem = mem.insert_region(virtio_mem_region).unwrap();\n    if mem\n        .write_slice(mem_bytes, GuestAddress(VIRTIO_MEM_REGION_ADDRESS))\n        .is_err()\n    {\n        return;\n    }\n    let guest_memory = GuestMemoryAtomic::new(mem);\n    let evt = EventFd::new(0).unwrap();\n    let queue_evt = unsafe { EventFd::from_raw_fd(libc::dup(evt.as_raw_fd())) };\n    queue_evt.write(1).unwrap();\n    virtio_mem\n        .activate(\n            guest_memory,\n            Arc::new(NoopVirtioInterrupt {}),\n            vec![(0, q, evt)],\n        )\n        .ok();\n    virtio_mem.wait_for_epoll_threads();\n}"}
{"test_id": "BurntSushi-memchr/BurntSushi-memchr-f3fde7a/tests-gen/memrchr3.inputs.rs::test_49", "code": "fn count(self) -> usize {\n        self.it.count(|s, e| {\n            // SAFETY: We rely on our generic iterator to return valid start\n            // and end pointers.\n            unsafe { count_raw(self.needle1, s, e) }\n        })\n    }", "test": "fn test_49() {\n    let data = [161, 10, 95, 95];\n    if data.len() < 3 {\n        return;\n    }\n    memchr3_iter(data[0], data[1], data[2], &data[3..]).rev().count();\n}"}
{"test_id": "image-rs-image/image-rs-image-e5580ec/tests-gen/fuzzer_script_exr.inputs.rs::test_17", "code": "fn roundtrip (bytes : & [u8]) -> ImageResult < () > { # [doc = \" Read the file from the specified path into an `Rgba32FImage`.\"] fn read_as_rgba_byte_image (read : impl Read + Seek) -> ImageResult < (u32 , u32 , Vec < u8 >) > { let mut decoder = OpenExrDecoder :: with_alpha_preference (read , Some (true)) ? ; match usize :: try_from (decoder . total_bytes ()) { Ok (decoded_size) if decoded_size <= 256 * 1024 * 1024 => { decoder . set_limits (Limits :: default ()) ? ; let (width , height) = decoder . dimensions () ; let mut buffer = vec ! [0 ; decoded_size] ; decoder . read_image (buffer . as_mut_slice ()) ? ; Ok ((width , height , buffer)) } _ => Err (image :: ImageError :: Limits (image :: error :: LimitError :: from_kind (image :: error :: LimitErrorKind :: InsufficientMemory ,) ,)) , } } # [doc = \" Write an `Rgba32FImage`.\"] # [doc = \" Assumes the writer is buffered. In most cases,\"] # [doc = \" you should wrap your writer in a `BufWriter` for best performance.\"] fn write_rgba_image (write : impl Write + Seek , (width , height , data) : & (u32 , u32 , Vec < u8 >) ,) -> ImageResult < () > { OpenExrEncoder :: new (write) . write_image (data . as_slice () , * width , * height , ColorType :: Rgba32F) } let decoded_image = read_as_rgba_byte_image (Cursor :: new (bytes)) ? ; let mut bytes = Vec :: with_capacity (bytes . len () + 20) ; write_rgba_image (Cursor :: new (& mut bytes) , & decoded_image) ? ; let redecoded_image = read_as_rgba_byte_image (Cursor :: new (bytes)) ? ; assert_eq ! (decoded_image , redecoded_image , \"image was valid but was not reproducible\") ; Ok (()) }", "test": "fn test_17() {\n    let data = [129];\n    let _img = roundtrip(data);\n}"}
{"test_id": "BurntSushi-memchr/BurntSushi-memchr-f3fde7a/tests-gen/memrchr.inputs.rs::test_83", "code": "fn count(self) -> usize {\n        self.it.count(|s, e| {\n            // SAFETY: We rely on our generic iterator to return valid start\n            // and end pointers.\n            unsafe { count_raw(self.needle1, s, e) }\n        })\n    }", "test": "fn test_83() {\n    let data = [2, 3, 206, 40];\n    if data.is_empty() {\n        return;\n    }\n    memchr_iter(data[0], &data[1..]).rev().count();\n}"}
{"test_id": "dtolnay-semver/dtolnay-semver-750f0ac/tests-gen/sort_version.inputs.rs::test_79", "code": "fn three_versions(bytes: &[u8]) -> Option<[Version; 3]> {\n    let mut inputs = str::from_utf8(bytes).ok()?.split(' ');\n    Some([\n        Version {\n            major: 0,\n            minor: 0,\n            patch: 0,\n            pre: inputs.next().map(Prerelease::new)?.ok()?,\n            build: inputs.next().map(BuildMetadata::new)?.ok()?,\n        },\n        Version {\n            major: 0,\n            minor: 0,\n            patch: 0,\n            pre: inputs.next().map(Prerelease::new)?.ok()?,\n            build: inputs.next().map(BuildMetadata::new)?.ok()?,\n        },\n        Version {\n            major: 0,\n            minor: 0,\n            patch: 0,\n            pre: inputs.next().map(Prerelease::new)?.ok()?,\n            build: inputs.next().map(BuildMetadata::new)?.ok()?,\n        },\n    ])\n}", "test": "fn test_79() {\n    let bytes = [122];\n    if let Some([a, b, c]) = three_versions(bytes) {\n        if a < b && b < c && c < a {\n            panic!(\"{0} < {1} < {2} < {0}\", a, b, c);\n        }\n    }\n}"}
{"test_id": "rust-bakery-nom/rust-bakery-nom-869f897/tests-gen/fuzz_arithmetic.inputs.rs::test_22", "code": "fn factor(i: &str) -> IResult<&str, Expr> {\n  alt((\n    map(\n      map_res(delimited(multispace, digit, multispace), FromStr::from_str),\n      Expr::Value,\n    ),\n    parens,\n  ))(i)\n}", "test": "fn test_22() {\n  let data = [122, 10];\n  reset();\n  let temp = match str::from_utf8(data) {\n    Ok(v) => factor(v),\n    Err(e) => factor(\"2\"),\n  };\n}"}
{"test_id": "marshallpierce-rust-base64/marshallpierce-rust-base64-4ef33cc/tests-gen/decode_random.inputs.rs::test_29", "code": "fn decode<T: AsRef<[u8]>>(&self, input: T) -> Result<Vec<u8>, DecodeError> {\n        fn inner<E>(engine: &E, input_bytes: &[u8]) -> Result<Vec<u8>, DecodeError>\n        where\n            E: Engine + ?Sized,\n        {\n            let estimate = engine.internal_decoded_len_estimate(input_bytes.len());\n            let mut buffer = vec![0; estimate.decoded_len_estimate()];\n\n            let bytes_written = engine\n                .internal_decode(input_bytes, &mut buffer, estimate)?\n                .decoded_len;\n\n            buffer.truncate(bytes_written);\n\n            Ok(buffer)\n        }\n\n        inner(self, input.as_ref())\n    }", "test": "fn test_29() {\n    let data = [48, 255, 251, 48];\n    let engine = utils::random_engine(data);\n    let _ = engine.decode(data);\n}"}
{"test_id": "cloud-hypervisor-cloud-hypervisor/cloud-hypervisor-cloud-hypervisor-db3a5f3/tests-gen/pmem.inputs.rs::test_57", "code": "pub fn wait_for_epoll_threads(&mut self) {\n        self.common.wait_for_epoll_threads();\n    }", "test": "fn test_57() {\n    let bytes = [10, 10, 10, 10];\n    if bytes.len() < QUEUE_DATA_SIZE || bytes.len() > (QUEUE_DATA_SIZE + MEM_SIZE) {\n        return;\n    }\n    let mut pmem = create_dummy_pmem();\n    let queue_data = &bytes[..QUEUE_DATA_SIZE];\n    let mem_bytes = &bytes[QUEUE_DATA_SIZE..];\n    let q = setup_virt_queue(queue_data.try_into().unwrap());\n    let mem = GuestMemoryMmap::from_ranges(&[(GuestAddress(0), MEM_SIZE)]).unwrap();\n    if mem.write_slice(mem_bytes, GuestAddress(0 as u64)).is_err() {\n        return;\n    }\n    let guest_memory = GuestMemoryAtomic::new(mem);\n    let evt = EventFd::new(0).unwrap();\n    let queue_evt = unsafe { EventFd::from_raw_fd(libc::dup(evt.as_raw_fd())) };\n    queue_evt.write(1).unwrap();\n    pmem.activate(\n        guest_memory,\n        Arc::new(NoopVirtioInterrupt {}),\n        vec![(0, q, evt)],\n    )\n    .ok();\n    pmem.wait_for_epoll_threads();\n}"}
{"test_id": "image-rs-image-png/image-rs-image-png-e113d76/tests-gen/decode.inputs.rs::test_10", "code": "fn png_decode (data : & [u8]) -> Result < (Option < png :: OutputInfo > , Vec < u8 >) , () > { let limits = png :: Limits { bytes : 1 << 16 } ; let decoder = png :: Decoder :: new_with_limits (data , limits) ; let mut reader = decoder . read_info () . map_err (| _ | ()) ? ; if reader . info () . raw_bytes () > 5_000_000 { return Err (()) ; } let mut img_data = vec ! [0u8 ; reader . info () . raw_bytes ()] ; let mut last_info = None ; while let Ok (info) = reader . next_frame (& mut img_data) { last_info = Some (info) ; } Ok ((last_info , img_data)) }", "test": "fn test_10() {\n    let data = [\n        137, 80, 78, 71, 13, 10, 26, 10, 0, 0, 0, 13, 116, 82, 78, 83,\n    ];\n    let _ = png_decode(&data);\n}"}
{"test_id": "gimli-rs-gimli/gimli-rs-gimli-3947879/tests-gen/debug_info.inputs.rs::test_44", "code": "pub fn next(&mut self) -> Result<Option<RawLocListEntry<R>>> {\n        if self.input.is_empty() {\n            return Ok(None);\n        }\n\n        match RawLocListEntry::parse(&mut self.input, self.encoding, self.format) {\n            Ok(entry) => {\n                if entry.is_none() {\n                    self.input.empty();\n                }\n                Ok(entry)\n            }\n            Err(e) => {\n                self.input.empty();\n                Err(e)\n            }\n        }\n    }", "test": "fn test_44() {\n    let sections = (\n        [],\n        [\n            1, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 1, 4, 255, 255, 255,\n        ],\n    );\n    let (debug_abbrev, debug_info) = sections;\n    let debug_abbrev = DebugAbbrev::new(&debug_abbrev, LittleEndian);\n    let debug_info = DebugInfo::new(&debug_info, LittleEndian);\n    let mut units = debug_info.units();\n    while let Ok(Some(unit)) = units.next() {\n        if let Ok(abbrevs) = unit.abbreviations(&debug_abbrev) {\n            let mut cursor = unit.entries(&abbrevs);\n            while let Ok(Some((_delta, entry))) = cursor.next_dfs() {\n                let mut attrs = entry.attrs();\n                while let Ok(Some(_attr)) = attrs.next() {\n                    continue;\n                }\n            }\n        }\n    }\n}"}
{"test_id": "quinn-rs-quinn/quinn-rs-quinn-83e4f46/tests-gen/packet.inputs.rs::test_98", "code": "fn to_vec(params: &TransportParameters) -> Vec<u8> {\n    let mut bytes = Vec::new();\n    params.write(&mut bytes);\n    bytes\n}", "test": "fn test_98() {\n    let data = PacketParams {\n        local_cid_len: 3,\n        buf: b\"\\x1a\\0\",\n        grease_quic_bit: false,\n    };\n    let len = data.buf.len();\n    let supported_versions = DEFAULT_SUPPORTED_VERSIONS.to_vec();\n    if let Ok(decoded) = PartialDecode::new(\n        data.buf,\n        data.local_cid_len,\n        &supported_versions,\n        data.grease_quic_bit,\n    ) {\n        match decoded.1 {\n            Some(x) => assert_eq!(len, decoded.0.len() + x.len()),\n            None => assert_eq!(len, decoded.0.len()),\n        }\n    }\n}"}
{"test_id": "cloud-hypervisor-cloud-hypervisor/cloud-hypervisor-cloud-hypervisor-db3a5f3/tests-gen/rng.inputs.rs::test_16", "code": "pub fn wait_for_epoll_threads(&mut self) {\n        self.common.wait_for_epoll_threads();\n    }", "test": "fn test_16() {\n    let bytes = [42];\n    if bytes.len() < (QUEUE_DATA_SIZE + QUEUE_BYTES_SIZE)\n        || bytes.len() > (QUEUE_DATA_SIZE + QUEUE_BYTES_SIZE + MEM_SIZE)\n    {\n        return;\n    }\n    let mut rng = virtio_devices::Rng::new(\n        \"fuzzer_rng\".to_owned(),\n        \"/dev/urandom\",\n        false,\n        SeccompAction::Allow,\n        EventFd::new(EFD_NONBLOCK).unwrap(),\n        None,\n    )\n    .unwrap();\n    let queue_data = &bytes[..QUEUE_DATA_SIZE];\n    let queue_bytes = &bytes[QUEUE_DATA_SIZE..QUEUE_DATA_SIZE + QUEUE_BYTES_SIZE];\n    let mem_bytes = &bytes[QUEUE_DATA_SIZE + QUEUE_BYTES_SIZE..];\n    let q = setup_virt_queue(queue_data.try_into().unwrap());\n    let mem = GuestMemoryMmap::from_ranges(&[\n        (GuestAddress(0), MEM_SIZE),\n        (GuestAddress(DESC_TABLE_ADDR), QUEUE_BYTES_SIZE),\n    ])\n    .unwrap();\n    if mem\n        .write_slice(queue_bytes, GuestAddress(DESC_TABLE_ADDR))\n        .is_err()\n    {\n        return;\n    }\n    if mem.write_slice(mem_bytes, GuestAddress(0 as u64)).is_err() {\n        return;\n    }\n    let guest_memory = GuestMemoryAtomic::new(mem);\n    let evt = EventFd::new(0).unwrap();\n    let queue_evt = unsafe { EventFd::from_raw_fd(libc::dup(evt.as_raw_fd())) };\n    queue_evt.write(1).unwrap();\n    rng.activate(\n        guest_memory,\n        Arc::new(NoopVirtioInterrupt {}),\n        vec![(0, q, evt)],\n    )\n    .ok();\n    rng.wait_for_epoll_threads();\n}"}
{"test_id": "XAMPPRocky-tokei/XAMPPRocky-tokei-92ddc2e/tests-gen/parse_from_slice_panic.inputs.rs::test_18", "code": "pub fn parse_from_slice (input : FuzzInput , check_total : bool) { let config = & Config { treat_doc_strings_as_comments : Some (input . treat_doc_strings_as_comments) , columns : None , hidden : None , no_ignore : None , no_ignore_parent : None , no_ignore_dot : None , no_ignore_vcs : None , sort : None , types : None , for_each_fn : None , } ; let stats = input . lang . parse_from_slice (input . data , config) ; if check_total { if let Ok (s) = str :: from_utf8 (input . data) { assert ! (stats . lines () <= s . lines () . count () , \"{} got more total lines ({}) than str::lines ({}). Code: {}, Comments: {}, Blanks: {}. treat_doc_strings_as_comments: {}. File contents (as UTF-8):\\n{}\" , input . lang . name () , stats . lines () , s . lines () . count () , stats . code , stats . comments , input . treat_doc_strings_as_comments , stats . blanks , s) } ; } }", "test": "fn test_18() {\n    let data = FuzzInput {\n        lang: ABNF,\n        treat_doc_strings_as_comments: false,\n        data: [0, 0, 0, 13, 255, 23, 255, 255, 88],\n    };\n    parse_from_slice(data, false);\n}"}
{"test_id": "marshallpierce-rust-base64/marshallpierce-rust-base64-4ef33cc/tests-gen/roundtrip_no_pad.inputs.rs::test_72", "code": "fn decode<T: AsRef<[u8]>>(&self, input: T) -> Result<Vec<u8>, DecodeError> {\n        fn inner<E>(engine: &E, input_bytes: &[u8]) -> Result<Vec<u8>, DecodeError>\n        where\n            E: Engine + ?Sized,\n        {\n            let estimate = engine.internal_decoded_len_estimate(input_bytes.len());\n            let mut buffer = vec![0; estimate.decoded_len_estimate()];\n\n            let bytes_written = engine\n                .internal_decode(input_bytes, &mut buffer, estimate)?\n                .decoded_len;\n\n            buffer.truncate(bytes_written);\n\n            Ok(buffer)\n        }\n\n        inner(self, input.as_ref())\n    }", "test": "fn test_72() {\n    let data = [219, 10, 35, 219];\n    let config = general_purpose::GeneralPurposeConfig::new()\n        .with_encode_padding(false)\n        .with_decode_padding_mode(engine::DecodePaddingMode::RequireNone);\n    let engine = general_purpose::GeneralPurpose::new(&base64::alphabet::STANDARD, config);\n    let encoded = engine.encode(data);\n    let decoded = engine.decode(&encoded).unwrap();\n    assert_eq!(data, decoded.as_slice());\n}"}
{"test_id": "BurntSushi-memchr/BurntSushi-memchr-f3fde7a/tests-gen/memchr3.inputs.rs::test_78", "code": "fn count(self) -> usize {\n        self.it.count(|s, e| {\n            // SAFETY: We rely on our generic iterator to return valid start\n            // and end pointers.\n            unsafe { count_raw(self.needle1, s, e) }\n        })\n    }", "test": "fn test_78() {\n    let data = [10, 168];\n    if data.len() < 3 {\n        return;\n    }\n    memchr3_iter(data[0], data[1], data[2], &data[3..]).count();\n}"}
{"test_id": "gimli-rs-gimli/gimli-rs-gimli-3947879/tests-gen/debug_aranges.inputs.rs::test_1", "code": "pub fn next(&mut self) -> Result<Option<UnitHeader<R>>> {\n        if self.input.is_empty() {\n            Ok(None)\n        } else {\n            let len = self.input.len();\n            match parse_unit_header(&mut self.input, self.offset.into()) {\n                Ok(header) => {\n                    self.offset.0 += len - self.input.len();\n                    Ok(Some(header))\n                }\n                Err(e) => {\n                    self.input.empty();\n                    Err(e)\n                }\n            }\n        }\n    }", "test": "fn test_1() {\n    let debug_aranges = [250];\n    let debug_aranges = DebugAranges::new(&debug_aranges, LittleEndian);\n    let mut headers = debug_aranges.headers();\n    while let Ok(Some(header)) = headers.next() {\n        let mut entries = header.entries();\n        while let Ok(Some(_entry)) = entries.next() {\n            continue;\n        }\n    }\n}"}
{"test_id": "BurntSushi-memchr/BurntSushi-memchr-f3fde7a/tests-gen/memchr3.inputs.rs::test_88", "code": "fn count(self) -> usize {\n        self.it.count(|s, e| {\n            // SAFETY: We rely on our generic iterator to return valid start\n            // and end pointers.\n            unsafe { count_raw(self.needle1, s, e) }\n        })\n    }", "test": "fn test_88() {\n    let data = [47, 47];\n    if data.len() < 3 {\n        return;\n    }\n    memchr3_iter(data[0], data[1], data[2], &data[3..]).count();\n}"}
{"test_id": "image-rs-image/image-rs-image-e5580ec/tests-gen/fuzzer_script_tga.inputs.rs::test_99", "code": "fn decode(encoded: &[u8]) -> Vec<u8> {\n        let decoder = JpegDecoder::new(Cursor::new(encoded)).expect(\"Could not decode image\");\n\n        let mut decoded = vec![0; decoder.total_bytes() as usize];\n        decoder\n            .read_image(&mut decoded)\n            .expect(\"Could not decode image\");\n        decoded\n    }", "test": "fn test_99() {\n    let data = [10, 10, 34, 10];\n    let _ = decode(data);\n}"}
{"test_id": "uutils-coreutils/uutils-coreutils-73b7c46/tests-gen/fuzz_parse_size.inputs.rs::test_41", "code": "pub fn parse_size(size: &str) -> Result<u64, ParseSizeError> {\n    Parser::default().parse(size)\n}", "test": "fn test_41() {\n    let data = [10, 10, 10, 10];\n    if let Ok(s) = std::str::from_utf8(data) {\n        _ = parse_size(s);\n    }\n}"}
{"test_id": "BurntSushi-memchr/BurntSushi-memchr-f3fde7a/tests-gen/memchr3.inputs.rs::test_99", "code": "fn count(self) -> usize {\n        self.it.count(|s, e| {\n            // SAFETY: We rely on our generic iterator to return valid start\n            // and end pointers.\n            unsafe { count_raw(self.needle1, s, e) }\n        })\n    }", "test": "fn test_99() {\n    let data = [195, 0, 0];\n    if data.len() < 3 {\n        return;\n    }\n    memchr3_iter(data[0], data[1], data[2], &data[3..]).count();\n}"}
{"test_id": "cloud-hypervisor-cloud-hypervisor/cloud-hypervisor-cloud-hypervisor-db3a5f3/tests-gen/block.inputs.rs::test_93", "code": "pub fn wait_for_epoll_threads(&mut self) {\n        self.common.wait_for_epoll_threads();\n    }", "test": "fn test_93() {\n    let bytes = [246];\n    if bytes.len() < QUEUE_DATA_SIZE || bytes.len() > (QUEUE_DATA_SIZE + MEM_SIZE) {\n        return;\n    }\n    let queue_data = &bytes[..QUEUE_DATA_SIZE];\n    let mem_bytes = &bytes[QUEUE_DATA_SIZE..];\n    let shm = memfd_create(&ffi::CString::new(\"fuzz\").unwrap(), 0).unwrap();\n    let disk_file: File = unsafe { File::from_raw_fd(shm) };\n    let qcow_disk = Box::new(RawFileDiskSync::new(disk_file)) as Box<dyn DiskFile>;\n    let mut block = Block::new(\n        \"tmp\".to_owned(),\n        qcow_disk,\n        PathBuf::from(\"\"),\n        false,\n        false,\n        2,\n        256,\n        None,\n        SeccompAction::Allow,\n        None,\n        EventFd::new(EFD_NONBLOCK).unwrap(),\n        None,\n    )\n    .unwrap();\n    let q = setup_virt_queue(queue_data.try_into().unwrap());\n    let mem = GuestMemoryMmap::from_ranges(&[(GuestAddress(0), MEM_SIZE)]).unwrap();\n    if mem.write_slice(mem_bytes, GuestAddress(0 as u64)).is_err() {\n        return;\n    }\n    let guest_memory = GuestMemoryAtomic::new(mem);\n    let evt = EventFd::new(0).unwrap();\n    let queue_evt = unsafe { EventFd::from_raw_fd(libc::dup(evt.as_raw_fd())) };\n    queue_evt.write(1).unwrap();\n    block\n        .activate(\n            guest_memory,\n            Arc::new(NoopVirtioInterrupt {}),\n            vec![(0, q, evt)],\n        )\n        .ok();\n    block.wait_for_epoll_threads();\n}"}
{"test_id": "marshallpierce-rust-base64/marshallpierce-rust-base64-4ef33cc/tests-gen/roundtrip_no_pad.inputs.rs::test_37", "code": "fn decode<T: AsRef<[u8]>>(&self, input: T) -> Result<Vec<u8>, DecodeError> {\n        fn inner<E>(engine: &E, input_bytes: &[u8]) -> Result<Vec<u8>, DecodeError>\n        where\n            E: Engine + ?Sized,\n        {\n            let estimate = engine.internal_decoded_len_estimate(input_bytes.len());\n            let mut buffer = vec![0; estimate.decoded_len_estimate()];\n\n            let bytes_written = engine\n                .internal_decode(input_bytes, &mut buffer, estimate)?\n                .decoded_len;\n\n            buffer.truncate(bytes_written);\n\n            Ok(buffer)\n        }\n\n        inner(self, input.as_ref())\n    }", "test": "fn test_37() {\n    let data = [63, 10, 122];\n    let config = general_purpose::GeneralPurposeConfig::new()\n        .with_encode_padding(false)\n        .with_decode_padding_mode(engine::DecodePaddingMode::RequireNone);\n    let engine = general_purpose::GeneralPurpose::new(&base64::alphabet::STANDARD, config);\n    let encoded = engine.encode(data);\n    let decoded = engine.decode(&encoded).unwrap();\n    assert_eq!(data, decoded.as_slice());\n}"}
{"test_id": "marshallpierce-rust-base64/marshallpierce-rust-base64-4ef33cc/tests-gen/roundtrip_random_config.inputs.rs::test_74", "code": "fn decode<T: AsRef<[u8]>>(&self, input: T) -> Result<Vec<u8>, DecodeError> {\n        fn inner<E>(engine: &E, input_bytes: &[u8]) -> Result<Vec<u8>, DecodeError>\n        where\n            E: Engine + ?Sized,\n        {\n            let estimate = engine.internal_decoded_len_estimate(input_bytes.len());\n            let mut buffer = vec![0; estimate.decoded_len_estimate()];\n\n            let bytes_written = engine\n                .internal_decode(input_bytes, &mut buffer, estimate)?\n                .decoded_len;\n\n            buffer.truncate(bytes_written);\n\n            Ok(buffer)\n        }\n\n        inner(self, input.as_ref())\n    }", "test": "fn test_74() {\n    let data = [128, 118, 36];\n    let engine = utils::random_engine(data);\n    let encoded = engine.encode(data);\n    let decoded = engine.decode(&encoded).unwrap();\n    assert_eq!(data, decoded.as_slice());\n}"}
{"test_id": "cloud-hypervisor-cloud-hypervisor/cloud-hypervisor-cloud-hypervisor-db3a5f3/tests-gen/iommu.inputs.rs::test_84", "code": "pub fn wait_for_epoll_threads(&mut self) {\n        self.common.wait_for_epoll_threads();\n    }", "test": "fn test_84() {\n    let bytes = [53, 10];\n    if bytes.len() < (QUEUE_DATA_SIZE + QUEUE_BYTES_SIZE)\n        || bytes.len() > (QUEUE_DATA_SIZE + QUEUE_BYTES_SIZE + MEM_SIZE)\n    {\n        return;\n    }\n    let (mut iommu, _) = virtio_devices::Iommu::new(\n        \"fuzzer_iommu\".to_owned(),\n        SeccompAction::Allow,\n        EventFd::new(EFD_NONBLOCK).unwrap(),\n        ((MEM_SIZE - IOVA_SPACE_SIZE) as u64, (MEM_SIZE - 1) as u64),\n        None,\n    )\n    .unwrap();\n    let queue_data = &bytes[..QUEUE_DATA_SIZE];\n    let queue_bytes = &bytes[QUEUE_DATA_SIZE..QUEUE_DATA_SIZE + QUEUE_BYTES_SIZE];\n    let mem_bytes = &bytes[QUEUE_DATA_SIZE + QUEUE_BYTES_SIZE..];\n    let request_queue = setup_virt_queue(queue_data.try_into().unwrap());\n    let _event_queue = setup_virt_queue(queue_data.try_into().unwrap());\n    let mem = GuestMemoryMmap::from_ranges(&[\n        (GuestAddress(0), MEM_SIZE),\n        (GuestAddress(DESC_TABLE_ADDR), QUEUE_BYTES_SIZE),\n    ])\n    .unwrap();\n    if mem\n        .write_slice(queue_bytes, GuestAddress(DESC_TABLE_ADDR))\n        .is_err()\n    {\n        return;\n    }\n    if mem.write_slice(mem_bytes, GuestAddress(0 as u64)).is_err() {\n        return;\n    }\n    let guest_memory = GuestMemoryAtomic::new(mem);\n    let request_evt = EventFd::new(0).unwrap();\n    let request_queue_evt = unsafe { EventFd::from_raw_fd(libc::dup(request_evt.as_raw_fd())) };\n    let _event_evt = EventFd::new(0).unwrap();\n    request_queue_evt.write(1).unwrap();\n    iommu\n        .activate(\n            guest_memory,\n            Arc::new(NoopVirtioInterrupt {}),\n            vec![\n                (0, request_queue, request_evt),\n                (0, _event_queue, _event_evt),\n            ],\n        )\n        .ok();\n    iommu.wait_for_epoll_threads();\n}"}
{"test_id": "rust-bio-rust-bio/rust-bio-rust-bio-319a0d8/tests-gen/banded_aligner.inputs.rs::test_83", "code": "fn validate_alignment_score(al: &Alignment, x: TextSlice, y: TextSlice, scoring: &Scoring<MatchParams>) -> bool {\n    use AlignmentOperation::*;\n    let path = al.path();\n    let mut score = 0;\n    if al.mode==AlignmentMode::Custom {\n        if al.xstart > 0 {\n            score += scoring.xclip_prefix;\n        }\n        if al.ystart > 0 {\n            score += scoring.yclip_prefix;\n        }\n        if al.xend < al.xlen {\n            score += scoring.xclip_suffix;\n        }\n        if al.yend < al.ylen {\n            score += scoring.yclip_suffix;\n        }\n    }\n    let mut last_op = None;\n    for (i, j, op) in path {\n        score += match op {\n            Match | Subst => scoring.match_fn.score(x[i-1], y[j-1]),\n            Del => if last_op==Some(Del) { scoring.gap_extend } else { scoring.gap_open + scoring.gap_extend },\n            Ins => if last_op==Some(Ins) { scoring.gap_extend } else { scoring.gap_open + scoring.gap_extend },\n            _ => 0,\n        };\n        last_op = Some(op);\n    }\n    al.score==score\n}", "test": "fn test_83() {\n    let data = [39, 240];\n    if data.len() < 50 || data.len() > 300 {\n        return;\n    }\n    let (split_byte, data) = data.split_first().unwrap();\n    let (kmer_byte, data) = data.split_first().unwrap();\n    let (window_byte, data) = data.split_first().unwrap();\n    let (match_score_byte, data) = data.split_first().unwrap();\n    let (mismatch_score_byte, data) = data.split_first().unwrap();\n    let (gap_open_byte, data) = data.split_first().unwrap();\n    let (gap_extend_byte, data) = data.split_first().unwrap();\n    let (xclip_prefix_byte, data) = data.split_first().unwrap();\n    let (xclip_suffix_byte, data) = data.split_first().unwrap();\n    let (yclip_prefix_byte, data) = data.split_first().unwrap();\n    let (yclip_suffix_byte, data) = data.split_first().unwrap();\n    let alphabets = b\"ACGT\";\n    let v: Vec<_> = data\n        .iter()\n        .map(|i| alphabets[(*i as usize) % alphabets.len()])\n        .collect();\n    let kmer_len: usize = 5 + (*kmer_byte as usize) % 10;\n    let window_size: usize = 5 + (*window_byte as usize) % 10;\n    let split_pos: usize = min(data.len() - 1, max(*split_byte as usize, 1));\n    let match_score = 1 + (*match_score_byte as i32) % 5;\n    let mismatch_score = -((*mismatch_score_byte as i32) % 10);\n    let gap_open = -((*gap_open_byte as i32) % 20);\n    let gap_extend = -((*gap_extend_byte as i32) % 10);\n    let (x, y) = v.split_at(split_pos);\n    println!(\n        \"x: {}, y: {}, k: {}, w: {}, scoring ({}, {}, {}, {})\",\n        String::from_utf8(x.to_vec()).unwrap(),\n        String::from_utf8(y.to_vec()).unwrap(),\n        kmer_len,\n        window_size,\n        gap_open,\n        gap_extend,\n        match_score,\n        mismatch_score\n    );\n    let base_score = Scoring::from_scores(gap_open, gap_extend, match_score, mismatch_score);\n    {\n        println!(\n            \"Clip scores ({}, {}, {}, {})\",\n            xclip_prefix_byte, xclip_suffix_byte, yclip_prefix_byte, yclip_suffix_byte\n        );\n        let scoring = Scoring {\n            xclip_prefix: -(*xclip_prefix_byte as i32),\n            xclip_suffix: -(*xclip_suffix_byte as i32),\n            yclip_prefix: -(*yclip_prefix_byte as i32),\n            yclip_suffix: -(*yclip_suffix_byte as i32),\n            ..base_score.clone()\n        };\n        let mut b_aligner = banded::Aligner::with_scoring(scoring.clone(), kmer_len, window_size);\n        let b_alignment = b_aligner.custom(x, y);\n        assert!(validate_alignment_score(&b_alignment, x, y, &scoring));\n        let mut f_aligner = pairwise::Aligner::with_scoring(scoring.clone());\n        let f_alignment = f_aligner.custom(x, y);\n        assert!(validate_alignment_score(&f_alignment, x, y, &scoring));\n        let band_all_alignment = b_aligner.custom_with_matches(x, y, &Vec::new());\n        assert_eq!(band_all_alignment.score, f_alignment.score);\n    }\n    {\n        let scoring = Scoring {\n            xclip_prefix: 0,\n            xclip_suffix: 0,\n            yclip_suffix: 0,\n            ..base_score.clone()\n        };\n        let mut b_aligner = banded::Aligner::with_scoring(scoring.clone(), kmer_len, window_size);\n        let b_alignment = b_aligner.custom(x, y);\n        assert_eq!(b_alignment.ystart, 0);\n        assert!(validate_alignment_score(&b_alignment, x, y, &scoring));\n        let mut f_aligner = pairwise::Aligner::with_scoring(scoring.clone());\n        let f_alignment = f_aligner.custom(x, y);\n        assert_eq!(f_alignment.ystart, 0);\n        assert!(validate_alignment_score(&f_alignment, x, y, &scoring));\n        let band_all_alignment = b_aligner.custom_with_matches(x, y, &Vec::new());\n        assert_eq!(band_all_alignment.score, f_alignment.score);\n    }\n    {\n        let scoring = Scoring {\n            xclip_prefix: 0,\n            xclip_suffix: 0,\n            yclip_prefix: 0,\n            ..base_score.clone()\n        };\n        let mut b_aligner = banded::Aligner::with_scoring(scoring.clone(), kmer_len, window_size);\n        let b_alignment = b_aligner.custom(x, y);\n        assert_eq!(b_alignment.yend, b_alignment.ylen);\n        assert!(validate_alignment_score(&b_alignment, x, y, &scoring));\n        let mut f_aligner = pairwise::Aligner::with_scoring(scoring.clone());\n        let f_alignment = f_aligner.custom(x, y);\n        assert_eq!(f_alignment.yend, f_alignment.ylen);\n        assert!(validate_alignment_score(&f_alignment, x, y, &scoring));\n        let band_all_alignment = b_aligner.custom_with_matches(x, y, &Vec::new());\n        assert_eq!(band_all_alignment.score, f_alignment.score);\n    }\n    {\n        let scoring = Scoring {\n            xclip_suffix: 0,\n            yclip_prefix: 0,\n            yclip_suffix: 0,\n            ..base_score.clone()\n        };\n        let mut b_aligner = banded::Aligner::with_scoring(scoring.clone(), kmer_len, window_size);\n        let b_alignment = b_aligner.custom(x, y);\n        assert_eq!(b_alignment.xstart, 0);\n        assert!(validate_alignment_score(&b_alignment, x, y, &scoring));\n        let mut f_aligner = pairwise::Aligner::with_scoring(scoring.clone());\n        let f_alignment = f_aligner.custom(x, y);\n        assert_eq!(f_alignment.xstart, 0);\n        assert!(validate_alignment_score(&f_alignment, x, y, &scoring));\n        let band_all_alignment = b_aligner.custom_with_matches(x, y, &Vec::new());\n        assert_eq!(band_all_alignment.score, f_alignment.score);\n    }\n    {\n        let scoring = Scoring {\n            xclip_prefix: 0,\n            yclip_prefix: 0,\n            yclip_suffix: 0,\n            ..base_score.clone()\n        };\n        let mut b_aligner = banded::Aligner::with_scoring(scoring.clone(), kmer_len, window_size);\n        let b_alignment = b_aligner.custom(x, y);\n        assert_eq!(b_alignment.xend, b_alignment.xlen);\n        assert!(validate_alignment_score(&b_alignment, x, y, &scoring));\n        let mut f_aligner = pairwise::Aligner::with_scoring(scoring.clone());\n        let f_alignment = f_aligner.custom(x, y);\n        assert_eq!(f_alignment.xend, f_alignment.xlen);\n        assert!(validate_alignment_score(&f_alignment, x, y, &scoring));\n        let band_all_alignment = b_aligner.custom_with_matches(x, y, &Vec::new());\n        assert_eq!(band_all_alignment.score, f_alignment.score);\n    }\n    {\n        let mut aligner = banded::Aligner::with_scoring(base_score.clone(), kmer_len, window_size);\n        let alignment = aligner.local(x, y);\n        assert!(alignment.score >= 0);\n        assert!(validate_alignment_score(&alignment, x, y, &base_score));\n        let alignment = aligner.semiglobal(x, y);\n        assert_eq!(alignment.xstart, 0);\n        assert_eq!(alignment.xend, alignment.xlen);\n        assert!(validate_alignment_score(&alignment, x, y, &base_score));\n        let alignment = aligner.global(x, y);\n        assert_eq!(alignment.xstart, 0);\n        assert_eq!(alignment.xend, alignment.xlen);\n        assert_eq!(alignment.ystart, 0);\n        assert_eq!(alignment.yend, alignment.ylen);\n        assert!(validate_alignment_score(&alignment, x, y, &base_score));\n    }\n    {\n        let mut aligner = pairwise::Aligner::with_scoring(base_score.clone());\n        let alignment = aligner.local(x, y);\n        assert!(alignment.score >= 0);\n        assert!(validate_alignment_score(&alignment, x, y, &base_score));\n        let alignment = aligner.semiglobal(x, y);\n        assert_eq!(alignment.xstart, 0);\n        assert_eq!(alignment.xend, alignment.xlen);\n        assert!(validate_alignment_score(&alignment, x, y, &base_score));\n        let alignment = aligner.global(x, y);\n        assert_eq!(alignment.xstart, 0);\n        assert_eq!(alignment.xend, alignment.xlen);\n        assert_eq!(alignment.ystart, 0);\n        assert_eq!(alignment.yend, alignment.ylen);\n        assert!(validate_alignment_score(&alignment, x, y, &base_score));\n    }\n}"}
{"test_id": "cloud-hypervisor-cloud-hypervisor/cloud-hypervisor-cloud-hypervisor-db3a5f3/tests-gen/console.inputs.rs::test_65", "code": "pub fn wait_for_epoll_threads(&mut self) {\n        self.common.wait_for_epoll_threads();\n    }", "test": "fn test_65() {\n    let bytes = [15, 10, 10];\n    if bytes.len() < (QUEUE_DATA_SIZE + QUEUE_BYTES_SIZE) * QUEUE_NUM + CONSOLE_INPUT_SIZE\n        || bytes.len()\n            > (QUEUE_DATA_SIZE + QUEUE_BYTES_SIZE) * QUEUE_NUM + CONSOLE_INPUT_SIZE + MEM_SIZE\n    {\n        return;\n    }\n    let (pipe_rx, mut pipe_tx) = create_pipe().unwrap();\n    let output = unsafe {\n        File::from_raw_fd(\n            memfd_create(&std::ffi::CString::new(\"fuzz_console_output\").unwrap()).unwrap(),\n        )\n    };\n    let endpoint = virtio_devices::Endpoint::FilePair(output, pipe_rx);\n    let (mut console, _) = virtio_devices::Console::new(\n        \"fuzzer_console\".to_owned(),\n        endpoint,\n        None,\n        false,\n        SeccompAction::Allow,\n        EventFd::new(EFD_NONBLOCK).unwrap(),\n        None,\n    )\n    .unwrap();\n    let console_input_bytes = &bytes[..CONSOLE_INPUT_SIZE];\n    let queue_data = &bytes[CONSOLE_INPUT_SIZE..CONSOLE_INPUT_SIZE + QUEUE_DATA_SIZE * QUEUE_NUM];\n    let queue_bytes = &bytes[CONSOLE_INPUT_SIZE + QUEUE_DATA_SIZE * QUEUE_NUM\n        ..CONSOLE_INPUT_SIZE + (QUEUE_DATA_SIZE + QUEUE_BYTES_SIZE) * QUEUE_NUM];\n    let mem_bytes = &bytes[CONSOLE_INPUT_SIZE + (QUEUE_DATA_SIZE + QUEUE_BYTES_SIZE) * QUEUE_NUM..];\n    let mut queues = setup_virt_queues(\n        &[\n            &queue_data[..QUEUE_DATA_SIZE].try_into().unwrap(),\n            &queue_data[QUEUE_DATA_SIZE..QUEUE_DATA_SIZE * 2]\n                .try_into()\n                .unwrap(),\n        ],\n        BASE_VIRT_QUEUE_ADDR,\n    );\n    let mem = GuestMemoryMmap::from_ranges(&[\n        (GuestAddress(0), MEM_SIZE),\n        (GuestAddress(BASE_VIRT_QUEUE_ADDR), queue_bytes.len()),\n    ])\n    .unwrap();\n    if mem\n        .write_slice(queue_bytes, GuestAddress(BASE_VIRT_QUEUE_ADDR))\n        .is_err()\n    {\n        return;\n    }\n    if mem.write_slice(mem_bytes, GuestAddress(0 as u64)).is_err() {\n        return;\n    }\n    let guest_memory = GuestMemoryAtomic::new(mem);\n    let input_queue = queues.remove(0);\n    let input_evt = EventFd::new(0).unwrap();\n    let input_queue_evt = unsafe { EventFd::from_raw_fd(libc::dup(input_evt.as_raw_fd())) };\n    let output_queue = queues.remove(0);\n    let output_evt = EventFd::new(0).unwrap();\n    let output_queue_evt = unsafe { EventFd::from_raw_fd(libc::dup(output_evt.as_raw_fd())) };\n    input_queue_evt.write(1).unwrap();\n    output_queue_evt.write(1).unwrap();\n    pipe_tx.write_all(console_input_bytes).unwrap();\n    console\n        .activate(\n            guest_memory,\n            Arc::new(NoopVirtioInterrupt {}),\n            vec![(0, input_queue, input_evt), (1, output_queue, output_evt)],\n        )\n        .unwrap();\n    console.wait_for_epoll_threads();\n}"}
{"test_id": "dtolnay-semver/dtolnay-semver-750f0ac/tests-gen/sort_version.inputs.rs::test_12", "code": "fn three_versions(bytes: &[u8]) -> Option<[Version; 3]> {\n    let mut inputs = str::from_utf8(bytes).ok()?.split(' ');\n    Some([\n        Version {\n            major: 0,\n            minor: 0,\n            patch: 0,\n            pre: inputs.next().map(Prerelease::new)?.ok()?,\n            build: inputs.next().map(BuildMetadata::new)?.ok()?,\n        },\n        Version {\n            major: 0,\n            minor: 0,\n            patch: 0,\n            pre: inputs.next().map(Prerelease::new)?.ok()?,\n            build: inputs.next().map(BuildMetadata::new)?.ok()?,\n        },\n        Version {\n            major: 0,\n            minor: 0,\n            patch: 0,\n            pre: inputs.next().map(Prerelease::new)?.ok()?,\n            build: inputs.next().map(BuildMetadata::new)?.ok()?,\n        },\n    ])\n}", "test": "fn test_12() {\n    let bytes = [2, 10];\n    if let Some([a, b, c]) = three_versions(bytes) {\n        if a < b && b < c && c < a {\n            panic!(\"{0} < {1} < {2} < {0}\", a, b, c);\n        }\n    }\n}"}
{"test_id": "gimli-rs-gimli/gimli-rs-gimli-3947879/tests-gen/eh_frame_hdr.inputs.rs::test_77", "code": "fn parse<R: Reader>(input: &mut R) -> Result<Abbreviations> {\n        let mut abbrevs = Abbreviations::empty();\n\n        while let Some(abbrev) = Abbreviation::parse(input)? {\n            if abbrevs.insert(abbrev).is_err() {\n                return Err(Error::DuplicateAbbreviationCode);\n            }\n        }\n\n        Ok(abbrevs)\n    }", "test": "fn test_77() {\n    let eh_frame_hdr = [173];\n    let eh_frame_hdr = EhFrameHdr::new(eh_frame_hdr, LittleEndian);\n    let bases = BaseAddresses::default()\n        .set_eh_frame(0)\n        .set_eh_frame_hdr(0)\n        .set_text(0)\n        .set_got(0);\n    let address_size = 8;\n    let _ = eh_frame_hdr.parse(&bases, address_size);\n}"}
{"test_id": "gimli-rs-gimli/gimli-rs-gimli-3947879/tests-gen/debug_line.inputs.rs::test_18", "code": "pub fn next_row(&mut self) -> Result<Option<(&LineProgramHeader<R, Offset>, &LineRow)>> {\n        // Perform any reset that was required after copying the previous row.\n        self.row.reset(self.program.header());\n\n        loop {\n            // Split the borrow here, rather than calling `self.header()`.\n            match self.instructions.next_instruction(self.program.header()) {\n                Err(err) => return Err(err),\n                Ok(None) => return Ok(None),\n                Ok(Some(instruction)) => {\n                    if self.row.execute(instruction, &mut self.program) {\n                        if self.row.tombstone {\n                            // Perform any reset that was required for the tombstone row.\n                            // Normally this is done when `next_row` is called again, but for\n                            // tombstones we loop immediately.\n                            self.row.reset(self.program.header());\n                        } else {\n                            return Ok(Some((self.header(), &self.row)));\n                        }\n                    }\n                    // Fall through, parse the next instruction, and see if that\n                    // yields a row.\n                }\n            }\n        }\n    }", "test": "fn test_18() {\n    let debug_line = [26, 178];\n    let debug_line = DebugLine::new(&debug_line, LittleEndian);\n    let offset = DebugLineOffset(0);\n    let address_size = 8;\n    if let Ok(program) = debug_line.program(offset, address_size, None, None) {\n        let mut rows = program.rows();\n        while let Ok(Some(row)) = rows.next_row() {\n            let _ = row;\n        }\n    }\n}"}
{"test_id": "cloud-hypervisor-cloud-hypervisor/cloud-hypervisor-cloud-hypervisor-db3a5f3/tests-gen/console.inputs.rs::test_51", "code": "pub fn wait_for_epoll_threads(&mut self) {\n        self.common.wait_for_epoll_threads();\n    }", "test": "fn test_51() {\n    let bytes = [10, 10];\n    if bytes.len() < (QUEUE_DATA_SIZE + QUEUE_BYTES_SIZE) * QUEUE_NUM + CONSOLE_INPUT_SIZE\n        || bytes.len()\n            > (QUEUE_DATA_SIZE + QUEUE_BYTES_SIZE) * QUEUE_NUM + CONSOLE_INPUT_SIZE + MEM_SIZE\n    {\n        return;\n    }\n    let (pipe_rx, mut pipe_tx) = create_pipe().unwrap();\n    let output = unsafe {\n        File::from_raw_fd(\n            memfd_create(&std::ffi::CString::new(\"fuzz_console_output\").unwrap()).unwrap(),\n        )\n    };\n    let endpoint = virtio_devices::Endpoint::FilePair(output, pipe_rx);\n    let (mut console, _) = virtio_devices::Console::new(\n        \"fuzzer_console\".to_owned(),\n        endpoint,\n        None,\n        false,\n        SeccompAction::Allow,\n        EventFd::new(EFD_NONBLOCK).unwrap(),\n        None,\n    )\n    .unwrap();\n    let console_input_bytes = &bytes[..CONSOLE_INPUT_SIZE];\n    let queue_data = &bytes[CONSOLE_INPUT_SIZE..CONSOLE_INPUT_SIZE + QUEUE_DATA_SIZE * QUEUE_NUM];\n    let queue_bytes = &bytes[CONSOLE_INPUT_SIZE + QUEUE_DATA_SIZE * QUEUE_NUM\n        ..CONSOLE_INPUT_SIZE + (QUEUE_DATA_SIZE + QUEUE_BYTES_SIZE) * QUEUE_NUM];\n    let mem_bytes = &bytes[CONSOLE_INPUT_SIZE + (QUEUE_DATA_SIZE + QUEUE_BYTES_SIZE) * QUEUE_NUM..];\n    let mut queues = setup_virt_queues(\n        &[\n            &queue_data[..QUEUE_DATA_SIZE].try_into().unwrap(),\n            &queue_data[QUEUE_DATA_SIZE..QUEUE_DATA_SIZE * 2]\n                .try_into()\n                .unwrap(),\n        ],\n        BASE_VIRT_QUEUE_ADDR,\n    );\n    let mem = GuestMemoryMmap::from_ranges(&[\n        (GuestAddress(0), MEM_SIZE),\n        (GuestAddress(BASE_VIRT_QUEUE_ADDR), queue_bytes.len()),\n    ])\n    .unwrap();\n    if mem\n        .write_slice(queue_bytes, GuestAddress(BASE_VIRT_QUEUE_ADDR))\n        .is_err()\n    {\n        return;\n    }\n    if mem.write_slice(mem_bytes, GuestAddress(0 as u64)).is_err() {\n        return;\n    }\n    let guest_memory = GuestMemoryAtomic::new(mem);\n    let input_queue = queues.remove(0);\n    let input_evt = EventFd::new(0).unwrap();\n    let input_queue_evt = unsafe { EventFd::from_raw_fd(libc::dup(input_evt.as_raw_fd())) };\n    let output_queue = queues.remove(0);\n    let output_evt = EventFd::new(0).unwrap();\n    let output_queue_evt = unsafe { EventFd::from_raw_fd(libc::dup(output_evt.as_raw_fd())) };\n    input_queue_evt.write(1).unwrap();\n    output_queue_evt.write(1).unwrap();\n    pipe_tx.write_all(console_input_bytes).unwrap();\n    console\n        .activate(\n            guest_memory,\n            Arc::new(NoopVirtioInterrupt {}),\n            vec![(0, input_queue, input_evt), (1, output_queue, output_evt)],\n        )\n        .unwrap();\n    console.wait_for_epoll_threads();\n}"}
{"test_id": "BurntSushi-memchr/BurntSushi-memchr-f3fde7a/tests-gen/memrchr2.inputs.rs::test_22", "code": "fn count(self) -> usize {\n        self.it.count(|s, e| {\n            // SAFETY: We rely on our generic iterator to return valid start\n            // and end pointers.\n            unsafe { count_raw(self.needle1, s, e) }\n        })\n    }", "test": "fn test_22() {\n    let data = [177, 2, 157];\n    if data.len() < 2 {\n        return;\n    }\n    memchr2_iter(data[0], data[1], &data[2..]).rev().count();\n}"}
{"test_id": "seanmonstar-httparse/seanmonstar-httparse-638848e/tests-gen/parse_request.inputs.rs::test_37", "code": "pub fn parse(&mut self, buf: &'b [u8]) -> Result<usize> {\n        self.parse_with_config(buf, &Default::default())\n    }", "test": "fn test_37() {\n    let data = [10, 10, 10];\n    let mut headers = [httparse::EMPTY_HEADER; 16];\n    let mut req = httparse::Request::new(&mut headers);\n    req.parse(data);\n}"}
{"test_id": "rustls-rustls/rustls-rustls-ae583bd/tests-gen/server.inputs.rs::test_51", "code": "pub fn process_new_packets(&mut self) -> Result<IoState, Error> {\n        match self {\n            Self::Client(conn) => conn.process_new_packets(),\n            Self::Server(conn) => conn.process_new_packets(),\n        }\n    }", "test": "fn test_51() {\n    let data = [\n        22, 3, 1, 0, 196, 1, 0, 43, 183, 3, 3, 220, 22, 51, 168, 177, 163, 9, 59, 53, 77, 77, 35,\n        28, 3, 125, 157, 176, 186, 53, 22, 211, 5, 127, 250, 92, 65, 31, 143, 93, 97, 146, 138, 0,\n        0, 20, 19, 245, 236, 2, 19, 1, 204, 169, 204, 168, 192, 44, 192, 43, 3, 1, 0, 53, 219, 184,\n        117, 77, 19, 58, 216, 56, 206, 189, 136, 130, 200, 75, 0, 154, 207, 11, 90, 130, 199, 181,\n        127, 192, 247, 83, 193, 104, 19, 154, 1, 0, 0, 0, 0, 0, 0, 1, 250, 196, 88, 45, 208, 213,\n        175, 154, 154, 143, 29, 48, 69, 68, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,\n        255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,\n        255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,\n        255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,\n        255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,\n        255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,\n        255, 255, 43,\n    ];\n    let config = Arc::new(\n        ServerConfig::builder()\n            .with_safe_defaults()\n            .with_no_client_auth()\n            .with_cert_resolver(Arc::new(Fail)),\n    );\n    let mut server = ServerConnection::new(config).unwrap();\n    let _ = server.read_tls(&mut io::Cursor::new(data));\n    let _ = server.process_new_packets();\n}"}
{"test_id": "cloud-hypervisor-cloud-hypervisor/cloud-hypervisor-cloud-hypervisor-db3a5f3/tests-gen/block.inputs.rs::test_37", "code": "pub fn wait_for_epoll_threads(&mut self) {\n        self.common.wait_for_epoll_threads();\n    }", "test": "fn test_37() {\n    let bytes = [67, 25, 130];\n    if bytes.len() < QUEUE_DATA_SIZE || bytes.len() > (QUEUE_DATA_SIZE + MEM_SIZE) {\n        return;\n    }\n    let queue_data = &bytes[..QUEUE_DATA_SIZE];\n    let mem_bytes = &bytes[QUEUE_DATA_SIZE..];\n    let shm = memfd_create(&ffi::CString::new(\"fuzz\").unwrap(), 0).unwrap();\n    let disk_file: File = unsafe { File::from_raw_fd(shm) };\n    let qcow_disk = Box::new(RawFileDiskSync::new(disk_file)) as Box<dyn DiskFile>;\n    let mut block = Block::new(\n        \"tmp\".to_owned(),\n        qcow_disk,\n        PathBuf::from(\"\"),\n        false,\n        false,\n        2,\n        256,\n        None,\n        SeccompAction::Allow,\n        None,\n        EventFd::new(EFD_NONBLOCK).unwrap(),\n        None,\n    )\n    .unwrap();\n    let q = setup_virt_queue(queue_data.try_into().unwrap());\n    let mem = GuestMemoryMmap::from_ranges(&[(GuestAddress(0), MEM_SIZE)]).unwrap();\n    if mem.write_slice(mem_bytes, GuestAddress(0 as u64)).is_err() {\n        return;\n    }\n    let guest_memory = GuestMemoryAtomic::new(mem);\n    let evt = EventFd::new(0).unwrap();\n    let queue_evt = unsafe { EventFd::from_raw_fd(libc::dup(evt.as_raw_fd())) };\n    queue_evt.write(1).unwrap();\n    block\n        .activate(\n            guest_memory,\n            Arc::new(NoopVirtioInterrupt {}),\n            vec![(0, q, evt)],\n        )\n        .ok();\n    block.wait_for_epoll_threads();\n}"}
{"test_id": "rust-bio-rust-bio/rust-bio-rust-bio-319a0d8/tests-gen/myers_matching.inputs.rs::test_74", "code": "fn validate_alignment (aln : & Alignment , x : & [u8] , y : & [u8]) { let y = & y [aln . ystart .. aln . yend] ; let mut ix = 0 ; let mut iy = 0 ; let mut calc_dist = 0 ; for op in & aln . operations { match * op { Match => { assert ! (x [ix] == y [iy] , \"Match operation, but characters are not equal\") ; ix += 1 ; iy += 1 ; } Subst => { assert ! (x [ix] != y [iy] , \"Subst operation, but characters are equal\") ; calc_dist += 1 ; ix += 1 ; iy += 1 ; } Del => { calc_dist += 1 ; iy += 1 ; } Ins => { calc_dist += 1 ; ix += 1 ; } _ => unreachable ! () } } assert_eq ! (calc_dist , aln . score as usize) ; }", "test": "fn test_74() {\n    let data = [6, 6, 246, 194];\n    if data.len() < 3 {\n        return;\n    }\n    let (max_dist, data) = data.split_first().unwrap();\n    let (pattern_len, data) = data.split_first().unwrap();\n    let max_dist = min(64, *max_dist);\n    let pattern_len = max(1, min(64, min(data.len(), *pattern_len as usize)));\n    if data.iter().any(|&b| b < 65 || b > 122 || b > 90 && b < 97) {\n        return;\n    }\n    let (pattern, text) = data.split_at(pattern_len);\n    let max_dist = max_dist as u8;\n    let _ = MyersBuilder::new().build_64(pattern);\n    let _ = MyersBuilder::new().build_long_64(pattern);\n    let mut myers = Myers::<u64>::new(pattern);\n    let mut myers_long = long::Myers::<u8>::new(pattern);\n    let end_dist: Vec<_> = myers.find_all_end(text, max_dist).collect();\n    let end_dist_long: Vec<_> = myers_long\n        .find_all_end(text, max_dist as usize)\n        .map(|(end, dist)| (end, dist as u8))\n        .collect();\n    assert_eq!(end_dist, end_dist_long);\n    let mut aln = Alignment::default();\n    let mut aln_long = Alignment::default();\n    {\n        let mut matches = myers.find_all(text, max_dist);\n        let mut matches_long = myers_long.find_all(text, max_dist as usize);\n        matches.alignment(&mut aln);\n        matches_long.alignment(&mut aln_long);\n        let mut end_dist_iter = end_dist.iter();\n        while matches.next_alignment(&mut aln) {\n            assert!(matches_long.next_alignment(&mut aln_long));\n            assert_eq!(aln, aln_long);\n            validate_alignment(&aln, pattern, text);\n            assert!(aln.score as u8 <= max_dist);\n            let (end, dist) = end_dist_iter.next().unwrap();\n            assert_eq!(*end + 1, aln.yend);\n            assert_eq!(*dist, aln.score as u8);\n        }\n        assert!(end_dist_iter.next().is_none());\n        assert!(!matches_long.next_alignment(&mut aln_long));\n    }\n    {\n        let mut matches = myers.find_all_lazy(text, max_dist);\n        let mut matches_long = myers_long.find_all_lazy(text, max_dist as usize);\n        let mut end_dist_iter = end_dist.iter();\n        while let Some((end, dist)) = matches.next() {\n            let (end_long, dist_long) = matches_long.next().unwrap();\n            assert_eq!((end, dist), (end_long, dist_long as u8));\n            assert!(matches.alignment_at(end, &mut aln));\n            assert!(matches_long.alignment_at(end, &mut aln_long));\n            assert_eq!(aln, aln_long);\n            validate_alignment(&aln, pattern, text);\n            assert_eq!(dist, aln.score as u8);\n            assert!(aln.score as u8 <= max_dist);\n            let (end, dist) = end_dist_iter.next().unwrap();\n            assert_eq!(*end + 1, aln.yend);\n            assert_eq!(*dist, aln.score as u8);\n            assert!(!matches.alignment_at(end + 1, &mut aln));\n        }\n        assert!(end_dist_iter.next().is_none());\n    }\n    let mut matches = myers.find_all_lazy(text, u8::max_value());\n    let mut matches_long = myers_long.find_all_lazy(text, u8::max_value() as usize);\n    let mut i = 0;\n    while let Some((end, dist)) = matches.next() {\n        assert_eq!(end, i);\n        let (end_long, dist_long) = matches_long.next().unwrap();\n        assert_eq!((end, dist), (end_long, dist_long as u8));\n        assert!(matches.alignment_at(end, &mut aln));\n        assert!(matches_long.alignment_at(end, &mut aln_long));\n        assert_eq!(aln, aln_long);\n        validate_alignment(&aln, pattern, text);\n        assert_eq!(dist, aln.score as u8);\n        assert!(aln.score as u8 <= u8::max_value());\n        assert!(!matches.alignment_at(end + 1, &mut aln));\n        assert!(!matches_long.alignment_at(end + 1, &mut aln_long));\n        i += 1;\n    }\n}"}
{"test_id": "cloud-hypervisor-cloud-hypervisor/cloud-hypervisor-cloud-hypervisor-db3a5f3/tests-gen/pmem.inputs.rs::test_3", "code": "pub fn wait_for_epoll_threads(&mut self) {\n        self.common.wait_for_epoll_threads();\n    }", "test": "fn test_3() {\n    let bytes = [8];\n    if bytes.len() < QUEUE_DATA_SIZE || bytes.len() > (QUEUE_DATA_SIZE + MEM_SIZE) {\n        return;\n    }\n    let mut pmem = create_dummy_pmem();\n    let queue_data = &bytes[..QUEUE_DATA_SIZE];\n    let mem_bytes = &bytes[QUEUE_DATA_SIZE..];\n    let q = setup_virt_queue(queue_data.try_into().unwrap());\n    let mem = GuestMemoryMmap::from_ranges(&[(GuestAddress(0), MEM_SIZE)]).unwrap();\n    if mem.write_slice(mem_bytes, GuestAddress(0 as u64)).is_err() {\n        return;\n    }\n    let guest_memory = GuestMemoryAtomic::new(mem);\n    let evt = EventFd::new(0).unwrap();\n    let queue_evt = unsafe { EventFd::from_raw_fd(libc::dup(evt.as_raw_fd())) };\n    queue_evt.write(1).unwrap();\n    pmem.activate(\n        guest_memory,\n        Arc::new(NoopVirtioInterrupt {}),\n        vec![(0, q, evt)],\n    )\n    .ok();\n    pmem.wait_for_epoll_threads();\n}"}
{"test_id": "gimli-rs-gimli/gimli-rs-gimli-3947879/tests-gen/debug_info.inputs.rs::test_57", "code": "pub fn next(&mut self) -> Result<Option<RawLocListEntry<R>>> {\n        if self.input.is_empty() {\n            return Ok(None);\n        }\n\n        match RawLocListEntry::parse(&mut self.input, self.encoding, self.format) {\n            Ok(entry) => {\n                if entry.is_none() {\n                    self.input.empty();\n                }\n                Ok(entry)\n            }\n            Err(e) => {\n                self.input.empty();\n                Err(e)\n            }\n        }\n    }", "test": "fn test_57() {\n    let sections = (\n        [],\n        [\n            224, 26, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,\n        ],\n    );\n    let (debug_abbrev, debug_info) = sections;\n    let debug_abbrev = DebugAbbrev::new(&debug_abbrev, LittleEndian);\n    let debug_info = DebugInfo::new(&debug_info, LittleEndian);\n    let mut units = debug_info.units();\n    while let Ok(Some(unit)) = units.next() {\n        if let Ok(abbrevs) = unit.abbreviations(&debug_abbrev) {\n            let mut cursor = unit.entries(&abbrevs);\n            while let Ok(Some((_delta, entry))) = cursor.next_dfs() {\n                let mut attrs = entry.attrs();\n                while let Ok(Some(_attr)) = attrs.next() {\n                    continue;\n                }\n            }\n        }\n    }\n}"}
{"test_id": "gimli-rs-gimli/gimli-rs-gimli-3947879/tests-gen/debug_aranges.inputs.rs::test_34", "code": "pub fn next(&mut self) -> Result<Option<UnitHeader<R>>> {\n        if self.input.is_empty() {\n            Ok(None)\n        } else {\n            let len = self.input.len();\n            match parse_unit_header(&mut self.input, self.offset.into()) {\n                Ok(header) => {\n                    self.offset.0 += len - self.input.len();\n                    Ok(Some(header))\n                }\n                Err(e) => {\n                    self.input.empty();\n                    Err(e)\n                }\n            }\n        }\n    }", "test": "fn test_34() {\n    let debug_aranges = [10];\n    let debug_aranges = DebugAranges::new(&debug_aranges, LittleEndian);\n    let mut headers = debug_aranges.headers();\n    while let Ok(Some(header)) = headers.next() {\n        let mut entries = header.entries();\n        while let Ok(Some(_entry)) = entries.next() {\n            continue;\n        }\n    }\n}"}
{"test_id": "cloud-hypervisor-cloud-hypervisor/cloud-hypervisor-cloud-hypervisor-db3a5f3/tests-gen/rng.inputs.rs::test_99", "code": "pub fn wait_for_epoll_threads(&mut self) {\n        self.common.wait_for_epoll_threads();\n    }", "test": "fn test_99() {\n    let bytes = [63, 5, 5, 42];\n    if bytes.len() < (QUEUE_DATA_SIZE + QUEUE_BYTES_SIZE)\n        || bytes.len() > (QUEUE_DATA_SIZE + QUEUE_BYTES_SIZE + MEM_SIZE)\n    {\n        return;\n    }\n    let mut rng = virtio_devices::Rng::new(\n        \"fuzzer_rng\".to_owned(),\n        \"/dev/urandom\",\n        false,\n        SeccompAction::Allow,\n        EventFd::new(EFD_NONBLOCK).unwrap(),\n        None,\n    )\n    .unwrap();\n    let queue_data = &bytes[..QUEUE_DATA_SIZE];\n    let queue_bytes = &bytes[QUEUE_DATA_SIZE..QUEUE_DATA_SIZE + QUEUE_BYTES_SIZE];\n    let mem_bytes = &bytes[QUEUE_DATA_SIZE + QUEUE_BYTES_SIZE..];\n    let q = setup_virt_queue(queue_data.try_into().unwrap());\n    let mem = GuestMemoryMmap::from_ranges(&[\n        (GuestAddress(0), MEM_SIZE),\n        (GuestAddress(DESC_TABLE_ADDR), QUEUE_BYTES_SIZE),\n    ])\n    .unwrap();\n    if mem\n        .write_slice(queue_bytes, GuestAddress(DESC_TABLE_ADDR))\n        .is_err()\n    {\n        return;\n    }\n    if mem.write_slice(mem_bytes, GuestAddress(0 as u64)).is_err() {\n        return;\n    }\n    let guest_memory = GuestMemoryAtomic::new(mem);\n    let evt = EventFd::new(0).unwrap();\n    let queue_evt = unsafe { EventFd::from_raw_fd(libc::dup(evt.as_raw_fd())) };\n    queue_evt.write(1).unwrap();\n    rng.activate(\n        guest_memory,\n        Arc::new(NoopVirtioInterrupt {}),\n        vec![(0, q, evt)],\n    )\n    .ok();\n    rng.wait_for_epoll_threads();\n}"}
{"test_id": "bodil-im-rs/bodil-im-rs-2afaf54/tests-gen/ordset.inputs.rs::test_56", "code": "pub fn remove<BA>(&mut self, a: &BA) -> Option<A>\n    where\n        BA: Hash + Eq + ?Sized,\n        A: Borrow<BA>,\n    {\n        let root = PoolRef::make_mut(&self.pool.0, &mut self.root);\n        let result = root.remove(&self.pool.0, hash_key(&*self.hasher, a), 0, a);\n        if result.is_some() {\n            self.size -= 1;\n        }\n        result.map(|v| v.0)\n    }", "test": "fn test_56() {\n    let actions = [Remove(47244640010)];\n    let mut set = OrdSet::new();\n    let mut nat = NatSet::new();\n    for action in actions {\n        match action {\n            Action::Insert(value) => {\n                let len = nat.len() + if nat.contains(&value) { 0 } else { 1 };\n                nat.insert(value);\n                set.insert(value);\n                assert_eq!(len, set.len());\n            }\n            Action::Remove(value) => {\n                let len = nat.len() - if nat.contains(&value) { 1 } else { 0 };\n                nat.remove(&value);\n                set.remove(&value);\n                assert_eq!(len, set.len());\n            }\n        }\n        assert_eq!(nat.len(), set.len());\n        assert_eq!(OrdSet::from(nat.clone()), set);\n    }\n}"}
{"test_id": "BurntSushi-memchr/BurntSushi-memchr-f3fde7a/tests-gen/memrchr3.inputs.rs::test_17", "code": "fn count(self) -> usize {\n        self.it.count(|s, e| {\n            // SAFETY: We rely on our generic iterator to return valid start\n            // and end pointers.\n            unsafe { count_raw(self.needle1, s, e) }\n        })\n    }", "test": "fn test_17() {\n    let data = [96, 35, 95, 10];\n    if data.len() < 3 {\n        return;\n    }\n    memchr3_iter(data[0], data[1], data[2], &data[3..]).rev().count();\n}"}
{"test_id": "gimli-rs-gimli/gimli-rs-gimli-3947879/tests-gen/debug_info.inputs.rs::test_43", "code": "pub fn next(&mut self) -> Result<Option<RawLocListEntry<R>>> {\n        if self.input.is_empty() {\n            return Ok(None);\n        }\n\n        match RawLocListEntry::parse(&mut self.input, self.encoding, self.format) {\n            Ok(entry) => {\n                if entry.is_none() {\n                    self.input.empty();\n                }\n                Ok(entry)\n            }\n            Err(e) => {\n                self.input.empty();\n                Err(e)\n            }\n        }\n    }", "test": "fn test_43() {\n    let sections = (\n        [],\n        [\n            1, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 1, 0, 255, 255, 255,\n        ],\n    );\n    let (debug_abbrev, debug_info) = sections;\n    let debug_abbrev = DebugAbbrev::new(&debug_abbrev, LittleEndian);\n    let debug_info = DebugInfo::new(&debug_info, LittleEndian);\n    let mut units = debug_info.units();\n    while let Ok(Some(unit)) = units.next() {\n        if let Ok(abbrevs) = unit.abbreviations(&debug_abbrev) {\n            let mut cursor = unit.entries(&abbrevs);\n            while let Ok(Some((_delta, entry))) = cursor.next_dfs() {\n                let mut attrs = entry.attrs();\n                while let Ok(Some(_attr)) = attrs.next() {\n                    continue;\n                }\n            }\n        }\n    }\n}"}
{"test_id": "BurntSushi-memchr/BurntSushi-memchr-f3fde7a/tests-gen/memrchr.inputs.rs::test_41", "code": "fn count(self) -> usize {\n        self.it.count(|s, e| {\n            // SAFETY: We rely on our generic iterator to return valid start\n            // and end pointers.\n            unsafe { count_raw(self.needle1, s, e) }\n        })\n    }", "test": "fn test_41() {\n    let data = [10, 10, 10, 19];\n    if data.is_empty() {\n        return;\n    }\n    memchr_iter(data[0], &data[1..]).rev().count();\n}"}
{"test_id": "dtolnay-semver/dtolnay-semver-750f0ac/tests-gen/sort_version.inputs.rs::test_44", "code": "fn three_versions(bytes: &[u8]) -> Option<[Version; 3]> {\n    let mut inputs = str::from_utf8(bytes).ok()?.split(' ');\n    Some([\n        Version {\n            major: 0,\n            minor: 0,\n            patch: 0,\n            pre: inputs.next().map(Prerelease::new)?.ok()?,\n            build: inputs.next().map(BuildMetadata::new)?.ok()?,\n        },\n        Version {\n            major: 0,\n            minor: 0,\n            patch: 0,\n            pre: inputs.next().map(Prerelease::new)?.ok()?,\n            build: inputs.next().map(BuildMetadata::new)?.ok()?,\n        },\n        Version {\n            major: 0,\n            minor: 0,\n            patch: 0,\n            pre: inputs.next().map(Prerelease::new)?.ok()?,\n            build: inputs.next().map(BuildMetadata::new)?.ok()?,\n        },\n    ])\n}", "test": "fn test_44() {\n    let bytes = [33];\n    if let Some([a, b, c]) = three_versions(bytes) {\n        if a < b && b < c && c < a {\n            panic!(\"{0} < {1} < {2} < {0}\", a, b, c);\n        }\n    }\n}"}
{"test_id": "BurntSushi-memchr/BurntSushi-memchr-f3fde7a/tests-gen/memmem.inputs.rs::test_7", "code": "pub fn count(&self, haystack: &[u8]) -> usize {\n        // SAFETY: All of our pointers are derived directly from a borrowed\n        // slice, which is guaranteed to be valid.\n        unsafe {\n            let start = haystack.as_ptr();\n            let end = start.add(haystack.len());\n            self.count_raw(start, end)\n        }\n    }", "test": "fn test_7() {\n    let data = [4, 53, 91];\n    if data.len() < 2 {\n        return;\n    }\n    let split = std::cmp::max(data[0] as usize, 1) % data.len() as usize;\n    let (needle, haystack) = (&data[..split], &data[split..]);\n    memmem::find_iter(haystack, needle).count();\n}"}
{"test_id": "cloud-hypervisor-cloud-hypervisor/cloud-hypervisor-cloud-hypervisor-db3a5f3/tests-gen/pmem.inputs.rs::test_68", "code": "pub fn wait_for_epoll_threads(&mut self) {\n        self.common.wait_for_epoll_threads();\n    }", "test": "fn test_68() {\n    let bytes = [10, 255, 59];\n    if bytes.len() < QUEUE_DATA_SIZE || bytes.len() > (QUEUE_DATA_SIZE + MEM_SIZE) {\n        return;\n    }\n    let mut pmem = create_dummy_pmem();\n    let queue_data = &bytes[..QUEUE_DATA_SIZE];\n    let mem_bytes = &bytes[QUEUE_DATA_SIZE..];\n    let q = setup_virt_queue(queue_data.try_into().unwrap());\n    let mem = GuestMemoryMmap::from_ranges(&[(GuestAddress(0), MEM_SIZE)]).unwrap();\n    if mem.write_slice(mem_bytes, GuestAddress(0 as u64)).is_err() {\n        return;\n    }\n    let guest_memory = GuestMemoryAtomic::new(mem);\n    let evt = EventFd::new(0).unwrap();\n    let queue_evt = unsafe { EventFd::from_raw_fd(libc::dup(evt.as_raw_fd())) };\n    queue_evt.write(1).unwrap();\n    pmem.activate(\n        guest_memory,\n        Arc::new(NoopVirtioInterrupt {}),\n        vec![(0, q, evt)],\n    )\n    .ok();\n    pmem.wait_for_epoll_threads();\n}"}
{"test_id": "cloud-hypervisor-cloud-hypervisor/cloud-hypervisor-cloud-hypervisor-db3a5f3/tests-gen/iommu.inputs.rs::test_2", "code": "pub fn wait_for_epoll_threads(&mut self) {\n        self.common.wait_for_epoll_threads();\n    }", "test": "fn test_2() {\n    let bytes = [58, 58];\n    if bytes.len() < (QUEUE_DATA_SIZE + QUEUE_BYTES_SIZE)\n        || bytes.len() > (QUEUE_DATA_SIZE + QUEUE_BYTES_SIZE + MEM_SIZE)\n    {\n        return;\n    }\n    let (mut iommu, _) = virtio_devices::Iommu::new(\n        \"fuzzer_iommu\".to_owned(),\n        SeccompAction::Allow,\n        EventFd::new(EFD_NONBLOCK).unwrap(),\n        ((MEM_SIZE - IOVA_SPACE_SIZE) as u64, (MEM_SIZE - 1) as u64),\n        None,\n    )\n    .unwrap();\n    let queue_data = &bytes[..QUEUE_DATA_SIZE];\n    let queue_bytes = &bytes[QUEUE_DATA_SIZE..QUEUE_DATA_SIZE + QUEUE_BYTES_SIZE];\n    let mem_bytes = &bytes[QUEUE_DATA_SIZE + QUEUE_BYTES_SIZE..];\n    let request_queue = setup_virt_queue(queue_data.try_into().unwrap());\n    let _event_queue = setup_virt_queue(queue_data.try_into().unwrap());\n    let mem = GuestMemoryMmap::from_ranges(&[\n        (GuestAddress(0), MEM_SIZE),\n        (GuestAddress(DESC_TABLE_ADDR), QUEUE_BYTES_SIZE),\n    ])\n    .unwrap();\n    if mem\n        .write_slice(queue_bytes, GuestAddress(DESC_TABLE_ADDR))\n        .is_err()\n    {\n        return;\n    }\n    if mem.write_slice(mem_bytes, GuestAddress(0 as u64)).is_err() {\n        return;\n    }\n    let guest_memory = GuestMemoryAtomic::new(mem);\n    let request_evt = EventFd::new(0).unwrap();\n    let request_queue_evt = unsafe { EventFd::from_raw_fd(libc::dup(request_evt.as_raw_fd())) };\n    let _event_evt = EventFd::new(0).unwrap();\n    request_queue_evt.write(1).unwrap();\n    iommu\n        .activate(\n            guest_memory,\n            Arc::new(NoopVirtioInterrupt {}),\n            vec![\n                (0, request_queue, request_evt),\n                (0, _event_queue, _event_evt),\n            ],\n        )\n        .ok();\n    iommu.wait_for_epoll_threads();\n}"}
{"test_id": "winnow-rs-winnow/winnow-rs-winnow-9e88734/tests-gen/fuzz_arithmetic.inputs.rs::test_72", "code": "fn factor(i: &mut &str) -> PResult<Expr> {\n    delimited(\n        multispaces,\n        alt((digits.try_map(FromStr::from_str).map(Expr::Value), parens)),\n        multispaces,\n    )\n    .parse_next(i)\n}", "test": "fn test_72() {\n    let data = [2, 10, 39];\n    reset();\n    let _ = match str::from_utf8(data) {\n        Ok(mut v) => factor(&mut v),\n        Err(_) => factor(&mut \"2\"),\n    };\n}"}
{"test_id": "gimli-rs-gimli/gimli-rs-gimli-3947879/tests-gen/debug_line.inputs.rs::test_42", "code": "pub fn next_row(&mut self) -> Result<Option<(&LineProgramHeader<R, Offset>, &LineRow)>> {\n        // Perform any reset that was required after copying the previous row.\n        self.row.reset(self.program.header());\n\n        loop {\n            // Split the borrow here, rather than calling `self.header()`.\n            match self.instructions.next_instruction(self.program.header()) {\n                Err(err) => return Err(err),\n                Ok(None) => return Ok(None),\n                Ok(Some(instruction)) => {\n                    if self.row.execute(instruction, &mut self.program) {\n                        if self.row.tombstone {\n                            // Perform any reset that was required for the tombstone row.\n                            // Normally this is done when `next_row` is called again, but for\n                            // tombstones we loop immediately.\n                            self.row.reset(self.program.header());\n                        } else {\n                            return Ok(Some((self.header(), &self.row)));\n                        }\n                    }\n                    // Fall through, parse the next instruction, and see if that\n                    // yields a row.\n                }\n            }\n        }\n    }", "test": "fn test_42() {\n    let debug_line = [47];\n    let debug_line = DebugLine::new(&debug_line, LittleEndian);\n    let offset = DebugLineOffset(0);\n    let address_size = 8;\n    if let Ok(program) = debug_line.program(offset, address_size, None, None) {\n        let mut rows = program.rows();\n        while let Ok(Some(row)) = rows.next_row() {\n            let _ = row;\n        }\n    }\n}"}
{"test_id": "image-rs-image/image-rs-image-e5580ec/tests-gen/fuzzer_script_exr.inputs.rs::test_95", "code": "fn roundtrip (bytes : & [u8]) -> ImageResult < () > { # [doc = \" Read the file from the specified path into an `Rgba32FImage`.\"] fn read_as_rgba_byte_image (read : impl Read + Seek) -> ImageResult < (u32 , u32 , Vec < u8 >) > { let mut decoder = OpenExrDecoder :: with_alpha_preference (read , Some (true)) ? ; match usize :: try_from (decoder . total_bytes ()) { Ok (decoded_size) if decoded_size <= 256 * 1024 * 1024 => { decoder . set_limits (Limits :: default ()) ? ; let (width , height) = decoder . dimensions () ; let mut buffer = vec ! [0 ; decoded_size] ; decoder . read_image (buffer . as_mut_slice ()) ? ; Ok ((width , height , buffer)) } _ => Err (image :: ImageError :: Limits (image :: error :: LimitError :: from_kind (image :: error :: LimitErrorKind :: InsufficientMemory ,) ,)) , } } # [doc = \" Write an `Rgba32FImage`.\"] # [doc = \" Assumes the writer is buffered. In most cases,\"] # [doc = \" you should wrap your writer in a `BufWriter` for best performance.\"] fn write_rgba_image (write : impl Write + Seek , (width , height , data) : & (u32 , u32 , Vec < u8 >) ,) -> ImageResult < () > { OpenExrEncoder :: new (write) . write_image (data . as_slice () , * width , * height , ColorType :: Rgba32F) } let decoded_image = read_as_rgba_byte_image (Cursor :: new (bytes)) ? ; let mut bytes = Vec :: with_capacity (bytes . len () + 20) ; write_rgba_image (Cursor :: new (& mut bytes) , & decoded_image) ? ; let redecoded_image = read_as_rgba_byte_image (Cursor :: new (bytes)) ? ; assert_eq ! (decoded_image , redecoded_image , \"image was valid but was not reproducible\") ; Ok (()) }", "test": "fn test_95() {\n    let data = [77, 10, 39, 63];\n    let _img = roundtrip(data);\n}"}
{"test_id": "marshallpierce-rust-base64/marshallpierce-rust-base64-4ef33cc/tests-gen/decode_random.inputs.rs::test_42", "code": "fn decode<T: AsRef<[u8]>>(&self, input: T) -> Result<Vec<u8>, DecodeError> {\n        fn inner<E>(engine: &E, input_bytes: &[u8]) -> Result<Vec<u8>, DecodeError>\n        where\n            E: Engine + ?Sized,\n        {\n            let estimate = engine.internal_decoded_len_estimate(input_bytes.len());\n            let mut buffer = vec![0; estimate.decoded_len_estimate()];\n\n            let bytes_written = engine\n                .internal_decode(input_bytes, &mut buffer, estimate)?\n                .decoded_len;\n\n            buffer.truncate(bytes_written);\n\n            Ok(buffer)\n        }\n\n        inner(self, input.as_ref())\n    }", "test": "fn test_42() {\n    let data = [171, 233, 21, 218];\n    let engine = utils::random_engine(data);\n    let _ = engine.decode(data);\n}"}
{"test_id": "seanmonstar-httparse/seanmonstar-httparse-638848e/tests-gen/parse_request.inputs.rs::test_22", "code": "pub fn parse(&mut self, buf: &'b [u8]) -> Result<usize> {\n        self.parse_with_config(buf, &Default::default())\n    }", "test": "fn test_22() {\n    let data = [24];\n    let mut headers = [httparse::EMPTY_HEADER; 16];\n    let mut req = httparse::Request::new(&mut headers);\n    req.parse(data);\n}"}
{"test_id": "zip-rs-zip/zip-rs-zip-ed187d6/tests-gen/fuzz_read.inputs.rs::test_20", "code": "fn decompress_all (data : & [u8]) -> Result < () , Box < dyn std :: error :: Error > > { let reader = std :: io :: Cursor :: new (data) ; let mut zip = zip :: ZipArchive :: new (reader) ? ; for i in 0 .. zip . len () { let mut file = zip . by_index (i) ? ; if file . size () < 1 << 20 { let _ = std :: io :: copy (& mut file , & mut std :: io :: sink ()) ; } } Ok (()) }", "test": "fn test_20() {\n    let data = [136, 10];\n    let _ = decompress_all(data);\n}"}
{"test_id": "uutils-coreutils/uutils-coreutils-73b7c46/tests-gen/fuzz_parse_size.inputs.rs::test_5", "code": "pub fn parse_size(size: &str) -> Result<u64, ParseSizeError> {\n    Parser::default().parse(size)\n}", "test": "fn test_5() {\n    let data = [10, 10, 10, 10];\n    if let Ok(s) = std::str::from_utf8(data) {\n        _ = parse_size(s);\n    }\n}"}
{"test_id": "rust-bio-rust-bio/rust-bio-rust-bio-319a0d8/tests-gen/myers_matching.inputs.rs::test_88", "code": "fn validate_alignment (aln : & Alignment , x : & [u8] , y : & [u8]) { let y = & y [aln . ystart .. aln . yend] ; let mut ix = 0 ; let mut iy = 0 ; let mut calc_dist = 0 ; for op in & aln . operations { match * op { Match => { assert ! (x [ix] == y [iy] , \"Match operation, but characters are not equal\") ; ix += 1 ; iy += 1 ; } Subst => { assert ! (x [ix] != y [iy] , \"Subst operation, but characters are equal\") ; calc_dist += 1 ; ix += 1 ; iy += 1 ; } Del => { calc_dist += 1 ; iy += 1 ; } Ins => { calc_dist += 1 ; ix += 1 ; } _ => unreachable ! () } } assert_eq ! (calc_dist , aln . score as usize) ; }", "test": "fn test_88() {\n    let data = [10, 26, 1, 0];\n    if data.len() < 3 {\n        return;\n    }\n    let (max_dist, data) = data.split_first().unwrap();\n    let (pattern_len, data) = data.split_first().unwrap();\n    let max_dist = min(64, *max_dist);\n    let pattern_len = max(1, min(64, min(data.len(), *pattern_len as usize)));\n    if data.iter().any(|&b| b < 65 || b > 122 || b > 90 && b < 97) {\n        return;\n    }\n    let (pattern, text) = data.split_at(pattern_len);\n    let max_dist = max_dist as u8;\n    let _ = MyersBuilder::new().build_64(pattern);\n    let _ = MyersBuilder::new().build_long_64(pattern);\n    let mut myers = Myers::<u64>::new(pattern);\n    let mut myers_long = long::Myers::<u8>::new(pattern);\n    let end_dist: Vec<_> = myers.find_all_end(text, max_dist).collect();\n    let end_dist_long: Vec<_> = myers_long\n        .find_all_end(text, max_dist as usize)\n        .map(|(end, dist)| (end, dist as u8))\n        .collect();\n    assert_eq!(end_dist, end_dist_long);\n    let mut aln = Alignment::default();\n    let mut aln_long = Alignment::default();\n    {\n        let mut matches = myers.find_all(text, max_dist);\n        let mut matches_long = myers_long.find_all(text, max_dist as usize);\n        matches.alignment(&mut aln);\n        matches_long.alignment(&mut aln_long);\n        let mut end_dist_iter = end_dist.iter();\n        while matches.next_alignment(&mut aln) {\n            assert!(matches_long.next_alignment(&mut aln_long));\n            assert_eq!(aln, aln_long);\n            validate_alignment(&aln, pattern, text);\n            assert!(aln.score as u8 <= max_dist);\n            let (end, dist) = end_dist_iter.next().unwrap();\n            assert_eq!(*end + 1, aln.yend);\n            assert_eq!(*dist, aln.score as u8);\n        }\n        assert!(end_dist_iter.next().is_none());\n        assert!(!matches_long.next_alignment(&mut aln_long));\n    }\n    {\n        let mut matches = myers.find_all_lazy(text, max_dist);\n        let mut matches_long = myers_long.find_all_lazy(text, max_dist as usize);\n        let mut end_dist_iter = end_dist.iter();\n        while let Some((end, dist)) = matches.next() {\n            let (end_long, dist_long) = matches_long.next().unwrap();\n            assert_eq!((end, dist), (end_long, dist_long as u8));\n            assert!(matches.alignment_at(end, &mut aln));\n            assert!(matches_long.alignment_at(end, &mut aln_long));\n            assert_eq!(aln, aln_long);\n            validate_alignment(&aln, pattern, text);\n            assert_eq!(dist, aln.score as u8);\n            assert!(aln.score as u8 <= max_dist);\n            let (end, dist) = end_dist_iter.next().unwrap();\n            assert_eq!(*end + 1, aln.yend);\n            assert_eq!(*dist, aln.score as u8);\n            assert!(!matches.alignment_at(end + 1, &mut aln));\n        }\n        assert!(end_dist_iter.next().is_none());\n    }\n    let mut matches = myers.find_all_lazy(text, u8::max_value());\n    let mut matches_long = myers_long.find_all_lazy(text, u8::max_value() as usize);\n    let mut i = 0;\n    while let Some((end, dist)) = matches.next() {\n        assert_eq!(end, i);\n        let (end_long, dist_long) = matches_long.next().unwrap();\n        assert_eq!((end, dist), (end_long, dist_long as u8));\n        assert!(matches.alignment_at(end, &mut aln));\n        assert!(matches_long.alignment_at(end, &mut aln_long));\n        assert_eq!(aln, aln_long);\n        validate_alignment(&aln, pattern, text);\n        assert_eq!(dist, aln.score as u8);\n        assert!(aln.score as u8 <= u8::max_value());\n        assert!(!matches.alignment_at(end + 1, &mut aln));\n        assert!(!matches_long.alignment_at(end + 1, &mut aln_long));\n        i += 1;\n    }\n}"}
{"test_id": "gfx-rs-naga/gfx-rs-naga-92e41b4/tests-gen/wgsl_parser.inputs.rs::test_83", "code": "pub fn parse(mut self) -> Result<crate::Module, Error> {\n        let mut module = {\n            if self.next()? != spirv::MAGIC_NUMBER {\n                return Err(Error::InvalidHeader);\n            }\n            let version_raw = self.next()?;\n            let generator = self.next()?;\n            let _bound = self.next()?;\n            let _schema = self.next()?;\n            log::info!(\"Generated by {} version {:x}\", generator, version_raw);\n            crate::Module::default()\n        };\n\n        self.layouter.clear();\n        self.dummy_functions = Arena::new();\n        self.lookup_function.clear();\n        self.function_call_graph.clear();\n\n        loop {\n            use spirv::Op;\n\n            let inst = match self.next_inst() {\n                Ok(inst) => inst,\n                Err(Error::IncompleteData) => break,\n                Err(other) => return Err(other),\n            };\n            log::debug!(\"\\t{:?} [{}]\", inst.op, inst.wc);\n\n            match inst.op {\n                Op::Capability => self.parse_capability(inst),\n                Op::Extension => self.parse_extension(inst),\n                Op::ExtInstImport => self.parse_ext_inst_import(inst),\n                Op::MemoryModel => self.parse_memory_model(inst),\n                Op::EntryPoint => self.parse_entry_point(inst),\n                Op::ExecutionMode => self.parse_execution_mode(inst),\n                Op::String => self.parse_string(inst),\n                Op::Source => self.parse_source(inst),\n                Op::SourceExtension => self.parse_source_extension(inst),\n                Op::Name => self.parse_name(inst),\n                Op::MemberName => self.parse_member_name(inst),\n                Op::ModuleProcessed => self.parse_module_processed(inst),\n                Op::Decorate => self.parse_decorate(inst),\n                Op::MemberDecorate => self.parse_member_decorate(inst),\n                Op::TypeVoid => self.parse_type_void(inst),\n                Op::TypeBool => self.parse_type_bool(inst, &mut module),\n                Op::TypeInt => self.parse_type_int(inst, &mut module),\n                Op::TypeFloat => self.parse_type_float(inst, &mut module),\n                Op::TypeVector => self.parse_type_vector(inst, &mut module),\n                Op::TypeMatrix => self.parse_type_matrix(inst, &mut module),\n                Op::TypeFunction => self.parse_type_function(inst),\n                Op::TypePointer => self.parse_type_pointer(inst, &mut module),\n                Op::TypeArray => self.parse_type_array(inst, &mut module),\n                Op::TypeRuntimeArray => self.parse_type_runtime_array(inst, &mut module),\n                Op::TypeStruct => self.parse_type_struct(inst, &mut module),\n                Op::TypeImage => self.parse_type_image(inst, &mut module),\n                Op::TypeSampledImage => self.parse_type_sampled_image(inst),\n                Op::TypeSampler => self.parse_type_sampler(inst, &mut module),\n                Op::Constant | Op::SpecConstant => self.parse_constant(inst, &mut module),\n                Op::ConstantComposite => self.parse_composite_constant(inst, &mut module),\n                Op::ConstantNull | Op::Undef => self.parse_null_constant(inst, &mut module),\n                Op::ConstantTrue => self.parse_bool_constant(inst, true, &mut module),\n                Op::ConstantFalse => self.parse_bool_constant(inst, false, &mut module),\n                Op::Variable => self.parse_global_variable(inst, &mut module),\n                Op::Function => {\n                    self.switch(ModuleState::Function, inst.op)?;\n                    inst.expect(5)?;\n                    self.parse_function(&mut module)\n                }\n                _ => Err(Error::UnsupportedInstruction(self.state, inst.op)), //TODO\n            }?;\n        }\n\n        log::info!(\"Patching...\");\n        {\n            let mut nodes = petgraph::algo::toposort(&self.function_call_graph, None)\n                .map_err(|cycle| Error::FunctionCallCycle(cycle.node_id()))?;\n            nodes.reverse(); // we need dominated first\n            let mut functions = mem::take(&mut module.functions);\n            for fun_id in nodes {\n                if fun_id > !(functions.len() as u32) {\n                    // skip all the fake IDs registered for the entry points\n                    continue;\n                }\n                let lookup = self.lookup_function.get_mut(&fun_id).unwrap();\n                // take out the function from the old array\n                let fun = mem::take(&mut functions[lookup.handle]);\n                // add it to the newly formed arena, and adjust the lookup\n                lookup.handle = module\n                    .functions\n                    .append(fun, functions.get_span(lookup.handle));\n            }\n        }\n        // patch all the functions\n        for (handle, fun) in module.functions.iter_mut() {\n            self.patch_function(Some(handle), fun)?;\n        }\n        for ep in module.entry_points.iter_mut() {\n            self.patch_function(None, &mut ep.function)?;\n        }\n\n        // Check all the images and samplers to have consistent comparison property.\n        for (handle, flags) in self.handle_sampling.drain() {\n            if !image::patch_comparison_type(\n                flags,\n                module.global_variables.get_mut(handle),\n                &mut module.types,\n            ) {\n                return Err(Error::InconsistentComparisonSampling(handle));\n            }\n        }\n\n        if !self.future_decor.is_empty() {\n            log::warn!(\"Unused item decorations: {:?}\", self.future_decor);\n            self.future_decor.clear();\n        }\n        if !self.future_member_decor.is_empty() {\n            log::warn!(\"Unused member decorations: {:?}\", self.future_member_decor);\n            self.future_member_decor.clear();\n        }\n\n        Ok(module)\n    }", "test": "fn test_83() {\n    let data = \",,\";\n    let _result = Frontend::new().parse(&data);\n}"}
{"test_id": "rustls-rustls/rustls-rustls-ae583bd/tests-gen/client.inputs.rs::test_48", "code": "pub fn process_new_packets(&mut self) -> Result<IoState, Error> {\n        match self {\n            Self::Client(conn) => conn.process_new_packets(),\n            Self::Server(conn) => conn.process_new_packets(),\n        }\n    }", "test": "fn test_48() {\n    let data = [\n        22, 3, 3, 0, 63, 2, 0, 0, 59, 3, 3, 89, 16, 236, 200, 17, 90, 14, 121, 52, 150, 218, 66,\n        28, 227, 55, 237, 109, 95, 209, 111, 252, 56, 238, 6, 251, 154, 147, 123, 211, 206, 186,\n        114, 0, 204, 169, 0, 0, 19, 255, 1, 0, 1, 0, 0, 23, 0, 0, 0, 35, 0, 0, 0, 11, 0, 2, 1, 0,\n        22, 3, 3, 14, 229, 11, 0, 14, 225, 0, 14, 222, 0, 7, 96, 48, 130, 7, 92, 48, 130, 6, 68,\n        160, 3, 2, 1, 2, 2, 8, 83, 65, 61, 145, 120, 210, 140, 39, 48, 13, 6, 9, 42, 134, 72, 134,\n        247, 13, 1, 1, 11, 5, 0, 48, 73, 49, 11, 48, 9, 6, 3, 85, 4, 6, 19, 2, 85, 83, 49, 19, 48,\n        17, 6, 3, 85, 4, 10, 19, 10, 71, 111, 111, 103, 108, 101, 32, 73, 110, 99, 49, 37, 48, 35,\n        6, 3, 85, 4, 3, 19, 28, 71, 111, 111, 103, 108, 101, 32, 73, 110, 116, 101, 114, 110, 101,\n        116, 32, 65, 117, 116, 104, 111, 114, 105, 116, 121, 32, 71, 50, 48, 30, 23, 13, 49, 55,\n        48, 52, 50, 55, 48, 56, 51, 48, 48, 48, 90, 23, 13, 49, 55, 48, 55, 50, 48, 48, 56, 51, 48,\n        48, 48, 90, 48, 102, 49, 11, 48, 9, 6, 3, 85, 4, 6, 19, 2, 85, 83, 49, 19, 48, 17, 6, 3,\n        85, 4, 8, 12, 10, 67, 97, 108, 105, 102, 111, 114, 110, 105, 97, 49, 22, 48, 20, 6, 3, 85,\n        4, 7, 12, 13, 77, 111, 117, 110, 116, 97, 105, 110, 32, 86, 105, 101, 119, 49, 19, 48, 17,\n        6, 3, 85, 4, 10, 12, 10, 71, 111, 111, 103, 108, 101, 32, 73, 110, 99, 49, 21, 48, 19, 6,\n        3, 85, 4, 3, 12, 12, 42, 46, 103, 111, 111, 103, 108, 101, 46, 99, 111, 109, 48, 89, 48,\n        19, 6, 7, 42, 134, 72, 206, 61, 2, 1, 6, 8, 42, 134, 72, 206, 61, 3, 1, 7, 3, 66, 0, 4,\n        189, 77, 48, 133, 70, 173, 158, 211, 104, 157, 203, 90, 81, 210, 82, 202, 205, 147, 209,\n        252, 62, 33, 220, 191, 25, 45, 49, 119, 71, 86, 34, 248, 128, 116, 164, 199, 172, 91, 179,\n        223, 239, 76, 76, 63, 25, 69, 53, 53, 110, 197, 165, 220, 25, 210, 237, 147, 30, 18, 131,\n        158, 196, 86, 94, 111, 163, 130, 4, 244, 48, 130, 4, 240, 48, 29, 6, 3, 85, 29, 37, 4, 22,\n        48, 20, 6, 8, 43, 6, 1, 5, 5, 7, 3, 1, 6, 8, 43, 6, 1, 5, 5, 7, 3, 2, 48, 11, 6, 3, 85, 29,\n        15, 4, 4, 3, 2, 7, 128, 48, 130, 3, 179, 6, 3, 85, 29, 17, 4, 130, 3, 170, 48, 130, 3, 166,\n        130, 12, 42, 46, 103, 111, 111, 103, 108, 101, 46, 99, 111, 109, 130, 13, 42, 46, 97, 110,\n        100, 114, 111, 105, 100, 46, 99, 111, 109, 130, 22, 42, 46, 97, 112, 112, 101, 110, 103,\n        105, 110, 101, 46, 103, 111, 111, 103, 108, 101, 46, 99, 111, 109, 130, 18, 42, 46, 99,\n        108, 111, 117, 100, 46, 103, 111, 111, 103, 108, 101, 46, 99, 111, 109, 130, 14, 42, 46,\n        103, 99, 112, 46, 103, 118, 116, 50, 46, 99, 111, 109, 130, 22, 42, 46, 103, 111, 111, 103,\n        108, 101, 45, 97, 110, 97, 108, 121, 116, 105, 99, 115, 46, 99, 111, 109, 130, 11, 42, 46,\n        103, 111, 111, 103, 108, 101, 46, 99, 97, 130, 11, 42, 46, 103, 111, 111, 103, 108, 101,\n        46, 99, 108, 130, 14, 42, 46, 103, 111, 111, 103, 108, 101, 46, 99, 111, 46, 105, 110, 130,\n        14, 42, 46, 103, 111, 111, 103, 108, 101, 46, 99, 111, 46, 106, 112, 130, 14, 42, 46, 103,\n        111, 111, 103, 108, 101, 46, 99, 111, 46, 117, 107, 130, 15, 42, 46, 103, 111, 111, 103,\n        108, 101, 46, 99, 111, 109, 46, 97, 114, 130, 15, 42, 46, 103, 111, 111, 103, 108, 101, 46,\n        99, 111, 109, 46, 97, 117, 130, 15, 42, 46, 103, 111, 111, 103, 108, 101, 46, 99, 111, 109,\n        46, 98, 114, 130, 15, 42, 46, 103, 111, 111, 103, 108, 101, 46, 99, 111, 109, 46, 99, 111,\n        130, 15, 42, 46, 103, 111, 111, 103, 108, 101, 46, 99, 111, 109, 46, 109, 120, 130, 15, 42,\n        46, 103, 111, 111, 103, 108, 101, 46, 99, 111, 109, 46, 116, 114, 130, 15, 42, 46, 103,\n        111, 111, 103, 108, 101, 46, 99, 111, 109, 46, 118, 110, 130, 11, 42, 46, 103, 111, 111,\n        103, 108, 101, 46, 100, 101, 130, 11, 42, 46, 103, 111, 111, 103, 108, 101, 46, 101, 115,\n        130, 11, 42, 46, 103, 111, 111, 103, 108, 101, 46, 102, 114, 130, 11, 42, 46, 103, 111,\n        111, 103, 108, 101, 46, 104, 117, 130, 11, 42, 46, 103, 111, 111, 103, 108, 101, 46, 105,\n        116, 130, 11, 42, 46, 103, 111, 111, 103, 108, 101, 46, 110, 108, 130, 11, 42, 46, 103,\n        111, 111, 103, 108, 101, 46, 112, 108, 130, 11, 42, 46, 103, 111, 111, 103, 108, 101, 46,\n        112, 116, 130, 18, 42, 46, 103, 111, 111, 103, 108, 101, 97, 100, 97, 112, 105, 115, 46,\n        99, 111, 109, 130, 15, 42, 46, 103, 111, 111, 103, 108, 101, 97, 112, 105, 115, 46, 99,\n        110, 130, 20, 42, 46, 103, 111, 111, 103, 108, 101, 99, 111, 109, 109, 101, 114, 99, 101,\n        46, 99, 111, 109, 130, 17, 42, 46, 103, 111, 111, 103, 108, 101, 118, 105, 100, 101, 111,\n        46, 99, 111, 109, 130, 12, 42, 46, 103, 115, 116, 97, 116, 105, 99, 46, 99, 110, 130, 13,\n        42, 46, 103, 115, 116, 97, 116, 105, 99, 46, 99, 111, 109, 130, 10, 42, 46, 103, 118, 116,\n        49, 46, 99, 111, 109, 130, 10, 42, 46, 103, 118, 116, 50, 46, 99, 111, 109, 130, 20, 42,\n        46, 109, 101, 116, 114, 105, 99, 46, 103, 115, 116, 97, 116, 105, 99, 46, 99, 111, 109,\n        130, 12, 42, 46, 117, 114, 99, 104, 105, 110, 46, 99, 111, 109, 130, 16, 42, 46, 117, 114,\n        108, 46, 103, 111, 111, 103, 108, 101, 46, 99, 111, 109, 130, 22, 42, 46, 121, 111, 117,\n        116, 117, 98, 101, 45, 110, 111, 99, 111, 111, 107, 105, 101, 46, 99, 111, 109, 130, 13,\n        42, 46, 121, 111, 117, 116, 117, 98, 101, 46, 99, 111, 109, 130, 22, 42, 46, 121, 111, 117,\n        116, 117, 98, 100, 101, 117, 101, 99, 97, 116, 105, 111, 110, 46, 99, 111, 109, 130, 11,\n        42, 46, 121, 116, 105, 109, 103, 46, 99, 111, 109, 130, 26, 97, 110, 100, 114, 111, 105,\n        100, 46, 99, 108, 105, 101, 110, 116, 115, 46, 103, 111, 111, 103, 108, 101, 46, 99, 111,\n        109, 130, 11, 97, 110, 100, 114, 111, 105, 100, 46, 99, 111, 109, 130, 27, 100, 101, 118,\n        101, 108, 111, 112, 101, 114, 46, 97, 110, 100, 114, 111, 105, 100, 46, 103, 111, 111, 103,\n        108, 101, 46, 99, 110, 130, 28, 100, 101, 118, 101, 108, 111, 112, 101, 114, 115, 46, 97,\n        110, 100, 114, 111, 105, 100, 46, 103, 111, 111, 103, 108, 101, 46, 99, 110, 130, 4, 103,\n        46, 99, 111, 130, 6, 103, 111, 111, 46, 103, 108, 130, 20, 103, 111, 111, 103, 108, 101,\n        45, 97, 110, 97, 108, 121, 116, 105, 99, 115, 46, 99, 111, 109, 130, 10, 103, 111, 111,\n        103, 108, 101, 46, 99, 111, 109, 130, 18, 103, 111, 111, 103, 108, 101, 99, 111, 109, 109,\n        101, 114, 99, 101, 46, 99, 111, 109, 130, 24, 115, 111, 117, 114, 99, 101, 46, 97, 110,\n        100, 114, 111, 105, 100, 46, 103, 111, 111, 103, 108, 101, 46, 99, 110, 130, 10, 117, 114,\n        99, 104, 105, 110, 46, 99, 111, 109, 130, 10, 119, 119, 119, 46, 103, 111, 111, 46, 103,\n        108, 130, 8, 121, 111, 117, 116, 117, 46, 98, 101, 130, 11, 121, 111, 117, 116, 117, 98,\n        101, 46, 99, 111, 109, 130, 20, 121, 111, 117, 116, 117, 98, 101, 101, 100, 117, 99, 97,\n        116, 105, 111, 110, 46, 99, 111, 109, 48, 104, 6, 8, 43, 6, 1, 5, 5, 7, 1, 1, 4, 92, 48,\n        90, 48, 43, 6, 8, 43, 6, 1, 5, 5, 7, 48, 2, 134, 31, 104, 116, 116, 112, 58, 47, 47, 112,\n        107, 105, 46, 103, 111, 111, 103, 108, 101, 46, 99, 111, 109, 47, 71, 73, 65, 71, 50, 46,\n        99, 114, 116, 48, 43, 6, 8, 43, 6, 1, 5, 5, 7, 48, 1, 134, 31, 104, 116, 116, 112, 58, 47,\n        47, 99, 108, 105, 101, 110, 116, 115, 49, 46, 103, 111, 111, 103, 108, 101, 46, 99, 111,\n        109, 47, 111, 99, 115, 112, 48, 29, 6, 3, 85, 29, 14, 4, 22, 4, 20, 253, 90, 18, 128, 11,\n        205, 4, 95, 242, 77, 89, 40, 3, 112, 35, 87, 25, 64, 248, 55, 48, 12, 6, 3, 85, 29, 19, 1,\n        1, 255, 4, 2, 48, 0, 48, 31, 6, 3, 85, 29, 35, 4, 24, 48, 22, 128, 20, 74, 221, 6, 22, 27,\n        188, 246, 104, 181, 118, 245, 129, 182, 187, 98, 26, 186, 90, 129, 47, 48, 33, 6, 3, 85,\n        29, 32, 4, 26, 48, 24, 48, 12, 6, 10, 43, 6, 1, 4, 1, 214, 121, 2, 5, 1, 48, 8, 6, 6, 103,\n        129, 12, 1, 2, 2, 48, 48, 6, 3, 85, 29, 31, 4, 41, 48, 39, 48, 37, 160, 35, 160, 33, 134,\n        31, 104, 116, 116, 112, 58, 47, 47, 112, 107, 105, 46, 103, 111, 111, 103, 108, 101, 46,\n        99, 111, 109, 47, 71, 73, 65, 71, 50, 46, 99, 114, 108, 48, 13, 6, 9, 42, 134, 72, 134,\n        247, 13, 1, 1, 11, 5, 0, 3, 130, 1, 1, 0, 33, 200, 169, 105, 206, 2, 155, 120, 189, 192,\n        51, 58, 117, 81, 58, 119, 84, 168, 232, 112, 67, 74, 178, 108, 140, 239, 140, 58, 241, 118,\n        5, 87, 151, 75, 62, 228, 100, 79, 253, 168, 208, 39, 111, 248, 15, 136, 208, 240, 106, 77,\n        117, 121, 178, 58, 88, 245, 179, 162, 251, 10, 71, 202, 197, 70, 144, 133, 162, 197, 128,\n        53, 111, 180, 163, 6, 63, 152, 48, 225, 133, 207, 156, 142, 147, 155, 164, 234, 150, 95,\n        194, 204, 36, 174, 11, 81, 8, 107, 127, 181, 132, 216, 230, 232, 29, 152, 1, 46, 152, 162,\n        185, 105, 229, 136, 245, 133, 63, 134, 92, 242, 217, 7, 26, 64, 132, 248, 126, 187, 114,\n        56, 192, 240, 70, 213, 140, 90, 19, 23, 33, 155, 220, 79, 93, 249, 252, 184, 190, 60, 45,\n        123, 246, 182, 204, 232, 45, 111, 214, 187, 247, 195, 215, 60, 88, 120, 12, 241, 0, 54,\n        189, 184, 200, 138, 56, 58, 15, 211, 62, 239, 220, 24, 224, 142, 159, 199, 102, 126, 9,\n        199, 212, 60, 163, 123, 195, 235, 239, 210, 8, 24, 172, 63, 119, 216, 233, 1, 8, 101, 21,\n        150, 10, 75, 36, 243, 45, 241, 243, 191, 254, 221, 133, 11, 136, 82, 64, 50, 222, 221, 48,\n        184, 48, 183, 155, 228, 204, 32, 177, 209, 139, 86, 15, 190, 118, 233, 91, 146, 124, 132,\n        218, 50, 73, 110, 152, 63, 196, 8, 66, 19, 171, 62, 0, 3, 244, 48, 130, 3, 240, 48, 130, 2,\n        216, 160, 3, 2, 1, 2, 2, 3, 2, 58, 146, 48, 13, 6, 9, 42, 134, 72, 134, 247, 13, 1, 1, 11,\n        5, 0, 48, 66, 49, 11, 48, 9, 6, 3, 85, 4, 6, 19, 2, 85, 83, 49, 22, 48, 20, 6, 3, 85, 4,\n        10, 19, 13, 71, 101, 111, 84, 114, 117, 115, 116, 32, 65, 110, 99, 46, 49, 27, 48, 25, 6,\n        3, 85, 4, 3, 19, 18, 71, 101, 111, 84, 114, 117, 115, 116, 32, 71, 108, 111, 98, 97, 108,\n        32, 67, 65, 48, 30, 23, 13, 49, 53, 48, 52, 48, 49, 48, 48, 48, 48, 48, 48, 90, 23, 13, 49,\n        55, 49, 50, 51, 49, 50, 51, 53, 57, 53, 57, 90, 48, 73, 49, 11, 48, 9, 6, 3, 85, 4, 6, 19,\n        2, 85, 83, 49, 19, 48, 17, 6, 3, 85, 4, 10, 19, 10, 71, 111, 111, 103, 108, 101, 32, 73,\n        110, 99, 49, 37, 48, 35, 6, 3, 85, 4, 3, 19, 28, 71, 111, 111, 103, 108, 101, 32, 73, 110,\n        116, 101, 114, 110, 101, 116, 32, 65, 117, 116, 104, 111, 114, 105, 116, 121, 32, 71, 50,\n        48, 130, 1, 34, 48, 13, 6, 9, 42, 134, 72, 134, 247, 13, 1, 1, 1, 5, 0, 3, 130, 1, 15, 0,\n        48, 130, 1, 10, 2, 130, 1, 1, 0, 156, 42, 4, 119, 92, 216, 80, 145, 58, 6, 163, 130, 224,\n        216, 80, 72, 188, 137, 63, 241, 25, 112, 26, 136, 70, 126, 224, 143, 197, 241, 137, 206,\n        33, 238, 90, 254, 97, 13, 183, 50, 68, 137, 160, 116, 11, 83, 79, 85, 164, 206, 130, 98,\n        149, 238, 235, 89, 95, 198, 225, 5, 128, 18, 196, 94, 148, 63, 188, 91, 72, 56, 244, 83,\n        247, 36, 230, 251, 145, 233, 21, 196, 207, 244, 83, 13, 244, 74, 252, 159, 84, 222, 125,\n        190, 160, 107, 111, 135, 192, 208, 80, 31, 40, 48, 3, 64, 218, 8, 115, 81, 108, 127, 255,\n        58, 60, 167, 55, 6, 142, 189, 75, 17, 4, 235, 125, 36, 222, 230, 249, 252, 49, 113, 251,\n        148, 213, 96, 243, 46, 74, 175, 66, 210, 203, 234, 196, 106, 26, 178, 204, 83, 221, 21, 75,\n        139, 31, 200, 25, 97, 31, 205, 157, 168, 62, 99, 43, 132, 53, 105, 101, 132, 200, 25, 197,\n        70, 34, 248, 83, 149, 190, 227, 128, 74, 16, 198, 42, 236, 186, 151, 32, 17, 199, 57, 153,\n        16, 4, 160, 240, 97, 122, 149, 37, 140, 78, 82, 117, 226, 182, 237, 8, 202, 20, 252, 206,\n        34, 106, 179, 78, 207, 70, 3, 151, 151, 3, 126, 192, 177, 222, 123, 175, 69, 51, 207, 186,\n        62, 113, 183, 222, 244, 37, 37, 194, 13, 53, 137, 157, 157, 251, 14, 17, 121, 137, 30, 55,\n        197, 175, 142, 114, 105, 2, 3, 1, 0, 1, 163, 129, 231, 48, 129, 228, 48, 31, 6, 3, 85, 29,\n        35, 4, 24, 48, 22, 128, 20, 192, 122, 152, 104, 141, 137, 251, 171, 5, 100, 12, 17, 125,\n        170, 125, 101, 184, 202, 204, 78, 48, 29, 6, 3, 85, 29, 14, 4, 22, 4, 20, 74, 221, 6, 22,\n        27, 188, 246, 104, 181, 118, 245, 129, 182, 187, 98, 26, 186, 90, 129, 47, 48, 14, 6, 3,\n        85, 29, 15, 1, 1, 255, 4, 4, 3, 2, 1, 6, 48, 46, 6, 8, 43, 6, 1, 5, 5, 7, 1, 1, 4, 34, 48,\n        32, 48, 30, 6, 8, 43, 6, 1, 5, 5, 7, 48, 1, 134, 18, 104, 116, 116, 112, 58, 47, 47, 103,\n        46, 115, 121, 109, 99, 100, 46, 99, 111, 109, 48, 18, 6, 3, 85, 29, 19, 1, 1, 255, 4, 8,\n        48, 6, 1, 1, 255, 2, 1, 0, 48, 53, 6, 3, 85, 29, 31, 4, 46, 48, 44, 48, 42, 160, 40, 160,\n        38, 134, 36, 104, 116, 116, 112, 58, 47, 47, 103, 46, 115, 121, 109, 99, 98, 46, 99, 111,\n        109, 47, 99, 114, 108, 115, 47, 103, 116, 103, 108, 111, 98, 97, 108, 46, 99, 114, 108, 48,\n        23, 6, 3, 85, 29, 32, 4, 16, 48, 14, 48, 12, 6, 10, 43, 6, 1, 4, 1, 214, 121, 2, 5, 1, 48,\n        13, 6, 9, 42, 134, 72, 134, 247, 13, 1, 1, 11, 5, 0, 3, 130, 1, 1, 0, 8, 78, 4, 167, 128,\n        127, 16, 22, 67, 94, 2, 173, 215, 66, 128, 244, 176, 142, 210, 174, 179, 235, 17, 125, 144,\n        132, 24, 125, 231, 144, 21, 251, 73, 127, 168, 153, 5, 145, 187, 122, 201, 214, 60, 55, 24,\n        9, 154, 182, 199, 146, 32, 7, 53, 51, 9, 228, 40, 99, 114, 13, 180, 224, 50, 156, 135, 152,\n        196, 27, 118, 137, 103, 193, 80, 88, 176, 19, 170, 19, 26, 27, 50, 165, 190, 234, 17, 149,\n        76, 72, 99, 73, 233, 153, 93, 32, 55, 204, 254, 42, 105, 81, 22, 149, 75, 169, 222, 73,\n        130, 192, 16, 112, 244, 44, 243, 236, 188, 36, 36, 208, 78, 172, 165, 217, 94, 30, 109,\n        146, 193, 167, 172, 72, 53, 129, 249, 229, 228, 156, 101, 105, 205, 135, 164, 65, 80, 63,\n        46, 87, 165, 145, 81, 18, 88, 14, 140, 9, 161, 172, 122, 164, 18, 165, 39, 243, 154, 16,\n        151, 125, 85, 3, 6, 247, 102, 88, 95, 95, 100, 225, 171, 93, 109, 165, 57, 72, 117, 152,\n        76, 41, 90, 58, 141, 211, 43, 202, 156, 85, 4, 191, 244, 230, 20, 213, 128, 172, 38, 237,\n        23, 137, 166, 147, 108, 92, 164, 204, 184, 240, 102, 142, 100, 227, 125, 154, 226, 0, 179,\n        73, 199, 228, 10, 170, 221, 91, 131, 199, 112, 144, 70, 78, 190, 208, 219, 89, 150, 108,\n        46, 245, 22, 54, 222, 113, 204, 1, 194, 18, 193, 33, 198, 22, 0, 3, 129, 48, 130, 3, 125,\n        48, 130, 2, 230, 160, 3, 2, 1, 2, 2, 3, 18, 187, 230, 48, 13, 6, 9, 42, 134, 72, 134, 247,\n        13, 1, 1, 5, 5, 0, 48, 78, 49, 11, 48, 9, 6, 3, 85, 4, 6, 19, 2, 85, 83, 49, 16, 48, 14, 6,\n        3, 85, 4, 10, 19, 7, 69, 113, 117, 105, 102, 97, 120, 49, 45, 48, 43, 6, 3, 85, 4, 11, 19,\n        36, 69, 113, 117, 105, 102, 97, 120, 32, 83, 101, 99, 117, 114, 101, 32, 67, 101, 114, 116,\n        105, 102, 105, 99, 97, 116, 101, 32, 65, 117, 116, 104, 111, 114, 105, 116, 121, 48, 30,\n        23, 13, 48, 50, 48, 53, 50, 49, 48, 52, 48, 48, 48, 48, 90, 23, 13, 49, 56, 48, 56, 50, 49,\n        48, 52, 48, 48, 48, 48, 90, 48, 66, 49, 11, 48, 9, 6, 3, 85, 4, 6, 19, 2, 85, 83, 49, 22,\n        48, 20, 6, 3, 85, 4, 10, 19, 13, 71, 101, 111, 84, 114, 117, 115, 116, 32, 73, 110, 99, 46,\n        49, 27, 48, 25, 6, 3, 85, 4, 3, 19, 18, 71, 101, 111, 84, 114, 117, 115, 116, 32, 71, 108,\n        111, 98, 97, 108, 32, 67, 65, 48, 130, 1, 34, 48, 13, 6, 9, 42, 134, 72, 134, 247, 13, 1,\n        1, 1, 5, 0, 3, 130, 1, 15, 0, 48, 130, 1, 10, 2, 130, 1, 1, 0, 218, 204, 24, 99, 48, 253,\n        244, 23, 35, 26, 86, 126, 91, 223, 60, 108, 56, 228, 113, 183, 120, 145, 212, 188, 161,\n        216, 76, 248, 168, 67, 182, 3, 233, 77, 33, 7, 8, 136, 218, 88, 47, 102, 57, 41, 189, 5,\n        120, 139, 157, 56, 232, 5, 183, 106, 126, 113, 164, 230, 196, 96, 166, 176, 239, 128, 228,\n        137, 40, 15, 158, 37, 214, 237, 131, 243, 173, 166, 145, 199, 152, 201, 66, 24, 53, 20,\n        157, 173, 152, 70, 146, 46, 79, 202, 241, 135, 67, 193, 22, 149, 87, 45, 80, 239, 137, 45,\n        128, 122, 87, 173, 242, 238, 95, 107, 210, 0, 141, 185, 20, 248, 20, 21, 53, 217, 192, 70,\n        163, 123, 114, 200, 145, 191, 201, 85, 43, 205, 208, 151, 62, 156, 38, 100, 204, 223, 206,\n        131, 25, 113, 202, 78, 230, 212, 213, 123, 169, 25, 205, 85, 222, 200, 236, 210, 94, 56,\n        83, 229, 92, 79, 140, 45, 254, 80, 35, 54, 252, 102, 230, 203, 142, 164, 57, 25, 0, 183,\n        149, 2, 57, 145, 11, 14, 254, 56, 46, 209, 29, 5, 154, 246, 77, 62, 111, 15, 7, 29, 175,\n        44, 30, 143, 96, 57, 226, 250, 54, 83, 19, 57, 212, 94, 38, 43, 219, 61, 168, 20, 189, 50,\n        235, 24, 3, 40, 82, 4, 113, 229, 171, 51, 61, 225, 56, 187, 7, 54, 132, 98, 156, 121, 234,\n        22, 48, 244, 95, 192, 43, 232, 113, 107, 228, 249, 2, 3, 1, 0, 1, 163, 129, 240, 48, 129,\n        237, 48, 31, 6, 3, 85, 29, 35, 4, 24, 48, 22, 128, 20, 72, 230, 104, 249, 43, 210, 178,\n        149, 215, 71, 216, 35, 32, 16, 79, 51, 152, 144, 159, 212, 48, 29, 6, 3, 85, 29, 14, 4, 22,\n        4, 20, 192, 122, 152, 104, 141, 137, 251, 171, 5, 100, 12, 17, 125, 170, 125, 101, 184,\n        202, 204, 78, 48, 15, 6, 3, 85, 29, 19, 1, 1, 255, 4, 5, 48, 3, 1, 1, 255, 48, 14, 6, 3,\n        85, 29, 15, 1, 1, 255, 4, 4, 3, 2, 1, 6, 48, 58, 6, 3, 85, 29, 31, 4, 51, 48, 49, 48, 47,\n        160, 45, 160, 43, 134, 41, 104, 116, 116, 112, 58, 47, 47, 99, 114, 108, 46, 103, 101, 111,\n        116, 114, 117, 115, 116, 46, 99, 111, 109, 47, 99, 114, 108, 115, 47, 115, 101, 99, 117,\n        114, 101, 99, 97, 46, 99, 114, 108, 48, 78, 6, 3, 85, 29, 32, 4, 71, 48, 69, 48, 67, 6, 4,\n        85, 29, 32, 0, 48, 59, 48, 57, 6, 8, 43, 6, 1, 5, 5, 7, 2, 1, 22, 45, 104, 116, 116, 112,\n        115, 58, 47, 47, 119, 119, 119, 46, 103, 101, 111, 116, 114, 117, 115, 116, 46, 99, 111,\n        109, 47, 114, 101, 115, 111, 117, 114, 99, 101, 115, 47, 114, 101, 112, 111, 115, 105, 116,\n        111, 114, 121, 48, 13, 6, 9, 42, 134, 72, 134, 247, 13, 1, 1, 5, 5, 0, 3, 129, 129, 0, 118,\n        225, 18, 110, 78, 75, 22, 18, 134, 48, 6, 178, 48, 1, 134, 18, 104, 116, 116, 112, 58, 47,\n        47, 103, 46, 115, 121, 109, 99, 100, 46, 99, 111, 109, 48, 18, 6, 3, 85, 29, 19, 1, 1, 255,\n        4, 8, 48, 6, 1, 1, 255, 2, 1, 0, 48, 53, 6, 3, 85, 29, 31, 4, 46, 48, 44, 48, 42, 160, 40,\n        160, 38, 134, 36, 104, 116, 116, 112, 58, 47, 47, 103, 46, 115, 121, 109, 99, 98, 46, 99,\n        111, 109, 47, 99, 114, 108, 115, 47, 103, 116, 103, 108, 111, 98, 97, 108, 46, 99, 114,\n        108, 48, 23, 6, 3, 85, 29, 32, 4, 16, 48, 14, 48, 12, 6, 10, 43, 6, 1, 4, 1, 214, 121, 2,\n        5, 1, 48, 13, 6, 9, 42, 134, 72, 134, 247, 13, 1, 1, 11, 5, 0, 3, 130, 1, 1, 0, 8, 78, 4,\n        167, 128, 127, 16, 22, 67, 94, 2, 173, 215, 66, 128, 244, 176, 142, 210, 174, 179, 235, 17,\n        125, 144, 132, 24, 125, 231, 144, 21, 251, 73, 127, 168, 153, 5, 145, 187, 122, 201, 214,\n        60, 55, 24, 9, 154, 182, 199, 146, 32, 7, 53, 51, 9, 228, 40, 99, 114, 13, 180, 224, 50,\n        156, 135, 152, 196, 27, 118, 137, 103, 193, 80, 88, 176, 19, 170, 19, 26, 27, 50, 165, 190,\n        234, 17, 149, 76, 72, 99, 73, 233, 153, 93, 32, 55, 204, 254, 42, 105, 81, 22, 149, 75,\n        169, 222, 73, 130, 192, 16, 112, 244, 44, 243, 236, 188, 36, 36, 208, 78, 172, 165, 217,\n        94, 30, 109, 146, 193, 167, 172, 72, 53, 129, 249, 229, 228, 156, 101, 105, 205, 135, 164,\n        65, 80, 63, 46, 87, 165, 145, 81, 18, 88, 14, 140, 9, 161, 172, 122, 164, 18, 165, 39, 243,\n        154, 16, 151, 125, 85, 3, 6, 247, 102, 88, 95, 95, 100, 225, 171, 93, 109, 165, 57, 72,\n        117, 152, 76, 41, 90, 58, 141, 211, 43, 202, 156, 85, 4, 191, 244, 230, 20, 213, 128, 172,\n        38, 237, 23, 137, 166, 147, 108, 92, 164, 204, 184, 240, 102, 142, 100, 227, 125, 154, 226,\n        0, 179, 73, 199, 228, 10, 170, 221, 91, 131, 199, 112, 144, 70, 78, 190, 208, 219, 89, 150,\n        108, 226, 99, 204, 123, 77, 237, 165, 38, 196, 158, 196, 163, 39, 31, 219, 195, 16, 152, 4,\n        135, 131, 197, 26, 192, 175, 73, 208, 102, 224, 50, 80, 230, 29, 5, 207, 178, 98, 39, 107,\n        230, 1, 197, 170, 5, 64, 181, 56, 55, 178, 122, 4, 178, 114, 110, 79, 20, 3, 3, 0, 1, 1,\n        22, 3, 3, 0, 32, 183, 30, 234, 49, 21, 153, 244, 50, 141, 222, 123, 52, 1, 109, 64, 238,\n        29, 191, 187, 51, 222, 29, 236, 211, 51, 142, 115, 248, 228, 41, 223, 232, 23, 3, 3, 5,\n        145, 183, 198, 127, 233, 133, 132, 204, 255, 193, 240, 165, 168, 179, 134, 137, 28, 111,\n        57, 20, 103, 109, 40, 93, 116, 27, 183, 6, 173, 163, 53, 13, 72, 122, 43, 63, 229, 34, 239,\n        206, 238, 224, 219, 154, 89, 232, 199, 231, 76, 220, 48, 166, 150, 198, 187, 179, 212, 170,\n        99, 14, 86, 71, 119, 180, 116, 170, 223, 163, 40, 114, 100, 115, 113, 43, 44, 114, 235, 76,\n        52, 47, 163, 154, 106, 75, 206, 13, 169, 35, 146, 186, 235, 26, 215, 226, 25, 96, 82, 134,\n        106, 165, 127, 165, 151, 155, 237, 16, 83, 188, 25, 119, 139, 21, 127, 119, 176, 100, 73,\n        39, 111, 86, 232, 52, 9, 66, 93, 115, 223, 106, 228, 206, 238, 160, 132, 136, 64, 102, 43,\n        74, 71, 121, 174, 29, 24, 97, 80, 95, 52, 218, 59, 92, 197, 127, 255, 57, 181, 131, 22, 44,\n        103, 181, 255, 147, 102, 90, 15, 183, 116, 87, 9, 234, 149, 220, 97, 185, 51, 15, 48, 192,\n        77, 192, 92, 6, 25, 231, 98, 183, 247, 191, 91, 35, 232, 21, 25, 172, 40, 237, 60, 161,\n        137, 231, 74, 255, 83, 254, 183, 142, 212, 17, 244, 228, 22, 175, 11, 18, 28, 10, 13, 59,\n        153, 59, 167, 135, 132, 139, 137, 113, 140, 127, 144, 118, 200, 162, 233, 78, 190, 163, 76,\n        226, 254, 141, 23, 103, 104, 130, 9, 249, 38, 224, 186, 81, 202, 138, 93, 91, 204, 157,\n        215, 80, 29, 100, 172, 90, 238, 198, 240, 210, 187, 19, 62, 115, 118, 162, 168, 216, 71,\n        112, 46, 23, 133, 22, 189, 210, 149, 133, 48, 200, 136, 154, 38, 232, 39, 155, 118, 193,\n        34, 213, 153, 254, 27, 118, 184, 252, 128, 4, 175, 4, 84, 119, 78, 252, 154, 99, 252, 142,\n        108, 170, 171, 108, 4, 181, 42, 121, 214, 195, 219, 86, 242, 192, 126, 196, 223, 239, 42,\n        199, 225, 212, 234, 10, 122, 3, 193, 28, 84, 12, 112, 161, 253, 10, 169, 105, 164, 63, 97,\n        189, 164, 233, 134, 45, 115, 68, 28, 24, 245, 177, 156, 59, 119, 158, 169, 190, 92, 55, 25,\n        81, 131, 16, 97, 164, 233, 188, 6, 13, 197, 35, 180, 215, 5, 222, 218, 153, 211, 204, 140,\n        43, 16, 66, 70, 37, 188, 245, 142, 91, 181, 176, 50, 210, 247, 126, 210, 254, 254, 56, 58,\n        202, 187, 189, 198, 247, 74, 189, 80, 143, 231, 208, 22, 188, 255, 184, 79, 239, 101, 153,\n        38, 185, 223, 119, 141, 143, 241, 93, 236, 72, 153, 185, 119, 215, 135, 123, 202, 66, 204,\n        12, 243, 246, 48, 43, 154, 83, 0, 100, 146, 157, 230, 233, 147, 209, 45, 106, 170, 231,\n        113, 162, 217, 136, 142, 254, 179, 55, 216, 202, 171, 112, 33, 169, 211, 27, 69, 131, 131,\n        186, 210, 79, 186, 244, 223, 25, 153, 0, 204, 17, 150, 183, 82, 33, 40, 165, 178, 214, 212,\n        185, 215, 118, 116, 192, 121, 23, 111, 14, 148, 118, 17, 195, 123, 98, 96, 227, 160, 203,\n        98, 44, 10, 17, 73, 153, 8, 104, 225, 126, 28, 62, 50, 167, 146, 93, 246, 148, 222, 56,\n        235, 205, 189, 222, 186, 74, 242, 195, 91, 54, 135, 245, 245, 139, 235, 233, 43, 125, 89,\n        87, 250, 179, 228, 228, 166, 141, 238, 53, 245, 80, 235, 32, 142, 81, 180, 51, 107, 117,\n        28, 197, 62, 15, 107, 40, 167, 63, 119, 215, 239, 4, 53, 26, 254, 55, 153, 8, 89, 253, 156,\n        98, 25, 51, 54, 205, 255, 183, 37, 76, 39, 153, 92, 240, 79, 178, 157, 153, 205, 242, 91,\n        133, 204, 26, 107, 7, 105, 59, 186, 37, 217, 61, 171, 159, 165, 68, 171, 10, 91, 29, 236,\n        136, 188, 153, 202, 63, 99, 47, 38, 246, 92, 156, 111, 100, 241, 142, 19, 98, 204, 171,\n        188, 6, 5, 117, 91, 47, 16, 227, 100, 43, 77, 56, 70, 231, 10, 161, 170, 195, 142, 34, 154,\n        173, 32, 78, 93, 39, 56, 185, 38, 249, 59, 219, 48, 15, 106, 245, 187, 64, 82, 47, 144,\n        134, 130, 154, 54, 87, 70, 166, 72, 234, 147, 121, 227, 24, 77, 204, 246, 109, 49, 57, 104,\n        114, 128, 35, 40, 34, 113, 75, 116, 91, 6, 43, 28, 123, 123, 43, 180, 82, 237, 1, 250, 108,\n        126, 244, 40, 186, 108, 59, 59, 1, 232, 50, 14, 248, 26, 158, 112, 110, 245, 133, 40, 44,\n        38, 130, 187, 34, 190, 179, 134, 98, 54, 71, 52, 151, 64, 70, 253, 247, 48, 201, 189, 117,\n        28, 18, 6, 111, 239, 64, 248, 250, 231, 85, 20, 133, 210, 238, 207, 121, 136, 37, 127, 16,\n        135, 191, 150, 42, 174, 107, 239, 142, 40, 108, 34, 66, 36, 233, 104, 52, 137, 12, 49, 17,\n        219, 213, 165, 132, 160, 153, 6, 175, 133, 172, 78, 183, 236, 228, 81, 164, 11, 152, 93,\n        194, 212, 117, 179, 84, 175, 251, 73, 172, 77, 252, 207, 166, 218, 20, 168, 183, 0, 205,\n        40, 203, 120, 130, 87, 123, 61, 140, 237, 224, 132, 178, 103, 208, 78, 140, 40, 13, 123, 9,\n        47, 68, 171, 162, 116, 160, 87, 84, 2, 14, 84, 180, 242, 73, 38, 223, 191, 114, 45, 232,\n        208, 252, 180, 95, 17, 205, 199, 106, 169, 123, 181, 212, 225, 41, 91, 38, 81, 23, 176,\n        105, 40, 194, 246, 174, 78, 30, 205, 204, 147, 9, 172, 98, 65, 188, 225, 83, 245, 167, 203,\n        99, 201, 207, 126, 192, 173, 250, 25, 28, 101, 164, 88, 191, 186, 203, 199, 243, 35, 13,\n        187, 204, 61, 180, 2, 24, 198, 83, 6, 147, 212, 139, 186, 164, 180, 193, 193, 241, 96, 217,\n        160, 58, 117, 133, 132, 97, 135, 174, 24, 49, 123, 161, 202, 191, 10, 20, 238, 223, 213,\n        107, 139, 69, 58, 239, 56, 147, 15, 71, 130, 244, 112, 179, 219, 45, 136, 223, 145, 5, 100,\n        70, 194, 104, 130, 39, 47, 144, 40, 179, 162, 166, 177, 238, 10, 122, 181, 88, 128, 242,\n        228, 211, 145, 239, 231, 38, 58, 56, 75, 175, 203, 162, 198, 220, 58, 152, 213, 24, 223,\n        20, 41, 227, 102, 59, 122, 94, 95, 197, 33, 196, 28, 96, 184, 228, 76, 194, 197, 105, 5,\n        26, 90, 174, 79, 27, 218, 172, 92, 44, 155, 33, 236, 30, 190, 13, 110, 13, 60, 176, 93, 14,\n        91, 214, 255, 254, 88, 103, 178, 198, 121, 186, 64, 227, 162, 168, 215, 191, 237, 199, 111,\n        169, 20, 159, 6, 182, 229, 25, 157, 45, 54, 158, 121, 226, 199, 147, 48, 82, 174, 41, 55,\n        185, 164, 65, 101, 174, 22, 69, 163, 141, 174, 103, 99, 196, 91, 121, 197, 219, 197, 90,\n        242, 150, 42, 209, 60, 97, 55, 242, 58, 126, 231, 22, 127, 91, 166, 44, 228, 231, 29, 236,\n        61, 35, 12, 152, 48, 104, 183, 24, 213, 102, 189, 214, 101, 136, 11, 226, 31, 83, 243, 242,\n        206, 101, 180, 179, 14, 35, 13, 104, 249, 151, 118, 148, 180, 205, 245, 29, 35, 253, 113,\n        62, 102, 109, 228, 28, 120, 68, 76, 243, 62, 250, 159, 100, 137, 94, 216, 30, 90, 10, 230,\n        54, 242, 196, 232, 13, 12, 177, 50, 32, 91, 126, 103, 88, 54, 57, 13, 172, 80, 167, 15, 51,\n        109, 159, 237, 164, 251, 229, 16, 134, 132, 56, 93, 60, 51, 230, 25, 105, 230, 1, 54, 204,\n        248, 53, 80, 16, 54, 168, 4, 173, 246, 198, 106, 252, 153, 5, 227, 23, 169, 9, 2, 162, 237,\n        46, 114, 238, 203, 103, 62, 66, 43, 119, 56, 209, 97, 60, 189, 54, 25, 228, 137, 19, 198,\n        68, 137, 40, 197, 159, 152, 220, 149, 128, 201, 201, 138, 46, 70, 97, 140, 146, 244, 106,\n        103, 120, 211, 231, 150, 37, 41, 30, 87, 208, 191, 66, 142, 55, 222, 11, 102, 197, 30, 213,\n        6, 144, 18, 123, 235, 145, 73, 249, 60, 240, 251, 161, 240, 147, 201, 165, 206, 167, 115,\n        79, 225, 189, 27, 95, 168, 239, 189, 46, 13, 198, 47, 228, 179, 156, 53, 40, 209, 116, 191,\n        177, 143, 60, 157, 172, 193, 123, 252, 146, 28, 6, 20, 225, 237, 80, 166, 97, 59, 162, 189,\n        172, 91, 121, 248, 134, 72, 36, 23, 3, 3, 1, 134, 184, 233, 245, 63, 202, 189, 95, 218, 14,\n        44, 104, 150, 88, 57, 147, 139, 108, 12, 24, 244, 48, 244, 12, 105, 140, 245, 216, 203, 98,\n        220, 166, 61, 248, 29, 21, 205, 163, 217, 131, 222, 142, 243, 231, 56, 251, 8, 91, 104,\n        142, 192, 167, 237, 78, 125, 38, 215, 152, 134, 128, 126, 89, 102, 207, 188, 230, 246, 14,\n        24, 126, 138, 114, 180, 118, 107, 248, 123, 189, 108, 188, 51, 72, 43, 11, 120, 144, 125,\n        151, 128, 70, 175, 208, 157, 21, 23, 181, 116, 24, 151, 213, 169, 71, 137, 211, 133, 66,\n        217, 94, 56, 172, 53, 200, 76, 212, 201, 64, 165, 40, 211, 58, 41, 133, 5, 180, 151, 59,\n        17, 112, 75, 19, 186, 172, 50, 36, 184, 98, 225, 103, 3, 192, 196, 234, 34, 58, 122, 13,\n        145, 186, 175, 250, 68, 14, 113, 209, 83, 212, 155, 61, 162, 156, 108, 103, 139, 224, 128,\n        191, 58, 168, 228, 223, 63, 16, 216, 161, 129, 103, 100, 126, 196, 98, 10, 77, 40, 217,\n        195, 19, 205, 202, 220, 96, 17, 175, 95, 25, 22, 158, 125, 215, 107, 136, 1, 124, 91, 213,\n        38, 226, 229, 171, 102, 229, 43, 21, 96, 18, 64, 250, 121, 28, 196, 204, 232, 170, 196,\n        217, 241, 72, 52, 204, 213, 15, 38, 22, 211, 23, 30, 200, 130, 144, 162, 241, 75, 131, 109,\n        216, 53, 176, 129, 181, 234, 255, 221, 66, 0, 103, 20, 218, 25, 242, 178, 29, 66, 74, 132,\n        102, 65, 47, 113, 156, 220, 240, 218, 205, 242, 139, 64, 190, 177, 79, 163, 13, 245, 95,\n        144, 138, 214, 18, 105, 157, 143, 227, 178, 156, 38, 215, 106, 254, 245, 153, 14, 188, 52,\n        101, 188, 238, 86, 47, 120, 37, 100, 136, 93, 124, 217, 73, 77, 154, 46, 244, 106, 178, 10,\n        189, 146, 171, 135, 220, 144, 201, 229, 61, 61, 135, 192, 76, 64, 222, 138, 66, 197, 214,\n        166, 41, 39, 147, 245, 35, 15, 191, 134, 204, 64, 72, 168, 114, 232, 179, 225, 117, 94, 47,\n        184, 219, 143, 107, 210, 56, 223, 248, 86, 107, 154, 214, 43, 23, 71, 130, 241, 25, 50,\n        204, 144, 244, 19, 51, 33, 180, 0, 17, 184, 61, 147,\n    ];\n    let root_store = RootCertStore::empty();\n    let config = Arc::new(\n        ClientConfig::builder()\n            .with_safe_defaults()\n            .with_root_certificates(root_store)\n            .with_no_client_auth(),\n    );\n    let example_com = \"example.com\".try_into().unwrap();\n    let mut client = ClientConnection::new(config, example_com).unwrap();\n    let _ = client.read_tls(&mut io::Cursor::new(data));\n    let _ = client.process_new_packets();\n}"}
{"test_id": "bodil-im-rs/bodil-im-rs-2afaf54/tests-gen/hashset.inputs.rs::test_69", "code": "pub fn remove<BA>(&mut self, a: &BA) -> Option<A>\n    where\n        BA: Hash + Eq + ?Sized,\n        A: Borrow<BA>,\n    {\n        let root = PoolRef::make_mut(&self.pool.0, &mut self.root);\n        let result = root.remove(&self.pool.0, hash_key(&*self.hasher, a), 0, a);\n        if result.is_some() {\n            self.size -= 1;\n        }\n        result.map(|v| v.0)\n    }", "test": "fn test_69() {\n    let actions = [Remove(72057589759079926)];\n    let mut set = HashSet::new();\n    let mut nat = NatSet::new();\n    for action in actions {\n        match action {\n            Action::Insert(value) => {\n                let len = nat.len() + if nat.contains(&value) { 0 } else { 1 };\n                nat.insert(value);\n                set.insert(value);\n                assert_eq!(len, set.len());\n            }\n            Action::Remove(value) => {\n                let len = nat.len() - if nat.contains(&value) { 1 } else { 0 };\n                nat.remove(&value);\n                set.remove(&value);\n                assert_eq!(len, set.len());\n            }\n        }\n        assert_eq!(nat.len(), set.len());\n        assert_eq!(HashSet::from(nat.clone()), set);\n    }\n}"}
{"test_id": "image-rs-image/image-rs-image-e5580ec/tests-gen/fuzzer_script_exr.inputs.rs::test_58", "code": "fn roundtrip (bytes : & [u8]) -> ImageResult < () > { # [doc = \" Read the file from the specified path into an `Rgba32FImage`.\"] fn read_as_rgba_byte_image (read : impl Read + Seek) -> ImageResult < (u32 , u32 , Vec < u8 >) > { let mut decoder = OpenExrDecoder :: with_alpha_preference (read , Some (true)) ? ; match usize :: try_from (decoder . total_bytes ()) { Ok (decoded_size) if decoded_size <= 256 * 1024 * 1024 => { decoder . set_limits (Limits :: default ()) ? ; let (width , height) = decoder . dimensions () ; let mut buffer = vec ! [0 ; decoded_size] ; decoder . read_image (buffer . as_mut_slice ()) ? ; Ok ((width , height , buffer)) } _ => Err (image :: ImageError :: Limits (image :: error :: LimitError :: from_kind (image :: error :: LimitErrorKind :: InsufficientMemory ,) ,)) , } } # [doc = \" Write an `Rgba32FImage`.\"] # [doc = \" Assumes the writer is buffered. In most cases,\"] # [doc = \" you should wrap your writer in a `BufWriter` for best performance.\"] fn write_rgba_image (write : impl Write + Seek , (width , height , data) : & (u32 , u32 , Vec < u8 >) ,) -> ImageResult < () > { OpenExrEncoder :: new (write) . write_image (data . as_slice () , * width , * height , ColorType :: Rgba32F) } let decoded_image = read_as_rgba_byte_image (Cursor :: new (bytes)) ? ; let mut bytes = Vec :: with_capacity (bytes . len () + 20) ; write_rgba_image (Cursor :: new (& mut bytes) , & decoded_image) ? ; let redecoded_image = read_as_rgba_byte_image (Cursor :: new (bytes)) ? ; assert_eq ! (decoded_image , redecoded_image , \"image was valid but was not reproducible\") ; Ok (()) }", "test": "fn test_58() {\n    let data = [38, 60];\n    let _img = roundtrip(data);\n}"}
{"test_id": "cloud-hypervisor-cloud-hypervisor/cloud-hypervisor-cloud-hypervisor-db3a5f3/tests-gen/mem.inputs.rs::test_16", "code": "pub fn wait_for_epoll_threads(&mut self) {\n        self.common.wait_for_epoll_threads();\n    }", "test": "fn test_16() {\n    let bytes = [2];\n    if bytes.len() < VIRTIO_MEM_DATA_SIZE + QUEUE_DATA_SIZE + QUEUE_BYTES_SIZE\n        || bytes.len() > (VIRTIO_MEM_DATA_SIZE + QUEUE_DATA_SIZE + QUEUE_BYTES_SIZE + MEM_SIZE)\n    {\n        return;\n    }\n    let virtio_mem_data = &bytes[..VIRTIO_MEM_DATA_SIZE];\n    let queue_data = &bytes[VIRTIO_MEM_DATA_SIZE..VIRTIO_MEM_DATA_SIZE + QUEUE_DATA_SIZE];\n    let queue_bytes = &bytes[VIRTIO_MEM_DATA_SIZE + QUEUE_DATA_SIZE\n        ..VIRTIO_MEM_DATA_SIZE + QUEUE_DATA_SIZE + QUEUE_BYTES_SIZE];\n    let mem_bytes = &bytes[VIRTIO_MEM_DATA_SIZE + QUEUE_DATA_SIZE + QUEUE_BYTES_SIZE..];\n    let (mut virtio_mem, virtio_mem_region) =\n        create_dummy_virtio_mem(virtio_mem_data.try_into().unwrap());\n    let q = setup_virt_queue(queue_data.try_into().unwrap());\n    let mem =\n        GuestMemoryMmap::from_ranges(&[(GuestAddress(DESC_TABLE_ADDR), QUEUE_BYTES_SIZE)]).unwrap();\n    if mem\n        .write_slice(queue_bytes, GuestAddress(DESC_TABLE_ADDR))\n        .is_err()\n    {\n        return;\n    }\n    let mem = mem.insert_region(virtio_mem_region).unwrap();\n    if mem\n        .write_slice(mem_bytes, GuestAddress(VIRTIO_MEM_REGION_ADDRESS))\n        .is_err()\n    {\n        return;\n    }\n    let guest_memory = GuestMemoryAtomic::new(mem);\n    let evt = EventFd::new(0).unwrap();\n    let queue_evt = unsafe { EventFd::from_raw_fd(libc::dup(evt.as_raw_fd())) };\n    queue_evt.write(1).unwrap();\n    virtio_mem\n        .activate(\n            guest_memory,\n            Arc::new(NoopVirtioInterrupt {}),\n            vec![(0, q, evt)],\n        )\n        .ok();\n    virtio_mem.wait_for_epoll_threads();\n}"}
{"test_id": "gfx-rs-naga/gfx-rs-naga-92e41b4/tests-gen/wgsl_parser.inputs.rs::test_58", "code": "pub fn parse(mut self) -> Result<crate::Module, Error> {\n        let mut module = {\n            if self.next()? != spirv::MAGIC_NUMBER {\n                return Err(Error::InvalidHeader);\n            }\n            let version_raw = self.next()?;\n            let generator = self.next()?;\n            let _bound = self.next()?;\n            let _schema = self.next()?;\n            log::info!(\"Generated by {} version {:x}\", generator, version_raw);\n            crate::Module::default()\n        };\n\n        self.layouter.clear();\n        self.dummy_functions = Arena::new();\n        self.lookup_function.clear();\n        self.function_call_graph.clear();\n\n        loop {\n            use spirv::Op;\n\n            let inst = match self.next_inst() {\n                Ok(inst) => inst,\n                Err(Error::IncompleteData) => break,\n                Err(other) => return Err(other),\n            };\n            log::debug!(\"\\t{:?} [{}]\", inst.op, inst.wc);\n\n            match inst.op {\n                Op::Capability => self.parse_capability(inst),\n                Op::Extension => self.parse_extension(inst),\n                Op::ExtInstImport => self.parse_ext_inst_import(inst),\n                Op::MemoryModel => self.parse_memory_model(inst),\n                Op::EntryPoint => self.parse_entry_point(inst),\n                Op::ExecutionMode => self.parse_execution_mode(inst),\n                Op::String => self.parse_string(inst),\n                Op::Source => self.parse_source(inst),\n                Op::SourceExtension => self.parse_source_extension(inst),\n                Op::Name => self.parse_name(inst),\n                Op::MemberName => self.parse_member_name(inst),\n                Op::ModuleProcessed => self.parse_module_processed(inst),\n                Op::Decorate => self.parse_decorate(inst),\n                Op::MemberDecorate => self.parse_member_decorate(inst),\n                Op::TypeVoid => self.parse_type_void(inst),\n                Op::TypeBool => self.parse_type_bool(inst, &mut module),\n                Op::TypeInt => self.parse_type_int(inst, &mut module),\n                Op::TypeFloat => self.parse_type_float(inst, &mut module),\n                Op::TypeVector => self.parse_type_vector(inst, &mut module),\n                Op::TypeMatrix => self.parse_type_matrix(inst, &mut module),\n                Op::TypeFunction => self.parse_type_function(inst),\n                Op::TypePointer => self.parse_type_pointer(inst, &mut module),\n                Op::TypeArray => self.parse_type_array(inst, &mut module),\n                Op::TypeRuntimeArray => self.parse_type_runtime_array(inst, &mut module),\n                Op::TypeStruct => self.parse_type_struct(inst, &mut module),\n                Op::TypeImage => self.parse_type_image(inst, &mut module),\n                Op::TypeSampledImage => self.parse_type_sampled_image(inst),\n                Op::TypeSampler => self.parse_type_sampler(inst, &mut module),\n                Op::Constant | Op::SpecConstant => self.parse_constant(inst, &mut module),\n                Op::ConstantComposite => self.parse_composite_constant(inst, &mut module),\n                Op::ConstantNull | Op::Undef => self.parse_null_constant(inst, &mut module),\n                Op::ConstantTrue => self.parse_bool_constant(inst, true, &mut module),\n                Op::ConstantFalse => self.parse_bool_constant(inst, false, &mut module),\n                Op::Variable => self.parse_global_variable(inst, &mut module),\n                Op::Function => {\n                    self.switch(ModuleState::Function, inst.op)?;\n                    inst.expect(5)?;\n                    self.parse_function(&mut module)\n                }\n                _ => Err(Error::UnsupportedInstruction(self.state, inst.op)), //TODO\n            }?;\n        }\n\n        log::info!(\"Patching...\");\n        {\n            let mut nodes = petgraph::algo::toposort(&self.function_call_graph, None)\n                .map_err(|cycle| Error::FunctionCallCycle(cycle.node_id()))?;\n            nodes.reverse(); // we need dominated first\n            let mut functions = mem::take(&mut module.functions);\n            for fun_id in nodes {\n                if fun_id > !(functions.len() as u32) {\n                    // skip all the fake IDs registered for the entry points\n                    continue;\n                }\n                let lookup = self.lookup_function.get_mut(&fun_id).unwrap();\n                // take out the function from the old array\n                let fun = mem::take(&mut functions[lookup.handle]);\n                // add it to the newly formed arena, and adjust the lookup\n                lookup.handle = module\n                    .functions\n                    .append(fun, functions.get_span(lookup.handle));\n            }\n        }\n        // patch all the functions\n        for (handle, fun) in module.functions.iter_mut() {\n            self.patch_function(Some(handle), fun)?;\n        }\n        for ep in module.entry_points.iter_mut() {\n            self.patch_function(None, &mut ep.function)?;\n        }\n\n        // Check all the images and samplers to have consistent comparison property.\n        for (handle, flags) in self.handle_sampling.drain() {\n            if !image::patch_comparison_type(\n                flags,\n                module.global_variables.get_mut(handle),\n                &mut module.types,\n            ) {\n                return Err(Error::InconsistentComparisonSampling(handle));\n            }\n        }\n\n        if !self.future_decor.is_empty() {\n            log::warn!(\"Unused item decorations: {:?}\", self.future_decor);\n            self.future_decor.clear();\n        }\n        if !self.future_member_decor.is_empty() {\n            log::warn!(\"Unused member decorations: {:?}\", self.future_member_decor);\n            self.future_member_decor.clear();\n        }\n\n        Ok(module)\n    }", "test": "fn test_58() {\n    let data = \"\";\n    let _result = Frontend::new().parse(&data);\n}"}
{"test_id": "cloud-hypervisor-cloud-hypervisor/cloud-hypervisor-cloud-hypervisor-db3a5f3/tests-gen/block.inputs.rs::test_5", "code": "pub fn wait_for_epoll_threads(&mut self) {\n        self.common.wait_for_epoll_threads();\n    }", "test": "fn test_5() {\n    let bytes = [4, 130];\n    if bytes.len() < QUEUE_DATA_SIZE || bytes.len() > (QUEUE_DATA_SIZE + MEM_SIZE) {\n        return;\n    }\n    let queue_data = &bytes[..QUEUE_DATA_SIZE];\n    let mem_bytes = &bytes[QUEUE_DATA_SIZE..];\n    let shm = memfd_create(&ffi::CString::new(\"fuzz\").unwrap(), 0).unwrap();\n    let disk_file: File = unsafe { File::from_raw_fd(shm) };\n    let qcow_disk = Box::new(RawFileDiskSync::new(disk_file)) as Box<dyn DiskFile>;\n    let mut block = Block::new(\n        \"tmp\".to_owned(),\n        qcow_disk,\n        PathBuf::from(\"\"),\n        false,\n        false,\n        2,\n        256,\n        None,\n        SeccompAction::Allow,\n        None,\n        EventFd::new(EFD_NONBLOCK).unwrap(),\n        None,\n    )\n    .unwrap();\n    let q = setup_virt_queue(queue_data.try_into().unwrap());\n    let mem = GuestMemoryMmap::from_ranges(&[(GuestAddress(0), MEM_SIZE)]).unwrap();\n    if mem.write_slice(mem_bytes, GuestAddress(0 as u64)).is_err() {\n        return;\n    }\n    let guest_memory = GuestMemoryAtomic::new(mem);\n    let evt = EventFd::new(0).unwrap();\n    let queue_evt = unsafe { EventFd::from_raw_fd(libc::dup(evt.as_raw_fd())) };\n    queue_evt.write(1).unwrap();\n    block\n        .activate(\n            guest_memory,\n            Arc::new(NoopVirtioInterrupt {}),\n            vec![(0, q, evt)],\n        )\n        .ok();\n    block.wait_for_epoll_threads();\n}"}
{"test_id": "zip-rs-zip/zip-rs-zip-ed187d6/tests-gen/fuzz_read.inputs.rs::test_63", "code": "fn decompress_all (data : & [u8]) -> Result < () , Box < dyn std :: error :: Error > > { let reader = std :: io :: Cursor :: new (data) ; let mut zip = zip :: ZipArchive :: new (reader) ? ; for i in 0 .. zip . len () { let mut file = zip . by_index (i) ? ; if file . size () < 1 << 20 { let _ = std :: io :: copy (& mut file , & mut std :: io :: sink ()) ; } } Ok (()) }", "test": "fn test_63() {\n    let data = [134, 136, 10];\n    let _ = decompress_all(data);\n}"}
{"test_id": "quinn-rs-quinn/quinn-rs-quinn-83e4f46/tests-gen/packet.inputs.rs::test_56", "code": "fn to_vec(params: &TransportParameters) -> Vec<u8> {\n    let mut bytes = Vec::new();\n    params.write(&mut bytes);\n    bytes\n}", "test": "fn test_56() {\n    let data = PacketParams {\n        local_cid_len: 5,\n        buf: b\"\\0\",\n        grease_quic_bit: false,\n    };\n    let len = data.buf.len();\n    let supported_versions = DEFAULT_SUPPORTED_VERSIONS.to_vec();\n    if let Ok(decoded) = PartialDecode::new(\n        data.buf,\n        data.local_cid_len,\n        &supported_versions,\n        data.grease_quic_bit,\n    ) {\n        match decoded.1 {\n            Some(x) => assert_eq!(len, decoded.0.len() + x.len()),\n            None => assert_eq!(len, decoded.0.len()),\n        }\n    }\n}"}
{"test_id": "bodil-im-rs/bodil-im-rs-2afaf54/tests-gen/ordset.inputs.rs::test_3", "code": "pub fn remove<BA>(&mut self, a: &BA) -> Option<A>\n    where\n        BA: Hash + Eq + ?Sized,\n        A: Borrow<BA>,\n    {\n        let root = PoolRef::make_mut(&self.pool.0, &mut self.root);\n        let result = root.remove(&self.pool.0, hash_key(&*self.hasher, a), 0, a);\n        if result.is_some() {\n            self.size -= 1;\n        }\n        result.map(|v| v.0)\n    }", "test": "fn test_3() {\n    let actions = [Insert(43100667902)];\n    let mut set = OrdSet::new();\n    let mut nat = NatSet::new();\n    for action in actions {\n        match action {\n            Action::Insert(value) => {\n                let len = nat.len() + if nat.contains(&value) { 0 } else { 1 };\n                nat.insert(value);\n                set.insert(value);\n                assert_eq!(len, set.len());\n            }\n            Action::Remove(value) => {\n                let len = nat.len() - if nat.contains(&value) { 1 } else { 0 };\n                nat.remove(&value);\n                set.remove(&value);\n                assert_eq!(len, set.len());\n            }\n        }\n        assert_eq!(nat.len(), set.len());\n        assert_eq!(OrdSet::from(nat.clone()), set);\n    }\n}"}
{"test_id": "image-rs-image/image-rs-image-e5580ec/tests-gen/fuzzer_script_exr.inputs.rs::test_30", "code": "fn roundtrip (bytes : & [u8]) -> ImageResult < () > { # [doc = \" Read the file from the specified path into an `Rgba32FImage`.\"] fn read_as_rgba_byte_image (read : impl Read + Seek) -> ImageResult < (u32 , u32 , Vec < u8 >) > { let mut decoder = OpenExrDecoder :: with_alpha_preference (read , Some (true)) ? ; match usize :: try_from (decoder . total_bytes ()) { Ok (decoded_size) if decoded_size <= 256 * 1024 * 1024 => { decoder . set_limits (Limits :: default ()) ? ; let (width , height) = decoder . dimensions () ; let mut buffer = vec ! [0 ; decoded_size] ; decoder . read_image (buffer . as_mut_slice ()) ? ; Ok ((width , height , buffer)) } _ => Err (image :: ImageError :: Limits (image :: error :: LimitError :: from_kind (image :: error :: LimitErrorKind :: InsufficientMemory ,) ,)) , } } # [doc = \" Write an `Rgba32FImage`.\"] # [doc = \" Assumes the writer is buffered. In most cases,\"] # [doc = \" you should wrap your writer in a `BufWriter` for best performance.\"] fn write_rgba_image (write : impl Write + Seek , (width , height , data) : & (u32 , u32 , Vec < u8 >) ,) -> ImageResult < () > { OpenExrEncoder :: new (write) . write_image (data . as_slice () , * width , * height , ColorType :: Rgba32F) } let decoded_image = read_as_rgba_byte_image (Cursor :: new (bytes)) ? ; let mut bytes = Vec :: with_capacity (bytes . len () + 20) ; write_rgba_image (Cursor :: new (& mut bytes) , & decoded_image) ? ; let redecoded_image = read_as_rgba_byte_image (Cursor :: new (bytes)) ? ; assert_eq ! (decoded_image , redecoded_image , \"image was valid but was not reproducible\") ; Ok (()) }", "test": "fn test_30() {\n    let data = [2];\n    let _img = roundtrip(data);\n}"}
{"test_id": "gfx-rs-naga/gfx-rs-naga-92e41b4/tests-gen/wgsl_parser.inputs.rs::test_76", "code": "pub fn parse(mut self) -> Result<crate::Module, Error> {\n        let mut module = {\n            if self.next()? != spirv::MAGIC_NUMBER {\n                return Err(Error::InvalidHeader);\n            }\n            let version_raw = self.next()?;\n            let generator = self.next()?;\n            let _bound = self.next()?;\n            let _schema = self.next()?;\n            log::info!(\"Generated by {} version {:x}\", generator, version_raw);\n            crate::Module::default()\n        };\n\n        self.layouter.clear();\n        self.dummy_functions = Arena::new();\n        self.lookup_function.clear();\n        self.function_call_graph.clear();\n\n        loop {\n            use spirv::Op;\n\n            let inst = match self.next_inst() {\n                Ok(inst) => inst,\n                Err(Error::IncompleteData) => break,\n                Err(other) => return Err(other),\n            };\n            log::debug!(\"\\t{:?} [{}]\", inst.op, inst.wc);\n\n            match inst.op {\n                Op::Capability => self.parse_capability(inst),\n                Op::Extension => self.parse_extension(inst),\n                Op::ExtInstImport => self.parse_ext_inst_import(inst),\n                Op::MemoryModel => self.parse_memory_model(inst),\n                Op::EntryPoint => self.parse_entry_point(inst),\n                Op::ExecutionMode => self.parse_execution_mode(inst),\n                Op::String => self.parse_string(inst),\n                Op::Source => self.parse_source(inst),\n                Op::SourceExtension => self.parse_source_extension(inst),\n                Op::Name => self.parse_name(inst),\n                Op::MemberName => self.parse_member_name(inst),\n                Op::ModuleProcessed => self.parse_module_processed(inst),\n                Op::Decorate => self.parse_decorate(inst),\n                Op::MemberDecorate => self.parse_member_decorate(inst),\n                Op::TypeVoid => self.parse_type_void(inst),\n                Op::TypeBool => self.parse_type_bool(inst, &mut module),\n                Op::TypeInt => self.parse_type_int(inst, &mut module),\n                Op::TypeFloat => self.parse_type_float(inst, &mut module),\n                Op::TypeVector => self.parse_type_vector(inst, &mut module),\n                Op::TypeMatrix => self.parse_type_matrix(inst, &mut module),\n                Op::TypeFunction => self.parse_type_function(inst),\n                Op::TypePointer => self.parse_type_pointer(inst, &mut module),\n                Op::TypeArray => self.parse_type_array(inst, &mut module),\n                Op::TypeRuntimeArray => self.parse_type_runtime_array(inst, &mut module),\n                Op::TypeStruct => self.parse_type_struct(inst, &mut module),\n                Op::TypeImage => self.parse_type_image(inst, &mut module),\n                Op::TypeSampledImage => self.parse_type_sampled_image(inst),\n                Op::TypeSampler => self.parse_type_sampler(inst, &mut module),\n                Op::Constant | Op::SpecConstant => self.parse_constant(inst, &mut module),\n                Op::ConstantComposite => self.parse_composite_constant(inst, &mut module),\n                Op::ConstantNull | Op::Undef => self.parse_null_constant(inst, &mut module),\n                Op::ConstantTrue => self.parse_bool_constant(inst, true, &mut module),\n                Op::ConstantFalse => self.parse_bool_constant(inst, false, &mut module),\n                Op::Variable => self.parse_global_variable(inst, &mut module),\n                Op::Function => {\n                    self.switch(ModuleState::Function, inst.op)?;\n                    inst.expect(5)?;\n                    self.parse_function(&mut module)\n                }\n                _ => Err(Error::UnsupportedInstruction(self.state, inst.op)), //TODO\n            }?;\n        }\n\n        log::info!(\"Patching...\");\n        {\n            let mut nodes = petgraph::algo::toposort(&self.function_call_graph, None)\n                .map_err(|cycle| Error::FunctionCallCycle(cycle.node_id()))?;\n            nodes.reverse(); // we need dominated first\n            let mut functions = mem::take(&mut module.functions);\n            for fun_id in nodes {\n                if fun_id > !(functions.len() as u32) {\n                    // skip all the fake IDs registered for the entry points\n                    continue;\n                }\n                let lookup = self.lookup_function.get_mut(&fun_id).unwrap();\n                // take out the function from the old array\n                let fun = mem::take(&mut functions[lookup.handle]);\n                // add it to the newly formed arena, and adjust the lookup\n                lookup.handle = module\n                    .functions\n                    .append(fun, functions.get_span(lookup.handle));\n            }\n        }\n        // patch all the functions\n        for (handle, fun) in module.functions.iter_mut() {\n            self.patch_function(Some(handle), fun)?;\n        }\n        for ep in module.entry_points.iter_mut() {\n            self.patch_function(None, &mut ep.function)?;\n        }\n\n        // Check all the images and samplers to have consistent comparison property.\n        for (handle, flags) in self.handle_sampling.drain() {\n            if !image::patch_comparison_type(\n                flags,\n                module.global_variables.get_mut(handle),\n                &mut module.types,\n            ) {\n                return Err(Error::InconsistentComparisonSampling(handle));\n            }\n        }\n\n        if !self.future_decor.is_empty() {\n            log::warn!(\"Unused item decorations: {:?}\", self.future_decor);\n            self.future_decor.clear();\n        }\n        if !self.future_member_decor.is_empty() {\n            log::warn!(\"Unused member decorations: {:?}\", self.future_member_decor);\n            self.future_member_decor.clear();\n        }\n\n        Ok(module)\n    }", "test": "fn test_76() {\n    let data = \"-z@\";\n    let _result = Frontend::new().parse(&data);\n}"}
{"test_id": "gimli-rs-gimli/gimli-rs-gimli-3947879/tests-gen/eh_frame.inputs.rs::test_35", "code": "pub fn next_row(&mut self) -> Result<Option<(&LineProgramHeader<R, Offset>, &LineRow)>> {\n        // Perform any reset that was required after copying the previous row.\n        self.row.reset(self.program.header());\n\n        loop {\n            // Split the borrow here, rather than calling `self.header()`.\n            match self.instructions.next_instruction(self.program.header()) {\n                Err(err) => return Err(err),\n                Ok(None) => return Ok(None),\n                Ok(Some(instruction)) => {\n                    if self.row.execute(instruction, &mut self.program) {\n                        if self.row.tombstone {\n                            // Perform any reset that was required for the tombstone row.\n                            // Normally this is done when `next_row` is called again, but for\n                            // tombstones we loop immediately.\n                            self.row.reset(self.program.header());\n                        } else {\n                            return Ok(Some((self.header(), &self.row)));\n                        }\n                    }\n                    // Fall through, parse the next instruction, and see if that\n                    // yields a row.\n                }\n            }\n        }\n    }", "test": "fn test_35() {\n    let eh_frame = [211, 10, 96, 211];\n    let eh_frame = EhFrame::new(&eh_frame, LittleEndian);\n    let mut ctx = Box::new(UnwindContext::new());\n    let bases = BaseAddresses::default()\n        .set_eh_frame(0)\n        .set_eh_frame_hdr(0)\n        .set_text(0)\n        .set_got(0);\n    let mut entries = eh_frame.entries(&bases);\n    while let Ok(Some(entry)) = entries.next() {\n        match entry {\n            CieOrFde::Cie(_) => continue,\n            CieOrFde::Fde(partial) => {\n                if let Ok(fde) = partial.parse(EhFrame::cie_from_offset) {\n                    if let Ok(mut table) = fde.rows(&eh_frame, &bases, &mut ctx) {\n                        while let Ok(Some(_row)) = table.next_row() {\n                            continue;\n                        }\n                    }\n                }\n            }\n        };\n    }\n}"}
{"test_id": "gfx-rs-naga/gfx-rs-naga-92e41b4/tests-gen/wgsl_parser.inputs.rs::test_59", "code": "pub fn parse(mut self) -> Result<crate::Module, Error> {\n        let mut module = {\n            if self.next()? != spirv::MAGIC_NUMBER {\n                return Err(Error::InvalidHeader);\n            }\n            let version_raw = self.next()?;\n            let generator = self.next()?;\n            let _bound = self.next()?;\n            let _schema = self.next()?;\n            log::info!(\"Generated by {} version {:x}\", generator, version_raw);\n            crate::Module::default()\n        };\n\n        self.layouter.clear();\n        self.dummy_functions = Arena::new();\n        self.lookup_function.clear();\n        self.function_call_graph.clear();\n\n        loop {\n            use spirv::Op;\n\n            let inst = match self.next_inst() {\n                Ok(inst) => inst,\n                Err(Error::IncompleteData) => break,\n                Err(other) => return Err(other),\n            };\n            log::debug!(\"\\t{:?} [{}]\", inst.op, inst.wc);\n\n            match inst.op {\n                Op::Capability => self.parse_capability(inst),\n                Op::Extension => self.parse_extension(inst),\n                Op::ExtInstImport => self.parse_ext_inst_import(inst),\n                Op::MemoryModel => self.parse_memory_model(inst),\n                Op::EntryPoint => self.parse_entry_point(inst),\n                Op::ExecutionMode => self.parse_execution_mode(inst),\n                Op::String => self.parse_string(inst),\n                Op::Source => self.parse_source(inst),\n                Op::SourceExtension => self.parse_source_extension(inst),\n                Op::Name => self.parse_name(inst),\n                Op::MemberName => self.parse_member_name(inst),\n                Op::ModuleProcessed => self.parse_module_processed(inst),\n                Op::Decorate => self.parse_decorate(inst),\n                Op::MemberDecorate => self.parse_member_decorate(inst),\n                Op::TypeVoid => self.parse_type_void(inst),\n                Op::TypeBool => self.parse_type_bool(inst, &mut module),\n                Op::TypeInt => self.parse_type_int(inst, &mut module),\n                Op::TypeFloat => self.parse_type_float(inst, &mut module),\n                Op::TypeVector => self.parse_type_vector(inst, &mut module),\n                Op::TypeMatrix => self.parse_type_matrix(inst, &mut module),\n                Op::TypeFunction => self.parse_type_function(inst),\n                Op::TypePointer => self.parse_type_pointer(inst, &mut module),\n                Op::TypeArray => self.parse_type_array(inst, &mut module),\n                Op::TypeRuntimeArray => self.parse_type_runtime_array(inst, &mut module),\n                Op::TypeStruct => self.parse_type_struct(inst, &mut module),\n                Op::TypeImage => self.parse_type_image(inst, &mut module),\n                Op::TypeSampledImage => self.parse_type_sampled_image(inst),\n                Op::TypeSampler => self.parse_type_sampler(inst, &mut module),\n                Op::Constant | Op::SpecConstant => self.parse_constant(inst, &mut module),\n                Op::ConstantComposite => self.parse_composite_constant(inst, &mut module),\n                Op::ConstantNull | Op::Undef => self.parse_null_constant(inst, &mut module),\n                Op::ConstantTrue => self.parse_bool_constant(inst, true, &mut module),\n                Op::ConstantFalse => self.parse_bool_constant(inst, false, &mut module),\n                Op::Variable => self.parse_global_variable(inst, &mut module),\n                Op::Function => {\n                    self.switch(ModuleState::Function, inst.op)?;\n                    inst.expect(5)?;\n                    self.parse_function(&mut module)\n                }\n                _ => Err(Error::UnsupportedInstruction(self.state, inst.op)), //TODO\n            }?;\n        }\n\n        log::info!(\"Patching...\");\n        {\n            let mut nodes = petgraph::algo::toposort(&self.function_call_graph, None)\n                .map_err(|cycle| Error::FunctionCallCycle(cycle.node_id()))?;\n            nodes.reverse(); // we need dominated first\n            let mut functions = mem::take(&mut module.functions);\n            for fun_id in nodes {\n                if fun_id > !(functions.len() as u32) {\n                    // skip all the fake IDs registered for the entry points\n                    continue;\n                }\n                let lookup = self.lookup_function.get_mut(&fun_id).unwrap();\n                // take out the function from the old array\n                let fun = mem::take(&mut functions[lookup.handle]);\n                // add it to the newly formed arena, and adjust the lookup\n                lookup.handle = module\n                    .functions\n                    .append(fun, functions.get_span(lookup.handle));\n            }\n        }\n        // patch all the functions\n        for (handle, fun) in module.functions.iter_mut() {\n            self.patch_function(Some(handle), fun)?;\n        }\n        for ep in module.entry_points.iter_mut() {\n            self.patch_function(None, &mut ep.function)?;\n        }\n\n        // Check all the images and samplers to have consistent comparison property.\n        for (handle, flags) in self.handle_sampling.drain() {\n            if !image::patch_comparison_type(\n                flags,\n                module.global_variables.get_mut(handle),\n                &mut module.types,\n            ) {\n                return Err(Error::InconsistentComparisonSampling(handle));\n            }\n        }\n\n        if !self.future_decor.is_empty() {\n            log::warn!(\"Unused item decorations: {:?}\", self.future_decor);\n            self.future_decor.clear();\n        }\n        if !self.future_member_decor.is_empty() {\n            log::warn!(\"Unused member decorations: {:?}\", self.future_member_decor);\n            self.future_member_decor.clear();\n        }\n\n        Ok(module)\n    }", "test": "fn test_59() {\n    let data = \"\\u{1a}\";\n    let _result = Frontend::new().parse(&data);\n}"}
{"test_id": "rustls-rustls/rustls-rustls-ae583bd/tests-gen/message.inputs.rs::test_81", "code": "pub fn used(&self) -> usize {\n        self.cursor\n    }", "test": "fn test_81() {\n    let data = [\n        22, 3, 3, 0, 16, 20, 0, 0, 12, 232, 233, 30, 132, 108, 161, 150, 43, 15, 111, 127, 182,\n    ];\n    let mut rdr = Reader::init(data);\n    if let Ok(m) = OpaqueMessage::read(&mut rdr) {\n        let msg = match Message::try_from(m.into_plain_message()) {\n            Ok(msg) => msg,\n            Err(_) => return,\n        };\n        let enc = PlainMessage::from(msg)\n            .into_unencrypted_opaque()\n            .encode();\n        assert_eq!(enc, data[..rdr.used()]);\n    }\n}"}
{"test_id": "XAMPPRocky-tokei/XAMPPRocky-tokei-92ddc2e/tests-gen/parse_from_slice_panic.inputs.rs::test_65", "code": "pub fn parse_from_slice (input : FuzzInput , check_total : bool) { let config = & Config { treat_doc_strings_as_comments : Some (input . treat_doc_strings_as_comments) , columns : None , hidden : None , no_ignore : None , no_ignore_parent : None , no_ignore_dot : None , no_ignore_vcs : None , sort : None , types : None , for_each_fn : None , } ; let stats = input . lang . parse_from_slice (input . data , config) ; if check_total { if let Ok (s) = str :: from_utf8 (input . data) { assert ! (stats . lines () <= s . lines () . count () , \"{} got more total lines ({}) than str::lines ({}). Code: {}, Comments: {}, Blanks: {}. treat_doc_strings_as_comments: {}. File contents (as UTF-8):\\n{}\" , input . lang . name () , stats . lines () , s . lines () . count () , stats . code , stats . comments , input . treat_doc_strings_as_comments , stats . blanks , s) } ; } }", "test": "fn test_65() {\n    let data = FuzzInput {\n        lang: ABNF,\n        treat_doc_strings_as_comments: false,\n        data: [0, 0, 0, 233, 0, 255, 255, 255, 88],\n    };\n    parse_from_slice(data, false);\n}"}
{"test_id": "quinn-rs-quinn/quinn-rs-quinn-83e4f46/tests-gen/packet.inputs.rs::test_21", "code": "fn to_vec(params: &TransportParameters) -> Vec<u8> {\n    let mut bytes = Vec::new();\n    params.write(&mut bytes);\n    bytes\n}", "test": "fn test_21() {\n    let data = PacketParams {\n        local_cid_len: 16,\n        buf: b\"\\x12\\0\",\n        grease_quic_bit: false,\n    };\n    let len = data.buf.len();\n    let supported_versions = DEFAULT_SUPPORTED_VERSIONS.to_vec();\n    if let Ok(decoded) = PartialDecode::new(\n        data.buf,\n        data.local_cid_len,\n        &supported_versions,\n        data.grease_quic_bit,\n    ) {\n        match decoded.1 {\n            Some(x) => assert_eq!(len, decoded.0.len() + x.len()),\n            None => assert_eq!(len, decoded.0.len()),\n        }\n    }\n}"}
{"test_id": "image-rs-image/image-rs-image-e5580ec/tests-gen/fuzzer_script_exr.inputs.rs::test_88", "code": "fn roundtrip (bytes : & [u8]) -> ImageResult < () > { # [doc = \" Read the file from the specified path into an `Rgba32FImage`.\"] fn read_as_rgba_byte_image (read : impl Read + Seek) -> ImageResult < (u32 , u32 , Vec < u8 >) > { let mut decoder = OpenExrDecoder :: with_alpha_preference (read , Some (true)) ? ; match usize :: try_from (decoder . total_bytes ()) { Ok (decoded_size) if decoded_size <= 256 * 1024 * 1024 => { decoder . set_limits (Limits :: default ()) ? ; let (width , height) = decoder . dimensions () ; let mut buffer = vec ! [0 ; decoded_size] ; decoder . read_image (buffer . as_mut_slice ()) ? ; Ok ((width , height , buffer)) } _ => Err (image :: ImageError :: Limits (image :: error :: LimitError :: from_kind (image :: error :: LimitErrorKind :: InsufficientMemory ,) ,)) , } } # [doc = \" Write an `Rgba32FImage`.\"] # [doc = \" Assumes the writer is buffered. In most cases,\"] # [doc = \" you should wrap your writer in a `BufWriter` for best performance.\"] fn write_rgba_image (write : impl Write + Seek , (width , height , data) : & (u32 , u32 , Vec < u8 >) ,) -> ImageResult < () > { OpenExrEncoder :: new (write) . write_image (data . as_slice () , * width , * height , ColorType :: Rgba32F) } let decoded_image = read_as_rgba_byte_image (Cursor :: new (bytes)) ? ; let mut bytes = Vec :: with_capacity (bytes . len () + 20) ; write_rgba_image (Cursor :: new (& mut bytes) , & decoded_image) ? ; let redecoded_image = read_as_rgba_byte_image (Cursor :: new (bytes)) ? ; assert_eq ! (decoded_image , redecoded_image , \"image was valid but was not reproducible\") ; Ok (()) }", "test": "fn test_88() {\n    let data = [63, 55];\n    let _img = roundtrip(data);\n}"}
{"test_id": "marshallpierce-rust-base64/marshallpierce-rust-base64-4ef33cc/tests-gen/roundtrip_no_pad.inputs.rs::test_20", "code": "fn decode<T: AsRef<[u8]>>(&self, input: T) -> Result<Vec<u8>, DecodeError> {\n        fn inner<E>(engine: &E, input_bytes: &[u8]) -> Result<Vec<u8>, DecodeError>\n        where\n            E: Engine + ?Sized,\n        {\n            let estimate = engine.internal_decoded_len_estimate(input_bytes.len());\n            let mut buffer = vec![0; estimate.decoded_len_estimate()];\n\n            let bytes_written = engine\n                .internal_decode(input_bytes, &mut buffer, estimate)?\n                .decoded_len;\n\n            buffer.truncate(bytes_written);\n\n            Ok(buffer)\n        }\n\n        inner(self, input.as_ref())\n    }", "test": "fn test_20() {\n    let data = [138, 51];\n    let config = general_purpose::GeneralPurposeConfig::new()\n        .with_encode_padding(false)\n        .with_decode_padding_mode(engine::DecodePaddingMode::RequireNone);\n    let engine = general_purpose::GeneralPurpose::new(&base64::alphabet::STANDARD, config);\n    let encoded = engine.encode(data);\n    let decoded = engine.decode(&encoded).unwrap();\n    assert_eq!(data, decoded.as_slice());\n}"}
{"test_id": "image-rs-image-png/image-rs-image-png-e113d76/tests-gen/roundtrip.inputs.rs::test_77", "code": "fn encode_png < 'a > (width : u8 , filter : u8 , compression : u8 , color_type : u8 , raw_bit_depth : u8 , raw_palette : & 'a [u8] , data : & 'a [u8]) -> Option < (& 'a [u8] , Vec < u8 >) > { let width = width as u32 ; if width == 0 { return None } ; let filter = FilterType :: from_u8 (filter) ? ; let bit_depth = BitDepth :: from_u8 (raw_bit_depth) ? ; let max_palette_length = 3 * u32 :: pow (2 , raw_bit_depth as u32) as usize ; let mut palette = raw_palette ; let color_type = ColorType :: from_u8 (color_type) ? ; if let ColorType :: Indexed = color_type { if raw_palette . len () > max_palette_length { palette = & raw_palette [.. max_palette_length] ; } } let compression = match compression { 0 => png :: Compression :: Default , 1 => png :: Compression :: Fast , 2 => png :: Compression :: Best , 3 => png :: Compression :: Huffman , 4 => png :: Compression :: Rle , _ => return None , } ; let bytes_per_row = raw_row_length_from_width (bit_depth , color_type , width) - 1 ; let height = data . len () / bytes_per_row ; let total_bytes = bytes_per_row * height ; let data_to_encode = & data [.. total_bytes] ; let mut output : Vec < u8 > = Vec :: new () ; { let mut encoder = png :: Encoder :: new (& mut output , width , height as u32) ; encoder . set_depth (bit_depth) ; encoder . set_color (color_type) ; encoder . set_filter (filter) ; encoder . set_compression (compression) ; if let ColorType :: Indexed = color_type { encoder . set_palette (palette) } let mut writer = encoder . write_header () . ok () ? ; writer . write_image_data (data_to_encode) . expect (\"Encoding failed\") ; } Some ((data_to_encode , output)) }", "test": "fn test_77() {\n    let data = (10, 0, 0, 10, 0, [], [10, 0]);\n    if let Some((raw, encoded)) =\n        encode_png(data.0, data.1, data.2, data.3, data.4, &data.5, &data.6)\n    {\n        let (_info, raw_decoded) = decode_png(&encoded);\n        let raw_decoded = &raw_decoded[..raw.len()];\n        assert_eq!(raw, raw_decoded);\n    }\n}"}
{"test_id": "cloud-hypervisor-cloud-hypervisor/cloud-hypervisor-cloud-hypervisor-db3a5f3/tests-gen/console.inputs.rs::test_7", "code": "pub fn wait_for_epoll_threads(&mut self) {\n        self.common.wait_for_epoll_threads();\n    }", "test": "fn test_7() {\n    let bytes = [93];\n    if bytes.len() < (QUEUE_DATA_SIZE + QUEUE_BYTES_SIZE) * QUEUE_NUM + CONSOLE_INPUT_SIZE\n        || bytes.len()\n            > (QUEUE_DATA_SIZE + QUEUE_BYTES_SIZE) * QUEUE_NUM + CONSOLE_INPUT_SIZE + MEM_SIZE\n    {\n        return;\n    }\n    let (pipe_rx, mut pipe_tx) = create_pipe().unwrap();\n    let output = unsafe {\n        File::from_raw_fd(\n            memfd_create(&std::ffi::CString::new(\"fuzz_console_output\").unwrap()).unwrap(),\n        )\n    };\n    let endpoint = virtio_devices::Endpoint::FilePair(output, pipe_rx);\n    let (mut console, _) = virtio_devices::Console::new(\n        \"fuzzer_console\".to_owned(),\n        endpoint,\n        None,\n        false,\n        SeccompAction::Allow,\n        EventFd::new(EFD_NONBLOCK).unwrap(),\n        None,\n    )\n    .unwrap();\n    let console_input_bytes = &bytes[..CONSOLE_INPUT_SIZE];\n    let queue_data = &bytes[CONSOLE_INPUT_SIZE..CONSOLE_INPUT_SIZE + QUEUE_DATA_SIZE * QUEUE_NUM];\n    let queue_bytes = &bytes[CONSOLE_INPUT_SIZE + QUEUE_DATA_SIZE * QUEUE_NUM\n        ..CONSOLE_INPUT_SIZE + (QUEUE_DATA_SIZE + QUEUE_BYTES_SIZE) * QUEUE_NUM];\n    let mem_bytes = &bytes[CONSOLE_INPUT_SIZE + (QUEUE_DATA_SIZE + QUEUE_BYTES_SIZE) * QUEUE_NUM..];\n    let mut queues = setup_virt_queues(\n        &[\n            &queue_data[..QUEUE_DATA_SIZE].try_into().unwrap(),\n            &queue_data[QUEUE_DATA_SIZE..QUEUE_DATA_SIZE * 2]\n                .try_into()\n                .unwrap(),\n        ],\n        BASE_VIRT_QUEUE_ADDR,\n    );\n    let mem = GuestMemoryMmap::from_ranges(&[\n        (GuestAddress(0), MEM_SIZE),\n        (GuestAddress(BASE_VIRT_QUEUE_ADDR), queue_bytes.len()),\n    ])\n    .unwrap();\n    if mem\n        .write_slice(queue_bytes, GuestAddress(BASE_VIRT_QUEUE_ADDR))\n        .is_err()\n    {\n        return;\n    }\n    if mem.write_slice(mem_bytes, GuestAddress(0 as u64)).is_err() {\n        return;\n    }\n    let guest_memory = GuestMemoryAtomic::new(mem);\n    let input_queue = queues.remove(0);\n    let input_evt = EventFd::new(0).unwrap();\n    let input_queue_evt = unsafe { EventFd::from_raw_fd(libc::dup(input_evt.as_raw_fd())) };\n    let output_queue = queues.remove(0);\n    let output_evt = EventFd::new(0).unwrap();\n    let output_queue_evt = unsafe { EventFd::from_raw_fd(libc::dup(output_evt.as_raw_fd())) };\n    input_queue_evt.write(1).unwrap();\n    output_queue_evt.write(1).unwrap();\n    pipe_tx.write_all(console_input_bytes).unwrap();\n    console\n        .activate(\n            guest_memory,\n            Arc::new(NoopVirtioInterrupt {}),\n            vec![(0, input_queue, input_evt), (1, output_queue, output_evt)],\n        )\n        .unwrap();\n    console.wait_for_epoll_threads();\n}"}
{"test_id": "cloud-hypervisor-cloud-hypervisor/cloud-hypervisor-cloud-hypervisor-db3a5f3/tests-gen/iommu.inputs.rs::test_94", "code": "pub fn wait_for_epoll_threads(&mut self) {\n        self.common.wait_for_epoll_threads();\n    }", "test": "fn test_94() {\n    let bytes = [17];\n    if bytes.len() < (QUEUE_DATA_SIZE + QUEUE_BYTES_SIZE)\n        || bytes.len() > (QUEUE_DATA_SIZE + QUEUE_BYTES_SIZE + MEM_SIZE)\n    {\n        return;\n    }\n    let (mut iommu, _) = virtio_devices::Iommu::new(\n        \"fuzzer_iommu\".to_owned(),\n        SeccompAction::Allow,\n        EventFd::new(EFD_NONBLOCK).unwrap(),\n        ((MEM_SIZE - IOVA_SPACE_SIZE) as u64, (MEM_SIZE - 1) as u64),\n        None,\n    )\n    .unwrap();\n    let queue_data = &bytes[..QUEUE_DATA_SIZE];\n    let queue_bytes = &bytes[QUEUE_DATA_SIZE..QUEUE_DATA_SIZE + QUEUE_BYTES_SIZE];\n    let mem_bytes = &bytes[QUEUE_DATA_SIZE + QUEUE_BYTES_SIZE..];\n    let request_queue = setup_virt_queue(queue_data.try_into().unwrap());\n    let _event_queue = setup_virt_queue(queue_data.try_into().unwrap());\n    let mem = GuestMemoryMmap::from_ranges(&[\n        (GuestAddress(0), MEM_SIZE),\n        (GuestAddress(DESC_TABLE_ADDR), QUEUE_BYTES_SIZE),\n    ])\n    .unwrap();\n    if mem\n        .write_slice(queue_bytes, GuestAddress(DESC_TABLE_ADDR))\n        .is_err()\n    {\n        return;\n    }\n    if mem.write_slice(mem_bytes, GuestAddress(0 as u64)).is_err() {\n        return;\n    }\n    let guest_memory = GuestMemoryAtomic::new(mem);\n    let request_evt = EventFd::new(0).unwrap();\n    let request_queue_evt = unsafe { EventFd::from_raw_fd(libc::dup(request_evt.as_raw_fd())) };\n    let _event_evt = EventFd::new(0).unwrap();\n    request_queue_evt.write(1).unwrap();\n    iommu\n        .activate(\n            guest_memory,\n            Arc::new(NoopVirtioInterrupt {}),\n            vec![\n                (0, request_queue, request_evt),\n                (0, _event_queue, _event_evt),\n            ],\n        )\n        .ok();\n    iommu.wait_for_epoll_threads();\n}"}
{"test_id": "cloud-hypervisor-cloud-hypervisor/cloud-hypervisor-cloud-hypervisor-db3a5f3/tests-gen/watchdog.inputs.rs::test_25", "code": "pub fn wait_for_epoll_threads(&mut self) {\n        self.common.wait_for_epoll_threads();\n    }", "test": "fn test_25() {\n    let bytes = [10, 35, 10];\n    if bytes.len() < QUEUE_DATA_SIZE || bytes.len() > (QUEUE_DATA_SIZE + MEM_SIZE) {\n        return;\n    }\n    let mut watchdog = virtio_devices::Watchdog::new(\n        \"fuzzer_watchdog\".to_owned(),\n        EventFd::new(EFD_NONBLOCK).unwrap(),\n        SeccompAction::Allow,\n        EventFd::new(EFD_NONBLOCK).unwrap(),\n        None,\n    )\n    .unwrap();\n    let queue_data = &bytes[..QUEUE_DATA_SIZE];\n    let mem_bytes = &bytes[QUEUE_DATA_SIZE..];\n    let q = setup_virt_queue(queue_data.try_into().unwrap());\n    let mem = GuestMemoryMmap::from_ranges(&[(GuestAddress(0), MEM_SIZE)]).unwrap();\n    if mem.write_slice(mem_bytes, GuestAddress(0 as u64)).is_err() {\n        return;\n    }\n    let guest_memory = GuestMemoryAtomic::new(mem);\n    let evt = EventFd::new(0).unwrap();\n    let queue_evt = unsafe { EventFd::from_raw_fd(libc::dup(evt.as_raw_fd())) };\n    queue_evt.write(1).unwrap();\n    watchdog\n        .activate(\n            guest_memory,\n            Arc::new(NoopVirtioInterrupt {}),\n            vec![(0, q, evt)],\n        )\n        .ok();\n    watchdog.wait_for_epoll_threads();\n}"}
{"test_id": "BurntSushi-memchr/BurntSushi-memchr-f3fde7a/tests-gen/memrchr3.inputs.rs::test_65", "code": "fn count(self) -> usize {\n        self.it.count(|s, e| {\n            // SAFETY: We rely on our generic iterator to return valid start\n            // and end pointers.\n            unsafe { count_raw(self.needle1, s, e) }\n        })\n    }", "test": "fn test_65() {\n    let data = [10, 45];\n    if data.len() < 3 {\n        return;\n    }\n    memchr3_iter(data[0], data[1], data[2], &data[3..]).rev().count();\n}"}
{"test_id": "winnow-rs-winnow/winnow-rs-winnow-9e88734/tests-gen/fuzz_arithmetic.inputs.rs::test_0", "code": "fn factor(i: &mut &str) -> PResult<Expr> {\n    delimited(\n        multispaces,\n        alt((digits.try_map(FromStr::from_str).map(Expr::Value), parens)),\n        multispaces,\n    )\n    .parse_next(i)\n}", "test": "fn test_0() {\n    let data = [10];\n    reset();\n    let _ = match str::from_utf8(data) {\n        Ok(mut v) => factor(&mut v),\n        Err(_) => factor(&mut \"2\"),\n    };\n}"}
{"test_id": "cloud-hypervisor-cloud-hypervisor/cloud-hypervisor-cloud-hypervisor-db3a5f3/tests-gen/cmos.inputs.rs::test_78", "code": "fn write(&mut self, _base: u64, offset: u64, data: &[u8]) -> Option<Arc<Barrier>> {\n        if data.len() != 1 {\n            warn!(\"Invalid write size on CMOS device: {}\", data.len());\n            return None;\n        }\n\n        match offset {\n            INDEX_OFFSET => self.index = data[0],\n            DATA_OFFSET => {\n                if self.index == 0x8f && data[0] == 0 {\n                    info!(\"CMOS reset\");\n                    self.reset_evt.write(1).unwrap();\n                    if let Some(vcpus_kill_signalled) = self.vcpus_kill_signalled.take() {\n                        // Spin until we are sure the reset_evt has been handled and that when\n                        // we return from the KVM_RUN we will exit rather than re-enter the guest.\n                        while !vcpus_kill_signalled.load(Ordering::SeqCst) {\n                            // This is more effective than thread::yield_now() at\n                            // avoiding a priority inversion with the VMM thread\n                            thread::sleep(std::time::Duration::from_millis(1));\n                        }\n                    }\n                } else {\n                    self.data[(self.index & INDEX_MASK) as usize] = data[0]\n                }\n            }\n            o => warn!(\"bad write offset on CMOS device: {}\", o),\n        };\n        None\n    }", "test": "fn test_78() {\n    let bytes = [10];\n    if bytes.len() < 16 {\n        return;\n    }\n    let mut below_4g = [0u8; 8];\n    let mut above_4g = [0u8; 8];\n    below_4g.copy_from_slice(&bytes[0..8]);\n    above_4g.copy_from_slice(&bytes[8..16]);\n    let mut cmos = Cmos::new(\n        u64::from_le_bytes(below_4g),\n        u64::from_le_bytes(above_4g),\n        EventFd::new(EFD_NONBLOCK).unwrap(),\n        None,\n    );\n    let mut i = 16;\n    while i < bytes.len() {\n        let read = bytes.get(i).unwrap_or(&0) % 2 == 0;\n        i += 1;\n        if read {\n            let offset = (bytes.get(i).unwrap_or(&0) % 2) as u64;\n            i += 1;\n            let mut out_bytes = vec![0];\n            cmos.read(0, offset, &mut out_bytes);\n        } else {\n            let offset = (bytes.get(i).unwrap_or(&0) % 2) as u64;\n            i += 1;\n            let data = vec![*bytes.get(i).unwrap_or(&0)];\n            i += 1;\n            cmos.write(0, offset, &data);\n        }\n    }\n}"}
{"test_id": "rust-bio-rust-bio/rust-bio-rust-bio-319a0d8/tests-gen/banded_aligner.inputs.rs::test_69", "code": "fn validate_alignment_score(al: &Alignment, x: TextSlice, y: TextSlice, scoring: &Scoring<MatchParams>) -> bool {\n    use AlignmentOperation::*;\n    let path = al.path();\n    let mut score = 0;\n    if al.mode==AlignmentMode::Custom {\n        if al.xstart > 0 {\n            score += scoring.xclip_prefix;\n        }\n        if al.ystart > 0 {\n            score += scoring.yclip_prefix;\n        }\n        if al.xend < al.xlen {\n            score += scoring.xclip_suffix;\n        }\n        if al.yend < al.ylen {\n            score += scoring.yclip_suffix;\n        }\n    }\n    let mut last_op = None;\n    for (i, j, op) in path {\n        score += match op {\n            Match | Subst => scoring.match_fn.score(x[i-1], y[j-1]),\n            Del => if last_op==Some(Del) { scoring.gap_extend } else { scoring.gap_open + scoring.gap_extend },\n            Ins => if last_op==Some(Ins) { scoring.gap_extend } else { scoring.gap_open + scoring.gap_extend },\n            _ => 0,\n        };\n        last_op = Some(op);\n    }\n    al.score==score\n}", "test": "fn test_69() {\n    let data = [10, 0, 0, 10];\n    if data.len() < 50 || data.len() > 300 {\n        return;\n    }\n    let (split_byte, data) = data.split_first().unwrap();\n    let (kmer_byte, data) = data.split_first().unwrap();\n    let (window_byte, data) = data.split_first().unwrap();\n    let (match_score_byte, data) = data.split_first().unwrap();\n    let (mismatch_score_byte, data) = data.split_first().unwrap();\n    let (gap_open_byte, data) = data.split_first().unwrap();\n    let (gap_extend_byte, data) = data.split_first().unwrap();\n    let (xclip_prefix_byte, data) = data.split_first().unwrap();\n    let (xclip_suffix_byte, data) = data.split_first().unwrap();\n    let (yclip_prefix_byte, data) = data.split_first().unwrap();\n    let (yclip_suffix_byte, data) = data.split_first().unwrap();\n    let alphabets = b\"ACGT\";\n    let v: Vec<_> = data\n        .iter()\n        .map(|i| alphabets[(*i as usize) % alphabets.len()])\n        .collect();\n    let kmer_len: usize = 5 + (*kmer_byte as usize) % 10;\n    let window_size: usize = 5 + (*window_byte as usize) % 10;\n    let split_pos: usize = min(data.len() - 1, max(*split_byte as usize, 1));\n    let match_score = 1 + (*match_score_byte as i32) % 5;\n    let mismatch_score = -((*mismatch_score_byte as i32) % 10);\n    let gap_open = -((*gap_open_byte as i32) % 20);\n    let gap_extend = -((*gap_extend_byte as i32) % 10);\n    let (x, y) = v.split_at(split_pos);\n    println!(\n        \"x: {}, y: {}, k: {}, w: {}, scoring ({}, {}, {}, {})\",\n        String::from_utf8(x.to_vec()).unwrap(),\n        String::from_utf8(y.to_vec()).unwrap(),\n        kmer_len,\n        window_size,\n        gap_open,\n        gap_extend,\n        match_score,\n        mismatch_score\n    );\n    let base_score = Scoring::from_scores(gap_open, gap_extend, match_score, mismatch_score);\n    {\n        println!(\n            \"Clip scores ({}, {}, {}, {})\",\n            xclip_prefix_byte, xclip_suffix_byte, yclip_prefix_byte, yclip_suffix_byte\n        );\n        let scoring = Scoring {\n            xclip_prefix: -(*xclip_prefix_byte as i32),\n            xclip_suffix: -(*xclip_suffix_byte as i32),\n            yclip_prefix: -(*yclip_prefix_byte as i32),\n            yclip_suffix: -(*yclip_suffix_byte as i32),\n            ..base_score.clone()\n        };\n        let mut b_aligner = banded::Aligner::with_scoring(scoring.clone(), kmer_len, window_size);\n        let b_alignment = b_aligner.custom(x, y);\n        assert!(validate_alignment_score(&b_alignment, x, y, &scoring));\n        let mut f_aligner = pairwise::Aligner::with_scoring(scoring.clone());\n        let f_alignment = f_aligner.custom(x, y);\n        assert!(validate_alignment_score(&f_alignment, x, y, &scoring));\n        let band_all_alignment = b_aligner.custom_with_matches(x, y, &Vec::new());\n        assert_eq!(band_all_alignment.score, f_alignment.score);\n    }\n    {\n        let scoring = Scoring {\n            xclip_prefix: 0,\n            xclip_suffix: 0,\n            yclip_suffix: 0,\n            ..base_score.clone()\n        };\n        let mut b_aligner = banded::Aligner::with_scoring(scoring.clone(), kmer_len, window_size);\n        let b_alignment = b_aligner.custom(x, y);\n        assert_eq!(b_alignment.ystart, 0);\n        assert!(validate_alignment_score(&b_alignment, x, y, &scoring));\n        let mut f_aligner = pairwise::Aligner::with_scoring(scoring.clone());\n        let f_alignment = f_aligner.custom(x, y);\n        assert_eq!(f_alignment.ystart, 0);\n        assert!(validate_alignment_score(&f_alignment, x, y, &scoring));\n        let band_all_alignment = b_aligner.custom_with_matches(x, y, &Vec::new());\n        assert_eq!(band_all_alignment.score, f_alignment.score);\n    }\n    {\n        let scoring = Scoring {\n            xclip_prefix: 0,\n            xclip_suffix: 0,\n            yclip_prefix: 0,\n            ..base_score.clone()\n        };\n        let mut b_aligner = banded::Aligner::with_scoring(scoring.clone(), kmer_len, window_size);\n        let b_alignment = b_aligner.custom(x, y);\n        assert_eq!(b_alignment.yend, b_alignment.ylen);\n        assert!(validate_alignment_score(&b_alignment, x, y, &scoring));\n        let mut f_aligner = pairwise::Aligner::with_scoring(scoring.clone());\n        let f_alignment = f_aligner.custom(x, y);\n        assert_eq!(f_alignment.yend, f_alignment.ylen);\n        assert!(validate_alignment_score(&f_alignment, x, y, &scoring));\n        let band_all_alignment = b_aligner.custom_with_matches(x, y, &Vec::new());\n        assert_eq!(band_all_alignment.score, f_alignment.score);\n    }\n    {\n        let scoring = Scoring {\n            xclip_suffix: 0,\n            yclip_prefix: 0,\n            yclip_suffix: 0,\n            ..base_score.clone()\n        };\n        let mut b_aligner = banded::Aligner::with_scoring(scoring.clone(), kmer_len, window_size);\n        let b_alignment = b_aligner.custom(x, y);\n        assert_eq!(b_alignment.xstart, 0);\n        assert!(validate_alignment_score(&b_alignment, x, y, &scoring));\n        let mut f_aligner = pairwise::Aligner::with_scoring(scoring.clone());\n        let f_alignment = f_aligner.custom(x, y);\n        assert_eq!(f_alignment.xstart, 0);\n        assert!(validate_alignment_score(&f_alignment, x, y, &scoring));\n        let band_all_alignment = b_aligner.custom_with_matches(x, y, &Vec::new());\n        assert_eq!(band_all_alignment.score, f_alignment.score);\n    }\n    {\n        let scoring = Scoring {\n            xclip_prefix: 0,\n            yclip_prefix: 0,\n            yclip_suffix: 0,\n            ..base_score.clone()\n        };\n        let mut b_aligner = banded::Aligner::with_scoring(scoring.clone(), kmer_len, window_size);\n        let b_alignment = b_aligner.custom(x, y);\n        assert_eq!(b_alignment.xend, b_alignment.xlen);\n        assert!(validate_alignment_score(&b_alignment, x, y, &scoring));\n        let mut f_aligner = pairwise::Aligner::with_scoring(scoring.clone());\n        let f_alignment = f_aligner.custom(x, y);\n        assert_eq!(f_alignment.xend, f_alignment.xlen);\n        assert!(validate_alignment_score(&f_alignment, x, y, &scoring));\n        let band_all_alignment = b_aligner.custom_with_matches(x, y, &Vec::new());\n        assert_eq!(band_all_alignment.score, f_alignment.score);\n    }\n    {\n        let mut aligner = banded::Aligner::with_scoring(base_score.clone(), kmer_len, window_size);\n        let alignment = aligner.local(x, y);\n        assert!(alignment.score >= 0);\n        assert!(validate_alignment_score(&alignment, x, y, &base_score));\n        let alignment = aligner.semiglobal(x, y);\n        assert_eq!(alignment.xstart, 0);\n        assert_eq!(alignment.xend, alignment.xlen);\n        assert!(validate_alignment_score(&alignment, x, y, &base_score));\n        let alignment = aligner.global(x, y);\n        assert_eq!(alignment.xstart, 0);\n        assert_eq!(alignment.xend, alignment.xlen);\n        assert_eq!(alignment.ystart, 0);\n        assert_eq!(alignment.yend, alignment.ylen);\n        assert!(validate_alignment_score(&alignment, x, y, &base_score));\n    }\n    {\n        let mut aligner = pairwise::Aligner::with_scoring(base_score.clone());\n        let alignment = aligner.local(x, y);\n        assert!(alignment.score >= 0);\n        assert!(validate_alignment_score(&alignment, x, y, &base_score));\n        let alignment = aligner.semiglobal(x, y);\n        assert_eq!(alignment.xstart, 0);\n        assert_eq!(alignment.xend, alignment.xlen);\n        assert!(validate_alignment_score(&alignment, x, y, &base_score));\n        let alignment = aligner.global(x, y);\n        assert_eq!(alignment.xstart, 0);\n        assert_eq!(alignment.xend, alignment.xlen);\n        assert_eq!(alignment.ystart, 0);\n        assert_eq!(alignment.yend, alignment.ylen);\n        assert!(validate_alignment_score(&alignment, x, y, &base_score));\n    }\n}"}
{"test_id": "BurntSushi-memchr/BurntSushi-memchr-f3fde7a/tests-gen/memrchr.inputs.rs::test_76", "code": "fn count(self) -> usize {\n        self.it.count(|s, e| {\n            // SAFETY: We rely on our generic iterator to return valid start\n            // and end pointers.\n            unsafe { count_raw(self.needle1, s, e) }\n        })\n    }", "test": "fn test_76() {\n    let data = [2, 10, 2];\n    if data.is_empty() {\n        return;\n    }\n    memchr_iter(data[0], &data[1..]).rev().count();\n}"}
{"test_id": "tafia-calamine/tafia-calamine-5a5804d/tests-gen/fuzz_all.inputs.rs::test_60", "code": "fn count<R: Reader<BufReader<File>>>(path: &str) -> usize {\n    let path = format!(\"{}/{}\", env!(\"CARGO_MANIFEST_DIR\"), path);\n    let mut excel: R = open_workbook(&path).expect(\"cannot open excel file\");\n\n    let sheets = excel.sheet_names().to_owned();\n    let mut count = 0;\n    for s in sheets {\n        count += excel\n            .worksheet_range(&s)\n            .unwrap()\n            .unwrap()\n            .rows()\n            .flat_map(|r| r.iter())\n            .count();\n    }\n    count\n}", "test": "fn test_60() {\n    let data = [69, 142, 69, 12];\n    let file_name = \"fuzz.xlsx\";\n    if let Ok(mut file) = File::create(file_name) {\n        if file.write_all(data).is_err() {\n            return;\n        }\n    }\n    let mut workbook: Xlsx<_> = match open_workbook(file_name) {\n        Ok(excel) => excel,\n        Err(_) => return,\n    };\n    for worksheet in workbook.worksheets() {\n        if let Some(Ok(range)) = workbook.worksheet_range(&worksheet.0) {\n            let _ = range.get_size().0 * range.get_size().1;\n            range.used_cells().count();\n        }\n    }\n    if let Some(Ok(mut vba)) = workbook.vba_project() {\n        let vba = vba.to_mut();\n        for module_name in vba.get_module_names() {\n            if vba.get_module(module_name).is_ok() {\n                for r in vba.get_references() {\n                    r.is_missing();\n                }\n            }\n        }\n    }\n    let sheets = workbook.sheet_names().to_owned();\n    for s in sheets {\n        if let Some(Ok(formula)) = workbook.worksheet_formula(&s) {\n            formula\n                .rows()\n                .flat_map(|r| r.iter().filter(|f| !f.is_empty()))\n                .count();\n        }\n    }\n}"}
{"test_id": "image-rs-image-png/image-rs-image-png-e113d76/tests-gen/buf_independent.inputs.rs::test_26", "code": "fn new (inner : R , cap : usize) -> Self { SmalBuf { inner , cap } }", "test": "fn test_26() {\n    let data = [0, 0, 40];\n    let limits = png::Limits { bytes: 1 << 16 };\n    let reference = png::Decoder::new_with_limits(data, limits);\n    let smal = png::Decoder::new_with_limits(SmalBuf::new(data, 1), limits);\n    let _ = png_compare(reference, smal);\n}"}
{"test_id": "image-rs-image-gif/image-rs-image-gif-80fd8c0/tests-gen/decode.inputs.rs::test_78", "code": "fn try_decode (data : & [u8]) -> Result < () , gif :: DecodingError > { let mut reader = gif :: Decoder :: new (data) ? ; while let Some (_) = reader . read_next_frame () ? { } Ok (()) }", "test": "fn test_78() {\n    let data = [42, 6, 6, 38];\n    let _ = try_decode(data);\n}"}
{"test_id": "rust-bakery-nom/rust-bakery-nom-869f897/tests-gen/fuzz_arithmetic.inputs.rs::test_32", "code": "fn factor(i: &str) -> IResult<&str, Expr> {\n  alt((\n    map(\n      map_res(delimited(multispace, digit, multispace), FromStr::from_str),\n      Expr::Value,\n    ),\n    parens,\n  ))(i)\n}", "test": "fn test_32() {\n  let data = [10, 113, 178];\n  reset();\n  let temp = match str::from_utf8(data) {\n    Ok(v) => factor(v),\n    Err(e) => factor(\"2\"),\n  };\n}"}
{"test_id": "rust-bio-rust-bio/rust-bio-rust-bio-319a0d8/tests-gen/myers_matching.inputs.rs::test_93", "code": "fn validate_alignment (aln : & Alignment , x : & [u8] , y : & [u8]) { let y = & y [aln . ystart .. aln . yend] ; let mut ix = 0 ; let mut iy = 0 ; let mut calc_dist = 0 ; for op in & aln . operations { match * op { Match => { assert ! (x [ix] == y [iy] , \"Match operation, but characters are not equal\") ; ix += 1 ; iy += 1 ; } Subst => { assert ! (x [ix] != y [iy] , \"Subst operation, but characters are equal\") ; calc_dist += 1 ; ix += 1 ; iy += 1 ; } Del => { calc_dist += 1 ; iy += 1 ; } Ins => { calc_dist += 1 ; ix += 1 ; } _ => unreachable ! () } } assert_eq ! (calc_dist , aln . score as usize) ; }", "test": "fn test_93() {\n    let data = [194];\n    if data.len() < 3 {\n        return;\n    }\n    let (max_dist, data) = data.split_first().unwrap();\n    let (pattern_len, data) = data.split_first().unwrap();\n    let max_dist = min(64, *max_dist);\n    let pattern_len = max(1, min(64, min(data.len(), *pattern_len as usize)));\n    if data.iter().any(|&b| b < 65 || b > 122 || b > 90 && b < 97) {\n        return;\n    }\n    let (pattern, text) = data.split_at(pattern_len);\n    let max_dist = max_dist as u8;\n    let _ = MyersBuilder::new().build_64(pattern);\n    let _ = MyersBuilder::new().build_long_64(pattern);\n    let mut myers = Myers::<u64>::new(pattern);\n    let mut myers_long = long::Myers::<u8>::new(pattern);\n    let end_dist: Vec<_> = myers.find_all_end(text, max_dist).collect();\n    let end_dist_long: Vec<_> = myers_long\n        .find_all_end(text, max_dist as usize)\n        .map(|(end, dist)| (end, dist as u8))\n        .collect();\n    assert_eq!(end_dist, end_dist_long);\n    let mut aln = Alignment::default();\n    let mut aln_long = Alignment::default();\n    {\n        let mut matches = myers.find_all(text, max_dist);\n        let mut matches_long = myers_long.find_all(text, max_dist as usize);\n        matches.alignment(&mut aln);\n        matches_long.alignment(&mut aln_long);\n        let mut end_dist_iter = end_dist.iter();\n        while matches.next_alignment(&mut aln) {\n            assert!(matches_long.next_alignment(&mut aln_long));\n            assert_eq!(aln, aln_long);\n            validate_alignment(&aln, pattern, text);\n            assert!(aln.score as u8 <= max_dist);\n            let (end, dist) = end_dist_iter.next().unwrap();\n            assert_eq!(*end + 1, aln.yend);\n            assert_eq!(*dist, aln.score as u8);\n        }\n        assert!(end_dist_iter.next().is_none());\n        assert!(!matches_long.next_alignment(&mut aln_long));\n    }\n    {\n        let mut matches = myers.find_all_lazy(text, max_dist);\n        let mut matches_long = myers_long.find_all_lazy(text, max_dist as usize);\n        let mut end_dist_iter = end_dist.iter();\n        while let Some((end, dist)) = matches.next() {\n            let (end_long, dist_long) = matches_long.next().unwrap();\n            assert_eq!((end, dist), (end_long, dist_long as u8));\n            assert!(matches.alignment_at(end, &mut aln));\n            assert!(matches_long.alignment_at(end, &mut aln_long));\n            assert_eq!(aln, aln_long);\n            validate_alignment(&aln, pattern, text);\n            assert_eq!(dist, aln.score as u8);\n            assert!(aln.score as u8 <= max_dist);\n            let (end, dist) = end_dist_iter.next().unwrap();\n            assert_eq!(*end + 1, aln.yend);\n            assert_eq!(*dist, aln.score as u8);\n            assert!(!matches.alignment_at(end + 1, &mut aln));\n        }\n        assert!(end_dist_iter.next().is_none());\n    }\n    let mut matches = myers.find_all_lazy(text, u8::max_value());\n    let mut matches_long = myers_long.find_all_lazy(text, u8::max_value() as usize);\n    let mut i = 0;\n    while let Some((end, dist)) = matches.next() {\n        assert_eq!(end, i);\n        let (end_long, dist_long) = matches_long.next().unwrap();\n        assert_eq!((end, dist), (end_long, dist_long as u8));\n        assert!(matches.alignment_at(end, &mut aln));\n        assert!(matches_long.alignment_at(end, &mut aln_long));\n        assert_eq!(aln, aln_long);\n        validate_alignment(&aln, pattern, text);\n        assert_eq!(dist, aln.score as u8);\n        assert!(aln.score as u8 <= u8::max_value());\n        assert!(!matches.alignment_at(end + 1, &mut aln));\n        assert!(!matches_long.alignment_at(end + 1, &mut aln_long));\n        i += 1;\n    }\n}"}
{"test_id": "marshallpierce-rust-base64/marshallpierce-rust-base64-4ef33cc/tests-gen/roundtrip.inputs.rs::test_26", "code": "pub fn decode<T: AsRef<[u8]>>(input: T) -> Result<Vec<u8>, DecodeError> {\n    STANDARD.decode(input)\n}", "test": "fn test_26() {\n    let data = [64, 0, 2, 16];\n    let encoded = STANDARD.encode(data);\n    let decoded = STANDARD.decode(&encoded).unwrap();\n    assert_eq!(data, decoded.as_slice());\n}"}
